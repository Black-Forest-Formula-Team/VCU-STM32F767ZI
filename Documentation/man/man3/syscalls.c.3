.TH "C:/Users/BFFT_Konstr_3/Documents/STM_Board_Config/BFFT_VCU_V1/src/syscalls.c" 3 "Fri Dec 13 2019" "BFFT_VCU_V1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/BFFT_Konstr_3/Documents/STM_Board_Config/BFFT_VCU_V1/src/syscalls.c
.SH SYNOPSIS
.br
.PP
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <signal\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <sys/time\&.h>\fP
.br
\fC#include <sys/times\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fB__io_putchar\fP (int ch) \fB__attribute__\fP((weak))"
.br
.ti -1c
.RI "int \fB__io_getchar\fP (void)"
.br
.ti -1c
.RI "void \fBinitialise_monitor_handles\fP ()"
.br
.ti -1c
.RI "int \fB_getpid\fP (void)"
.br
.ti -1c
.RI "int \fB_kill\fP (int pid, int sig)"
.br
.ti -1c
.RI "void \fB_exit\fP (int status)"
.br
.ti -1c
.RI "\fB__attribute__\fP ((weak))"
.br
.ti -1c
.RI "int \fB_close\fP (int file)"
.br
.ti -1c
.RI "int \fB_fstat\fP (int file, struct stat *st)"
.br
.ti -1c
.RI "int \fB_isatty\fP (int file)"
.br
.ti -1c
.RI "int \fB_lseek\fP (int file, int ptr, int dir)"
.br
.ti -1c
.RI "int \fB_open\fP (char *path, int flags,\&.\&.\&.)"
.br
.ti -1c
.RI "int \fB_wait\fP (int *status)"
.br
.ti -1c
.RI "int \fB_unlink\fP (char *name)"
.br
.ti -1c
.RI "int \fB_times\fP (struct tms *buf)"
.br
.ti -1c
.RI "int \fB_stat\fP (char *file, struct stat *st)"
.br
.ti -1c
.RI "int \fB_link\fP (char *old, char *new)"
.br
.ti -1c
.RI "int \fB_fork\fP (void)"
.br
.ti -1c
.RI "int \fB_execve\fP (char *name, char **argv, char **env)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBerrno\fP"
.br
.ti -1c
.RI "char ** \fBenviron\fP = __env"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "__attribute__ ((weak))"

.PP
Definition at line 94 of file syscalls\&.c\&.
.PP
References __io_getchar()\&.
.SS "int __io_getchar (void)"

.PP
Definition at line 64 of file syscalls\&.c\&.
.PP
Referenced by __attribute__()\&.
.SS "int __io_putchar (int ch)"

.SS "int _close (int file)"

.PP
Definition at line 117 of file syscalls\&.c\&.
.SS "int _execve (char * name, char ** argv, char ** env)"

.PP
Definition at line 180 of file syscalls\&.c\&.
.PP
References errno\&.
.SS "void _exit (int status)"

.PP
Definition at line 88 of file syscalls\&.c\&.
.PP
References _kill()\&.
.SS "int _fork (void)"

.PP
Definition at line 174 of file syscalls\&.c\&.
.PP
References errno\&.
.SS "int _fstat (int file, struct stat * st)"

.PP
Definition at line 123 of file syscalls\&.c\&.
.SS "int _getpid (void)"

.PP
Definition at line 77 of file syscalls\&.c\&.
.SS "int _isatty (int file)"

.PP
Definition at line 129 of file syscalls\&.c\&.
.SS "int _kill (int pid, int sig)"

.PP
Definition at line 82 of file syscalls\&.c\&.
.PP
References errno\&.
.PP
Referenced by _exit()\&.
.SS "int _link (char * old, char * new)"

.PP
Definition at line 168 of file syscalls\&.c\&.
.PP
References errno\&.
.SS "int _lseek (int file, int ptr, int dir)"

.PP
Definition at line 134 of file syscalls\&.c\&.
.SS "int _open (char * path, int flags,  \&.\&.\&.)"

.PP
Definition at line 139 of file syscalls\&.c\&.
.SS "int _stat (char * file, struct stat * st)"

.PP
Definition at line 162 of file syscalls\&.c\&.
.SS "int _times (struct tms * buf)"

.PP
Definition at line 157 of file syscalls\&.c\&.
.SS "int _unlink (char * name)"

.PP
Definition at line 151 of file syscalls\&.c\&.
.PP
References errno\&.
.SS "int _wait (int * status)"

.PP
Definition at line 145 of file syscalls\&.c\&.
.PP
References errno\&.
.SS "void initialise_monitor_handles ()"

.PP
Definition at line 73 of file syscalls\&.c\&.
.SH "Variable Documentation"
.PP 
.SS "char** environ = __env"

.PP
Definition at line 69 of file syscalls\&.c\&.
.SS "int errno"
File : \fBsyscalls\&.c\fP
.PP
Author : Auto-generated by STM32CubeIDE
.PP
Abstract : STM32CubeIDE Minimal System calls file 
.PP
.nf
             For more information about which c-functions
          need which of these lowlevel functions
          please consult the Newlib libc-manual

.fi
.PP
.PP
Environment : STM32CubeIDE MCU
.PP
Distribution: The file is distributed as is, without any warranty of any kind\&.
.PP
.SS "(C) COPYRIGHT(c) 2018 STMicroelectronics"
.PP
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
.IP "1." 4
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer\&.
.IP "2." 4
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution\&.
.IP "3." 4
Neither the name of STMicroelectronics nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission\&.
.PP
.PP
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED\&. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE\&. 
.PP
Referenced by _execve(), _fork(), _kill(), _link(), _unlink(), and _wait()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for BFFT_VCU_V1 from the source code\&.
