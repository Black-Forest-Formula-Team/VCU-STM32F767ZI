
BFFT_Architecture_STM32_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c448  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800c648  0800c648  0001c648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000308  0800cba8  0800cba8  0001cba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000340  0800ceb0  0800ceb0  0001ceb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1f0  0800d1f0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800d1f0  0800d1f0  0001d1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d1fc  0800d1fc  0001d1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800d204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  20000080  0800d284  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001448  0800d284  00021448  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f468  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000531a  00000000  00000000  0004f516  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002060  00000000  00000000  00054830  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e48  00000000  00000000  00056890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000111f5  00000000  00000000  000586d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00011165  00000000  00000000  000698cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0007aa32  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a154  00000000  00000000  0007aab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c630 	.word	0x0800c630

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800c630 	.word	0x0800c630

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <__aeabi_uldivmod>:
 8000254:	b953      	cbnz	r3, 800026c <__aeabi_uldivmod+0x18>
 8000256:	b94a      	cbnz	r2, 800026c <__aeabi_uldivmod+0x18>
 8000258:	2900      	cmp	r1, #0
 800025a:	bf08      	it	eq
 800025c:	2800      	cmpeq	r0, #0
 800025e:	bf1c      	itt	ne
 8000260:	f04f 31ff 	movne.w	r1, #4294967295
 8000264:	f04f 30ff 	movne.w	r0, #4294967295
 8000268:	f001 b8f8 	b.w	800145c <__aeabi_idiv0>
 800026c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000280:	b004      	add	sp, #16
 8000282:	4770      	bx	lr

08000284 <__udivmoddi4>:
 8000284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000288:	9e08      	ldr	r6, [sp, #32]
 800028a:	4604      	mov	r4, r0
 800028c:	4688      	mov	r8, r1
 800028e:	2b00      	cmp	r3, #0
 8000290:	d14b      	bne.n	800032a <__udivmoddi4+0xa6>
 8000292:	428a      	cmp	r2, r1
 8000294:	4615      	mov	r5, r2
 8000296:	d967      	bls.n	8000368 <__udivmoddi4+0xe4>
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	b14a      	cbz	r2, 80002b2 <__udivmoddi4+0x2e>
 800029e:	f1c2 0720 	rsb	r7, r2, #32
 80002a2:	fa01 f302 	lsl.w	r3, r1, r2
 80002a6:	fa20 f707 	lsr.w	r7, r0, r7
 80002aa:	4095      	lsls	r5, r2
 80002ac:	ea47 0803 	orr.w	r8, r7, r3
 80002b0:	4094      	lsls	r4, r2
 80002b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002bc:	fa1f fc85 	uxth.w	ip, r5
 80002c0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002c8:	fb07 f10c 	mul.w	r1, r7, ip
 80002cc:	4299      	cmp	r1, r3
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x60>
 80002d0:	18eb      	adds	r3, r5, r3
 80002d2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002d6:	f080 811b 	bcs.w	8000510 <__udivmoddi4+0x28c>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 8118 	bls.w	8000510 <__udivmoddi4+0x28c>
 80002e0:	3f02      	subs	r7, #2
 80002e2:	442b      	add	r3, r5
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002f8:	45a4      	cmp	ip, r4
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x8c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	f080 8107 	bcs.w	8000514 <__udivmoddi4+0x290>
 8000306:	45a4      	cmp	ip, r4
 8000308:	f240 8104 	bls.w	8000514 <__udivmoddi4+0x290>
 800030c:	3802      	subs	r0, #2
 800030e:	442c      	add	r4, r5
 8000310:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000314:	eba4 040c 	sub.w	r4, r4, ip
 8000318:	2700      	movs	r7, #0
 800031a:	b11e      	cbz	r6, 8000324 <__udivmoddi4+0xa0>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c6 4300 	strd	r4, r3, [r6]
 8000324:	4639      	mov	r1, r7
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xbe>
 800032e:	2e00      	cmp	r6, #0
 8000330:	f000 80eb 	beq.w	800050a <__udivmoddi4+0x286>
 8000334:	2700      	movs	r7, #0
 8000336:	e9c6 0100 	strd	r0, r1, [r6]
 800033a:	4638      	mov	r0, r7
 800033c:	4639      	mov	r1, r7
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f783 	clz	r7, r3
 8000346:	2f00      	cmp	r7, #0
 8000348:	d147      	bne.n	80003da <__udivmoddi4+0x156>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd0>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80fa 	bhi.w	8000548 <__udivmoddi4+0x2c4>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	4698      	mov	r8, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa0>
 8000362:	e9c6 4800 	strd	r4, r8, [r6]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa0>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xe8>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 808f 	bne.w	8000494 <__udivmoddi4+0x210>
 8000376:	1b49      	subs	r1, r1, r5
 8000378:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800037c:	fa1f f885 	uxth.w	r8, r5
 8000380:	2701      	movs	r7, #1
 8000382:	fbb1 fcfe 	udiv	ip, r1, lr
 8000386:	0c23      	lsrs	r3, r4, #16
 8000388:	fb0e 111c 	mls	r1, lr, ip, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb08 f10c 	mul.w	r1, r8, ip
 8000394:	4299      	cmp	r1, r3
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x124>
 8000398:	18eb      	adds	r3, r5, r3
 800039a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x122>
 80003a0:	4299      	cmp	r1, r3
 80003a2:	f200 80cd 	bhi.w	8000540 <__udivmoddi4+0x2bc>
 80003a6:	4684      	mov	ip, r0
 80003a8:	1a59      	subs	r1, r3, r1
 80003aa:	b2a3      	uxth	r3, r4
 80003ac:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003b8:	fb08 f800 	mul.w	r8, r8, r0
 80003bc:	45a0      	cmp	r8, r4
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x14c>
 80003c0:	192c      	adds	r4, r5, r4
 80003c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x14a>
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	f200 80b6 	bhi.w	800053a <__udivmoddi4+0x2b6>
 80003ce:	4618      	mov	r0, r3
 80003d0:	eba4 0408 	sub.w	r4, r4, r8
 80003d4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d8:	e79f      	b.n	800031a <__udivmoddi4+0x96>
 80003da:	f1c7 0c20 	rsb	ip, r7, #32
 80003de:	40bb      	lsls	r3, r7
 80003e0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003e4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003e8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ec:	fa20 f50c 	lsr.w	r5, r0, ip
 80003f0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003f4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003f8:	4325      	orrs	r5, r4
 80003fa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003fe:	0c2c      	lsrs	r4, r5, #16
 8000400:	fb08 3319 	mls	r3, r8, r9, r3
 8000404:	fa1f fa8e 	uxth.w	sl, lr
 8000408:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800040c:	fb09 f40a 	mul.w	r4, r9, sl
 8000410:	429c      	cmp	r4, r3
 8000412:	fa02 f207 	lsl.w	r2, r2, r7
 8000416:	fa00 f107 	lsl.w	r1, r0, r7
 800041a:	d90b      	bls.n	8000434 <__udivmoddi4+0x1b0>
 800041c:	eb1e 0303 	adds.w	r3, lr, r3
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	f080 8087 	bcs.w	8000536 <__udivmoddi4+0x2b2>
 8000428:	429c      	cmp	r4, r3
 800042a:	f240 8084 	bls.w	8000536 <__udivmoddi4+0x2b2>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4473      	add	r3, lr
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	b2ad      	uxth	r5, r5
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000444:	fb00 fa0a 	mul.w	sl, r0, sl
 8000448:	45a2      	cmp	sl, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x1da>
 800044c:	eb1e 0404 	adds.w	r4, lr, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	d26b      	bcs.n	800052e <__udivmoddi4+0x2aa>
 8000456:	45a2      	cmp	sl, r4
 8000458:	d969      	bls.n	800052e <__udivmoddi4+0x2aa>
 800045a:	3802      	subs	r0, #2
 800045c:	4474      	add	r4, lr
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	eba4 040a 	sub.w	r4, r4, sl
 800046a:	454c      	cmp	r4, r9
 800046c:	46c2      	mov	sl, r8
 800046e:	464b      	mov	r3, r9
 8000470:	d354      	bcc.n	800051c <__udivmoddi4+0x298>
 8000472:	d051      	beq.n	8000518 <__udivmoddi4+0x294>
 8000474:	2e00      	cmp	r6, #0
 8000476:	d069      	beq.n	800054c <__udivmoddi4+0x2c8>
 8000478:	ebb1 050a 	subs.w	r5, r1, sl
 800047c:	eb64 0403 	sbc.w	r4, r4, r3
 8000480:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000484:	40fd      	lsrs	r5, r7
 8000486:	40fc      	lsrs	r4, r7
 8000488:	ea4c 0505 	orr.w	r5, ip, r5
 800048c:	e9c6 5400 	strd	r5, r4, [r6]
 8000490:	2700      	movs	r7, #0
 8000492:	e747      	b.n	8000324 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f703 	lsr.w	r7, r0, r3
 800049c:	4095      	lsls	r5, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	fa21 f303 	lsr.w	r3, r1, r3
 80004a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004aa:	4338      	orrs	r0, r7
 80004ac:	0c01      	lsrs	r1, r0, #16
 80004ae:	fbb3 f7fe 	udiv	r7, r3, lr
 80004b2:	fa1f f885 	uxth.w	r8, r5
 80004b6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004be:	fb07 f308 	mul.w	r3, r7, r8
 80004c2:	428b      	cmp	r3, r1
 80004c4:	fa04 f402 	lsl.w	r4, r4, r2
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x256>
 80004ca:	1869      	adds	r1, r5, r1
 80004cc:	f107 3cff 	add.w	ip, r7, #4294967295
 80004d0:	d22f      	bcs.n	8000532 <__udivmoddi4+0x2ae>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d92d      	bls.n	8000532 <__udivmoddi4+0x2ae>
 80004d6:	3f02      	subs	r7, #2
 80004d8:	4429      	add	r1, r5
 80004da:	1acb      	subs	r3, r1, r3
 80004dc:	b281      	uxth	r1, r0
 80004de:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb00 f308 	mul.w	r3, r0, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d907      	bls.n	8000502 <__udivmoddi4+0x27e>
 80004f2:	1869      	adds	r1, r5, r1
 80004f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f8:	d217      	bcs.n	800052a <__udivmoddi4+0x2a6>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d915      	bls.n	800052a <__udivmoddi4+0x2a6>
 80004fe:	3802      	subs	r0, #2
 8000500:	4429      	add	r1, r5
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000508:	e73b      	b.n	8000382 <__udivmoddi4+0xfe>
 800050a:	4637      	mov	r7, r6
 800050c:	4630      	mov	r0, r6
 800050e:	e709      	b.n	8000324 <__udivmoddi4+0xa0>
 8000510:	4607      	mov	r7, r0
 8000512:	e6e7      	b.n	80002e4 <__udivmoddi4+0x60>
 8000514:	4618      	mov	r0, r3
 8000516:	e6fb      	b.n	8000310 <__udivmoddi4+0x8c>
 8000518:	4541      	cmp	r1, r8
 800051a:	d2ab      	bcs.n	8000474 <__udivmoddi4+0x1f0>
 800051c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000520:	eb69 020e 	sbc.w	r2, r9, lr
 8000524:	3801      	subs	r0, #1
 8000526:	4613      	mov	r3, r2
 8000528:	e7a4      	b.n	8000474 <__udivmoddi4+0x1f0>
 800052a:	4660      	mov	r0, ip
 800052c:	e7e9      	b.n	8000502 <__udivmoddi4+0x27e>
 800052e:	4618      	mov	r0, r3
 8000530:	e795      	b.n	800045e <__udivmoddi4+0x1da>
 8000532:	4667      	mov	r7, ip
 8000534:	e7d1      	b.n	80004da <__udivmoddi4+0x256>
 8000536:	4681      	mov	r9, r0
 8000538:	e77c      	b.n	8000434 <__udivmoddi4+0x1b0>
 800053a:	3802      	subs	r0, #2
 800053c:	442c      	add	r4, r5
 800053e:	e747      	b.n	80003d0 <__udivmoddi4+0x14c>
 8000540:	f1ac 0c02 	sub.w	ip, ip, #2
 8000544:	442b      	add	r3, r5
 8000546:	e72f      	b.n	80003a8 <__udivmoddi4+0x124>
 8000548:	4638      	mov	r0, r7
 800054a:	e708      	b.n	800035e <__udivmoddi4+0xda>
 800054c:	4637      	mov	r7, r6
 800054e:	e6e9      	b.n	8000324 <__udivmoddi4+0xa0>

08000550 <selfrel_offset31>:
 8000550:	6803      	ldr	r3, [r0, #0]
 8000552:	005a      	lsls	r2, r3, #1
 8000554:	bf4c      	ite	mi
 8000556:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800055a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800055e:	4418      	add	r0, r3
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <search_EIT_table>:
 8000564:	b361      	cbz	r1, 80005c0 <search_EIT_table+0x5c>
 8000566:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800056a:	f101 3aff 	add.w	sl, r1, #4294967295
 800056e:	4690      	mov	r8, r2
 8000570:	4606      	mov	r6, r0
 8000572:	46d1      	mov	r9, sl
 8000574:	2700      	movs	r7, #0
 8000576:	eb07 0409 	add.w	r4, r7, r9
 800057a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800057e:	1064      	asrs	r4, r4, #1
 8000580:	00e5      	lsls	r5, r4, #3
 8000582:	1971      	adds	r1, r6, r5
 8000584:	4608      	mov	r0, r1
 8000586:	f7ff ffe3 	bl	8000550 <selfrel_offset31>
 800058a:	45a2      	cmp	sl, r4
 800058c:	4683      	mov	fp, r0
 800058e:	f105 0008 	add.w	r0, r5, #8
 8000592:	4430      	add	r0, r6
 8000594:	d009      	beq.n	80005aa <search_EIT_table+0x46>
 8000596:	f7ff ffdb 	bl	8000550 <selfrel_offset31>
 800059a:	45c3      	cmp	fp, r8
 800059c:	f100 30ff 	add.w	r0, r0, #4294967295
 80005a0:	d805      	bhi.n	80005ae <search_EIT_table+0x4a>
 80005a2:	4540      	cmp	r0, r8
 80005a4:	d209      	bcs.n	80005ba <search_EIT_table+0x56>
 80005a6:	1c67      	adds	r7, r4, #1
 80005a8:	e7e5      	b.n	8000576 <search_EIT_table+0x12>
 80005aa:	45c3      	cmp	fp, r8
 80005ac:	d905      	bls.n	80005ba <search_EIT_table+0x56>
 80005ae:	42a7      	cmp	r7, r4
 80005b0:	d002      	beq.n	80005b8 <search_EIT_table+0x54>
 80005b2:	f104 39ff 	add.w	r9, r4, #4294967295
 80005b6:	e7de      	b.n	8000576 <search_EIT_table+0x12>
 80005b8:	2100      	movs	r1, #0
 80005ba:	4608      	mov	r0, r1
 80005bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005c0:	4608      	mov	r0, r1
 80005c2:	4770      	bx	lr

080005c4 <__gnu_unwind_get_pr_addr>:
 80005c4:	2801      	cmp	r0, #1
 80005c6:	d007      	beq.n	80005d8 <__gnu_unwind_get_pr_addr+0x14>
 80005c8:	2802      	cmp	r0, #2
 80005ca:	d007      	beq.n	80005dc <__gnu_unwind_get_pr_addr+0x18>
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <__gnu_unwind_get_pr_addr+0x1c>)
 80005ce:	2800      	cmp	r0, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	4618      	moveq	r0, r3
 80005d4:	2000      	movne	r0, #0
 80005d6:	4770      	bx	lr
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <__gnu_unwind_get_pr_addr+0x20>)
 80005da:	4770      	bx	lr
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <__gnu_unwind_get_pr_addr+0x24>)
 80005de:	4770      	bx	lr
 80005e0:	08000cb1 	.word	0x08000cb1
 80005e4:	08000cb5 	.word	0x08000cb5
 80005e8:	08000cb9 	.word	0x08000cb9

080005ec <get_eit_entry>:
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <get_eit_entry+0x98>)
 80005f0:	b083      	sub	sp, #12
 80005f2:	4604      	mov	r4, r0
 80005f4:	1e8d      	subs	r5, r1, #2
 80005f6:	b34b      	cbz	r3, 800064c <get_eit_entry+0x60>
 80005f8:	a901      	add	r1, sp, #4
 80005fa:	4628      	mov	r0, r5
 80005fc:	f3af 8000 	nop.w
 8000600:	b1f0      	cbz	r0, 8000640 <get_eit_entry+0x54>
 8000602:	9901      	ldr	r1, [sp, #4]
 8000604:	462a      	mov	r2, r5
 8000606:	f7ff ffad 	bl	8000564 <search_EIT_table>
 800060a:	4601      	mov	r1, r0
 800060c:	b1c0      	cbz	r0, 8000640 <get_eit_entry+0x54>
 800060e:	f7ff ff9f 	bl	8000550 <selfrel_offset31>
 8000612:	684b      	ldr	r3, [r1, #4]
 8000614:	64a0      	str	r0, [r4, #72]	; 0x48
 8000616:	2b01      	cmp	r3, #1
 8000618:	d02e      	beq.n	8000678 <get_eit_entry+0x8c>
 800061a:	2b00      	cmp	r3, #0
 800061c:	f101 0004 	add.w	r0, r1, #4
 8000620:	db26      	blt.n	8000670 <get_eit_entry+0x84>
 8000622:	f7ff ff95 	bl	8000550 <selfrel_offset31>
 8000626:	2300      	movs	r3, #0
 8000628:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800062c:	6803      	ldr	r3, [r0, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db12      	blt.n	8000658 <get_eit_entry+0x6c>
 8000632:	f7ff ff8d 	bl	8000550 <selfrel_offset31>
 8000636:	2300      	movs	r3, #0
 8000638:	6120      	str	r0, [r4, #16]
 800063a:	4618      	mov	r0, r3
 800063c:	b003      	add	sp, #12
 800063e:	bd30      	pop	{r4, r5, pc}
 8000640:	2300      	movs	r3, #0
 8000642:	6123      	str	r3, [r4, #16]
 8000644:	2309      	movs	r3, #9
 8000646:	4618      	mov	r0, r3
 8000648:	b003      	add	sp, #12
 800064a:	bd30      	pop	{r4, r5, pc}
 800064c:	490e      	ldr	r1, [pc, #56]	; (8000688 <get_eit_entry+0x9c>)
 800064e:	480f      	ldr	r0, [pc, #60]	; (800068c <get_eit_entry+0xa0>)
 8000650:	1a09      	subs	r1, r1, r0
 8000652:	10c9      	asrs	r1, r1, #3
 8000654:	9101      	str	r1, [sp, #4]
 8000656:	e7d5      	b.n	8000604 <get_eit_entry+0x18>
 8000658:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800065c:	f7ff ffb2 	bl	80005c4 <__gnu_unwind_get_pr_addr>
 8000660:	2800      	cmp	r0, #0
 8000662:	bf14      	ite	ne
 8000664:	2300      	movne	r3, #0
 8000666:	2309      	moveq	r3, #9
 8000668:	6120      	str	r0, [r4, #16]
 800066a:	4618      	mov	r0, r3
 800066c:	b003      	add	sp, #12
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	2301      	movs	r3, #1
 8000672:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000676:	e7d9      	b.n	800062c <get_eit_entry+0x40>
 8000678:	2300      	movs	r3, #0
 800067a:	6123      	str	r3, [r4, #16]
 800067c:	2305      	movs	r3, #5
 800067e:	4618      	mov	r0, r3
 8000680:	b003      	add	sp, #12
 8000682:	bd30      	pop	{r4, r5, pc}
 8000684:	00000000 	.word	0x00000000
 8000688:	0800d1f0 	.word	0x0800d1f0
 800068c:	0800ceb0 	.word	0x0800ceb0

08000690 <restore_non_core_regs>:
 8000690:	6803      	ldr	r3, [r0, #0]
 8000692:	07da      	lsls	r2, r3, #31
 8000694:	b510      	push	{r4, lr}
 8000696:	4604      	mov	r4, r0
 8000698:	d406      	bmi.n	80006a8 <restore_non_core_regs+0x18>
 800069a:	079b      	lsls	r3, r3, #30
 800069c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80006a0:	d509      	bpl.n	80006b6 <restore_non_core_regs+0x26>
 80006a2:	f000 fc5f 	bl	8000f64 <__gnu_Unwind_Restore_VFP_D>
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	0759      	lsls	r1, r3, #29
 80006aa:	d509      	bpl.n	80006c0 <restore_non_core_regs+0x30>
 80006ac:	071a      	lsls	r2, r3, #28
 80006ae:	d50e      	bpl.n	80006ce <restore_non_core_regs+0x3e>
 80006b0:	06db      	lsls	r3, r3, #27
 80006b2:	d513      	bpl.n	80006dc <restore_non_core_regs+0x4c>
 80006b4:	bd10      	pop	{r4, pc}
 80006b6:	f000 fc4d 	bl	8000f54 <__gnu_Unwind_Restore_VFP>
 80006ba:	6823      	ldr	r3, [r4, #0]
 80006bc:	0759      	lsls	r1, r3, #29
 80006be:	d4f5      	bmi.n	80006ac <restore_non_core_regs+0x1c>
 80006c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006c4:	f000 fc56 	bl	8000f74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006c8:	6823      	ldr	r3, [r4, #0]
 80006ca:	071a      	lsls	r2, r3, #28
 80006cc:	d4f0      	bmi.n	80006b0 <restore_non_core_regs+0x20>
 80006ce:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006d2:	f000 fc57 	bl	8000f84 <__gnu_Unwind_Restore_WMMXD>
 80006d6:	6823      	ldr	r3, [r4, #0]
 80006d8:	06db      	lsls	r3, r3, #27
 80006da:	d4eb      	bmi.n	80006b4 <restore_non_core_regs+0x24>
 80006dc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80006e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e4:	f000 bc92 	b.w	800100c <__gnu_Unwind_Restore_WMMXC>

080006e8 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006e8:	6803      	ldr	r3, [r0, #0]
 80006ea:	b103      	cbz	r3, 80006ee <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80006ec:	4403      	add	r3, r0
 80006ee:	4618      	mov	r0, r3
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <__gnu_unwind_24bit.isra.1>:
 80006f4:	2009      	movs	r0, #9
 80006f6:	4770      	bx	lr

080006f8 <_Unwind_DebugHook>:
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <unwind_phase2>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	4604      	mov	r4, r0
 8000700:	460d      	mov	r5, r1
 8000702:	e008      	b.n	8000716 <unwind_phase2+0x1a>
 8000704:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000706:	6163      	str	r3, [r4, #20]
 8000708:	462a      	mov	r2, r5
 800070a:	6923      	ldr	r3, [r4, #16]
 800070c:	4621      	mov	r1, r4
 800070e:	2001      	movs	r0, #1
 8000710:	4798      	blx	r3
 8000712:	2808      	cmp	r0, #8
 8000714:	d108      	bne.n	8000728 <unwind_phase2+0x2c>
 8000716:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000718:	4620      	mov	r0, r4
 800071a:	f7ff ff67 	bl	80005ec <get_eit_entry>
 800071e:	4606      	mov	r6, r0
 8000720:	2800      	cmp	r0, #0
 8000722:	d0ef      	beq.n	8000704 <unwind_phase2+0x8>
 8000724:	f00b fa13 	bl	800bb4e <abort>
 8000728:	2807      	cmp	r0, #7
 800072a:	d1fb      	bne.n	8000724 <unwind_phase2+0x28>
 800072c:	4630      	mov	r0, r6
 800072e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000730:	f7ff ffe2 	bl	80006f8 <_Unwind_DebugHook>
 8000734:	1d28      	adds	r0, r5, #4
 8000736:	f000 fc01 	bl	8000f3c <__restore_core_regs>
 800073a:	bf00      	nop

0800073c <unwind_phase2_forced>:
 800073c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000740:	1d0c      	adds	r4, r1, #4
 8000742:	4605      	mov	r5, r0
 8000744:	4617      	mov	r7, r2
 8000746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000748:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800074c:	ae03      	add	r6, sp, #12
 800074e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000752:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000756:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000758:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800075c:	ac02      	add	r4, sp, #8
 800075e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000762:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000766:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800076a:	2300      	movs	r3, #0
 800076c:	6023      	str	r3, [r4, #0]
 800076e:	e021      	b.n	80007b4 <unwind_phase2_forced+0x78>
 8000770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000772:	616b      	str	r3, [r5, #20]
 8000774:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000778:	4621      	mov	r1, r4
 800077a:	a87a      	add	r0, sp, #488	; 0x1e8
 800077c:	f00b faf2 	bl	800bd64 <memcpy>
 8000780:	692b      	ldr	r3, [r5, #16]
 8000782:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000784:	4629      	mov	r1, r5
 8000786:	4630      	mov	r0, r6
 8000788:	4798      	blx	r3
 800078a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800078c:	e9cd 4900 	strd	r4, r9, [sp]
 8000790:	4682      	mov	sl, r0
 8000792:	6463      	str	r3, [r4, #68]	; 0x44
 8000794:	4631      	mov	r1, r6
 8000796:	462b      	mov	r3, r5
 8000798:	462a      	mov	r2, r5
 800079a:	2001      	movs	r0, #1
 800079c:	47c0      	blx	r8
 800079e:	4607      	mov	r7, r0
 80007a0:	b9f8      	cbnz	r0, 80007e2 <unwind_phase2_forced+0xa6>
 80007a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007a6:	a97a      	add	r1, sp, #488	; 0x1e8
 80007a8:	4620      	mov	r0, r4
 80007aa:	f00b fadb 	bl	800bd64 <memcpy>
 80007ae:	f1ba 0f08 	cmp.w	sl, #8
 80007b2:	d11c      	bne.n	80007ee <unwind_phase2_forced+0xb2>
 80007b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007b6:	4628      	mov	r0, r5
 80007b8:	f7ff ff18 	bl	80005ec <get_eit_entry>
 80007bc:	2f00      	cmp	r7, #0
 80007be:	bf08      	it	eq
 80007c0:	2609      	moveq	r6, #9
 80007c2:	4607      	mov	r7, r0
 80007c4:	bf18      	it	ne
 80007c6:	260a      	movne	r6, #10
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d0d1      	beq.n	8000770 <unwind_phase2_forced+0x34>
 80007cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007ce:	f046 0110 	orr.w	r1, r6, #16
 80007d2:	e9cd 4900 	strd	r4, r9, [sp]
 80007d6:	462a      	mov	r2, r5
 80007d8:	6463      	str	r3, [r4, #68]	; 0x44
 80007da:	2001      	movs	r0, #1
 80007dc:	462b      	mov	r3, r5
 80007de:	47c0      	blx	r8
 80007e0:	b100      	cbz	r0, 80007e4 <unwind_phase2_forced+0xa8>
 80007e2:	2709      	movs	r7, #9
 80007e4:	4638      	mov	r0, r7
 80007e6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	f1ba 0f07 	cmp.w	sl, #7
 80007f2:	d1f6      	bne.n	80007e2 <unwind_phase2_forced+0xa6>
 80007f4:	4638      	mov	r0, r7
 80007f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007f8:	f7ff ff7e 	bl	80006f8 <_Unwind_DebugHook>
 80007fc:	a803      	add	r0, sp, #12
 80007fe:	f000 fb9d 	bl	8000f3c <__restore_core_regs>
 8000802:	bf00      	nop

08000804 <_Unwind_GetCFA>:
 8000804:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000806:	4770      	bx	lr

08000808 <__gnu_Unwind_RaiseException>:
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800080c:	640b      	str	r3, [r1, #64]	; 0x40
 800080e:	1d0d      	adds	r5, r1, #4
 8000810:	460f      	mov	r7, r1
 8000812:	4606      	mov	r6, r0
 8000814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000816:	b0f9      	sub	sp, #484	; 0x1e4
 8000818:	ac01      	add	r4, sp, #4
 800081a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000824:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000828:	f04f 35ff 	mov.w	r5, #4294967295
 800082c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000830:	9500      	str	r5, [sp, #0]
 8000832:	e006      	b.n	8000842 <__gnu_Unwind_RaiseException+0x3a>
 8000834:	6933      	ldr	r3, [r6, #16]
 8000836:	466a      	mov	r2, sp
 8000838:	4631      	mov	r1, r6
 800083a:	4798      	blx	r3
 800083c:	2808      	cmp	r0, #8
 800083e:	4604      	mov	r4, r0
 8000840:	d108      	bne.n	8000854 <__gnu_Unwind_RaiseException+0x4c>
 8000842:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000844:	4630      	mov	r0, r6
 8000846:	f7ff fed1 	bl	80005ec <get_eit_entry>
 800084a:	2800      	cmp	r0, #0
 800084c:	d0f2      	beq.n	8000834 <__gnu_Unwind_RaiseException+0x2c>
 800084e:	2009      	movs	r0, #9
 8000850:	b079      	add	sp, #484	; 0x1e4
 8000852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000854:	4668      	mov	r0, sp
 8000856:	f7ff ff1b 	bl	8000690 <restore_non_core_regs>
 800085a:	2c06      	cmp	r4, #6
 800085c:	d1f7      	bne.n	800084e <__gnu_Unwind_RaiseException+0x46>
 800085e:	4639      	mov	r1, r7
 8000860:	4630      	mov	r0, r6
 8000862:	f7ff ff4b 	bl	80006fc <unwind_phase2>
 8000866:	bf00      	nop

08000868 <__gnu_Unwind_ForcedUnwind>:
 8000868:	b430      	push	{r4, r5}
 800086a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800086c:	60c1      	str	r1, [r0, #12]
 800086e:	6182      	str	r2, [r0, #24]
 8000870:	4619      	mov	r1, r3
 8000872:	641d      	str	r5, [r3, #64]	; 0x40
 8000874:	2200      	movs	r2, #0
 8000876:	bc30      	pop	{r4, r5}
 8000878:	e760      	b.n	800073c <unwind_phase2_forced>
 800087a:	bf00      	nop

0800087c <__gnu_Unwind_Resume>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	68c6      	ldr	r6, [r0, #12]
 8000880:	6943      	ldr	r3, [r0, #20]
 8000882:	640b      	str	r3, [r1, #64]	; 0x40
 8000884:	b9be      	cbnz	r6, 80008b6 <__gnu_Unwind_Resume+0x3a>
 8000886:	6903      	ldr	r3, [r0, #16]
 8000888:	460a      	mov	r2, r1
 800088a:	4604      	mov	r4, r0
 800088c:	460d      	mov	r5, r1
 800088e:	4601      	mov	r1, r0
 8000890:	2002      	movs	r0, #2
 8000892:	4798      	blx	r3
 8000894:	2807      	cmp	r0, #7
 8000896:	d007      	beq.n	80008a8 <__gnu_Unwind_Resume+0x2c>
 8000898:	2808      	cmp	r0, #8
 800089a:	d103      	bne.n	80008a4 <__gnu_Unwind_Resume+0x28>
 800089c:	4629      	mov	r1, r5
 800089e:	4620      	mov	r0, r4
 80008a0:	f7ff ff2c 	bl	80006fc <unwind_phase2>
 80008a4:	f00b f953 	bl	800bb4e <abort>
 80008a8:	4630      	mov	r0, r6
 80008aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008ac:	f7ff ff24 	bl	80006f8 <_Unwind_DebugHook>
 80008b0:	1d28      	adds	r0, r5, #4
 80008b2:	f000 fb43 	bl	8000f3c <__restore_core_regs>
 80008b6:	2201      	movs	r2, #1
 80008b8:	f7ff ff40 	bl	800073c <unwind_phase2_forced>
 80008bc:	f00b f947 	bl	800bb4e <abort>

080008c0 <__gnu_Unwind_Resume_or_Rethrow>:
 80008c0:	68c2      	ldr	r2, [r0, #12]
 80008c2:	b11a      	cbz	r2, 80008cc <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008c4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008c6:	640a      	str	r2, [r1, #64]	; 0x40
 80008c8:	2200      	movs	r2, #0
 80008ca:	e737      	b.n	800073c <unwind_phase2_forced>
 80008cc:	e79c      	b.n	8000808 <__gnu_Unwind_RaiseException>
 80008ce:	bf00      	nop

080008d0 <_Unwind_Complete>:
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <_Unwind_DeleteException>:
 80008d4:	6883      	ldr	r3, [r0, #8]
 80008d6:	b113      	cbz	r3, 80008de <_Unwind_DeleteException+0xa>
 80008d8:	4601      	mov	r1, r0
 80008da:	2001      	movs	r0, #1
 80008dc:	4718      	bx	r3
 80008de:	4770      	bx	lr

080008e0 <_Unwind_VRS_Get>:
 80008e0:	2904      	cmp	r1, #4
 80008e2:	d807      	bhi.n	80008f4 <_Unwind_VRS_Get+0x14>
 80008e4:	e8df f001 	tbb	[pc, r1]
 80008e8:	08060803 	.word	0x08060803
 80008ec:	08          	.byte	0x08
 80008ed:	00          	.byte	0x00
 80008ee:	b90b      	cbnz	r3, 80008f4 <_Unwind_VRS_Get+0x14>
 80008f0:	2a0f      	cmp	r2, #15
 80008f2:	d903      	bls.n	80008fc <_Unwind_VRS_Get+0x1c>
 80008f4:	2002      	movs	r0, #2
 80008f6:	4770      	bx	lr
 80008f8:	2001      	movs	r0, #1
 80008fa:	4770      	bx	lr
 80008fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000900:	4618      	mov	r0, r3
 8000902:	6853      	ldr	r3, [r2, #4]
 8000904:	9a00      	ldr	r2, [sp, #0]
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <_Unwind_GetGR>:
 800090c:	b510      	push	{r4, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	2300      	movs	r3, #0
 8000912:	ac03      	add	r4, sp, #12
 8000914:	460a      	mov	r2, r1
 8000916:	9400      	str	r4, [sp, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f7ff ffe1 	bl	80008e0 <_Unwind_VRS_Get>
 800091e:	9803      	ldr	r0, [sp, #12]
 8000920:	b004      	add	sp, #16
 8000922:	bd10      	pop	{r4, pc}

08000924 <_Unwind_VRS_Set>:
 8000924:	2904      	cmp	r1, #4
 8000926:	d807      	bhi.n	8000938 <_Unwind_VRS_Set+0x14>
 8000928:	e8df f001 	tbb	[pc, r1]
 800092c:	08060803 	.word	0x08060803
 8000930:	08          	.byte	0x08
 8000931:	00          	.byte	0x00
 8000932:	b90b      	cbnz	r3, 8000938 <_Unwind_VRS_Set+0x14>
 8000934:	2a0f      	cmp	r2, #15
 8000936:	d903      	bls.n	8000940 <_Unwind_VRS_Set+0x1c>
 8000938:	2002      	movs	r0, #2
 800093a:	4770      	bx	lr
 800093c:	2001      	movs	r0, #1
 800093e:	4770      	bx	lr
 8000940:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000944:	9a00      	ldr	r2, [sp, #0]
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	6042      	str	r2, [r0, #4]
 800094a:	4618      	mov	r0, r3
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <_Unwind_SetGR>:
 8000950:	b510      	push	{r4, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	ac04      	add	r4, sp, #16
 8000956:	2300      	movs	r3, #0
 8000958:	f844 2d04 	str.w	r2, [r4, #-4]!
 800095c:	460a      	mov	r2, r1
 800095e:	9400      	str	r4, [sp, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f7ff ffdf 	bl	8000924 <_Unwind_VRS_Set>
 8000966:	b004      	add	sp, #16
 8000968:	bd10      	pop	{r4, pc}
 800096a:	bf00      	nop

0800096c <__gnu_Unwind_Backtrace>:
 800096c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	1d15      	adds	r5, r2, #4
 8000974:	4607      	mov	r7, r0
 8000976:	460e      	mov	r6, r1
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800097e:	ac17      	add	r4, sp, #92	; 0x5c
 8000980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800098e:	f04f 35ff 	mov.w	r5, #4294967295
 8000992:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000996:	9516      	str	r5, [sp, #88]	; 0x58
 8000998:	e010      	b.n	80009bc <__gnu_Unwind_Backtrace+0x50>
 800099a:	a816      	add	r0, sp, #88	; 0x58
 800099c:	f7ff ffd8 	bl	8000950 <_Unwind_SetGR>
 80009a0:	4631      	mov	r1, r6
 80009a2:	a816      	add	r0, sp, #88	; 0x58
 80009a4:	47b8      	blx	r7
 80009a6:	aa16      	add	r2, sp, #88	; 0x58
 80009a8:	4669      	mov	r1, sp
 80009aa:	b978      	cbnz	r0, 80009cc <__gnu_Unwind_Backtrace+0x60>
 80009ac:	9b04      	ldr	r3, [sp, #16]
 80009ae:	2008      	movs	r0, #8
 80009b0:	4798      	blx	r3
 80009b2:	2805      	cmp	r0, #5
 80009b4:	4604      	mov	r4, r0
 80009b6:	d00a      	beq.n	80009ce <__gnu_Unwind_Backtrace+0x62>
 80009b8:	2809      	cmp	r0, #9
 80009ba:	d007      	beq.n	80009cc <__gnu_Unwind_Backtrace+0x60>
 80009bc:	9926      	ldr	r1, [sp, #152]	; 0x98
 80009be:	4668      	mov	r0, sp
 80009c0:	f7ff fe14 	bl	80005ec <get_eit_entry>
 80009c4:	466a      	mov	r2, sp
 80009c6:	210c      	movs	r1, #12
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d0e6      	beq.n	800099a <__gnu_Unwind_Backtrace+0x2e>
 80009cc:	2409      	movs	r4, #9
 80009ce:	a816      	add	r0, sp, #88	; 0x58
 80009d0:	f7ff fe5e 	bl	8000690 <restore_non_core_regs>
 80009d4:	4620      	mov	r0, r4
 80009d6:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009dc <__gnu_unwind_pr_common>:
 80009dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e0:	460d      	mov	r5, r1
 80009e2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009e4:	b089      	sub	sp, #36	; 0x24
 80009e6:	1d0c      	adds	r4, r1, #4
 80009e8:	4616      	mov	r6, r2
 80009ea:	f000 0b03 	and.w	fp, r0, #3
 80009ee:	680a      	ldr	r2, [r1, #0]
 80009f0:	9406      	str	r4, [sp, #24]
 80009f2:	461f      	mov	r7, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d068      	beq.n	8000aca <__gnu_unwind_pr_common+0xee>
 80009f8:	0c13      	lsrs	r3, r2, #16
 80009fa:	b2d9      	uxtb	r1, r3
 80009fc:	0412      	lsls	r2, r2, #16
 80009fe:	f88d 301d 	strb.w	r3, [sp, #29]
 8000a02:	2302      	movs	r3, #2
 8000a04:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8000a08:	9205      	str	r2, [sp, #20]
 8000a0a:	f88d 301c 	strb.w	r3, [sp, #28]
 8000a0e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a10:	f1bb 0f02 	cmp.w	fp, #2
 8000a14:	bf08      	it	eq
 8000a16:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a18:	f013 0301 	ands.w	r3, r3, #1
 8000a1c:	d146      	bne.n	8000aac <__gnu_unwind_pr_common+0xd0>
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	f000 0308 	and.w	r3, r0, #8
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	f8d4 9000 	ldr.w	r9, [r4]
 8000a2a:	f1b9 0f00 	cmp.w	r9, #0
 8000a2e:	f000 80f3 	beq.w	8000c18 <__gnu_unwind_pr_common+0x23c>
 8000a32:	2f02      	cmp	r7, #2
 8000a34:	d045      	beq.n	8000ac2 <__gnu_unwind_pr_common+0xe6>
 8000a36:	f8b4 9000 	ldrh.w	r9, [r4]
 8000a3a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8000a3e:	3404      	adds	r4, #4
 8000a40:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a42:	f028 0a01 	bic.w	sl, r8, #1
 8000a46:	210f      	movs	r1, #15
 8000a48:	4630      	mov	r0, r6
 8000a4a:	449a      	add	sl, r3
 8000a4c:	f7ff ff5e 	bl	800090c <_Unwind_GetGR>
 8000a50:	4582      	cmp	sl, r0
 8000a52:	d834      	bhi.n	8000abe <__gnu_unwind_pr_common+0xe2>
 8000a54:	f029 0301 	bic.w	r3, r9, #1
 8000a58:	4453      	add	r3, sl
 8000a5a:	4283      	cmp	r3, r0
 8000a5c:	bf94      	ite	ls
 8000a5e:	2000      	movls	r0, #0
 8000a60:	2001      	movhi	r0, #1
 8000a62:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8000a66:	f008 0802 	and.w	r8, r8, #2
 8000a6a:	f009 0901 	and.w	r9, r9, #1
 8000a6e:	ea48 0809 	orr.w	r8, r8, r9
 8000a72:	f1b8 0f01 	cmp.w	r8, #1
 8000a76:	d03a      	beq.n	8000aee <__gnu_unwind_pr_common+0x112>
 8000a78:	d331      	bcc.n	8000ade <__gnu_unwind_pr_common+0x102>
 8000a7a:	f1b8 0f02 	cmp.w	r8, #2
 8000a7e:	d11a      	bne.n	8000ab6 <__gnu_unwind_pr_common+0xda>
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8000a86:	f1bb 0f00 	cmp.w	fp, #0
 8000a8a:	d166      	bne.n	8000b5a <__gnu_unwind_pr_common+0x17e>
 8000a8c:	b130      	cbz	r0, 8000a9c <__gnu_unwind_pr_common+0xc0>
 8000a8e:	9a00      	ldr	r2, [sp, #0]
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d06c      	beq.n	8000b6e <__gnu_unwind_pr_common+0x192>
 8000a94:	f1ba 0f00 	cmp.w	sl, #0
 8000a98:	f000 8090 	beq.w	8000bbc <__gnu_unwind_pr_common+0x1e0>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	da00      	bge.n	8000aa2 <__gnu_unwind_pr_common+0xc6>
 8000aa0:	3404      	adds	r4, #4
 8000aa2:	f10a 0301 	add.w	r3, sl, #1
 8000aa6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000aaa:	e7bc      	b.n	8000a26 <__gnu_unwind_pr_common+0x4a>
 8000aac:	4630      	mov	r0, r6
 8000aae:	a905      	add	r1, sp, #20
 8000ab0:	f000 fb46 	bl	8001140 <__gnu_unwind_execute>
 8000ab4:	b178      	cbz	r0, 8000ad6 <__gnu_unwind_pr_common+0xfa>
 8000ab6:	2009      	movs	r0, #9
 8000ab8:	b009      	add	sp, #36	; 0x24
 8000aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000abe:	2000      	movs	r0, #0
 8000ac0:	e7cf      	b.n	8000a62 <__gnu_unwind_pr_common+0x86>
 8000ac2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000ac6:	3408      	adds	r4, #8
 8000ac8:	e7ba      	b.n	8000a40 <__gnu_unwind_pr_common+0x64>
 8000aca:	0212      	lsls	r2, r2, #8
 8000acc:	2303      	movs	r3, #3
 8000ace:	9205      	str	r2, [sp, #20]
 8000ad0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000ad4:	e79b      	b.n	8000a0e <__gnu_unwind_pr_common+0x32>
 8000ad6:	2008      	movs	r0, #8
 8000ad8:	b009      	add	sp, #36	; 0x24
 8000ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ade:	f1bb 0f00 	cmp.w	fp, #0
 8000ae2:	d002      	beq.n	8000aea <__gnu_unwind_pr_common+0x10e>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	f040 80b4 	bne.w	8000c52 <__gnu_unwind_pr_common+0x276>
 8000aea:	3404      	adds	r4, #4
 8000aec:	e79b      	b.n	8000a26 <__gnu_unwind_pr_common+0x4a>
 8000aee:	f1bb 0f00 	cmp.w	fp, #0
 8000af2:	d118      	bne.n	8000b26 <__gnu_unwind_pr_common+0x14a>
 8000af4:	b1a8      	cbz	r0, 8000b22 <__gnu_unwind_pr_common+0x146>
 8000af6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000afa:	1c99      	adds	r1, r3, #2
 8000afc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b00:	d0d9      	beq.n	8000ab6 <__gnu_unwind_pr_common+0xda>
 8000b02:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b06:	3301      	adds	r3, #1
 8000b08:	9104      	str	r1, [sp, #16]
 8000b0a:	f000 80b5 	beq.w	8000c78 <__gnu_unwind_pr_common+0x29c>
 8000b0e:	1d20      	adds	r0, r4, #4
 8000b10:	f7ff fdea 	bl	80006e8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b14:	ab04      	add	r3, sp, #16
 8000b16:	4601      	mov	r1, r0
 8000b18:	4628      	mov	r0, r5
 8000b1a:	f00a f8cb 	bl	800acb4 <__cxa_type_match>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d167      	bne.n	8000bf2 <__gnu_unwind_pr_common+0x216>
 8000b22:	3408      	adds	r4, #8
 8000b24:	e77f      	b.n	8000a26 <__gnu_unwind_pr_common+0x4a>
 8000b26:	210d      	movs	r1, #13
 8000b28:	4630      	mov	r0, r6
 8000b2a:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8000b2e:	f7ff feed 	bl	800090c <_Unwind_GetGR>
 8000b32:	4580      	cmp	r8, r0
 8000b34:	d1f5      	bne.n	8000b22 <__gnu_unwind_pr_common+0x146>
 8000b36:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	d1f2      	bne.n	8000b22 <__gnu_unwind_pr_common+0x146>
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f7ff fd07 	bl	8000550 <selfrel_offset31>
 8000b42:	210f      	movs	r1, #15
 8000b44:	4602      	mov	r2, r0
 8000b46:	4630      	mov	r0, r6
 8000b48:	f7ff ff02 	bl	8000950 <_Unwind_SetGR>
 8000b4c:	4630      	mov	r0, r6
 8000b4e:	462a      	mov	r2, r5
 8000b50:	2100      	movs	r1, #0
 8000b52:	f7ff fefd 	bl	8000950 <_Unwind_SetGR>
 8000b56:	2007      	movs	r0, #7
 8000b58:	e7ae      	b.n	8000ab8 <__gnu_unwind_pr_common+0xdc>
 8000b5a:	210d      	movs	r1, #13
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8000b62:	f7ff fed3 	bl	800090c <_Unwind_GetGR>
 8000b66:	4580      	cmp	r8, r0
 8000b68:	d032      	beq.n	8000bd0 <__gnu_unwind_pr_common+0x1f4>
 8000b6a:	6823      	ldr	r3, [r4, #0]
 8000b6c:	e796      	b.n	8000a9c <__gnu_unwind_pr_common+0xc0>
 8000b6e:	f1ba 0f00 	cmp.w	sl, #0
 8000b72:	d023      	beq.n	8000bbc <__gnu_unwind_pr_common+0x1e0>
 8000b74:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b78:	f104 0804 	add.w	r8, r4, #4
 8000b7c:	f8cd b008 	str.w	fp, [sp, #8]
 8000b80:	f8dd 9000 	ldr.w	r9, [sp]
 8000b84:	9703      	str	r7, [sp, #12]
 8000b86:	46a3      	mov	fp, r4
 8000b88:	461c      	mov	r4, r3
 8000b8a:	e002      	b.n	8000b92 <__gnu_unwind_pr_common+0x1b6>
 8000b8c:	4557      	cmp	r7, sl
 8000b8e:	46b9      	mov	r9, r7
 8000b90:	d040      	beq.n	8000c14 <__gnu_unwind_pr_common+0x238>
 8000b92:	4640      	mov	r0, r8
 8000b94:	9404      	str	r4, [sp, #16]
 8000b96:	f7ff fda7 	bl	80006e8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b9a:	ab04      	add	r3, sp, #16
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	f00a f887 	bl	800acb4 <__cxa_type_match>
 8000ba6:	f109 0701 	add.w	r7, r9, #1
 8000baa:	f108 0804 	add.w	r8, r8, #4
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	d0ec      	beq.n	8000b8c <__gnu_unwind_pr_common+0x1b0>
 8000bb2:	45d1      	cmp	r9, sl
 8000bb4:	465c      	mov	r4, fp
 8000bb6:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8000bba:	d1d6      	bne.n	8000b6a <__gnu_unwind_pr_common+0x18e>
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	210d      	movs	r1, #13
 8000bc0:	f7ff fea4 	bl	800090c <_Unwind_GetGR>
 8000bc4:	9b04      	ldr	r3, [sp, #16]
 8000bc6:	6228      	str	r0, [r5, #32]
 8000bc8:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000bcc:	2006      	movs	r0, #6
 8000bce:	e773      	b.n	8000ab8 <__gnu_unwind_pr_common+0xdc>
 8000bd0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	d1c9      	bne.n	8000b6a <__gnu_unwind_pr_common+0x18e>
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	f04f 0800 	mov.w	r8, #0
 8000bdc:	18a3      	adds	r3, r4, r2
 8000bde:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 8000be2:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	4543      	cmp	r3, r8
 8000bea:	db4d      	blt.n	8000c88 <__gnu_unwind_pr_common+0x2ac>
 8000bec:	2301      	movs	r3, #1
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	e757      	b.n	8000aa2 <__gnu_unwind_pr_common+0xc6>
 8000bf2:	4680      	mov	r8, r0
 8000bf4:	210d      	movs	r1, #13
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f7ff fe88 	bl	800090c <_Unwind_GetGR>
 8000bfc:	f1b8 0f02 	cmp.w	r8, #2
 8000c00:	6228      	str	r0, [r5, #32]
 8000c02:	d13e      	bne.n	8000c82 <__gnu_unwind_pr_common+0x2a6>
 8000c04:	462b      	mov	r3, r5
 8000c06:	9a04      	ldr	r2, [sp, #16]
 8000c08:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c0c:	626b      	str	r3, [r5, #36]	; 0x24
 8000c0e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c10:	2006      	movs	r0, #6
 8000c12:	e751      	b.n	8000ab8 <__gnu_unwind_pr_common+0xdc>
 8000c14:	465c      	mov	r4, fp
 8000c16:	e7d1      	b.n	8000bbc <__gnu_unwind_pr_common+0x1e0>
 8000c18:	a905      	add	r1, sp, #20
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	f000 fa90 	bl	8001140 <__gnu_unwind_execute>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	f47f af48 	bne.w	8000ab6 <__gnu_unwind_pr_common+0xda>
 8000c26:	9b01      	ldr	r3, [sp, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f43f af54 	beq.w	8000ad6 <__gnu_unwind_pr_common+0xfa>
 8000c2e:	210f      	movs	r1, #15
 8000c30:	4630      	mov	r0, r6
 8000c32:	f7ff fe6b 	bl	800090c <_Unwind_GetGR>
 8000c36:	210e      	movs	r1, #14
 8000c38:	4602      	mov	r2, r0
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	f7ff fe88 	bl	8000950 <_Unwind_SetGR>
 8000c40:	4630      	mov	r0, r6
 8000c42:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <__gnu_unwind_pr_common+0x2d0>)
 8000c44:	210f      	movs	r1, #15
 8000c46:	f7ff fe83 	bl	8000950 <_Unwind_SetGR>
 8000c4a:	2007      	movs	r0, #7
 8000c4c:	b009      	add	sp, #36	; 0x24
 8000c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c52:	4620      	mov	r0, r4
 8000c54:	f7ff fc7c 	bl	8000550 <selfrel_offset31>
 8000c58:	3404      	adds	r4, #4
 8000c5a:	4607      	mov	r7, r0
 8000c5c:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c5e:	4628      	mov	r0, r5
 8000c60:	f00a f886 	bl	800ad70 <__cxa_begin_cleanup>
 8000c64:	2800      	cmp	r0, #0
 8000c66:	f43f af26 	beq.w	8000ab6 <__gnu_unwind_pr_common+0xda>
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	463a      	mov	r2, r7
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f7ff fe6e 	bl	8000950 <_Unwind_SetGR>
 8000c74:	2007      	movs	r0, #7
 8000c76:	e71f      	b.n	8000ab8 <__gnu_unwind_pr_common+0xdc>
 8000c78:	4630      	mov	r0, r6
 8000c7a:	210d      	movs	r1, #13
 8000c7c:	f7ff fe46 	bl	800090c <_Unwind_GetGR>
 8000c80:	6228      	str	r0, [r5, #32]
 8000c82:	9b04      	ldr	r3, [sp, #16]
 8000c84:	626b      	str	r3, [r5, #36]	; 0x24
 8000c86:	e7c2      	b.n	8000c0e <__gnu_unwind_pr_common+0x232>
 8000c88:	f10a 0001 	add.w	r0, sl, #1
 8000c8c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c90:	f7ff fc5e 	bl	8000550 <selfrel_offset31>
 8000c94:	210f      	movs	r1, #15
 8000c96:	4602      	mov	r2, r0
 8000c98:	4630      	mov	r0, r6
 8000c9a:	f7ff fe59 	bl	8000950 <_Unwind_SetGR>
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	462a      	mov	r2, r5
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	f7ff fe54 	bl	8000950 <_Unwind_SetGR>
 8000ca8:	2007      	movs	r0, #7
 8000caa:	e705      	b.n	8000ab8 <__gnu_unwind_pr_common+0xdc>
 8000cac:	0800b8c3 	.word	0x0800b8c3

08000cb0 <__aeabi_unwind_cpp_pr0>:
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e693      	b.n	80009dc <__gnu_unwind_pr_common>

08000cb4 <__aeabi_unwind_cpp_pr1>:
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e691      	b.n	80009dc <__gnu_unwind_pr_common>

08000cb8 <__aeabi_unwind_cpp_pr2>:
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e68f      	b.n	80009dc <__gnu_unwind_pr_common>

08000cbc <_Unwind_VRS_Pop>:
 8000cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cc0:	4605      	mov	r5, r0
 8000cc2:	b0c4      	sub	sp, #272	; 0x110
 8000cc4:	2904      	cmp	r1, #4
 8000cc6:	d806      	bhi.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000cc8:	e8df f001 	tbb	[pc, r1]
 8000ccc:	03052b4d 	.word	0x03052b4d
 8000cd0:	09          	.byte	0x09
 8000cd1:	00          	.byte	0x00
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d05f      	beq.n	8000d96 <_Unwind_VRS_Pop+0xda>
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	b044      	add	sp, #272	; 0x110
 8000cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f9      	bne.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000ce2:	2a10      	cmp	r2, #16
 8000ce4:	d8f7      	bhi.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000ce6:	682b      	ldr	r3, [r5, #0]
 8000ce8:	06dc      	lsls	r4, r3, #27
 8000cea:	f100 80f4 	bmi.w	8000ed6 <_Unwind_VRS_Pop+0x21a>
 8000cee:	ac22      	add	r4, sp, #136	; 0x88
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	9201      	str	r2, [sp, #4]
 8000cf4:	f000 f994 	bl	8001020 <__gnu_Unwind_Save_WMMXC>
 8000cf8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2601      	movs	r6, #1
 8000d00:	fa06 f103 	lsl.w	r1, r6, r3
 8000d04:	4211      	tst	r1, r2
 8000d06:	d003      	beq.n	8000d10 <_Unwind_VRS_Pop+0x54>
 8000d08:	6801      	ldr	r1, [r0, #0]
 8000d0a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8000d0e:	3004      	adds	r0, #4
 8000d10:	3301      	adds	r3, #1
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d1f4      	bne.n	8000d00 <_Unwind_VRS_Pop+0x44>
 8000d16:	63a8      	str	r0, [r5, #56]	; 0x38
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f000 f977 	bl	800100c <__gnu_Unwind_Restore_WMMXC>
 8000d1e:	2000      	movs	r0, #0
 8000d20:	e7da      	b.n	8000cd8 <_Unwind_VRS_Pop+0x1c>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d28:	b297      	uxth	r7, r2
 8000d2a:	d052      	beq.n	8000dd2 <_Unwind_VRS_Pop+0x116>
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d1d2      	bne.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000d30:	eb06 0807 	add.w	r8, r6, r7
 8000d34:	f1b8 0f20 	cmp.w	r8, #32
 8000d38:	d8cd      	bhi.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000d3a:	2e0f      	cmp	r6, #15
 8000d3c:	f240 8099 	bls.w	8000e72 <_Unwind_VRS_Pop+0x1b6>
 8000d40:	46b8      	mov	r8, r7
 8000d42:	2f00      	cmp	r7, #0
 8000d44:	f040 80db 	bne.w	8000efe <_Unwind_VRS_Pop+0x242>
 8000d48:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000d4a:	63aa      	str	r2, [r5, #56]	; 0x38
 8000d4c:	2e0f      	cmp	r6, #15
 8000d4e:	f240 80be 	bls.w	8000ece <_Unwind_VRS_Pop+0x212>
 8000d52:	f1b8 0f00 	cmp.w	r8, #0
 8000d56:	d002      	beq.n	8000d5e <_Unwind_VRS_Pop+0xa2>
 8000d58:	a802      	add	r0, sp, #8
 8000d5a:	f000 f90b 	bl	8000f74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000d5e:	2000      	movs	r0, #0
 8000d60:	b044      	add	sp, #272	; 0x110
 8000d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1b5      	bne.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000d6a:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8000d6c:	b297      	uxth	r7, r2
 8000d6e:	1d28      	adds	r0, r5, #4
 8000d70:	2601      	movs	r6, #1
 8000d72:	fa06 f103 	lsl.w	r1, r6, r3
 8000d76:	4239      	tst	r1, r7
 8000d78:	f103 0301 	add.w	r3, r3, #1
 8000d7c:	d002      	beq.n	8000d84 <_Unwind_VRS_Pop+0xc8>
 8000d7e:	6821      	ldr	r1, [r4, #0]
 8000d80:	6001      	str	r1, [r0, #0]
 8000d82:	3404      	adds	r4, #4
 8000d84:	2b10      	cmp	r3, #16
 8000d86:	f100 0004 	add.w	r0, r0, #4
 8000d8a:	d1f2      	bne.n	8000d72 <_Unwind_VRS_Pop+0xb6>
 8000d8c:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d90:	d1e5      	bne.n	8000d5e <_Unwind_VRS_Pop+0xa2>
 8000d92:	63ac      	str	r4, [r5, #56]	; 0x38
 8000d94:	e7a0      	b.n	8000cd8 <_Unwind_VRS_Pop+0x1c>
 8000d96:	0c16      	lsrs	r6, r2, #16
 8000d98:	b297      	uxth	r7, r2
 8000d9a:	19f3      	adds	r3, r6, r7
 8000d9c:	2b10      	cmp	r3, #16
 8000d9e:	d89a      	bhi.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	071a      	lsls	r2, r3, #28
 8000da4:	d45d      	bmi.n	8000e62 <_Unwind_VRS_Pop+0x1a6>
 8000da6:	ac22      	add	r4, sp, #136	; 0x88
 8000da8:	4620      	mov	r0, r4
 8000daa:	f000 f90d 	bl	8000fc8 <__gnu_Unwind_Save_WMMXD>
 8000dae:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8000db2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000db4:	b13f      	cbz	r7, 8000dc6 <_Unwind_VRS_Pop+0x10a>
 8000db6:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	f841 0b04 	str.w	r0, [r1], #4
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d1f9      	bne.n	8000dba <_Unwind_VRS_Pop+0xfe>
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	63ab      	str	r3, [r5, #56]	; 0x38
 8000dca:	f000 f8db 	bl	8000f84 <__gnu_Unwind_Restore_WMMXD>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	e782      	b.n	8000cd8 <_Unwind_VRS_Pop+0x1c>
 8000dd2:	19f2      	adds	r2, r6, r7
 8000dd4:	2a10      	cmp	r2, #16
 8000dd6:	f63f af7e 	bhi.w	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000dda:	2e0f      	cmp	r6, #15
 8000ddc:	f63f af7b 	bhi.w	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000de0:	682a      	ldr	r2, [r5, #0]
 8000de2:	07d1      	lsls	r1, r2, #31
 8000de4:	d508      	bpl.n	8000df8 <_Unwind_VRS_Pop+0x13c>
 8000de6:	4628      	mov	r0, r5
 8000de8:	f022 0203 	bic.w	r2, r2, #3
 8000dec:	f840 2b48 	str.w	r2, [r0], #72
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	f000 f8b3 	bl	8000f5c <__gnu_Unwind_Save_VFP>
 8000df6:	9b01      	ldr	r3, [sp, #4]
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	ac22      	add	r4, sp, #136	; 0x88
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f000 f8ad 	bl	8000f5c <__gnu_Unwind_Save_VFP>
 8000e02:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000e04:	9b01      	ldr	r3, [sp, #4]
 8000e06:	2f00      	cmp	r7, #0
 8000e08:	f000 8095 	beq.w	8000f36 <_Unwind_VRS_Pop+0x27a>
 8000e0c:	007f      	lsls	r7, r7, #1
 8000e0e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8000e12:	f04f 0800 	mov.w	r8, #0
 8000e16:	3c04      	subs	r4, #4
 8000e18:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 8000e1c:	f851 0b04 	ldr.w	r0, [r1], #4
 8000e20:	f844 0f04 	str.w	r0, [r4, #4]!
 8000e24:	4291      	cmp	r1, r2
 8000e26:	d1f9      	bne.n	8000e1c <_Unwind_VRS_Pop+0x160>
 8000e28:	f1b8 0f00 	cmp.w	r8, #0
 8000e2c:	d00f      	beq.n	8000e4e <_Unwind_VRS_Pop+0x192>
 8000e2e:	ac02      	add	r4, sp, #8
 8000e30:	2e10      	cmp	r6, #16
 8000e32:	4631      	mov	r1, r6
 8000e34:	bf38      	it	cc
 8000e36:	2110      	movcc	r1, #16
 8000e38:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8000e3c:	3984      	subs	r1, #132	; 0x84
 8000e3e:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 8000e42:	f852 0b04 	ldr.w	r0, [r2], #4
 8000e46:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e4a:	4294      	cmp	r4, r2
 8000e4c:	d1f9      	bne.n	8000e42 <_Unwind_VRS_Pop+0x186>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	f47f af7b 	bne.w	8000d4a <_Unwind_VRS_Pop+0x8e>
 8000e54:	ac22      	add	r4, sp, #136	; 0x88
 8000e56:	3204      	adds	r2, #4
 8000e58:	63aa      	str	r2, [r5, #56]	; 0x38
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f000 f87a 	bl	8000f54 <__gnu_Unwind_Restore_VFP>
 8000e60:	e77d      	b.n	8000d5e <_Unwind_VRS_Pop+0xa2>
 8000e62:	f023 0308 	bic.w	r3, r3, #8
 8000e66:	602b      	str	r3, [r5, #0]
 8000e68:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 8000e6c:	f000 f8ac 	bl	8000fc8 <__gnu_Unwind_Save_WMMXD>
 8000e70:	e799      	b.n	8000da6 <_Unwind_VRS_Pop+0xea>
 8000e72:	f1b8 0f10 	cmp.w	r8, #16
 8000e76:	682a      	ldr	r2, [r5, #0]
 8000e78:	d943      	bls.n	8000f02 <_Unwind_VRS_Pop+0x246>
 8000e7a:	07d0      	lsls	r0, r2, #31
 8000e7c:	f1a8 0810 	sub.w	r8, r8, #16
 8000e80:	d50b      	bpl.n	8000e9a <_Unwind_VRS_Pop+0x1de>
 8000e82:	4628      	mov	r0, r5
 8000e84:	f022 0201 	bic.w	r2, r2, #1
 8000e88:	f042 0202 	orr.w	r2, r2, #2
 8000e8c:	f840 2b48 	str.w	r2, [r0], #72
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	f000 f86b 	bl	8000f6c <__gnu_Unwind_Save_VFP_D>
 8000e96:	682a      	ldr	r2, [r5, #0]
 8000e98:	9b01      	ldr	r3, [sp, #4]
 8000e9a:	0751      	lsls	r1, r2, #29
 8000e9c:	d425      	bmi.n	8000eea <_Unwind_VRS_Pop+0x22e>
 8000e9e:	2e0f      	cmp	r6, #15
 8000ea0:	d804      	bhi.n	8000eac <_Unwind_VRS_Pop+0x1f0>
 8000ea2:	a822      	add	r0, sp, #136	; 0x88
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	f000 f861 	bl	8000f6c <__gnu_Unwind_Save_VFP_D>
 8000eaa:	9b01      	ldr	r3, [sp, #4]
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	ac02      	add	r4, sp, #8
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f000 f863 	bl	8000f7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000eb6:	f1c6 0110 	rsb	r1, r6, #16
 8000eba:	2900      	cmp	r1, #0
 8000ebc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000ebe:	9b01      	ldr	r3, [sp, #4]
 8000ec0:	ddb6      	ble.n	8000e30 <_Unwind_VRS_Pop+0x174>
 8000ec2:	ac22      	add	r4, sp, #136	; 0x88
 8000ec4:	004f      	lsls	r7, r1, #1
 8000ec6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8000eca:	4611      	mov	r1, r2
 8000ecc:	e7a3      	b.n	8000e16 <_Unwind_VRS_Pop+0x15a>
 8000ece:	a822      	add	r0, sp, #136	; 0x88
 8000ed0:	f000 f848 	bl	8000f64 <__gnu_Unwind_Restore_VFP_D>
 8000ed4:	e73d      	b.n	8000d52 <_Unwind_VRS_Pop+0x96>
 8000ed6:	f023 0310 	bic.w	r3, r3, #16
 8000eda:	602b      	str	r3, [r5, #0]
 8000edc:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8000ee0:	9201      	str	r2, [sp, #4]
 8000ee2:	f000 f89d 	bl	8001020 <__gnu_Unwind_Save_WMMXC>
 8000ee6:	9a01      	ldr	r2, [sp, #4]
 8000ee8:	e701      	b.n	8000cee <_Unwind_VRS_Pop+0x32>
 8000eea:	4628      	mov	r0, r5
 8000eec:	f022 0204 	bic.w	r2, r2, #4
 8000ef0:	f840 2bd0 	str.w	r2, [r0], #208
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	f000 f841 	bl	8000f7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000efa:	9b01      	ldr	r3, [sp, #4]
 8000efc:	e7cf      	b.n	8000e9e <_Unwind_VRS_Pop+0x1e2>
 8000efe:	682a      	ldr	r2, [r5, #0]
 8000f00:	e7cb      	b.n	8000e9a <_Unwind_VRS_Pop+0x1de>
 8000f02:	07d0      	lsls	r0, r2, #31
 8000f04:	d50a      	bpl.n	8000f1c <_Unwind_VRS_Pop+0x260>
 8000f06:	4628      	mov	r0, r5
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	f042 0202 	orr.w	r2, r2, #2
 8000f10:	f840 2b48 	str.w	r2, [r0], #72
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	f000 f829 	bl	8000f6c <__gnu_Unwind_Save_VFP_D>
 8000f1a:	9b01      	ldr	r3, [sp, #4]
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	ac22      	add	r4, sp, #136	; 0x88
 8000f20:	4620      	mov	r0, r4
 8000f22:	f000 f823 	bl	8000f6c <__gnu_Unwind_Save_VFP_D>
 8000f26:	46b8      	mov	r8, r7
 8000f28:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000f2a:	9b01      	ldr	r3, [sp, #4]
 8000f2c:	2f00      	cmp	r7, #0
 8000f2e:	f47f af6d 	bne.w	8000e0c <_Unwind_VRS_Pop+0x150>
 8000f32:	460a      	mov	r2, r1
 8000f34:	e709      	b.n	8000d4a <_Unwind_VRS_Pop+0x8e>
 8000f36:	460a      	mov	r2, r1
 8000f38:	e78d      	b.n	8000e56 <_Unwind_VRS_Pop+0x19a>
 8000f3a:	bf00      	nop

08000f3c <__restore_core_regs>:
 8000f3c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f40:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f44:	469c      	mov	ip, r3
 8000f46:	46a6      	mov	lr, r4
 8000f48:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f4c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f50:	46e5      	mov	sp, ip
 8000f52:	bd00      	pop	{pc}

08000f54 <__gnu_Unwind_Restore_VFP>:
 8000f54:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__gnu_Unwind_Save_VFP>:
 8000f5c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <__gnu_Unwind_Restore_VFP_D>:
 8000f64:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <__gnu_Unwind_Save_VFP_D>:
 8000f6c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f74:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f7c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <__gnu_Unwind_Restore_WMMXD>:
 8000f84:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f88:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f8c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f90:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f94:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f98:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f9c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000fa0:	ecf0 7102 	ldfe	f7, [r0], #8
 8000fa4:	ecf0 8102 	ldfp	f0, [r0], #8
 8000fa8:	ecf0 9102 	ldfp	f1, [r0], #8
 8000fac:	ecf0 a102 	ldfp	f2, [r0], #8
 8000fb0:	ecf0 b102 	ldfp	f3, [r0], #8
 8000fb4:	ecf0 c102 	ldfp	f4, [r0], #8
 8000fb8:	ecf0 d102 	ldfp	f5, [r0], #8
 8000fbc:	ecf0 e102 	ldfp	f6, [r0], #8
 8000fc0:	ecf0 f102 	ldfp	f7, [r0], #8
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__gnu_Unwind_Save_WMMXD>:
 8000fc8:	ece0 0102 	stfe	f0, [r0], #8
 8000fcc:	ece0 1102 	stfe	f1, [r0], #8
 8000fd0:	ece0 2102 	stfe	f2, [r0], #8
 8000fd4:	ece0 3102 	stfe	f3, [r0], #8
 8000fd8:	ece0 4102 	stfe	f4, [r0], #8
 8000fdc:	ece0 5102 	stfe	f5, [r0], #8
 8000fe0:	ece0 6102 	stfe	f6, [r0], #8
 8000fe4:	ece0 7102 	stfe	f7, [r0], #8
 8000fe8:	ece0 8102 	stfp	f0, [r0], #8
 8000fec:	ece0 9102 	stfp	f1, [r0], #8
 8000ff0:	ece0 a102 	stfp	f2, [r0], #8
 8000ff4:	ece0 b102 	stfp	f3, [r0], #8
 8000ff8:	ece0 c102 	stfp	f4, [r0], #8
 8000ffc:	ece0 d102 	stfp	f5, [r0], #8
 8001000:	ece0 e102 	stfp	f6, [r0], #8
 8001004:	ece0 f102 	stfp	f7, [r0], #8
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <__gnu_Unwind_Restore_WMMXC>:
 800100c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001010:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001014:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001018:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <__gnu_Unwind_Save_WMMXC>:
 8001020:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001024:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001028:	fca0 a101 	stc2	1, cr10, [r0], #4
 800102c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <_Unwind_RaiseException>:
 8001034:	46ec      	mov	ip, sp
 8001036:	b500      	push	{lr}
 8001038:	e92d 5000 	stmdb	sp!, {ip, lr}
 800103c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001048:	a901      	add	r1, sp, #4
 800104a:	f7ff fbdd 	bl	8000808 <__gnu_Unwind_RaiseException>
 800104e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001052:	b012      	add	sp, #72	; 0x48
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <_Unwind_Resume>:
 8001058:	46ec      	mov	ip, sp
 800105a:	b500      	push	{lr}
 800105c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001060:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	e92d 000c 	stmdb	sp!, {r2, r3}
 800106c:	a901      	add	r1, sp, #4
 800106e:	f7ff fc05 	bl	800087c <__gnu_Unwind_Resume>
 8001072:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001076:	b012      	add	sp, #72	; 0x48
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <_Unwind_Resume_or_Rethrow>:
 800107c:	46ec      	mov	ip, sp
 800107e:	b500      	push	{lr}
 8001080:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001084:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001090:	a901      	add	r1, sp, #4
 8001092:	f7ff fc15 	bl	80008c0 <__gnu_Unwind_Resume_or_Rethrow>
 8001096:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800109a:	b012      	add	sp, #72	; 0x48
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <_Unwind_ForcedUnwind>:
 80010a0:	46ec      	mov	ip, sp
 80010a2:	b500      	push	{lr}
 80010a4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010a8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010b4:	ab01      	add	r3, sp, #4
 80010b6:	f7ff fbd7 	bl	8000868 <__gnu_Unwind_ForcedUnwind>
 80010ba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010be:	b012      	add	sp, #72	; 0x48
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <_Unwind_Backtrace>:
 80010c4:	46ec      	mov	ip, sp
 80010c6:	b500      	push	{lr}
 80010c8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010d8:	aa01      	add	r2, sp, #4
 80010da:	f7ff fc47 	bl	800096c <__gnu_Unwind_Backtrace>
 80010de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010e2:	b012      	add	sp, #72	; 0x48
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <next_unwind_byte>:
 80010e8:	7a02      	ldrb	r2, [r0, #8]
 80010ea:	b982      	cbnz	r2, 800110e <next_unwind_byte+0x26>
 80010ec:	7a43      	ldrb	r3, [r0, #9]
 80010ee:	b1ab      	cbz	r3, 800111c <next_unwind_byte+0x34>
 80010f0:	6842      	ldr	r2, [r0, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b410      	push	{r4}
 80010f6:	7243      	strb	r3, [r0, #9]
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	2103      	movs	r1, #3
 80010fc:	1d14      	adds	r4, r2, #4
 80010fe:	7201      	strb	r1, [r0, #8]
 8001100:	021a      	lsls	r2, r3, #8
 8001102:	6044      	str	r4, [r0, #4]
 8001104:	6002      	str	r2, [r0, #0]
 8001106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800110a:	0e18      	lsrs	r0, r3, #24
 800110c:	4770      	bx	lr
 800110e:	6803      	ldr	r3, [r0, #0]
 8001110:	3a01      	subs	r2, #1
 8001112:	7202      	strb	r2, [r0, #8]
 8001114:	021a      	lsls	r2, r3, #8
 8001116:	6002      	str	r2, [r0, #0]
 8001118:	0e18      	lsrs	r0, r3, #24
 800111a:	4770      	bx	lr
 800111c:	20b0      	movs	r0, #176	; 0xb0
 800111e:	4770      	bx	lr

08001120 <_Unwind_GetGR.constprop.0>:
 8001120:	b500      	push	{lr}
 8001122:	b085      	sub	sp, #20
 8001124:	aa03      	add	r2, sp, #12
 8001126:	2300      	movs	r3, #0
 8001128:	9200      	str	r2, [sp, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	220c      	movs	r2, #12
 800112e:	f7ff fbd7 	bl	80008e0 <_Unwind_VRS_Get>
 8001132:	9803      	ldr	r0, [sp, #12]
 8001134:	b005      	add	sp, #20
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop

0800113c <unwind_UCB_from_context>:
 800113c:	e7f0      	b.n	8001120 <_Unwind_GetGR.constprop.0>
 800113e:	bf00      	nop

08001140 <__gnu_unwind_execute>:
 8001140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001144:	4605      	mov	r5, r0
 8001146:	b085      	sub	sp, #20
 8001148:	460e      	mov	r6, r1
 800114a:	f04f 0800 	mov.w	r8, #0
 800114e:	4630      	mov	r0, r6
 8001150:	f7ff ffca 	bl	80010e8 <next_unwind_byte>
 8001154:	28b0      	cmp	r0, #176	; 0xb0
 8001156:	4604      	mov	r4, r0
 8001158:	f000 80b1 	beq.w	80012be <__gnu_unwind_execute+0x17e>
 800115c:	0607      	lsls	r7, r0, #24
 800115e:	d520      	bpl.n	80011a2 <__gnu_unwind_execute+0x62>
 8001160:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001164:	2b80      	cmp	r3, #128	; 0x80
 8001166:	d065      	beq.n	8001234 <__gnu_unwind_execute+0xf4>
 8001168:	2b90      	cmp	r3, #144	; 0x90
 800116a:	d036      	beq.n	80011da <__gnu_unwind_execute+0x9a>
 800116c:	2ba0      	cmp	r3, #160	; 0xa0
 800116e:	d078      	beq.n	8001262 <__gnu_unwind_execute+0x122>
 8001170:	2bb0      	cmp	r3, #176	; 0xb0
 8001172:	d047      	beq.n	8001204 <__gnu_unwind_execute+0xc4>
 8001174:	2bc0      	cmp	r3, #192	; 0xc0
 8001176:	f000 808a 	beq.w	800128e <__gnu_unwind_execute+0x14e>
 800117a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800117e:	2bd0      	cmp	r3, #208	; 0xd0
 8001180:	d10b      	bne.n	800119a <__gnu_unwind_execute+0x5a>
 8001182:	f000 0207 	and.w	r2, r0, #7
 8001186:	3201      	adds	r2, #1
 8001188:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800118c:	2305      	movs	r3, #5
 800118e:	2101      	movs	r1, #1
 8001190:	4628      	mov	r0, r5
 8001192:	f7ff fd93 	bl	8000cbc <_Unwind_VRS_Pop>
 8001196:	2800      	cmp	r0, #0
 8001198:	d0d9      	beq.n	800114e <__gnu_unwind_execute+0xe>
 800119a:	2009      	movs	r0, #9
 800119c:	b005      	add	sp, #20
 800119e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011a2:	f10d 090c 	add.w	r9, sp, #12
 80011a6:	2300      	movs	r3, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	0087      	lsls	r7, r0, #2
 80011ac:	f8cd 9000 	str.w	r9, [sp]
 80011b0:	220d      	movs	r2, #13
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff fb94 	bl	80008e0 <_Unwind_VRS_Get>
 80011b8:	b2ff      	uxtb	r7, r7
 80011ba:	9b03      	ldr	r3, [sp, #12]
 80011bc:	f8cd 9000 	str.w	r9, [sp]
 80011c0:	3704      	adds	r7, #4
 80011c2:	0660      	lsls	r0, r4, #25
 80011c4:	bf4c      	ite	mi
 80011c6:	1bdf      	submi	r7, r3, r7
 80011c8:	18ff      	addpl	r7, r7, r3
 80011ca:	2300      	movs	r3, #0
 80011cc:	4619      	mov	r1, r3
 80011ce:	220d      	movs	r2, #13
 80011d0:	4628      	mov	r0, r5
 80011d2:	9703      	str	r7, [sp, #12]
 80011d4:	f7ff fba6 	bl	8000924 <_Unwind_VRS_Set>
 80011d8:	e7b9      	b.n	800114e <__gnu_unwind_execute+0xe>
 80011da:	f000 030d 	and.w	r3, r0, #13
 80011de:	2b0d      	cmp	r3, #13
 80011e0:	d0db      	beq.n	800119a <__gnu_unwind_execute+0x5a>
 80011e2:	af03      	add	r7, sp, #12
 80011e4:	2300      	movs	r3, #0
 80011e6:	f000 020f 	and.w	r2, r0, #15
 80011ea:	4619      	mov	r1, r3
 80011ec:	9700      	str	r7, [sp, #0]
 80011ee:	4628      	mov	r0, r5
 80011f0:	f7ff fb76 	bl	80008e0 <_Unwind_VRS_Get>
 80011f4:	2300      	movs	r3, #0
 80011f6:	9700      	str	r7, [sp, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	220d      	movs	r2, #13
 80011fc:	4628      	mov	r0, r5
 80011fe:	f7ff fb91 	bl	8000924 <_Unwind_VRS_Set>
 8001202:	e7a4      	b.n	800114e <__gnu_unwind_execute+0xe>
 8001204:	28b1      	cmp	r0, #177	; 0xb1
 8001206:	d05f      	beq.n	80012c8 <__gnu_unwind_execute+0x188>
 8001208:	28b2      	cmp	r0, #178	; 0xb2
 800120a:	f000 80cc 	beq.w	80013a6 <__gnu_unwind_execute+0x266>
 800120e:	28b3      	cmp	r0, #179	; 0xb3
 8001210:	d07e      	beq.n	8001310 <__gnu_unwind_execute+0x1d0>
 8001212:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001216:	2bb4      	cmp	r3, #180	; 0xb4
 8001218:	d0bf      	beq.n	800119a <__gnu_unwind_execute+0x5a>
 800121a:	f000 0207 	and.w	r2, r0, #7
 800121e:	3201      	adds	r2, #1
 8001220:	2301      	movs	r3, #1
 8001222:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001226:	4619      	mov	r1, r3
 8001228:	4628      	mov	r0, r5
 800122a:	f7ff fd47 	bl	8000cbc <_Unwind_VRS_Pop>
 800122e:	2800      	cmp	r0, #0
 8001230:	d08d      	beq.n	800114e <__gnu_unwind_execute+0xe>
 8001232:	e7b2      	b.n	800119a <__gnu_unwind_execute+0x5a>
 8001234:	4630      	mov	r0, r6
 8001236:	f7ff ff57 	bl	80010e8 <next_unwind_byte>
 800123a:	0224      	lsls	r4, r4, #8
 800123c:	4304      	orrs	r4, r0
 800123e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001242:	d0aa      	beq.n	800119a <__gnu_unwind_execute+0x5a>
 8001244:	0124      	lsls	r4, r4, #4
 8001246:	2300      	movs	r3, #0
 8001248:	b2a2      	uxth	r2, r4
 800124a:	4619      	mov	r1, r3
 800124c:	4628      	mov	r0, r5
 800124e:	f7ff fd35 	bl	8000cbc <_Unwind_VRS_Pop>
 8001252:	2800      	cmp	r0, #0
 8001254:	d1a1      	bne.n	800119a <__gnu_unwind_execute+0x5a>
 8001256:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800125a:	bf18      	it	ne
 800125c:	f04f 0801 	movne.w	r8, #1
 8001260:	e775      	b.n	800114e <__gnu_unwind_execute+0xe>
 8001262:	43c2      	mvns	r2, r0
 8001264:	f002 0307 	and.w	r3, r2, #7
 8001268:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800126c:	411a      	asrs	r2, r3
 800126e:	0701      	lsls	r1, r0, #28
 8001270:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	bf48      	it	mi
 800127a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800127e:	4619      	mov	r1, r3
 8001280:	4628      	mov	r0, r5
 8001282:	f7ff fd1b 	bl	8000cbc <_Unwind_VRS_Pop>
 8001286:	2800      	cmp	r0, #0
 8001288:	f43f af61 	beq.w	800114e <__gnu_unwind_execute+0xe>
 800128c:	e785      	b.n	800119a <__gnu_unwind_execute+0x5a>
 800128e:	28c6      	cmp	r0, #198	; 0xc6
 8001290:	d051      	beq.n	8001336 <__gnu_unwind_execute+0x1f6>
 8001292:	28c7      	cmp	r0, #199	; 0xc7
 8001294:	d05a      	beq.n	800134c <__gnu_unwind_execute+0x20c>
 8001296:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800129a:	2bc0      	cmp	r3, #192	; 0xc0
 800129c:	d069      	beq.n	8001372 <__gnu_unwind_execute+0x232>
 800129e:	28c8      	cmp	r0, #200	; 0xc8
 80012a0:	d075      	beq.n	800138e <__gnu_unwind_execute+0x24e>
 80012a2:	28c9      	cmp	r0, #201	; 0xc9
 80012a4:	f47f af79 	bne.w	800119a <__gnu_unwind_execute+0x5a>
 80012a8:	4630      	mov	r0, r6
 80012aa:	f7ff ff1d 	bl	80010e8 <next_unwind_byte>
 80012ae:	0302      	lsls	r2, r0, #12
 80012b0:	f000 000f 	and.w	r0, r0, #15
 80012b4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80012b8:	3001      	adds	r0, #1
 80012ba:	4302      	orrs	r2, r0
 80012bc:	e766      	b.n	800118c <__gnu_unwind_execute+0x4c>
 80012be:	f1b8 0f00 	cmp.w	r8, #0
 80012c2:	d014      	beq.n	80012ee <__gnu_unwind_execute+0x1ae>
 80012c4:	2000      	movs	r0, #0
 80012c6:	e769      	b.n	800119c <__gnu_unwind_execute+0x5c>
 80012c8:	4630      	mov	r0, r6
 80012ca:	f7ff ff0d 	bl	80010e8 <next_unwind_byte>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	f43f af63 	beq.w	800119a <__gnu_unwind_execute+0x5a>
 80012d4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012d8:	f47f af5f 	bne.w	800119a <__gnu_unwind_execute+0x5a>
 80012dc:	4602      	mov	r2, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	4628      	mov	r0, r5
 80012e2:	f7ff fceb 	bl	8000cbc <_Unwind_VRS_Pop>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	f43f af31 	beq.w	800114e <__gnu_unwind_execute+0xe>
 80012ec:	e755      	b.n	800119a <__gnu_unwind_execute+0x5a>
 80012ee:	ac03      	add	r4, sp, #12
 80012f0:	4643      	mov	r3, r8
 80012f2:	220e      	movs	r2, #14
 80012f4:	4641      	mov	r1, r8
 80012f6:	9400      	str	r4, [sp, #0]
 80012f8:	4628      	mov	r0, r5
 80012fa:	f7ff faf1 	bl	80008e0 <_Unwind_VRS_Get>
 80012fe:	9400      	str	r4, [sp, #0]
 8001300:	4628      	mov	r0, r5
 8001302:	4643      	mov	r3, r8
 8001304:	220f      	movs	r2, #15
 8001306:	4641      	mov	r1, r8
 8001308:	f7ff fb0c 	bl	8000924 <_Unwind_VRS_Set>
 800130c:	4640      	mov	r0, r8
 800130e:	e745      	b.n	800119c <__gnu_unwind_execute+0x5c>
 8001310:	4630      	mov	r0, r6
 8001312:	f7ff fee9 	bl	80010e8 <next_unwind_byte>
 8001316:	0301      	lsls	r1, r0, #12
 8001318:	f000 000f 	and.w	r0, r0, #15
 800131c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001320:	1c42      	adds	r2, r0, #1
 8001322:	2301      	movs	r3, #1
 8001324:	430a      	orrs	r2, r1
 8001326:	4628      	mov	r0, r5
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fcc7 	bl	8000cbc <_Unwind_VRS_Pop>
 800132e:	2800      	cmp	r0, #0
 8001330:	f43f af0d 	beq.w	800114e <__gnu_unwind_execute+0xe>
 8001334:	e731      	b.n	800119a <__gnu_unwind_execute+0x5a>
 8001336:	4630      	mov	r0, r6
 8001338:	f7ff fed6 	bl	80010e8 <next_unwind_byte>
 800133c:	0301      	lsls	r1, r0, #12
 800133e:	f000 000f 	and.w	r0, r0, #15
 8001342:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001346:	1c42      	adds	r2, r0, #1
 8001348:	2303      	movs	r3, #3
 800134a:	e7eb      	b.n	8001324 <__gnu_unwind_execute+0x1e4>
 800134c:	4630      	mov	r0, r6
 800134e:	f7ff fecb 	bl	80010e8 <next_unwind_byte>
 8001352:	4602      	mov	r2, r0
 8001354:	2800      	cmp	r0, #0
 8001356:	f43f af20 	beq.w	800119a <__gnu_unwind_execute+0x5a>
 800135a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800135e:	f47f af1c 	bne.w	800119a <__gnu_unwind_execute+0x5a>
 8001362:	2104      	movs	r1, #4
 8001364:	4628      	mov	r0, r5
 8001366:	f7ff fca9 	bl	8000cbc <_Unwind_VRS_Pop>
 800136a:	2800      	cmp	r0, #0
 800136c:	f43f aeef 	beq.w	800114e <__gnu_unwind_execute+0xe>
 8001370:	e713      	b.n	800119a <__gnu_unwind_execute+0x5a>
 8001372:	f000 020f 	and.w	r2, r0, #15
 8001376:	3201      	adds	r2, #1
 8001378:	2303      	movs	r3, #3
 800137a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800137e:	4619      	mov	r1, r3
 8001380:	4628      	mov	r0, r5
 8001382:	f7ff fc9b 	bl	8000cbc <_Unwind_VRS_Pop>
 8001386:	2800      	cmp	r0, #0
 8001388:	f43f aee1 	beq.w	800114e <__gnu_unwind_execute+0xe>
 800138c:	e705      	b.n	800119a <__gnu_unwind_execute+0x5a>
 800138e:	4630      	mov	r0, r6
 8001390:	f7ff feaa 	bl	80010e8 <next_unwind_byte>
 8001394:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001398:	f000 030f 	and.w	r3, r0, #15
 800139c:	3210      	adds	r2, #16
 800139e:	3301      	adds	r3, #1
 80013a0:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013a4:	e6f2      	b.n	800118c <__gnu_unwind_execute+0x4c>
 80013a6:	2300      	movs	r3, #0
 80013a8:	f10d 090c 	add.w	r9, sp, #12
 80013ac:	220d      	movs	r2, #13
 80013ae:	4619      	mov	r1, r3
 80013b0:	f8cd 9000 	str.w	r9, [sp]
 80013b4:	4628      	mov	r0, r5
 80013b6:	f7ff fa93 	bl	80008e0 <_Unwind_VRS_Get>
 80013ba:	4630      	mov	r0, r6
 80013bc:	f7ff fe94 	bl	80010e8 <next_unwind_byte>
 80013c0:	0602      	lsls	r2, r0, #24
 80013c2:	f04f 0702 	mov.w	r7, #2
 80013c6:	d50c      	bpl.n	80013e2 <__gnu_unwind_execute+0x2a2>
 80013c8:	9b03      	ldr	r3, [sp, #12]
 80013ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80013ce:	40b8      	lsls	r0, r7
 80013d0:	4403      	add	r3, r0
 80013d2:	4630      	mov	r0, r6
 80013d4:	9303      	str	r3, [sp, #12]
 80013d6:	f7ff fe87 	bl	80010e8 <next_unwind_byte>
 80013da:	0603      	lsls	r3, r0, #24
 80013dc:	f107 0707 	add.w	r7, r7, #7
 80013e0:	d4f2      	bmi.n	80013c8 <__gnu_unwind_execute+0x288>
 80013e2:	9b03      	ldr	r3, [sp, #12]
 80013e4:	f8cd 9000 	str.w	r9, [sp]
 80013e8:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 80013ec:	f503 7201 	add.w	r2, r3, #516	; 0x204
 80013f0:	40bc      	lsls	r4, r7
 80013f2:	2300      	movs	r3, #0
 80013f4:	4414      	add	r4, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	220d      	movs	r2, #13
 80013fa:	4628      	mov	r0, r5
 80013fc:	9403      	str	r4, [sp, #12]
 80013fe:	f7ff fa91 	bl	8000924 <_Unwind_VRS_Set>
 8001402:	e6a4      	b.n	800114e <__gnu_unwind_execute+0xe>

08001404 <__gnu_unwind_frame>:
 8001404:	b510      	push	{r4, lr}
 8001406:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001408:	b084      	sub	sp, #16
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	2003      	movs	r0, #3
 800140e:	f88d 000c 	strb.w	r0, [sp, #12]
 8001412:	79dc      	ldrb	r4, [r3, #7]
 8001414:	f88d 400d 	strb.w	r4, [sp, #13]
 8001418:	0212      	lsls	r2, r2, #8
 800141a:	3308      	adds	r3, #8
 800141c:	4608      	mov	r0, r1
 800141e:	a901      	add	r1, sp, #4
 8001420:	9201      	str	r2, [sp, #4]
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	f7ff fe8c 	bl	8001140 <__gnu_unwind_execute>
 8001428:	b004      	add	sp, #16
 800142a:	bd10      	pop	{r4, pc}

0800142c <_Unwind_GetRegionStart>:
 800142c:	b508      	push	{r3, lr}
 800142e:	f7ff fe85 	bl	800113c <unwind_UCB_from_context>
 8001432:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001434:	bd08      	pop	{r3, pc}
 8001436:	bf00      	nop

08001438 <_Unwind_GetLanguageSpecificData>:
 8001438:	b508      	push	{r3, lr}
 800143a:	f7ff fe7f 	bl	800113c <unwind_UCB_from_context>
 800143e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001440:	79c3      	ldrb	r3, [r0, #7]
 8001442:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001446:	3008      	adds	r0, #8
 8001448:	bd08      	pop	{r3, pc}
 800144a:	bf00      	nop

0800144c <_Unwind_GetDataRelBase>:
 800144c:	b508      	push	{r3, lr}
 800144e:	f00a fb7e 	bl	800bb4e <abort>
 8001452:	bf00      	nop

08001454 <_Unwind_GetTextRelBase>:
 8001454:	b508      	push	{r3, lr}
 8001456:	f7ff fff9 	bl	800144c <_Unwind_GetDataRelBase>
 800145a:	bf00      	nop

0800145c <__aeabi_idiv0>:
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_sbrk_r>:
static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit; // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void* _sbrk_r(struct _reent *pReent, int incr) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b092      	sub	sp, #72	; 0x48
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
	static char *currentHeapEnd = &__HeapBase;
#ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
	if (TotalHeapSize == 0) {
 80014aa:	4b37      	ldr	r3, [pc, #220]	; (8001588 <_sbrk_r+0xe8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10e      	bne.n	80014d0 <_sbrk_r+0x30>
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
				- (&__HeapBase)) - ISR_STACK_LENGTH_BYTES;
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <_sbrk_r+0xec>)
 80014b4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80014b8:	4a35      	ldr	r2, [pc, #212]	; (8001590 <_sbrk_r+0xf0>)
 80014ba:	1a9b      	subs	r3, r3, r2
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 80014bc:	4a35      	ldr	r2, [pc, #212]	; (8001594 <_sbrk_r+0xf4>)
 80014be:	6013      	str	r3, [r2, #0]
				- (&__HeapBase)) - ISR_STACK_LENGTH_BYTES;
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <_sbrk_r+0xec>)
 80014c2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80014c6:	4a32      	ldr	r2, [pc, #200]	; (8001590 <_sbrk_r+0xf0>)
 80014c8:	1a9b      	subs	r3, r3, r2
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <_sbrk_r+0xe8>)
 80014ce:	601a      	str	r2, [r3, #0]
	extern char _edata;
	extern char _sbss;
	extern char _ebss;
	extern char _end;
	extern char _estack;
	char* p_sdata = &_sdata;
 80014d0:	4b31      	ldr	r3, [pc, #196]	; (8001598 <_sbrk_r+0xf8>)
 80014d2:	647b      	str	r3, [r7, #68]	; 0x44
	char* p_edata = &_edata;
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <_sbrk_r+0xfc>)
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
	char* p_sbss = &_sbss;
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <_sbrk_r+0x100>)
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
	char* p_ebss = &_ebss;
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <_sbrk_r+0x104>)
 80014de:	63bb      	str	r3, [r7, #56]	; 0x38
	char* p_end = &_end;
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <_sbrk_r+0x108>)
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
	char* p_estack = &_estack;
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <_sbrk_r+0xec>)
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
	char* my_stack_ptr = stack_ptr;
 80014e8:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
	char* my_heap_limit = &__HeapLimit;
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <_sbrk_r+0xec>)
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
	char* my_heap_isr_stack_limit = &__HeapLimit - ISR_STACK_LENGTH_BYTES;
 80014f0:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <_sbrk_r+0x10c>)
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24

	char *limit =
			(xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) ?
 80014f4:	f008 fd56 	bl	8009fa4 <xTaskGetSchedulerState>
 80014f8:	4603      	mov	r3, r0
					stack_ptr : // Before scheduler is started, limit is stack pointer (risky!)
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <_sbrk_r+0x62>
 80014fe:	466b      	mov	r3, sp
 8001500:	e000      	b.n	8001504 <_sbrk_r+0x64>
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <_sbrk_r+0x10c>)
	char *limit =
 8001504:	623b      	str	r3, [r7, #32]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001506:	f3ef 8211 	mrs	r2, BASEPRI
 800150a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150e:	b672      	cpsid	i
 8001510:	f383 8811 	msr	BASEPRI, r3
 8001514:	f3bf 8f6f 	isb	sy
 8001518:	f3bf 8f4f 	dsb	sy
 800151c:	b662      	cpsie	i
 800151e:	617a      	str	r2, [r7, #20]
 8001520:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001522:	697b      	ldr	r3, [r7, #20]
					&__HeapLimit - ISR_STACK_LENGTH_BYTES; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
	DRN_ENTER_CRITICAL_SECTION(usis);
 8001524:	61fb      	str	r3, [r7, #28]
	char *previousHeapEnd = currentHeapEnd;
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <_sbrk_r+0x110>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	61bb      	str	r3, [r7, #24]
	if (currentHeapEnd + incr > limit) {
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <_sbrk_r+0x110>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	4413      	add	r3, r2
 8001534:	6a3a      	ldr	r2, [r7, #32]
 8001536:	429a      	cmp	r2, r3
 8001538:	d209      	bcs.n	800154e <_sbrk_r+0xae>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f383 8811 	msr	BASEPRI, r3
		// Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
		{
			extern void vApplicationMallocFailedHook(void);
			DRN_EXIT_CRITICAL_SECTION(usis);
			vApplicationMallocFailedHook();
 8001544:	f7ff ffa5 	bl	8001492 <vApplicationMallocFailedHook>
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
            DRN_EXIT_CRITICAL_SECTION(usis);
        #endif
		return (char*) -1; // the malloc-family routine that called sbrk will return 0
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	e017      	b.n	800157e <_sbrk_r+0xde>
	}
	// 'incr' of memory is available: update accounting and return it.
	currentHeapEnd += incr;
 800154e:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <_sbrk_r+0x110>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	4413      	add	r3, r2
 8001556:	4a16      	ldr	r2, [pc, #88]	; (80015b0 <_sbrk_r+0x110>)
 8001558:	6013      	str	r3, [r2, #0]
	heapBytesRemaining -= incr;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <_sbrk_r+0xf4>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	4a0c      	ldr	r2, [pc, #48]	; (8001594 <_sbrk_r+0xf4>)
 8001564:	6013      	str	r3, [r2, #0]
#ifndef NDEBUG
	totalBytesProvidedBySBRK += incr;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_sbrk_r+0x114>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	4413      	add	r3, r2
 800156e:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <_sbrk_r+0x114>)
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f383 8811 	msr	BASEPRI, r3
#endif
	DRN_EXIT_CRITICAL_SECTION(usis);
	return (char*) previousHeapEnd;
 800157c:	69bb      	ldr	r3, [r7, #24]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3748      	adds	r7, #72	; 0x48
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000ec0 	.word	0x20000ec0
 800158c:	20080000 	.word	0x20080000
 8001590:	20001448 	.word	0x20001448
 8001594:	2000009c 	.word	0x2000009c
 8001598:	20000000 	.word	0x20000000
 800159c:	20000080 	.word	0x20000080
 80015a0:	20000080 	.word	0x20000080
 80015a4:	20001448 	.word	0x20001448
 80015a8:	20001448 	.word	0x20001448
 80015ac:	2007fe00 	.word	0x2007fe00
 80015b0:	20000000 	.word	0x20000000
 80015b4:	200000a0 	.word	0x200000a0

080015b8 <__malloc_lock>:
;

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r) {
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	__asm volatile
 80015c0:	f3ef 8211 	mrs	r2, BASEPRI
 80015c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c8:	b672      	cpsid	i
 80015ca:	f383 8811 	msr	BASEPRI, r3
 80015ce:	f3bf 8f6f 	isb	sy
 80015d2:	f3bf 8f4f 	dsb	sy
 80015d6:	b662      	cpsie	i
 80015d8:	60fa      	str	r2, [r7, #12]
 80015da:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 80015dc:	68fb      	ldr	r3, [r7, #12]
#if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
 80015de:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <__malloc_lock+0x38>)
 80015e0:	6013      	str	r3, [r2, #0]
		taskDISABLE_INTERRUPTS();
		for( ;; );
	}
	vTaskSuspendAll();
#endif
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200000a4 	.word	0x200000a4

080015f4 <__malloc_unlock>:
;
void __malloc_unlock(struct _reent *r) {
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
#if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <__malloc_unlock+0x20>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f383 8811 	msr	BASEPRI, r3
  #else
	(void) xTaskResumeAll();
#endif
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	200000a4 	.word	0x200000a4

08001618 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void* pvPortMalloc(size_t xSize) PRIVILEGED_FUNCTION {
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	void *p = malloc(xSize);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f00a fb8f 	bl	800bd44 <malloc>
 8001626:	4603      	mov	r3, r0
 8001628:	60fb      	str	r3, [r7, #12]
	return p;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <vPortFree>:
void vPortFree(void *pv) PRIVILEGED_FUNCTION {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	free(pv);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f00a fb89 	bl	800bd54 <free>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001650:	f002 fcaf 	bl	8003fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001654:	f000 f81e 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001658:	f000 f980 	bl	800195c <MX_GPIO_Init>
  MX_ETH_Init();
 800165c:	f000 f8e0 	bl	8001820 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001660:	f000 f91e 	bl	80018a0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001664:	f000 f94c 	bl	8001900 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8001668:	f000 f8a4 	bl	80017b4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800166c:	f006 fef6 	bl	800845c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <main+0x3c>)
 8001672:	2100      	movs	r1, #0
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <main+0x40>)
 8001676:	f006 ff5b 	bl	8008530 <osThreadNew>
 800167a:	4602      	mov	r2, r0
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <main+0x44>)
 800167e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001680:	f006 ff20 	bl	80084c4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001684:	e7fe      	b.n	8001684 <main+0x38>
 8001686:	bf00      	nop
 8001688:	0800c818 	.word	0x0800c818
 800168c:	08001aa1 	.word	0x08001aa1
 8001690:	20000ec8 	.word	0x20000ec8

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0b8      	sub	sp, #224	; 0xe0
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800169e:	2234      	movs	r2, #52	; 0x34
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f00a fb82 	bl	800bdac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	2290      	movs	r2, #144	; 0x90
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f00a fb73 	bl	800bdac <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80016c6:	f004 fc43 	bl	8005f50 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <SystemClock_Config+0x114>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a36      	ldr	r2, [pc, #216]	; (80017a8 <SystemClock_Config+0x114>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <SystemClock_Config+0x114>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016e2:	4b32      	ldr	r3, [pc, #200]	; (80017ac <SystemClock_Config+0x118>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016ea:	4a30      	ldr	r2, [pc, #192]	; (80017ac <SystemClock_Config+0x118>)
 80016ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <SystemClock_Config+0x118>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016fe:	2301      	movs	r3, #1
 8001700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001704:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800171a:	2304      	movs	r3, #4
 800171c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001720:	2390      	movs	r3, #144	; 0x90
 8001722:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800172c:	2306      	movs	r3, #6
 800172e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001732:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001736:	4618      	mov	r0, r3
 8001738:	f004 fc1a 	bl	8005f70 <HAL_RCC_OscConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001742:	f000 f9d3 	bl	8001aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001746:	230f      	movs	r3, #15
 8001748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174c:	2302      	movs	r3, #2
 800174e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800175c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001768:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800176c:	2104      	movs	r1, #4
 800176e:	4618      	mov	r0, r3
 8001770:	f004 feac 	bl	80064cc <HAL_RCC_ClockConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800177a:	f000 f9b7 	bl	8001aec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <SystemClock_Config+0x11c>)
 8001780:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001782:	2300      	movs	r3, #0
 8001784:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4618      	mov	r0, r3
 8001792:	f005 f8c5 	bl	8006920 <HAL_RCCEx_PeriphCLKConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 800179c:	f000 f9a6 	bl	8001aec <Error_Handler>
  }
}
 80017a0:	bf00      	nop
 80017a2:	37e0      	adds	r7, #224	; 0xe0
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000
 80017b0:	00200100 	.word	0x00200100

080017b4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_CAN1_Init+0x64>)
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <MX_CAN1_Init+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_CAN1_Init+0x64>)
 80017c0:	2208      	movs	r2, #8
 80017c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_CAN1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <MX_CAN1_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_CAN1_Init+0x64>)
 80017d2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80017d6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_CAN1_Init+0x64>)
 80017da:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017de:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <MX_CAN1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_CAN1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <MX_CAN1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_CAN1_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <MX_CAN1_Init+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_CAN1_Init+0x64>)
 8001800:	2200      	movs	r2, #0
 8001802:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001804:	4804      	ldr	r0, [pc, #16]	; (8001818 <MX_CAN1_Init+0x64>)
 8001806:	f002 fc23 	bl	8004050 <HAL_CAN_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001810:	f000 f96c 	bl	8001aec <Error_Handler>
//  	  s_filter_can.FilterActivation = CAN_FILTER_ENABLE;
//
//  	  HAL_CAN_ConfigFilter(&hcan1, &s_filter_can);
  /* USER CODE END CAN1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20001350 	.word	0x20001350
 800181c:	40006400 	.word	0x40006400

08001820 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_ETH_Init+0x78>)
 8001826:	4a1d      	ldr	r2, [pc, #116]	; (800189c <MX_ETH_Init+0x7c>)
 8001828:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_ETH_Init+0x78>)
 800182c:	2201      	movs	r2, #1
 800182e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_ETH_Init+0x78>)
 8001832:	2200      	movs	r2, #0
 8001834:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <MX_ETH_Init+0x78>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2200      	movs	r2, #0
 800183c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_ETH_Init+0x78>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <MX_ETH_Init+0x78>)
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	3302      	adds	r3, #2
 800184e:	22e1      	movs	r2, #225	; 0xe1
 8001850:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_ETH_Init+0x78>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	3303      	adds	r3, #3
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_ETH_Init+0x78>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	3304      	adds	r3, #4
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_ETH_Init+0x78>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	3305      	adds	r3, #5
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_ETH_Init+0x78>)
 8001872:	2200      	movs	r2, #0
 8001874:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <MX_ETH_Init+0x78>)
 8001878:	2200      	movs	r2, #0
 800187a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_ETH_Init+0x78>)
 800187e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001882:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_ETH_Init+0x78>)
 8001886:	f003 fbb9 	bl	8004ffc <HAL_ETH_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8001890:	f000 f92c 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20001378 	.word	0x20001378
 800189c:	40028000 	.word	0x40028000

080018a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_USART3_UART_Init+0x58>)
 80018a6:	4a15      	ldr	r2, [pc, #84]	; (80018fc <MX_USART3_UART_Init+0x5c>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <MX_USART3_UART_Init+0x58>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_USART3_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_USART3_UART_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_USART3_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_USART3_UART_Init+0x58>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_USART3_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_USART3_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_USART3_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_USART3_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_USART3_UART_Init+0x58>)
 80018e4:	f005 fea8 	bl	8007638 <HAL_UART_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018ee:	f000 f8fd 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000ecc 	.word	0x20000ecc
 80018fc:	40004800 	.word	0x40004800

08001900 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001906:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800190a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800190e:	2206      	movs	r2, #6
 8001910:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001914:	2202      	movs	r2, #2
 8001916:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001920:	2202      	movs	r2, #2
 8001922:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001926:	2201      	movs	r2, #1
 8001928:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001938:	2201      	movs	r2, #1
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001944:	f004 f9bb 	bl	8005cbe <HAL_PCD_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800194e:	f000 f8cd 	bl	8001aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000f4c 	.word	0x20000f4c

0800195c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	; 0x30
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a45      	ldr	r2, [pc, #276]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800198a:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <MX_GPIO_Init+0x130>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a3f      	ldr	r2, [pc, #252]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b3d      	ldr	r3, [pc, #244]	; (8001a8c <MX_GPIO_Init+0x130>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a39      	ldr	r2, [pc, #228]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a33      	ldr	r2, [pc, #204]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ea:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <MX_GPIO_Init+0x130>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	f244 0181 	movw	r1, #16513	; 0x4081
 8001a08:	4821      	ldr	r0, [pc, #132]	; (8001a90 <MX_GPIO_Init+0x134>)
 8001a0a:	f004 f925 	bl	8005c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2140      	movs	r1, #64	; 0x40
 8001a12:	4820      	ldr	r0, [pc, #128]	; (8001a94 <MX_GPIO_Init+0x138>)
 8001a14:	f004 f920 	bl	8005c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <MX_GPIO_Init+0x13c>)
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	481b      	ldr	r0, [pc, #108]	; (8001a9c <MX_GPIO_Init+0x140>)
 8001a2e:	f003 ff51 	bl	80058d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a32:	f244 0381 	movw	r3, #16513	; 0x4081
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4811      	ldr	r0, [pc, #68]	; (8001a90 <MX_GPIO_Init+0x134>)
 8001a4c:	f003 ff42 	bl	80058d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a50:	2340      	movs	r3, #64	; 0x40
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	480b      	ldr	r0, [pc, #44]	; (8001a94 <MX_GPIO_Init+0x138>)
 8001a68:	f003 ff34 	bl	80058d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_GPIO_Init+0x138>)
 8001a80:	f003 ff28 	bl	80058d4 <HAL_GPIO_Init>

}
 8001a84:	bf00      	nop
 8001a86:	3730      	adds	r7, #48	; 0x30
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40021800 	.word	0x40021800
 8001a98:	10110000 	.word	0x10110000
 8001a9c:	40020800 	.word	0x40020800

08001aa0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char* my_data = (char*)malloc(20);
 8001aa8:	2014      	movs	r0, #20
 8001aaa:	f00a f94b 	bl	800bd44 <malloc>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	60fb      	str	r3, [r7, #12]
	if (my_data == 0)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d100      	bne.n	8001aba <StartDefaultTask+0x1a>
	{
		while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <StartDefaultTask+0x18>

		}
	}


  cppmain();
 8001aba:	f000 f913 	bl	8001ce4 <cppmain>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f006 fddc 	bl	800867c <osDelay>
 8001ac4:	e7fb      	b.n	8001abe <StartDefaultTask+0x1e>
	...

08001ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ada:	f002 fa77 	bl	8003fcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40010000 	.word	0x40010000

08001aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <_ZN14ICANSubscriberC1Ev>:
#ifndef ICANSUBSCRIBER_HPP_
#define ICANSUBSCRIBER_HPP_

#include "CANFrame.hpp"

class ICANSubscriber
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <_ZN14ICANSubscriberC1Ev+0x1c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	0800c880 	.word	0x0800c880

08001b1c <_ZN14ICANSubscriberD1Ev>:
{
public:
	virtual ~ICANSubscriber() = default;
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <_ZN14ICANSubscriberD1Ev+0x1c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	0800c880 	.word	0x0800c880

08001b3c <_ZN14ICANSubscriberD0Ev>:
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ffe9 	bl	8001b1c <_ZN14ICANSubscriberD1Ev>
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f009 f951 	bl	800adf4 <_ZdlPvj>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_ZN8InverterC1ER13CANController10CANFrameId>:
private:
	CANController& _canController;
	CANFrameId _setTargetRevolutionSpeedId;

public:
	Inverter(CANController &canController, CANFrameId setTargetRevolutionSpeedId) :
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af02      	add	r7, sp, #8
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
 8001b68:	f107 0110 	add.w	r1, r7, #16
 8001b6c:	e881 000c 	stmia.w	r1, {r2, r3}
		_canController(canController),
		_setTargetRevolutionSpeedId(setTargetRevolutionSpeedId)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ffc2 	bl	8001afc <_ZN14ICANSubscriberC1Ev>
 8001b78:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <_ZN8InverterC1ER13CANController10CANFrameId+0x68>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3308      	adds	r3, #8
 8001b88:	f107 0210 	add.w	r2, r7, #16
 8001b8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		_canController.addSubscriber(*this, _setTargetRevolutionSpeedId);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6858      	ldr	r0, [r3, #4]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	9200      	str	r2, [sp, #0]
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	cb0c      	ldmia	r3, {r2, r3}
 8001ba2:	f000 ff46 	bl	8002a32 <_ZN13CANController13addSubscriberER14ICANSubscriber10CANFrameId>
	}
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	e005      	b.n	8001bb6 <_ZN8InverterC1ER13CANController10CANFrameId+0x5a>
		_setTargetRevolutionSpeedId(setTargetRevolutionSpeedId)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ffb5 	bl	8001b1c <_ZN14ICANSubscriberD1Ev>
 8001bb2:	f009 f85b 	bl	800ac6c <__cxa_end_cleanup>
	}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bc0:	b002      	add	sp, #8
 8001bc2:	4770      	bx	lr
 8001bc4:	0800c86c 	.word	0x0800c86c

08001bc8 <_ZN8InverterD1Ev>:
	virtual ~Inverter() = default;
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_ZN8InverterD1Ev+0x20>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff9f 	bl	8001b1c <_ZN14ICANSubscriberD1Ev>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	0800c86c 	.word	0x0800c86c

08001bec <_ZN8InverterD0Ev>:
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ffe7 	bl	8001bc8 <_ZN8InverterD1Ev>
 8001bfa:	2114      	movs	r1, #20
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f009 f8f9 	bl	800adf4 <_ZdlPvj>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_ZN12InverterLeftC1ER13CANController>:


class InverterLeft : Inverter
{
public:
	InverterLeft(CANController &canController) : Inverter(canController, CANFrameId(0xAA))
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	687c      	ldr	r4, [r7, #4]
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	21aa      	movs	r1, #170	; 0xaa
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 f934 	bl	8003e8c <_ZN10CANFrameIdC1Em>
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	cb0c      	ldmia	r3, {r2, r3}
 8001c2e:	6839      	ldr	r1, [r7, #0]
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7ff ff93 	bl	8001b5c <_ZN8InverterC1ER13CANController10CANFrameId>
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <_ZN12InverterLeftC1ER13CANController+0x3c>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	601a      	str	r2, [r3, #0]
	{
	}
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	371c      	adds	r7, #28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	0800c858 	.word	0x0800c858

08001c4c <_ZN12InverterLeft6updateE8CANFrame>:

	void update(CANFrame frame) override
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	f107 0014 	add.w	r0, r7, #20
 8001c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		puts("InverterLeft: frame received");
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <_ZN12InverterLeft6updateE8CANFrame+0x28>)
 8001c60:	f00a f9b0 	bl	800bfc4 <puts>
	}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c6e:	b004      	add	sp, #16
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	0800c654 	.word	0x0800c654

08001c78 <_ZN13InverterRightC1ER13CANController>:


class InverterRight : Inverter
{
public:
	InverterRight(CANController &canController) : Inverter(canController, CANFrameId(0xBB))
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	687c      	ldr	r4, [r7, #4]
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	21bb      	movs	r1, #187	; 0xbb
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 f8fe 	bl	8003e8c <_ZN10CANFrameIdC1Em>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	cb0c      	ldmia	r3, {r2, r3}
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7ff ff5d 	bl	8001b5c <_ZN8InverterC1ER13CANController10CANFrameId>
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <_ZN13InverterRightC1ER13CANController+0x3c>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	601a      	str	r2, [r3, #0]
	{
	}
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	0800c844 	.word	0x0800c844

08001cb8 <_ZN13InverterRight6updateE8CANFrame>:

	void update(CANFrame frame) override
 8001cb8:	b084      	sub	sp, #16
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	f107 0014 	add.w	r0, r7, #20
 8001cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		puts("InverterRight: frame received");
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <_ZN13InverterRight6updateE8CANFrame+0x28>)
 8001ccc:	f00a f97a 	bl	800bfc4 <puts>
	}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cda:	b004      	add	sp, #16
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	0800c674 	.word	0x0800c674

08001ce4 <cppmain>:
* @author Manuel Ehrahrdt
* @date 05.04.2020
*
*/
void cppmain (void)
{
 8001ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce6:	b0a9      	sub	sp, #164	; 0xa4
 8001ce8:	af04      	add	r7, sp, #16

	/*Filter function for the CAN*/

	CAN_FilterTypeDef s_filter_can;

	s_filter_can.FilterMaskIdHigh = 0x0000;
 8001cea:	2300      	movs	r3, #0
 8001cec:	66fb      	str	r3, [r7, #108]	; 0x6c
	s_filter_can.FilterIdLow = 0x0000;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	66bb      	str	r3, [r7, #104]	; 0x68
	s_filter_can.FilterMaskIdHigh = 0x0000;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	66fb      	str	r3, [r7, #108]	; 0x6c
	s_filter_can.FilterMaskIdLow = 0x0000;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	673b      	str	r3, [r7, #112]	; 0x70
	s_filter_can.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	677b      	str	r3, [r7, #116]	; 0x74
	s_filter_can.FilterBank = 13;
 8001cfe:	230d      	movs	r3, #13
 8001d00:	67bb      	str	r3, [r7, #120]	; 0x78
	s_filter_can.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	67fb      	str	r3, [r7, #124]	; 0x7c
	s_filter_can.FilterScale = CAN_FILTERSCALE_16BIT;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	s_filter_can.FilterActivation = CAN_FILTER_ENABLE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	if (HAL_CAN_ConfigFilter(&hcan1, &s_filter_can)) throw "RxFilter can't set";
 8001d12:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d16:	4619      	mov	r1, r3
 8001d18:	4851      	ldr	r0, [pc, #324]	; (8001e60 <cppmain+0x17c>)
 8001d1a:	f002 fa95 	bl	8004248 <HAL_CAN_ConfigFilter>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <cppmain+0x60>
 8001d2e:	2004      	movs	r0, #4
 8001d30:	f009 fd3e 	bl	800b7b0 <__cxa_allocate_exception>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <cppmain+0x180>)
 8001d3a:	6003      	str	r3, [r0, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	494a      	ldr	r1, [pc, #296]	; (8001e68 <cppmain+0x184>)
 8001d40:	f009 fb46 	bl	800b3d0 <__cxa_throw>



	/*start the can controller*/
	canController1.start();
 8001d44:	4849      	ldr	r0, [pc, #292]	; (8001e6c <cppmain+0x188>)
 8001d46:	f000 ffdb 	bl	8002d00 <_ZN13CANController5startEv>
	/*start the Interrupts*/
	canController1.activateInterrupt();
 8001d4a:	4848      	ldr	r0, [pc, #288]	; (8001e6c <cppmain+0x188>)
 8001d4c:	f000 fffc 	bl	8002d48 <_ZN13CANController17activateInterruptEv>





	InverterLeft inverterLeft = InverterLeft(canController1);
 8001d50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d54:	4945      	ldr	r1, [pc, #276]	; (8001e6c <cppmain+0x188>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff58 	bl	8001c0c <_ZN12InverterLeftC1ER13CANController>
	InverterRight inverterRight = InverterRight(canController1);
 8001d5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d60:	4942      	ldr	r1, [pc, #264]	; (8001e6c <cppmain+0x188>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff88 	bl	8001c78 <_ZN13InverterRightC1ER13CANController>

	CANPayload payload;
 8001d68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
	payload.bitLength = 8;
 8001d74:	2308      	movs	r3, #8
 8001d76:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	payload.data.uint8[0] = 0xAA;
 8001d7a:	23aa      	movs	r3, #170	; 0xaa
 8001d7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	payload.isRemoteFrame = false;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	CANFrame leftInverterFrame = CANFrame(canFrameIdLeftInverter, payload);
 8001d86:	4c3a      	ldr	r4, [pc, #232]	; (8001e70 <cppmain+0x18c>)
 8001d88:	f107 0618 	add.w	r6, r7, #24
 8001d8c:	466d      	mov	r5, sp
 8001d8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d96:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d9a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001d9e:	4630      	mov	r0, r6
 8001da0:	f001 ffe8 	bl	8003d74 <_ZN8CANFrameC1E10CANFrameId10CANPayload>
	CANFrame rightInverterFrame = CANFrame(canFrameIdRightInverter, payload);
 8001da4:	4c33      	ldr	r4, [pc, #204]	; (8001e74 <cppmain+0x190>)
 8001da6:	463e      	mov	r6, r7
 8001da8:	466d      	mov	r5, sp
 8001daa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001db2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001db6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001dba:	4630      	mov	r0, r6
 8001dbc:	f001 ffda 	bl	8003d74 <_ZN8CANFrameC1E10CANFrameId10CANPayload>





	uint8_t u8_pin_state = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	uint8_t u8_last_pin_state = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f


	while(1)
	{	/*read user-button*/
		u8_pin_state = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 8001dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd0:	4829      	ldr	r0, [pc, #164]	; (8001e78 <cppmain+0x194>)
 8001dd2:	f003 ff29 	bl	8005c28 <HAL_GPIO_ReadPin>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

		if( u8_pin_state == 1 && u8_last_pin_state == 0)
 8001ddc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d124      	bne.n	8001e2e <cppmain+0x14a>
 8001de4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d120      	bne.n	8001e2e <cppmain+0x14a>
		{	/*button is push*/
			/*toggle led*/
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001dec:	2180      	movs	r1, #128	; 0x80
 8001dee:	4823      	ldr	r0, [pc, #140]	; (8001e7c <cppmain+0x198>)
 8001df0:	f003 ff4b 	bl	8005c8a <HAL_GPIO_TogglePin>
			u8_last_pin_state = 1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			/*CAN send*/
			canController1.send(leftInverterFrame);
 8001dfa:	466c      	mov	r4, sp
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e08:	f107 0318 	add.w	r3, r7, #24
 8001e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0e:	4817      	ldr	r0, [pc, #92]	; (8001e6c <cppmain+0x188>)
 8001e10:	f000 fee2 	bl	8002bd8 <_ZN13CANController4sendE8CANFrame>
			canController1.send(rightInverterFrame);
 8001e14:	466c      	mov	r4, sp
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e22:	463b      	mov	r3, r7
 8001e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e26:	4811      	ldr	r0, [pc, #68]	; (8001e6c <cppmain+0x188>)
 8001e28:	f000 fed6 	bl	8002bd8 <_ZN13CANController4sendE8CANFrame>
 8001e2c:	e00a      	b.n	8001e44 <cppmain+0x160>

		}
		else if (u8_pin_state == 0 && u8_last_pin_state == 1)
 8001e2e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ca      	bne.n	8001dcc <cppmain+0xe8>
 8001e36:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d1c6      	bne.n	8001dcc <cppmain+0xe8>
		{
			u8_last_pin_state = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		u8_pin_state = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 8001e44:	e7c2      	b.n	8001dcc <cppmain+0xe8>
	InverterRight inverterRight = InverterRight(canController1);
 8001e46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f824 	bl	8001e98 <_ZN13InverterRightD1Ev>
 8001e50:	e7ff      	b.n	8001e52 <cppmain+0x16e>
	InverterLeft inverterLeft = InverterLeft(canController1);
 8001e52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f840 	bl	8001edc <_ZN12InverterLeftD1Ev>
 8001e5c:	f008 ff06 	bl	800ac6c <__cxa_end_cleanup>
 8001e60:	20001350 	.word	0x20001350
 8001e64:	0800c694 	.word	0x0800c694
 8001e68:	0800c8b8 	.word	0x0800c8b8
 8001e6c:	200000a8 	.word	0x200000a8
 8001e70:	200000c4 	.word	0x200000c4
 8001e74:	200000d0 	.word	0x200000d0
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020400 	.word	0x40020400

08001e80 <CAN1_irq_receive>:
* @author Manuel Ehrhardt
* @date 05.04.2020
*
*/
void CAN1_irq_receive()
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	canController1.receive();
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <CAN1_irq_receive+0x14>)
 8001e86:	f000 fdf7 	bl	8002a78 <_ZN13CANController7receiveEv>
	canController1.receive();
 8001e8a:	4802      	ldr	r0, [pc, #8]	; (8001e94 <CAN1_irq_receive+0x14>)
 8001e8c:	f000 fdf4 	bl	8002a78 <_ZN13CANController7receiveEv>

}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200000a8 	.word	0x200000a8

08001e98 <_ZN13InverterRightD1Ev>:
class InverterRight : Inverter
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <_ZN13InverterRightD1Ev+0x20>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fe8d 	bl	8001bc8 <_ZN8InverterD1Ev>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	0800c844 	.word	0x0800c844

08001ebc <_ZN13InverterRightD0Ev>:
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ffe7 	bl	8001e98 <_ZN13InverterRightD1Ev>
 8001eca:	2114      	movs	r1, #20
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f008 ff91 	bl	800adf4 <_ZdlPvj>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZN12InverterLeftD1Ev>:
class InverterLeft : Inverter
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	4a05      	ldr	r2, [pc, #20]	; (8001efc <_ZN12InverterLeftD1Ev+0x20>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fe6b 	bl	8001bc8 <_ZN8InverterD1Ev>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	0800c858 	.word	0x0800c858

08001f00 <_ZN12InverterLeftD0Ev>:
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ffe7 	bl	8001edc <_ZN12InverterLeftD1Ev>
 8001f0e:	2114      	movs	r1, #20
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f008 ff6f 	bl	800adf4 <_ZdlPvj>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_ZN13CANControllerD1Ev>:

#include <vector>
#include "ICANSubscriber.hpp"
#include "CANHandle.hpp"

class CANController
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3310      	adds	r3, #16
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f856 	bl	8001fde <_ZNSt6vectorI10CANFrameIdSaIS0_EED1Ev>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3304      	adds	r3, #4
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f836 	bl	8001fa8 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EED1Ev>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <_Z41__static_initialization_and_destruction_0ii>:
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d110      	bne.n	8001f7a <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10b      	bne.n	8001f7a <_Z41__static_initialization_and_destruction_0ii+0x32>
CANController canController1(hcan1);
 8001f62:	490d      	ldr	r1, [pc, #52]	; (8001f98 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001f66:	f000 fce5 	bl	8002934 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef>
CANFrameId canFrameIdLeftInverter = CANFrameId(0xAA);
 8001f6a:	21aa      	movs	r1, #170	; 0xaa
 8001f6c:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001f6e:	f001 ff8d 	bl	8003e8c <_ZN10CANFrameIdC1Em>
CANFrameId canFrameIdRightInverter = CANFrameId(0xBB);
 8001f72:	21bb      	movs	r1, #187	; 0xbb
 8001f74:	480b      	ldr	r0, [pc, #44]	; (8001fa4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001f76:	f001 ff89 	bl	8003e8c <_ZN10CANFrameIdC1Em>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <_Z41__static_initialization_and_destruction_0ii+0x48>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d102      	bne.n	8001f90 <_Z41__static_initialization_and_destruction_0ii+0x48>
CANController canController1(hcan1);
 8001f8a:	4804      	ldr	r0, [pc, #16]	; (8001f9c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8001f8c:	f7ff ffc8 	bl	8001f20 <_ZN13CANControllerD1Ev>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20001350 	.word	0x20001350
 8001f9c:	200000a8 	.word	0x200000a8
 8001fa0:	200000c4 	.word	0x200000c4
 8001fa4:	200000d0 	.word	0x200000d0

08001fa8 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681c      	ldr	r4, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f850 	bl	8002060 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8001fc0:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4629      	mov	r1, r5
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f000 f855 	bl	8002076 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f82c 	bl	800202c <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EED1Ev>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdb0      	pop	{r4, r5, r7, pc}

08001fde <_ZNSt6vectorI10CANFrameIdSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001fde:	b5b0      	push	{r4, r5, r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681c      	ldr	r4, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 f87b 	bl	80020ec <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001ff6:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4629      	mov	r1, r5
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f000 f880 	bl	8002102 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	f000 f851 	bl	80020ac <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bdb0      	pop	{r4, r5, r7, pc}

08002014 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f87e 	bl	800211e <_ZNSaIP14ICANSubscriberED1Ev>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6819      	ldr	r1, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800203c:	461a      	mov	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8002046:	461a      	mov	r2, r3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f874 	bl	8002136 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ffdf 	bl	8002014 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implD1Ev>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002082:	68b9      	ldr	r1, [r7, #8]
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f869 	bl	800215c <_ZSt8_DestroyIPP14ICANSubscriberEvT_S3_>
    }
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f86b 	bl	8002176 <_ZNSaI10CANFrameIdED1Ev>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80020bc:	461a      	mov	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	109b      	asrs	r3, r3, #2
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev+0x3c>)
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80020cc:	461a      	mov	r2, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f85d 	bl	800218e <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
		      - this->_M_impl._M_start); }
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ffdb 	bl	8002092 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implD1Ev>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	aaaaaaab 	.word	0xaaaaaaab

080020ec <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f84f 	bl	80021b4 <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>
    }
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_ZNSaIP14ICANSubscriberED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f851 	bl	80021ce <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberED1Ev>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
	if (__p)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f848 	bl	80021e4 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE10deallocateERS2_PS1_j>
      }
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <_ZSt8_DestroyIPP14ICANSubscriberEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002166:	6839      	ldr	r1, [r7, #0]
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f84a 	bl	8002202 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14ICANSubscriberEEvT_S5_>
    }
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_ZNSaI10CANFrameIdED1Ev>:
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f84a 	bl	8002218 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdED1Ev>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
	if (__p)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f841 	bl	800222e <_ZNSt16allocator_traitsISaI10CANFrameIdEE10deallocateERS1_PS0_j>
      }
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80021be:	6839      	ldr	r1, [r7, #0]
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f843 	bl	800224c <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CANFrameIdEEvT_S4_>
    }
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f834 	bl	8002262 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE10deallocateEPS2_j>
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14ICANSubscriberEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdED1Ev>:
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_ZNSt16allocator_traitsISaI10CANFrameIdEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f81c 	bl	800227c <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE10deallocateEPS1_j>
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CANFrameIdEEvT_S4_>:
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 800226e:	68b8      	ldr	r0, [r7, #8]
 8002270:	f009 fa18 	bl	800b6a4 <_ZdlPv>
      }
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002288:	68b8      	ldr	r0, [r7, #8]
 800228a:	f009 fa0b 	bl	800b6a4 <_ZdlPv>
      }
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <_GLOBAL__sub_I_canController1>:
 8002296:	b580      	push	{r7, lr}
 8002298:	af00      	add	r7, sp, #0
 800229a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800229e:	2001      	movs	r0, #1
 80022a0:	f7ff fe52 	bl	8001f48 <_Z41__static_initialization_and_destruction_0ii>
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_GLOBAL__sub_D_canController1>:
 80022a6:	b580      	push	{r7, lr}
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7ff fe4a 	bl	8001f48 <_Z41__static_initialization_and_destruction_0ii>
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_MspInit+0x4c>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a10      	ldr	r2, [pc, #64]	; (8002304 <HAL_MspInit+0x4c>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_MspInit+0x4c>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_MspInit+0x4c>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <HAL_MspInit+0x4c>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_MspInit+0x4c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	210f      	movs	r1, #15
 80022f2:	f06f 0001 	mvn.w	r0, #1
 80022f6:	f002 fe57 	bl	8004fa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800

08002308 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <HAL_CAN_MspInit+0xbc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d147      	bne.n	80023ba <HAL_CAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800232a:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <HAL_CAN_MspInit+0xc0>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a26      	ldr	r2, [pc, #152]	; (80023c8 <HAL_CAN_MspInit+0xc0>)
 8002330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_CAN_MspInit+0xc0>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_CAN_MspInit+0xc0>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <HAL_CAN_MspInit+0xc0>)
 8002348:	f043 0308 	orr.w	r3, r3, #8
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <HAL_CAN_MspInit+0xc0>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800235a:	2303      	movs	r3, #3
 800235c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800236a:	2309      	movs	r3, #9
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4815      	ldr	r0, [pc, #84]	; (80023cc <HAL_CAN_MspInit+0xc4>)
 8002376:	f003 faad 	bl	80058d4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2105      	movs	r1, #5
 800237e:	2013      	movs	r0, #19
 8002380:	f002 fe12 	bl	8004fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002384:	2013      	movs	r0, #19
 8002386:	f002 fe2b 	bl	8004fe0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2105      	movs	r1, #5
 800238e:	2014      	movs	r0, #20
 8002390:	f002 fe0a 	bl	8004fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002394:	2014      	movs	r0, #20
 8002396:	f002 fe23 	bl	8004fe0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2105      	movs	r1, #5
 800239e:	2015      	movs	r0, #21
 80023a0:	f002 fe02 	bl	8004fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80023a4:	2015      	movs	r0, #21
 80023a6:	f002 fe1b 	bl	8004fe0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2105      	movs	r1, #5
 80023ae:	2016      	movs	r0, #22
 80023b0:	f002 fdfa 	bl	8004fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80023b4:	2016      	movs	r0, #22
 80023b6:	f002 fe13 	bl	8004fe0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	; 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40006400 	.word	0x40006400
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020c00 	.word	0x40020c00

080023d0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08e      	sub	sp, #56	; 0x38
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a4e      	ldr	r2, [pc, #312]	; (8002528 <HAL_ETH_MspInit+0x158>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	f040 8096 	bne.w	8002520 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80023f4:	4b4d      	ldr	r3, [pc, #308]	; (800252c <HAL_ETH_MspInit+0x15c>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	4a4c      	ldr	r2, [pc, #304]	; (800252c <HAL_ETH_MspInit+0x15c>)
 80023fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002400:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_ETH_MspInit+0x15c>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	623b      	str	r3, [r7, #32]
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_ETH_MspInit+0x15c>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	4a46      	ldr	r2, [pc, #280]	; (800252c <HAL_ETH_MspInit+0x15c>)
 8002412:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002416:	6313      	str	r3, [r2, #48]	; 0x30
 8002418:	4b44      	ldr	r3, [pc, #272]	; (800252c <HAL_ETH_MspInit+0x15c>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_ETH_MspInit+0x15c>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	4a40      	ldr	r2, [pc, #256]	; (800252c <HAL_ETH_MspInit+0x15c>)
 800242a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800242e:	6313      	str	r3, [r2, #48]	; 0x30
 8002430:	4b3e      	ldr	r3, [pc, #248]	; (800252c <HAL_ETH_MspInit+0x15c>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800243c:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_ETH_MspInit+0x15c>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	4a3a      	ldr	r2, [pc, #232]	; (800252c <HAL_ETH_MspInit+0x15c>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6313      	str	r3, [r2, #48]	; 0x30
 8002448:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_ETH_MspInit+0x15c>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	4b35      	ldr	r3, [pc, #212]	; (800252c <HAL_ETH_MspInit+0x15c>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	4a34      	ldr	r2, [pc, #208]	; (800252c <HAL_ETH_MspInit+0x15c>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6313      	str	r3, [r2, #48]	; 0x30
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_ETH_MspInit+0x15c>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b2f      	ldr	r3, [pc, #188]	; (800252c <HAL_ETH_MspInit+0x15c>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	4a2e      	ldr	r2, [pc, #184]	; (800252c <HAL_ETH_MspInit+0x15c>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <HAL_ETH_MspInit+0x15c>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002484:	4b29      	ldr	r3, [pc, #164]	; (800252c <HAL_ETH_MspInit+0x15c>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4a28      	ldr	r2, [pc, #160]	; (800252c <HAL_ETH_MspInit+0x15c>)
 800248a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800248e:	6313      	str	r3, [r2, #48]	; 0x30
 8002490:	4b26      	ldr	r3, [pc, #152]	; (800252c <HAL_ETH_MspInit+0x15c>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800249c:	2332      	movs	r3, #50	; 0x32
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024ac:	230b      	movs	r3, #11
 80024ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b4:	4619      	mov	r1, r3
 80024b6:	481e      	ldr	r0, [pc, #120]	; (8002530 <HAL_ETH_MspInit+0x160>)
 80024b8:	f003 fa0c 	bl	80058d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80024bc:	2386      	movs	r3, #134	; 0x86
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024cc:	230b      	movs	r3, #11
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d4:	4619      	mov	r1, r3
 80024d6:	4817      	ldr	r0, [pc, #92]	; (8002534 <HAL_ETH_MspInit+0x164>)
 80024d8:	f003 f9fc 	bl	80058d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80024dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ea:	2303      	movs	r3, #3
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024ee:	230b      	movs	r3, #11
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f6:	4619      	mov	r1, r3
 80024f8:	480f      	ldr	r0, [pc, #60]	; (8002538 <HAL_ETH_MspInit+0x168>)
 80024fa:	f003 f9eb 	bl	80058d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80024fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002510:	230b      	movs	r3, #11
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002518:	4619      	mov	r1, r3
 800251a:	4808      	ldr	r0, [pc, #32]	; (800253c <HAL_ETH_MspInit+0x16c>)
 800251c:	f003 f9da 	bl	80058d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002520:	bf00      	nop
 8002522:	3738      	adds	r7, #56	; 0x38
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40028000 	.word	0x40028000
 800252c:	40023800 	.word	0x40023800
 8002530:	40020800 	.word	0x40020800
 8002534:	40020000 	.word	0x40020000
 8002538:	40020400 	.word	0x40020400
 800253c:	40021800 	.word	0x40021800

08002540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a17      	ldr	r2, [pc, #92]	; (80025bc <HAL_UART_MspInit+0x7c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d128      	bne.n	80025b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <HAL_UART_MspInit+0x80>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <HAL_UART_MspInit+0x80>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_UART_MspInit+0x80>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_UART_MspInit+0x80>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_UART_MspInit+0x80>)
 8002580:	f043 0308 	orr.w	r3, r3, #8
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_UART_MspInit+0x80>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002592:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025a4:	2307      	movs	r3, #7
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4619      	mov	r1, r3
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <HAL_UART_MspInit+0x84>)
 80025b0:	f003 f990 	bl	80058d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025b4:	bf00      	nop
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40004800 	.word	0x40004800
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020c00 	.word	0x40020c00

080025c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e8:	d141      	bne.n	800266e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002602:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002614:	230a      	movs	r3, #10
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	4817      	ldr	r0, [pc, #92]	; (800267c <HAL_PCD_MspInit+0xb4>)
 8002620:	f003 f958 	bl	80058d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4810      	ldr	r0, [pc, #64]	; (800267c <HAL_PCD_MspInit+0xb4>)
 800263a:	f003 f94b 	bl	80058d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 8002640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002642:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 8002644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002648:	6353      	str	r3, [r2, #52]	; 0x34
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_PCD_MspInit+0xb0>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	; 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40020000 	.word	0x40020000

08002680 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	; 0x30
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002690:	2200      	movs	r2, #0
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	2019      	movs	r0, #25
 8002696:	f002 fc87 	bl	8004fa8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800269a:	2019      	movs	r0, #25
 800269c:	f002 fca0 	bl	8004fe0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <HAL_InitTick+0xa0>)
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <HAL_InitTick+0xa0>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6453      	str	r3, [r2, #68]	; 0x44
 80026ac:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_InitTick+0xa0>)
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026b8:	f107 0210 	add.w	r2, r7, #16
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f004 f8fa 	bl	80068bc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80026c8:	f004 f8e4 	bl	8006894 <HAL_RCC_GetPCLK2Freq>
 80026cc:	4603      	mov	r3, r0
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	4a13      	ldr	r2, [pc, #76]	; (8002724 <HAL_InitTick+0xa4>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	0c9b      	lsrs	r3, r3, #18
 80026dc:	3b01      	subs	r3, #1
 80026de:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_InitTick+0xa8>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <HAL_InitTick+0xac>)
 80026e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_InitTick+0xa8>)
 80026e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80026ee:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <HAL_InitTick+0xa8>)
 80026f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <HAL_InitTick+0xa8>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_InitTick+0xa8>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002700:	4809      	ldr	r0, [pc, #36]	; (8002728 <HAL_InitTick+0xa8>)
 8002702:	f004 fd33 	bl	800716c <HAL_TIM_Base_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800270c:	4806      	ldr	r0, [pc, #24]	; (8002728 <HAL_InitTick+0xa8>)
 800270e:	f004 fd63 	bl	80071d8 <HAL_TIM_Base_Start_IT>
 8002712:	4603      	mov	r3, r0
 8002714:	e000      	b.n	8002718 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	3730      	adds	r7, #48	; 0x30
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	431bde83 	.word	0x431bde83
 8002728:	200013c0 	.word	0x200013c0
 800272c:	40010000 	.word	0x40010000

08002730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <HardFault_Handler+0x4>

08002744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <MemManage_Handler+0x4>

0800274a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <BusFault_Handler+0x4>

08002750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <UsageFault_Handler+0x4>

08002756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <CAN1_TX_IRQHandler+0x10>)
 800276a:	f002 f931 	bl	80049d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20001350 	.word	0x20001350

08002778 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800277c:	4803      	ldr	r0, [pc, #12]	; (800278c <CAN1_RX0_IRQHandler+0x14>)
 800277e:	f002 f927 	bl	80049d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN1_irq_receive();
 8002782:	f7ff fb7d 	bl	8001e80 <CAN1_irq_receive>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20001350 	.word	0x20001350

08002790 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002794:	4803      	ldr	r0, [pc, #12]	; (80027a4 <CAN1_RX1_IRQHandler+0x14>)
 8002796:	f002 f91b 	bl	80049d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
  CAN1_irq_receive();
 800279a:	f7ff fb71 	bl	8001e80 <CAN1_irq_receive>
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20001350 	.word	0x20001350

080027a8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <CAN1_SCE_IRQHandler+0x10>)
 80027ae:	f002 f90f 	bl	80049d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20001350 	.word	0x20001350

080027bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027c2:	f004 fd33 	bl	800722c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	200013c0 	.word	0x200013c0

080027d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
	return 1;
 80027d4:	2301      	movs	r3, #1
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_kill>:

int _kill(int pid, int sig)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027ea:	f009 f9b7 	bl	800bb5c <__errno>
 80027ee:	4602      	mov	r2, r0
 80027f0:	2316      	movs	r3, #22
 80027f2:	6013      	str	r3, [r2, #0]
	return -1;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_exit>:

void _exit (int status)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ffe7 	bl	80027e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002812:	e7fe      	b.n	8002812 <_exit+0x12>

08002814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e00a      	b.n	800283c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002826:	f3af 8000 	nop.w
 800282a:	4601      	mov	r1, r0
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	60ba      	str	r2, [r7, #8]
 8002832:	b2ca      	uxtb	r2, r1
 8002834:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3301      	adds	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	dbf0      	blt.n	8002826 <_read+0x12>
	}

return len;
 8002844:	687b      	ldr	r3, [r7, #4]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e009      	b.n	8002874 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	60ba      	str	r2, [r7, #8]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3301      	adds	r3, #1
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	dbf1      	blt.n	8002860 <_write+0x12>
	}
	return len;
 800287c:	687b      	ldr	r3, [r7, #4]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_close>:

int _close(int file)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
	return -1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ae:	605a      	str	r2, [r3, #4]
	return 0;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <_isatty>:

int _isatty(int file)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
	return 1;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
	return 0;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <SystemInit+0x28>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <SystemInit+0x28>)
 80028fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <SystemInit+0x28>)
 8002906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800290a:	609a      	str	r2, [r3, #8]
#endif
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef>:

#include "CANController.hpp"



CANController::CANController(CANHandle &canHandle) : _canHandle(canHandle)
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3304      	adds	r3, #4
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fa3b 	bl	8002dc4 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEC1Ev>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3310      	adds	r3, #16
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fa43 	bl	8002dde <_ZNSt6vectorI10CANFrameIdSaIS0_EEC1Ev>
{
	// do nothing here
}
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <_ZN13CANController7publishE8CANFrame>:


void CANController::publish(CANFrame frame)
{
 8002962:	b084      	sub	sp, #16
 8002964:	b5b0      	push	{r4, r5, r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af04      	add	r7, sp, #16
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8002970:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// update each subscriber that listens to the same frame id as the id of the given frame
	for (auto it = _canFrameIds.begin(); it != _canFrameIds.end(); ++it)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3310      	adds	r3, #16
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fa3d 	bl	8002df8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 800297e:	4603      	mov	r3, r0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3310      	adds	r3, #16
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fa46 	bl	8002e18 <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>
 800298c:	4603      	mov	r3, r0
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	f107 0210 	add.w	r2, r7, #16
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fa4d 	bl	8002e3a <_ZN9__gnu_cxxneIP10CANFrameIdSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d03e      	beq.n	8002a24 <_ZN13CANController7publishE8CANFrame+0xc2>
	{
		if (frame.id == *it)
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fa6e 	bl	8002e8c <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEdeEv>
 80029b0:	4602      	mov	r2, r0
 80029b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f001 fa77 	bl	8003eac <_ZNK10CANFrameIdeqERKS_>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d029      	beq.n	8002a18 <_ZN13CANController7publishE8CANFrame+0xb6>
		{
			const int index = it - _canFrameIds.begin();
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3310      	adds	r3, #16
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fa15 	bl	8002df8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 80029ce:	4603      	mov	r3, r0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	f107 0214 	add.w	r2, r7, #20
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fa61 	bl	8002ea4 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80029e2:	61f8      	str	r0, [r7, #28]
			auto listener =_canSubscribers[index];
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 fa75 	bl	8002edc <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEixEj>
 80029f2:	4603      	mov	r3, r0
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	61bb      	str	r3, [r7, #24]
			listener->update(frame);
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3308      	adds	r3, #8
 80029fe:	681c      	ldr	r4, [r3, #0]
 8002a00:	466d      	mov	r5, sp
 8002a02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a0a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002a0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a14:	69b8      	ldr	r0, [r7, #24]
 8002a16:	47a0      	blx	r4
	for (auto it = _canFrameIds.begin(); it != _canFrameIds.end(); ++it)
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fa24 	bl	8002e6a <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEppEv>
 8002a22:	e7ae      	b.n	8002982 <_ZN13CANController7publishE8CANFrame+0x20>
		}
	}
}
 8002a24:	bf00      	nop
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002a2e:	b004      	add	sp, #16
 8002a30:	4770      	bx	lr

08002a32 <_ZN13CANController13addSubscriberER14ICANSubscriber10CANFrameId>:


void CANController::addSubscriber(ICANSubscriber &subscriber, CANFrameId id)
{
 8002a32:	b082      	sub	sp, #8
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	f107 0118 	add.w	r1, r7, #24
 8002a42:	e881 000c 	stmia.w	r1, {r2, r3}
	_canSubscribers.push_back(&subscriber);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	1d1a      	adds	r2, r3, #4
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	f107 030c 	add.w	r3, r7, #12
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f000 fa5c 	bl	8002f12 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE9push_backEOS1_>
	_canFrameIds.push_back(id);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3310      	adds	r3, #16
 8002a5e:	f107 0118 	add.w	r1, r7, #24
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fa66 	bl	8002f34 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_>
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a72:	b002      	add	sp, #8
 8002a74:	4770      	bx	lr
	...

08002a78 <_ZN13CANController7receiveEv>:


// shall be called from interrupt service procedure to distribute the received CAN frame to the subscribers
void CANController::receive(void)
{
 8002a78:	b5b0      	push	{r4, r5, r7, lr}
 8002a7a:	b09a      	sub	sp, #104	; 0x68
 8002a7c:	af04      	add	r7, sp, #16
 8002a7e:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef canRxHeader;

	/*init with default value*/
	canRxHeader.ExtId = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
	canRxHeader.StdId = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30

	CANPayload RxPayload;
 8002a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]


	if(HAL_CAN_GetRxFifoFillLevel(&_canHandle, CAN_RX_FIFO0))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 ff4a 	bl	8004934 <HAL_CAN_GetRxFifoFillLevel>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bf14      	ite	ne
 8002aa6:	2301      	movne	r3, #1
 8002aa8:	2300      	moveq	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01b      	beq.n	8002ae8 <_ZN13CANController7receiveEv+0x70>
	{/*frame in FIFO 0*/
		if(HAL_CAN_GetRxMessage(&_canHandle, CAN_RX_FIFO0, &canRxHeader, RxPayload.data.uint8))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002abc:	2100      	movs	r1, #0
 8002abe:	f001 fe27 	bl	8004710 <HAL_CAN_GetRxMessage>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d03f      	beq.n	8002b52 <_ZN13CANController7receiveEv+0xda>
			/*receive failed*/
			throw "receive frame is not possible";
 8002ad2:	2004      	movs	r0, #4
 8002ad4:	f008 fe6c 	bl	800b7b0 <__cxa_allocate_exception>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4618      	mov	r0, r3
 8002adc:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <_ZN13CANController7receiveEv+0x154>)
 8002ade:	6003      	str	r3, [r0, #0]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	493b      	ldr	r1, [pc, #236]	; (8002bd0 <_ZN13CANController7receiveEv+0x158>)
 8002ae4:	f008 fc74 	bl	800b3d0 <__cxa_throw>
	}
	else if (HAL_CAN_GetRxFifoFillLevel(&_canHandle, CAN_RX_FIFO1))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 ff20 	bl	8004934 <HAL_CAN_GetRxFifoFillLevel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf14      	ite	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	2300      	moveq	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <_ZN13CANController7receiveEv+0xc4>
	{/*frame in FIFI 1*/
		if(HAL_CAN_GetRxMessage(&_canHandle, CAN_RX_FIFO1, &canRxHeader, RxPayload.data.uint8))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b10:	2101      	movs	r1, #1
 8002b12:	f001 fdfd 	bl	8004710 <HAL_CAN_GetRxMessage>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <_ZN13CANController7receiveEv+0xda>
			/*receive failed*/
			throw "receive frame is not possible";
 8002b26:	2004      	movs	r0, #4
 8002b28:	f008 fe42 	bl	800b7b0 <__cxa_allocate_exception>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <_ZN13CANController7receiveEv+0x154>)
 8002b32:	6003      	str	r3, [r0, #0]
 8002b34:	2200      	movs	r2, #0
 8002b36:	4926      	ldr	r1, [pc, #152]	; (8002bd0 <_ZN13CANController7receiveEv+0x158>)
 8002b38:	f008 fc4a 	bl	800b3d0 <__cxa_throw>
	}
	/*error because no frame is in the FIFOs*/
	else
		throw "no pending receive frame";
 8002b3c:	2004      	movs	r0, #4
 8002b3e:	f008 fe37 	bl	800b7b0 <__cxa_allocate_exception>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4618      	mov	r0, r3
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <_ZN13CANController7receiveEv+0x15c>)
 8002b48:	6003      	str	r3, [r0, #0]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	4920      	ldr	r1, [pc, #128]	; (8002bd0 <_ZN13CANController7receiveEv+0x158>)
 8002b4e:	f008 fc3f 	bl	800b3d0 <__cxa_throw>

	/*CAN_RTR_REMOTE == 0x002U else ==0x0000U*/
	RxPayload.isRemoteFrame = canRxHeader.RTR>>1;
 8002b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	/*set bitlength*/
	RxPayload.bitLength = canRxHeader.DLC*8;
 8002b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
//	canRxHeader.FilterMatchIndex;
//	canRxHeader.Timestamp;


	/*ceate the RxFrame*/
	CANFrame RxFrame = CANFrame(CANFrameId(canRxHeader.StdId,canRxHeader.ExtId,canRxHeader.IDE>>2), RxPayload);
 8002b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002b86:	f001 f929 	bl	8003ddc <_ZN10CANFrameIdC1Emmb>
 8002b8a:	f107 050c 	add.w	r5, r7, #12
 8002b8e:	466c      	mov	r4, sp
 8002b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f001 f8e6 	bl	8003d74 <_ZN8CANFrameC1E10CANFrameId10CANPayload>


	publish(RxFrame);
 8002ba8:	466c      	mov	r4, sp
 8002baa:	f107 0318 	add.w	r3, r7, #24
 8002bae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff fed0 	bl	8002962 <_ZN13CANController7publishE8CANFrame>
}
 8002bc2:	bf00      	nop
 8002bc4:	3758      	adds	r7, #88	; 0x58
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	0800c6a8 	.word	0x0800c6a8
 8002bd0:	0800c8b8 	.word	0x0800c8b8
 8002bd4:	0800c6c8 	.word	0x0800c6c8

08002bd8 <_ZN13CANController4sendE8CANFrame>:


void CANController::send(CANFrame frame)
{
 8002bd8:	b084      	sub	sp, #16
 8002bda:	b590      	push	{r4, r7, lr}
 8002bdc:	b08b      	sub	sp, #44	; 0x2c
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/*Local values*/
	uint32_t u32canTxMailbox = 0;			// Param for the Tx mailbox
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef canTxHeader;		// Tx Header set all information for the transmission

/*mailbox handling*/

	/*check if ther are any empty mailboxes*/
	if (HAL_CAN_GetTxMailboxesFreeLevel(&_canHandle))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 fd33 	bl	800465e <HAL_CAN_GetTxMailboxesFreeLevel>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d024      	beq.n	8002c52 <_ZN13CANController4sendE8CANFrame+0x7a>
	{/*find the empty mailbox*/
		/*check mailbox 0*/
		if (!HAL_CAN_IsTxMessagePending(&_canHandle, CAN_TX_MAILBOX0))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 fd5a 	bl	80046c8 <HAL_CAN_IsTxMessagePending>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <_ZN13CANController4sendE8CANFrame+0x52>
		{/*mailbox0 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX0;
 8002c24:	2301      	movs	r3, #1
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	e01e      	b.n	8002c68 <_ZN13CANController4sendE8CANFrame+0x90>
		}
		else if (!HAL_CAN_IsTxMessagePending(&_canHandle, CAN_TX_MAILBOX1))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fd49 	bl	80046c8 <HAL_CAN_IsTxMessagePending>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <_ZN13CANController4sendE8CANFrame+0x74>
		{/*mailbox1 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX1;
 8002c46:	2302      	movs	r3, #2
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4a:	e00d      	b.n	8002c68 <_ZN13CANController4sendE8CANFrame+0x90>
		}
		else
		{/*mailbox2 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX2;
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	e00a      	b.n	8002c68 <_ZN13CANController4sendE8CANFrame+0x90>
		}
	}
	/*no empty mailbox, throw error-handling*/
	else throw "no empty mailbox";
 8002c52:	2004      	movs	r0, #4
 8002c54:	f008 fdac 	bl	800b7b0 <__cxa_allocate_exception>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <_ZN13CANController4sendE8CANFrame+0x11c>)
 8002c5e:	6003      	str	r3, [r0, #0]
 8002c60:	2200      	movs	r2, #0
 8002c62:	4925      	ldr	r1, [pc, #148]	; (8002cf8 <_ZN13CANController4sendE8CANFrame+0x120>)
 8002c64:	f008 fbb4 	bl	800b3d0 <__cxa_throw>


	/*set the Tx Header with the CAN information*/
	/*set standard and extended Id for transmission*/
	canTxHeader.StdId = frame.id.standardId;
 8002c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6a:	60fb      	str	r3, [r7, #12]
	canTxHeader.ExtId = frame.id.extendedId;
 8002c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c6e:	613b      	str	r3, [r7, #16]
	/*specify if standard or extended Id is use*/
	if(frame.id.isExtendedFrame)
 8002c70:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <_ZN13CANController4sendE8CANFrame+0xa6>
		/*use extended Id*/
		canTxHeader.IDE = CAN_ID_EXT;
 8002c78:	2304      	movs	r3, #4
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e001      	b.n	8002c82 <_ZN13CANController4sendE8CANFrame+0xaa>
	else
		/*use standard Id*/
		canTxHeader.IDE = CAN_ID_STD;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]

	/*specify the type of frame to transmission*/
	if ( frame.payload.isRemoteFrame)
 8002c82:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <_ZN13CANController4sendE8CANFrame+0xb8>
		/*send remote frame*/
		canTxHeader.RTR = CAN_RTR_REMOTE;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	e001      	b.n	8002c94 <_ZN13CANController4sendE8CANFrame+0xbc>
	else
		/*send a Data frame*/
		canTxHeader.RTR = CAN_RTR_DATA;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]

	/*set length of dataframe*/
	canTxHeader.DLC = frame.payload.bitLength/8;
 8002c94:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002c98:	08db      	lsrs	r3, r3, #3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	61fb      	str	r3, [r7, #28]
	/*diesable TransmitglobalTime*/
	canTxHeader.TransmitGlobalTime = DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f887 3020 	strb.w	r3, [r7, #32]


	/*start transmission*/
	if(HAL_CAN_AddTxMessage(&_canHandle, &canTxHeader, frame.payload.data.uint8, &u32canTxMailbox))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002cac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cb0:	f103 020c 	add.w	r2, r3, #12
 8002cb4:	f107 010c 	add.w	r1, r7, #12
 8002cb8:	4623      	mov	r3, r4
 8002cba:	f001 fbf5 	bl	80044a8 <HAL_CAN_AddTxMessage>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <_ZN13CANController4sendE8CANFrame+0x10c>
		/*transmission failed*/
		throw "send TX is not possible";
 8002cce:	2004      	movs	r0, #4
 8002cd0:	f008 fd6e 	bl	800b7b0 <__cxa_allocate_exception>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <_ZN13CANController4sendE8CANFrame+0x124>)
 8002cda:	6003      	str	r3, [r0, #0]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4906      	ldr	r1, [pc, #24]	; (8002cf8 <_ZN13CANController4sendE8CANFrame+0x120>)
 8002ce0:	f008 fb76 	bl	800b3d0 <__cxa_throw>

}
 8002ce4:	bf00      	nop
 8002ce6:	372c      	adds	r7, #44	; 0x2c
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002cee:	b004      	add	sp, #16
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	0800c6e4 	.word	0x0800c6e4
 8002cf8:	0800c8b8 	.word	0x0800c8b8
 8002cfc:	0800c6f8 	.word	0x0800c6f8

08002d00 <_ZN13CANController5startEv>:
/** function to start the CAN communication*/
void CANController::start(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

	if(HAL_CAN_Start(&_canHandle)) throw "Can can't start";
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 fb87 	bl	8004420 <HAL_CAN_Start>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <_ZN13CANController5startEv+0x38>
 8002d22:	2004      	movs	r0, #4
 8002d24:	f008 fd44 	bl	800b7b0 <__cxa_allocate_exception>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <_ZN13CANController5startEv+0x40>)
 8002d2e:	6003      	str	r3, [r0, #0]
 8002d30:	2200      	movs	r2, #0
 8002d32:	4904      	ldr	r1, [pc, #16]	; (8002d44 <_ZN13CANController5startEv+0x44>)
 8002d34:	f008 fb4c 	bl	800b3d0 <__cxa_throw>

}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	0800c710 	.word	0x0800c710
 8002d44:	0800c8b8 	.word	0x0800c8b8

08002d48 <_ZN13CANController17activateInterruptEv>:
/**function to activate the Interrupt for CAN*/
void CANController::activateInterrupt (void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO0_MSG_PENDING)) throw "Interrupt can't activate";
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2102      	movs	r1, #2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 fe14 	bl	8004984 <HAL_CAN_ActivateNotification>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <_ZN13CANController17activateInterruptEv+0x3a>
 8002d6c:	2004      	movs	r0, #4
 8002d6e:	f008 fd1f 	bl	800b7b0 <__cxa_allocate_exception>
 8002d72:	4603      	mov	r3, r0
 8002d74:	4618      	mov	r0, r3
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <_ZN13CANController17activateInterruptEv+0x74>)
 8002d78:	6003      	str	r3, [r0, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	4910      	ldr	r1, [pc, #64]	; (8002dc0 <_ZN13CANController17activateInterruptEv+0x78>)
 8002d7e:	f008 fb27 	bl	800b3d0 <__cxa_throw>
	if(HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO1_MSG_PENDING)) throw "Interrupt can't activate";
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2110      	movs	r1, #16
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 fdfb 	bl	8004984 <HAL_CAN_ActivateNotification>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <_ZN13CANController17activateInterruptEv+0x6c>
 8002d9e:	2004      	movs	r0, #4
 8002da0:	f008 fd06 	bl	800b7b0 <__cxa_allocate_exception>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4618      	mov	r0, r3
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <_ZN13CANController17activateInterruptEv+0x74>)
 8002daa:	6003      	str	r3, [r0, #0]
 8002dac:	2200      	movs	r2, #0
 8002dae:	4904      	ldr	r1, [pc, #16]	; (8002dc0 <_ZN13CANController17activateInterruptEv+0x78>)
 8002db0:	f008 fb0e 	bl	800b3d0 <__cxa_throw>
	//HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO0_FULL);
	//HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO1_FULL);
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	0800c720 	.word	0x0800c720
 8002dc0:	0800c8b8 	.word	0x0800c8b8

08002dc4 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEC1Ev>:
      vector()
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f8d6 	bl	8002f80 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EEC1Ev>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <_ZNSt6vectorI10CANFrameIdSaIS0_EEC1Ev>:
      vector()
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f8d6 	bl	8002f9a <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EEC1Ev>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	f107 030c 	add.w	r3, r7, #12
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f8d3 	bl	8002fb4 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	1d1a      	adds	r2, r3, #4
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f8c2 	bl	8002fb4 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <_ZN9__gnu_cxxneIP10CANFrameIdSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002e3a:	b590      	push	{r4, r7, lr}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f8c5 	bl	8002fd4 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	681c      	ldr	r4, [r3, #0]
 8002e4e:	6838      	ldr	r0, [r7, #0]
 8002e50:	f000 f8c0 	bl	8002fd4 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8002e54:	4603      	mov	r3, r0
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	429c      	cmp	r4, r3
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd90      	pop	{r4, r7, pc}

08002e6a <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f103 020c 	add.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	601a      	str	r2, [r3, #0]
	return *this;
 8002e7e:	687b      	ldr	r3, [r7, #4]
      }
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f890 	bl	8002fd4 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461c      	mov	r4, r3
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f000 f88a 	bl	8002fd4 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1ae3      	subs	r3, r4, r3
 8002ec6:	109b      	asrs	r3, r3, #2
 8002ec8:	4a03      	ldr	r2, [pc, #12]	; (8002ed8 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x34>)
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	aaaaaaab 	.word	0xaaaaaaab

08002edc <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
      }
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <_ZSt4moveIRP14ICANSubscriberEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8002f1c:	6838      	ldr	r0, [r7, #0]
 8002f1e:	f7ff ffed 	bl	8002efc <_ZSt4moveIRP14ICANSubscriberEONSt16remove_referenceIT_E4typeEOS4_>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4619      	mov	r1, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f86a 	bl	8003000 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d00d      	beq.n	8002f66 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	f000 f88d 	bl	8003072 <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f103 020c 	add.w	r2, r3, #12
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	605a      	str	r2, [r3, #4]
      }
 8002f64:	e008      	b.n	8002f78 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff56 	bl	8002e18 <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	4619      	mov	r1, r3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f890 	bl	8003098 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EEC1Ev>:
      _Vector_base()
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f94a 	bl	8003224 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implC1Ev>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EEC1Ev>:
      _Vector_base()
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 f952 	bl	800324e <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implC1Ev>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	429a      	cmp	r2, r3
 8003014:	d011      	beq.n	800303a <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8003016:	687c      	ldr	r4, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685d      	ldr	r5, [r3, #4]
 800301c:	6838      	ldr	r0, [r7, #0]
 800301e:	f7ff ffe4 	bl	8002fea <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8003022:	4603      	mov	r3, r0
 8003024:	461a      	mov	r2, r3
 8003026:	4629      	mov	r1, r5
 8003028:	4620      	mov	r0, r4
 800302a:	f000 f925 	bl	8003278 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	1d1a      	adds	r2, r3, #4
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8003038:	e00c      	b.n	8003054 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f92f 	bl	800329e <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE3endEv>
 8003040:	4604      	mov	r4, r0
 8003042:	6838      	ldr	r0, [r7, #0]
 8003044:	f7ff ffd1 	bl	8002fea <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8003048:	4603      	mov	r3, r0
 800304a:	461a      	mov	r2, r3
 800304c:	4621      	mov	r1, r4
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f936 	bl	80032c0 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bdb0      	pop	{r4, r5, r7, pc}

0800305c <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ffec 	bl	800305c <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f9ce 	bl	800342c <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003098:	b5b0      	push	{r4, r5, r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 80030a4:	4a5d      	ldr	r2, [pc, #372]	; (800321c <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x184>)
 80030a6:	2101      	movs	r1, #1
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f9d9 	bl	8003460 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc>
 80030ae:	4603      	mov	r3, r0
 80030b0:	623b      	str	r3, [r7, #32]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7ff fea0 	bl	8002df8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 80030b8:	4603      	mov	r3, r0
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	f107 0214 	add.w	r2, r7, #20
 80030c0:	f107 0308 	add.w	r3, r7, #8
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff feec 	bl	8002ea4 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80030cc:	4603      	mov	r3, r0
 80030ce:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a39      	ldr	r1, [r7, #32]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fa0b 	bl	80034f0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj>
 80030da:	4603      	mov	r3, r0
 80030dc:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80030e2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	189d      	adds	r5, r3, r2
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ffb1 	bl	800305c <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	4629      	mov	r1, r5
 8003100:	4620      	mov	r0, r4
 8003102:	f7ff ffb6 	bl	8003072 <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681c      	ldr	r4, [r3, #0]
 800310e:	f107 0308 	add.w	r3, r7, #8
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff5e 	bl	8002fd4 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8003118:	4603      	mov	r3, r0
 800311a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe ffe4 	bl	80020ec <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8003124:	4603      	mov	r3, r0
	  __new_finish
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4629      	mov	r1, r5
 800312a:	4620      	mov	r0, r4
 800312c:	f000 f9f4 	bl	8003518 <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003130:	4603      	mov	r3, r0
 8003132:	627b      	str	r3, [r7, #36]	; 0x24

	  ++__new_finish;
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	330c      	adds	r3, #12
 8003138:	627b      	str	r3, [r7, #36]	; 0x24

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 800313a:	f107 0308 	add.w	r3, r7, #8
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ff48 	bl	8002fd4 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8003144:	4603      	mov	r3, r0
 8003146:	681c      	ldr	r4, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe ffcc 	bl	80020ec <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8003154:	4603      	mov	r3, r0
	  __new_finish
 8003156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003158:	4629      	mov	r1, r5
 800315a:	4620      	mov	r0, r4
 800315c:	f000 f9dc 	bl	8003518 <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003160:	4603      	mov	r3, r0
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681c      	ldr	r4, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe ffbc 	bl	80020ec <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8003174:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003176:	461a      	mov	r2, r3
 8003178:	4629      	mov	r1, r5
 800317a:	4620      	mov	r0, r4
 800317c:	f7fe ffc1 	bl	8002102 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	109b      	asrs	r3, r3, #2
 8003194:	4a22      	ldr	r2, [pc, #136]	; (8003220 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 8003196:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 800319a:	461a      	mov	r2, r3
 800319c:	f7fe fff7 	bl	800218e <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031aa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80031ac:	6a3a      	ldr	r2, [r7, #32]
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	461a      	mov	r2, r3
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	441a      	add	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	609a      	str	r2, [r3, #8]
    }
 80031c0:	e029      	b.n	8003216 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x17e>
 80031c2:	4603      	mov	r3, r0
      __catch(...)
 80031c4:	4618      	mov	r0, r3
 80031c6:	f008 f971 	bl	800b4ac <__cxa_begin_catch>
	  if (!__new_finish)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10c      	bne.n	80031ea <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x152>
	    _Alloc_traits::destroy(this->_M_impl,
 80031d0:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	461a      	mov	r2, r3
	    _Alloc_traits::destroy(this->_M_impl,
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4413      	add	r3, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	f000 f9b1 	bl	800354a <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>
 80031e8:	e009      	b.n	80031fe <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x166>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe ff7d 	bl	80020ec <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f8:	69b8      	ldr	r0, [r7, #24]
 80031fa:	f7fe ff82 	bl	8002102 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	69b9      	ldr	r1, [r7, #24]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe ffc2 	bl	800218e <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
	  __throw_exception_again;
 800320a:	f008 f8fb 	bl	800b404 <__cxa_rethrow>
      __catch(...)
 800320e:	f008 f977 	bl	800b500 <__cxa_end_catch>
 8003212:	f007 fd2b 	bl	800ac6c <__cxa_end_cleanup>
    }
 8003216:	3728      	adds	r7, #40	; 0x28
 8003218:	46bd      	mov	sp, r7
 800321a:	bdb0      	pop	{r4, r5, r7, pc}
 800321c:	0800c758 	.word	0x0800c758
 8003220:	aaaaaaab 	.word	0xaaaaaaab

08003224 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f999 	bl	8003564 <_ZNSaIP14ICANSubscriberEC1Ev>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
	{ }
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f990 	bl	800357c <_ZNSaI10CANFrameIdEC1Ev>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
	{ }
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff feb0 	bl	8002fea <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 800328a:	4603      	mov	r3, r0
 800328c:	461a      	mov	r2, r3
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f97f 	bl	8003594 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_>
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	1d1a      	adds	r2, r3, #4
 80032aa:	f107 030c 	add.w	r3, r7, #12
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 f987 	bl	80035c4 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80032c0:	b5b0      	push	{r4, r5, r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80032cc:	4a56      	ldr	r2, [pc, #344]	; (8003428 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x168>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f987 	bl	80035e4 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc>
 80032d6:	4603      	mov	r3, r0
 80032d8:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f9ca 	bl	8003674 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE5beginEv>
 80032e0:	4603      	mov	r3, r0
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	f107 0214 	add.w	r2, r7, #20
 80032e8:	f107 0308 	add.w	r3, r7, #8
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f9d0 	bl	8003694 <_ZN9__gnu_cxxmiIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80032f4:	4603      	mov	r3, r0
 80032f6:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a39      	ldr	r1, [r7, #32]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 f9df 	bl	80036c0 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj>
 8003302:	4603      	mov	r3, r0
 8003304:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
	  _Alloc_traits::construct(this->_M_impl,
 800330a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	18d5      	adds	r5, r2, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fe68 	bl	8002fea <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	4629      	mov	r1, r5
 8003320:	4620      	mov	r0, r4
 8003322:	f7ff ffa9 	bl	8003278 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8003326:	2300      	movs	r3, #0
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
	    (this->_M_impl._M_start, __position.base(),
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681c      	ldr	r4, [r3, #0]
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f9d8 	bl	80036e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 8003338:	4603      	mov	r3, r0
 800333a:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fe8e 	bl	8002060 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8003344:	4603      	mov	r3, r0
	  __new_finish
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4629      	mov	r1, r5
 800334a:	4620      	mov	r0, r4
 800334c:	f000 f9d7 	bl	80036fe <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 8003350:	4603      	mov	r3, r0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
	  ++__new_finish;
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	3304      	adds	r3, #4
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
	    (__position.base(), this->_M_impl._M_finish,
 800335a:	f107 0308 	add.w	r3, r7, #8
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f9c2 	bl	80036e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 8003364:	4603      	mov	r3, r0
 8003366:	681c      	ldr	r4, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe fe76 	bl	8002060 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8003374:	4603      	mov	r3, r0
	  __new_finish
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	4629      	mov	r1, r5
 800337a:	4620      	mov	r0, r4
 800337c:	f000 f9bf 	bl	80036fe <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 8003380:	4603      	mov	r3, r0
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681c      	ldr	r4, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fe66 	bl	8002060 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8003394:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003396:	461a      	mov	r2, r3
 8003398:	4629      	mov	r1, r5
 800339a:	4620      	mov	r0, r4
 800339c:	f7fe fe6b 	bl	8002076 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 80033aa:	461a      	mov	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 80033b4:	461a      	mov	r2, r3
 80033b6:	f7fe febe 	bl	8002136 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	441a      	add	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	609a      	str	r2, [r3, #8]
    }
 80033d2:	e025      	b.n	8003420 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x160>
 80033d4:	4603      	mov	r3, r0
      __catch(...)
 80033d6:	4618      	mov	r0, r3
 80033d8:	f008 f868 	bl	800b4ac <__cxa_begin_catch>
	  if (!__new_finish)
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x134>
	    _Alloc_traits::destroy(this->_M_impl,
 80033e2:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	009b      	lsls	r3, r3, #2
	    _Alloc_traits::destroy(this->_M_impl,
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4413      	add	r3, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	f000 f99f 	bl	8003730 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE7destroyIS1_EEvRS2_PT_>
 80033f2:	e009      	b.n	8003408 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x148>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fe32 	bl	8002060 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 80033fc:	4603      	mov	r3, r0
 80033fe:	461a      	mov	r2, r3
 8003400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003402:	69b8      	ldr	r0, [r7, #24]
 8003404:	f7fe fe37 	bl	8002076 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a3a      	ldr	r2, [r7, #32]
 800340c:	69b9      	ldr	r1, [r7, #24]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fe91 	bl	8002136 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
	  __throw_exception_again;
 8003414:	f007 fff6 	bl	800b404 <__cxa_rethrow>
      __catch(...)
 8003418:	f008 f872 	bl	800b500 <__cxa_end_catch>
 800341c:	f007 fc26 	bl	800ac6c <__cxa_end_cleanup>
    }
 8003420:	3728      	adds	r7, #40	; 0x28
 8003422:	46bd      	mov	sp, r7
 8003424:	bdb0      	pop	{r4, r5, r7, pc}
 8003426:	bf00      	nop
 8003428:	0800c758 	.word	0x0800c758

0800342c <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff fe0f 	bl	800305c <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 800343e:	4604      	mov	r4, r0
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4619      	mov	r1, r3
 8003444:	200c      	movs	r0, #12
 8003446:	f7ff fa69 	bl	800291c <_ZnwjPv>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_+0x2c>
 8003450:	4622      	mov	r2, r4
 8003452:	ca07      	ldmia	r2, {r0, r1, r2}
 8003454:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bd90      	pop	{r4, r7, pc}

08003460 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f96c 	bl	800374a <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 8003472:	4604      	mov	r4, r0
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f979 	bl	800376c <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 800347a:	4603      	mov	r3, r0
 800347c:	1ae2      	subs	r2, r4, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	bf34      	ite	cc
 8003484:	2301      	movcc	r3, #1
 8003486:	2300      	movcs	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4618      	mov	r0, r3
 8003492:	f008 f9ca 	bl	800b82a <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f968 	bl	800376c <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 800349c:	4604      	mov	r4, r0
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f964 	bl	800376c <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 80034a4:	4603      	mov	r3, r0
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	f107 0208 	add.w	r2, r7, #8
 80034ac:	f107 0310 	add.w	r3, r7, #16
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f970 	bl	8003798 <_ZSt3maxIjERKT_S2_S2_>
 80034b8:	4603      	mov	r3, r0
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4423      	add	r3, r4
 80034be:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f953 	bl	800376c <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 80034c6:	4602      	mov	r2, r0
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d306      	bcc.n	80034dc <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x7c>
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f93b 	bl	800374a <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 80034d4:	4602      	mov	r2, r0
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	4293      	cmp	r3, r2
 80034da:	d904      	bls.n	80034e6 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x86>
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f934 	bl	800374a <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 80034e2:	4603      	mov	r3, r0
 80034e4:	e000      	b.n	80034e8 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x88>
 80034e6:	697b      	ldr	r3, [r7, #20]
      }
 80034e8:	4618      	mov	r0, r3
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd90      	pop	{r4, r7, pc}

080034f0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj+0x1e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6839      	ldr	r1, [r7, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f95b 	bl	80037c0 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8allocateERS1_j>
 800350a:	4603      	mov	r3, r0
 800350c:	e000      	b.n	8003510 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj+0x20>
 800350e:	2300      	movs	r3, #0
      }
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f959 	bl	80037de <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>
 800352c:	4604      	mov	r4, r0
 800352e:	68b8      	ldr	r0, [r7, #8]
 8003530:	f000 f955 	bl	80037de <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>
 8003534:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4620      	mov	r0, r4
 800353c:	f000 f95e 	bl	80037fc <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CANFrameIdES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8003540:	4603      	mov	r3, r0
    }
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bd90      	pop	{r4, r7, pc}

0800354a <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f961 	bl	800381e <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE7destroyIS1_EEvPT_>
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <_ZNSaIP14ICANSubscriberEC1Ev>:
      allocator() throw() { }
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f961 	bl	8003834 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberEC1Ev>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <_ZNSaI10CANFrameIdEC1Ev>:
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f960 	bl	800384a <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdEC1Ev>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fd22 	bl	8002fea <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 80035a6:	4603      	mov	r3, r0
 80035a8:	681c      	ldr	r4, [r3, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4619      	mov	r1, r3
 80035ae:	2004      	movs	r0, #4
 80035b0:	f7ff f9b4 	bl	800291c <_ZnwjPv>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d000      	beq.n	80035bc <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 80035ba:	601c      	str	r4, [r3, #0]
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd90      	pop	{r4, r7, pc}

080035c4 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f935 	bl	8003860 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 80035f6:	4604      	mov	r4, r0
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f942 	bl	8003882 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 80035fe:	4603      	mov	r3, r0
 8003600:	1ae2      	subs	r2, r4, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	429a      	cmp	r2, r3
 8003606:	bf34      	ite	cc
 8003608:	2301      	movcc	r3, #1
 800360a:	2300      	movcs	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4618      	mov	r0, r3
 8003616:	f008 f908 	bl	800b82a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f931 	bl	8003882 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 8003620:	4604      	mov	r4, r0
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f92d 	bl	8003882 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 8003628:	4603      	mov	r3, r0
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	f107 0208 	add.w	r2, r7, #8
 8003630:	f107 0310 	add.w	r3, r7, #16
 8003634:	4611      	mov	r1, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f8ae 	bl	8003798 <_ZSt3maxIjERKT_S2_S2_>
 800363c:	4603      	mov	r3, r0
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4423      	add	r3, r4
 8003642:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f91c 	bl	8003882 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 800364a:	4602      	mov	r2, r0
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	4293      	cmp	r3, r2
 8003650:	d306      	bcc.n	8003660 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x7c>
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f904 	bl	8003860 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 8003658:	4602      	mov	r2, r0
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	4293      	cmp	r3, r2
 800365e:	d904      	bls.n	800366a <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x86>
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f8fd 	bl	8003860 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 8003666:	4603      	mov	r3, r0
 8003668:	e000      	b.n	800366c <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x88>
 800366a:	697b      	ldr	r3, [r7, #20]
      }
 800366c:	4618      	mov	r0, r3
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}

08003674 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	f107 030c 	add.w	r3, r7, #12
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff9d 	bl	80035c4 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <_ZN9__gnu_cxxmiIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f822 	bl	80036e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 80036a4:	4603      	mov	r3, r0
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461c      	mov	r4, r3
 80036aa:	6838      	ldr	r0, [r7, #0]
 80036ac:	f000 f81c 	bl	80036e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 80036b0:	4603      	mov	r3, r0
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1ae3      	subs	r3, r4, r3
 80036b6:	109b      	asrs	r3, r3, #2
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd90      	pop	{r4, r7, pc}

080036c0 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj+0x1e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f8e5 	bl	80038a4 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8allocateERS2_j>
 80036da:	4603      	mov	r3, r0
 80036dc:	e000      	b.n	80036e0 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj+0x20>
 80036de:	2300      	movs	r3, #0
      }
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80036fe:	b590      	push	{r4, r7, lr}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f8d8 	bl	80038c2 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>
 8003712:	4604      	mov	r4, r0
 8003714:	68b8      	ldr	r0, [r7, #8]
 8003716:	f000 f8d4 	bl	80038c2 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>
 800371a:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4620      	mov	r0, r4
 8003722:	f000 f8dd 	bl	80038e0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14ICANSubscriberES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8003726:	4603      	mov	r3, r0
    }
 8003728:	4618      	mov	r0, r3
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	bd90      	pop	{r4, r7, pc}

08003730 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 800373a:	6839      	ldr	r1, [r7, #0]
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f8e0 	bl	8003902 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE7destroyIS2_EEvPT_>
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f8eb 	bl	8003930 <_ZNKSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 800375a:	4603      	mov	r3, r0
 800375c:	4618      	mov	r0, r3
 800375e:	f000 f8db 	bl	8003918 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8max_sizeERKS1_>
 8003762:	4603      	mov	r3, r0
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	461a      	mov	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	109b      	asrs	r3, r3, #2
 8003782:	4a04      	ldr	r2, [pc, #16]	; (8003794 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv+0x28>)
 8003784:	fb02 f303 	mul.w	r3, r2, r3
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	aaaaaaab 	.word	0xaaaaaaab

08003798 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d201      	bcs.n	80037b2 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	e000      	b.n	80037b4 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80037b2:	687b      	ldr	r3, [r7, #4]
    }
 80037b4:	4618      	mov	r0, r3
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80037ca:	2200      	movs	r2, #0
 80037cc:	6839      	ldr	r1, [r7, #0]
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8b9 	bl	8003946 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv>
 80037d4:	4603      	mov	r3, r0
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80037e6:	f107 030c 	add.w	r3, r7, #12
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f8cb 	bl	8003988 <_ZNSt13move_iteratorIP10CANFrameIdEC1ES1_>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CANFrameIdES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f8c9 	bl	80039a6 <_ZSt18uninitialized_copyISt13move_iteratorIP10CANFrameIdES2_ET0_T_S5_S4_>
 8003814:	4603      	mov	r3, r0
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdEC1Ev>:
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f8b9 	bl	80039e2 <_ZNKSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8003870:	4603      	mov	r3, r0
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f8a9 	bl	80039ca <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8max_sizeERKS2_>
 8003878:	4603      	mov	r3, r0
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	461a      	mov	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	109b      	asrs	r3, r3, #2
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80038ae:	2200      	movs	r2, #0
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f8a0 	bl	80039f8 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80038ca:	f107 030c 	add.w	r3, r7, #12
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 f8af 	bl	8003a34 <_ZNSt13move_iteratorIPP14ICANSubscriberEC1ES2_>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14ICANSubscriberES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f8ad 	bl	8003a52 <_ZSt18uninitialized_copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f8a9 	bl	8003a78 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>
 8003926:	4603      	mov	r3, r0
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <_ZNKSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f890 	bl	8003a78 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>
 8003958:	4602      	mov	r2, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4293      	cmp	r3, r2
 800395e:	bf8c      	ite	hi
 8003960:	2301      	movhi	r3, #1
 8003962:	2300      	movls	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800396a:	f007 ff5b 	bl	800b824 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	4613      	mov	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4618      	mov	r0, r3
 800397a:	f007 fde5 	bl	800b548 <_Znwj>
 800397e:	4603      	mov	r3, r0
      }
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <_ZNSt13move_iteratorIP10CANFrameIdEC1ES1_>:
      move_iterator(iterator_type __i)
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <_ZSt18uninitialized_copyISt13move_iteratorIP10CANFrameIdES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f86a 	bl	8003a94 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_>
 80039c0:	4603      	mov	r3, r0
    }
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f89c 	bl	8003b10 <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>
 80039d8:	4603      	mov	r3, r0
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <_ZNKSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f883 	bl	8003b10 <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	bf8c      	ite	hi
 8003a12:	2301      	movhi	r3, #1
 8003a14:	2300      	movls	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003a1c:	f007 ff02 	bl	800b824 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f007 fd8f 	bl	800b548 <_Znwj>
 8003a2a:	4603      	mov	r3, r0
      }
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZNSt13move_iteratorIPP14ICANSubscriberEC1ES2_>:
      move_iterator(iterator_type __i)
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <_ZSt18uninitialized_copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f85e 	bl	8003b28 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14ICANSubscriberES5_EET0_T_S8_S7_>
 8003a6c:	4603      	mov	r3, r0
    }
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv+0x18>)
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	15555555 	.word	0x15555555

08003a94 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8003aa4:	f107 0208 	add.w	r2, r7, #8
 8003aa8:	f107 030c 	add.w	r3, r7, #12
 8003aac:	4611      	mov	r1, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f84a 	bl	8003b48 <_ZStneIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d016      	beq.n	8003ae8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	f000 f866 	bl	8003b8c <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	f107 030c 	add.w	r3, r7, #12
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f86b 	bl	8003ba2 <_ZNKSt13move_iteratorIP10CANFrameIdEdeEv>
 8003acc:	4603      	mov	r3, r0
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	f000 f87d 	bl	8003bd0 <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f845 	bl	8003b6a <_ZNSt13move_iteratorIP10CANFrameIdEppEv>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e7dd      	b.n	8003aa4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	e00d      	b.n	8003b08 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x74>
 8003aec:	4603      	mov	r3, r0
	  __catch(...)
 8003aee:	4618      	mov	r0, r3
 8003af0:	f007 fcdc 	bl	800b4ac <__cxa_begin_catch>
	      std::_Destroy(__result, __cur);
 8003af4:	6979      	ldr	r1, [r7, #20]
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fe fb5c 	bl	80021b4 <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>
	      __throw_exception_again;
 8003afc:	f007 fc82 	bl	800b404 <__cxa_rethrow>
	  __catch(...)
 8003b00:	f007 fcfe 	bl	800b500 <__cxa_end_catch>
 8003b04:	f007 f8b2 	bl	800ac6c <__cxa_end_cleanup>
	}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd90      	pop	{r4, r7, pc}

08003b10 <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003b18:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14ICANSubscriberES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f862 	bl	8003c02 <_ZSt4copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZStneIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8003b52:	6839      	ldr	r1, [r7, #0]
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f86c 	bl	8003c32 <_ZSteqIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	f083 0301 	eor.w	r3, r3, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <_ZNSt13move_iteratorIP10CANFrameIdEppEv>:
      operator++()
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f103 020c 	add.w	r2, r3, #12
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	601a      	str	r2, [r3, #0]
	return *this;
 8003b7e:	687b      	ldr	r3, [r7, #4]
      }
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <_ZSt11__addressofI10CANFrameIdEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <_ZNKSt13move_iteratorIP10CANFrameIdEdeEv>:
      operator*() const
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8003bda:	6838      	ldr	r0, [r7, #0]
 8003bdc:	f7ff ffed 	bl	8003bba <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>
 8003be0:	4604      	mov	r4, r0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4619      	mov	r1, r3
 8003be6:	200c      	movs	r0, #12
 8003be8:	f7fe fe98 	bl	800291c <_ZnwjPv>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_+0x2a>
 8003bf2:	4622      	mov	r2, r4
 8003bf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd90      	pop	{r4, r7, pc}

08003c02 <_ZSt4copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003c02:	b590      	push	{r4, r7, lr}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f825 	bl	8003c5e <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003c14:	4604      	mov	r4, r0
 8003c16:	68b8      	ldr	r0, [r7, #8]
 8003c18:	f000 f821 	bl	8003c5e <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8003c1c:	4603      	mov	r3, r0
	       __result));
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	4619      	mov	r1, r3
 8003c22:	4620      	mov	r0, r4
 8003c24:	f000 f82c 	bl	8003c80 <_ZSt14__copy_move_a2ILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>
 8003c28:	4603      	mov	r3, r0
    }
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd90      	pop	{r4, r7, pc}

08003c32 <_ZSteqIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8003c32:	b590      	push	{r4, r7, lr}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f83b 	bl	8003cb8 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>
 8003c42:	4604      	mov	r4, r0
 8003c44:	6838      	ldr	r0, [r7, #0]
 8003c46:	f000 f837 	bl	8003cb8 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	429c      	cmp	r4, r3
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd90      	pop	{r4, r7, pc}

08003c5e <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8003c66:	1d3b      	adds	r3, r7, #4
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 f831 	bl	8003cd0 <_ZNKSt13move_iteratorIPP14ICANSubscriberE4baseEv>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 f839 	bl	8003ce8 <_ZSt12__miter_baseIPP14ICANSubscriberET_S3_>
 8003c76:	4603      	mov	r3, r0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_ZSt14__copy_move_a2ILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003c80:	b5b0      	push	{r4, r5, r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f836 	bl	8003cfe <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8003c92:	4604      	mov	r4, r0
 8003c94:	68b8      	ldr	r0, [r7, #8]
 8003c96:	f000 f832 	bl	8003cfe <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8003c9a:	4605      	mov	r5, r0
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f82e 	bl	8003cfe <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8003ca2:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f000 f833 	bl	8003d14 <_ZSt13__copy_move_aILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>
 8003cae:	4603      	mov	r3, r0
    }
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bdb0      	pop	{r4, r5, r7, pc}

08003cb8 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>:
      base() const
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_ZNKSt13move_iteratorIPP14ICANSubscriberE4baseEv>:
      base() const
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <_ZSt12__miter_baseIPP14ICANSubscriberET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>:
    __niter_base(_Iterator __it)
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <_ZSt13__copy_move_aILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f805 	bl	8003d38 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_>
 8003d2e:	4603      	mov	r3, r0
    }
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	109b      	asrs	r3, r3, #2
 8003d4c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d006      	beq.n	8003d62 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f008 f80c 	bl	800bd7a <memmove>
	  return __result + _Num;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4413      	add	r3, r2
	}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <_ZN8CANFrameC1E10CANFrameId10CANPayload>:

#include "CANFrame.hpp"



CANFrame::CANFrame(CANFrameId id, CANPayload payload) : id(id), payload(payload)
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	461c      	mov	r4, r3
 8003d86:	463b      	mov	r3, r7
 8003d88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	330c      	adds	r3, #12
 8003d94:	f107 0220 	add.w	r2, r7, #32
 8003d98:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
{
	if (!payload.isValid()) throw "Invalid CAN frame payload.";
 8003d9e:	f107 0020 	add.w	r0, r7, #32
 8003da2:	f000 f8a3 	bl	8003eec <_ZNK10CANPayload7isValidEv>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f083 0301 	eor.w	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x54>
 8003db2:	2004      	movs	r0, #4
 8003db4:	f007 fcfc 	bl	800b7b0 <__cxa_allocate_exception>
 8003db8:	4603      	mov	r3, r0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x60>)
 8003dbe:	6003      	str	r3, [r0, #0]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4905      	ldr	r1, [pc, #20]	; (8003dd8 <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x64>)
 8003dc4:	f007 fb04 	bl	800b3d0 <__cxa_throw>
}
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd90      	pop	{r4, r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	0800c774 	.word	0x0800c774
 8003dd8:	0800c8b8 	.word	0x0800c8b8

08003ddc <_ZN10CANFrameIdC1Emmb>:
*
*
*/
#include "CANFrameId.hpp"

CANFrameId::CANFrameId(uint32_t standardId, uint32_t extendedId, bool isExtendedFrame) :
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	70fb      	strb	r3, [r7, #3]
	standardId(standardId), extendedId(extendedId), isExtendedFrame(isExtendedFrame)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	721a      	strb	r2, [r3, #8]
{
	// check standard id
	if (standardId & ~0x7FF) throw "Not an 11 bit CAN standard id.";
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <_ZN10CANFrameIdC1Emmb+0x98>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <_ZN10CANFrameIdC1Emmb+0x40>
 8003e06:	2004      	movs	r0, #4
 8003e08:	f007 fcd2 	bl	800b7b0 <__cxa_allocate_exception>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <_ZN10CANFrameIdC1Emmb+0x9c>)
 8003e12:	6003      	str	r3, [r0, #0]
 8003e14:	2200      	movs	r2, #0
 8003e16:	4919      	ldr	r1, [pc, #100]	; (8003e7c <_ZN10CANFrameIdC1Emmb+0xa0>)
 8003e18:	f007 fada 	bl	800b3d0 <__cxa_throw>
	// check extended id
	if (!isExtendedFrame && extendedId) throw "CAN extended id is not used but is not zero.";
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	f083 0301 	eor.w	r3, r3, #1
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00d      	beq.n	8003e44 <_ZN10CANFrameIdC1Emmb+0x68>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <_ZN10CANFrameIdC1Emmb+0x68>
 8003e2e:	2004      	movs	r0, #4
 8003e30:	f007 fcbe 	bl	800b7b0 <__cxa_allocate_exception>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4618      	mov	r0, r3
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <_ZN10CANFrameIdC1Emmb+0xa4>)
 8003e3a:	6003      	str	r3, [r0, #0]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	490f      	ldr	r1, [pc, #60]	; (8003e7c <_ZN10CANFrameIdC1Emmb+0xa0>)
 8003e40:	f007 fac6 	bl	800b3d0 <__cxa_throw>
	if (isExtendedFrame && (extendedId & ~0x3FF)) throw "Not an 18 bit CAN extended id.";
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00f      	beq.n	8003e6a <_ZN10CANFrameIdC1Emmb+0x8e>
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <_ZN10CANFrameIdC1Emmb+0xa8>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <_ZN10CANFrameIdC1Emmb+0x8e>
 8003e54:	2004      	movs	r0, #4
 8003e56:	f007 fcab 	bl	800b7b0 <__cxa_allocate_exception>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <_ZN10CANFrameIdC1Emmb+0xac>)
 8003e60:	6003      	str	r3, [r0, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	4905      	ldr	r1, [pc, #20]	; (8003e7c <_ZN10CANFrameIdC1Emmb+0xa0>)
 8003e66:	f007 fab3 	bl	800b3d0 <__cxa_throw>
}
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	fffff800 	.word	0xfffff800
 8003e78:	0800c790 	.word	0x0800c790
 8003e7c:	0800c8b8 	.word	0x0800c8b8
 8003e80:	0800c7b0 	.word	0x0800c7b0
 8003e84:	fffffc00 	.word	0xfffffc00
 8003e88:	0800c7e0 	.word	0x0800c7e0

08003e8c <_ZN10CANFrameIdC1Em>:


CANFrameId::CANFrameId(uint32_t standardId) : CANFrameId(standardId, 0, false)
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
 8003e96:	2300      	movs	r3, #0
 8003e98:	2200      	movs	r2, #0
 8003e9a:	6839      	ldr	r1, [r7, #0]
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff9d 	bl	8003ddc <_ZN10CANFrameIdC1Emmb>
{
	// do nothing here
}
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_ZNK10CANFrameIdeqERKS_>:
	// do nothing here
}


bool CANFrameId::operator== (const CANFrameId& other) const
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
	return (standardId == other.standardId &&
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
			extendedId == other.extendedId &&
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d10d      	bne.n	8003ede <_ZNK10CANFrameIdeqERKS_+0x32>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
	return (standardId == other.standardId &&
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d107      	bne.n	8003ede <_ZNK10CANFrameIdeqERKS_+0x32>
			isExtendedFrame == other.isExtendedFrame);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	7a1a      	ldrb	r2, [r3, #8]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	7a1b      	ldrb	r3, [r3, #8]
			extendedId == other.extendedId &&
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d101      	bne.n	8003ede <_ZNK10CANFrameIdeqERKS_+0x32>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <_ZNK10CANFrameIdeqERKS_+0x34>
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <_ZNK10CANPayload7isValidEv>:
*/

#include "CANPayload.hpp"

bool CANPayload::isValid() const
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	if (isRemoteFrame && bitLength) return false;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7a5b      	ldrb	r3, [r3, #9]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <_ZNK10CANPayload7isValidEv+0x1c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	7a1b      	ldrb	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <_ZNK10CANPayload7isValidEv+0x1c>
 8003f04:	2300      	movs	r3, #0
 8003f06:	e024      	b.n	8003f52 <_ZNK10CANPayload7isValidEv+0x66>
	if (bitLength > 64) return false;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	7a1b      	ldrb	r3, [r3, #8]
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d901      	bls.n	8003f14 <_ZNK10CANPayload7isValidEv+0x28>
 8003f10:	2300      	movs	r3, #0
 8003f12:	e01e      	b.n	8003f52 <_ZNK10CANPayload7isValidEv+0x66>
	if (bitLength <= 32)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	7a1b      	ldrb	r3, [r3, #8]
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d80e      	bhi.n	8003f3a <_ZNK10CANPayload7isValidEv+0x4e>
	{
		if (data.uint32[1]) return false;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <_ZNK10CANPayload7isValidEv+0x3c>
 8003f24:	2300      	movs	r3, #0
 8003f26:	e014      	b.n	8003f52 <_ZNK10CANPayload7isValidEv+0x66>
		if (data.uint32[0] >> bitLength) return false;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	7a12      	ldrb	r2, [r2, #8]
 8003f30:	40d3      	lsrs	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00c      	beq.n	8003f50 <_ZNK10CANPayload7isValidEv+0x64>
 8003f36:	2300      	movs	r3, #0
 8003f38:	e00b      	b.n	8003f52 <_ZNK10CANPayload7isValidEv+0x66>
	}
	else if (data.uint32[1] >> (bitLength - 32)) return false;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	7a1b      	ldrb	r3, [r3, #8]
 8003f42:	3b20      	subs	r3, #32
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <_ZNK10CANPayload7isValidEv+0x64>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e000      	b.n	8003f52 <_ZNK10CANPayload7isValidEv+0x66>
	return true;
 8003f50:	2301      	movs	r3, #1
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
	...

08003f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f66:	e003      	b.n	8003f70 <LoopCopyDataInit>

08003f68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f6e:	3104      	adds	r1, #4

08003f70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f70:	480b      	ldr	r0, [pc, #44]	; (8003fa0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f72:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f78:	d3f6      	bcc.n	8003f68 <CopyDataInit>
  ldr  r2, =_sbss
 8003f7a:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f7c:	e002      	b.n	8003f84 <LoopFillZerobss>

08003f7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f80:	f842 3b04 	str.w	r3, [r2], #4

08003f84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f88:	d3f9      	bcc.n	8003f7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f8a:	f7fe fcb1 	bl	80028f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f8e:	f007 feb5 	bl	800bcfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f92:	f7fd fb5b 	bl	800164c <main>
  bx  lr    
 8003f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f98:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003f9c:	0800d204 	.word	0x0800d204
  ldr  r0, =_sdata
 8003fa0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fa4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8003fa8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003fac:	20001448 	.word	0x20001448

08003fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fb0:	e7fe      	b.n	8003fb0 <ADC_IRQHandler>

08003fb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb6:	2003      	movs	r0, #3
 8003fb8:	f000 ffeb 	bl	8004f92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	f7fe fb5f 	bl	8002680 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003fc2:	f7fe f979 	bl	80022b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_IncTick+0x20>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_IncTick+0x24>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4413      	add	r3, r2
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <HAL_IncTick+0x24>)
 8003fde:	6013      	str	r3, [r2, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	2000000c 	.word	0x2000000c
 8003ff0:	20001400 	.word	0x20001400

08003ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <HAL_GetTick+0x14>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20001400 	.word	0x20001400

0800400c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004014:	f7ff ffee 	bl	8003ff4 <HAL_GetTick>
 8004018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d005      	beq.n	8004032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_Delay+0x40>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004032:	bf00      	nop
 8004034:	f7ff ffde 	bl	8003ff4 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	429a      	cmp	r2, r3
 8004042:	d8f7      	bhi.n	8004034 <HAL_Delay+0x28>
  {
  }
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	2000000c 	.word	0x2000000c

08004050 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e0ed      	b.n	800423e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fe f94a 	bl	8002308 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0202 	bic.w	r2, r2, #2
 8004082:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004084:	f7ff ffb6 	bl	8003ff4 <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800408a:	e012      	b.n	80040b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800408c:	f7ff ffb2 	bl	8003ff4 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b0a      	cmp	r3, #10
 8004098:	d90b      	bls.n	80040b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2205      	movs	r2, #5
 80040aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0c5      	b.n	800423e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e5      	bne.n	800408c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040d0:	f7ff ff90 	bl	8003ff4 <HAL_GetTick>
 80040d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040d6:	e012      	b.n	80040fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040d8:	f7ff ff8c 	bl	8003ff4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b0a      	cmp	r3, #10
 80040e4:	d90b      	bls.n	80040fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2205      	movs	r2, #5
 80040f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e09f      	b.n	800423e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0e5      	beq.n	80040d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7e1b      	ldrb	r3, [r3, #24]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d108      	bne.n	8004126 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e007      	b.n	8004136 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004134:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7e5b      	ldrb	r3, [r3, #25]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d108      	bne.n	8004150 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e007      	b.n	8004160 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7e9b      	ldrb	r3, [r3, #26]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d108      	bne.n	800417a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0220 	orr.w	r2, r2, #32
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e007      	b.n	800418a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0220 	bic.w	r2, r2, #32
 8004188:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	7edb      	ldrb	r3, [r3, #27]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d108      	bne.n	80041a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0210 	bic.w	r2, r2, #16
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	e007      	b.n	80041b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0210 	orr.w	r2, r2, #16
 80041b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	7f1b      	ldrb	r3, [r3, #28]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d108      	bne.n	80041ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0208 	orr.w	r2, r2, #8
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e007      	b.n	80041de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0208 	bic.w	r2, r2, #8
 80041dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	7f5b      	ldrb	r3, [r3, #29]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d108      	bne.n	80041f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0204 	orr.w	r2, r2, #4
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e007      	b.n	8004208 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0204 	bic.w	r2, r2, #4
 8004206:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	ea42 0103 	orr.w	r1, r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	1e5a      	subs	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800425e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d003      	beq.n	800426e <HAL_CAN_ConfigFilter+0x26>
 8004266:	7cfb      	ldrb	r3, [r7, #19]
 8004268:	2b02      	cmp	r3, #2
 800426a:	f040 80c7 	bne.w	80043fc <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a69      	ldr	r2, [pc, #420]	; (8004418 <HAL_CAN_ConfigFilter+0x1d0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d001      	beq.n	800427c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8004278:	4b68      	ldr	r3, [pc, #416]	; (800441c <HAL_CAN_ConfigFilter+0x1d4>)
 800427a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	4a63      	ldr	r2, [pc, #396]	; (800441c <HAL_CAN_ConfigFilter+0x1d4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800429a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	431a      	orrs	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2201      	movs	r2, #1
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	401a      	ands	r2, r3
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d123      	bne.n	800432a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	43db      	mvns	r3, r3
 80042ec:	401a      	ands	r2, r3
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004304:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3248      	adds	r2, #72	; 0x48
 800430a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800431e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004320:	6979      	ldr	r1, [r7, #20]
 8004322:	3348      	adds	r3, #72	; 0x48
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	440b      	add	r3, r1
 8004328:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d122      	bne.n	8004378 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	431a      	orrs	r2, r3
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004352:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	3248      	adds	r2, #72	; 0x48
 8004358:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800436c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800436e:	6979      	ldr	r1, [r7, #20]
 8004370:	3348      	adds	r3, #72	; 0x48
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	440b      	add	r3, r1
 8004376:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	43db      	mvns	r3, r3
 800438a:	401a      	ands	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004392:	e007      	b.n	80043a4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	431a      	orrs	r2, r3
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	401a      	ands	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80043be:	e007      	b.n	80043d0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d107      	bne.n	80043e8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043ee:	f023 0201 	bic.w	r2, r3, #1
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e006      	b.n	800440a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40003400 	.word	0x40003400
 800441c:	40006400 	.word	0x40006400

08004420 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d12e      	bne.n	8004492 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800444c:	f7ff fdd2 	bl	8003ff4 <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004452:	e012      	b.n	800447a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004454:	f7ff fdce 	bl	8003ff4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b0a      	cmp	r3, #10
 8004460:	d90b      	bls.n	800447a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2205      	movs	r2, #5
 8004472:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e012      	b.n	80044a0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e006      	b.n	80044a0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b089      	sub	sp, #36	; 0x24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044bc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80044c6:	7ffb      	ldrb	r3, [r7, #31]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d003      	beq.n	80044d4 <HAL_CAN_AddTxMessage+0x2c>
 80044cc:	7ffb      	ldrb	r3, [r7, #31]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	f040 80b8 	bne.w	8004644 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80a0 	beq.w	8004634 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	0e1b      	lsrs	r3, r3, #24
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d907      	bls.n	8004514 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e09e      	b.n	8004652 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004514:	2201      	movs	r2, #1
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	409a      	lsls	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10d      	bne.n	8004542 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004530:	68f9      	ldr	r1, [r7, #12]
 8004532:	6809      	ldr	r1, [r1, #0]
 8004534:	431a      	orrs	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	3318      	adds	r3, #24
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	440b      	add	r3, r1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e00f      	b.n	8004562 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800454c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004552:	68f9      	ldr	r1, [r7, #12]
 8004554:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004556:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	3318      	adds	r3, #24
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	440b      	add	r3, r1
 8004560:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	3318      	adds	r3, #24
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	440b      	add	r3, r1
 8004572:	3304      	adds	r3, #4
 8004574:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	7d1b      	ldrb	r3, [r3, #20]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d111      	bne.n	80045a2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	3318      	adds	r3, #24
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	4413      	add	r3, r2
 800458a:	3304      	adds	r3, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	6811      	ldr	r1, [r2, #0]
 8004592:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	3318      	adds	r3, #24
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	440b      	add	r3, r1
 800459e:	3304      	adds	r3, #4
 80045a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3307      	adds	r3, #7
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	061a      	lsls	r2, r3, #24
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3306      	adds	r3, #6
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	041b      	lsls	r3, r3, #16
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3305      	adds	r3, #5
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	4313      	orrs	r3, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	3204      	adds	r2, #4
 80045c2:	7812      	ldrb	r2, [r2, #0]
 80045c4:	4610      	mov	r0, r2
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	6811      	ldr	r1, [r2, #0]
 80045ca:	ea43 0200 	orr.w	r2, r3, r0
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	440b      	add	r3, r1
 80045d4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80045d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3303      	adds	r3, #3
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	061a      	lsls	r2, r3, #24
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3302      	adds	r3, #2
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3301      	adds	r3, #1
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	021b      	lsls	r3, r3, #8
 80045f4:	4313      	orrs	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	4610      	mov	r0, r2
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	6811      	ldr	r1, [r2, #0]
 8004600:	ea43 0200 	orr.w	r2, r3, r0
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	440b      	add	r3, r1
 800460a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800460e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	3318      	adds	r3, #24
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	4413      	add	r3, r2
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	6811      	ldr	r1, [r2, #0]
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	3318      	adds	r3, #24
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	440b      	add	r3, r1
 800462e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	e00e      	b.n	8004652 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e006      	b.n	8004652 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
  }
}
 8004652:	4618      	mov	r0, r3
 8004654:	3724      	adds	r7, #36	; 0x24
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004670:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004672:	7afb      	ldrb	r3, [r7, #11]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d002      	beq.n	800467e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004678:	7afb      	ldrb	r3, [r7, #11]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d11d      	bne.n	80046ba <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3301      	adds	r3, #1
 8004690:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3301      	adds	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3301      	adds	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80046ba:	68fb      	ldr	r3, [r7, #12]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046dc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80046de:	7afb      	ldrb	r3, [r7, #11]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d002      	beq.n	80046ea <HAL_CAN_IsTxMessagePending+0x22>
 80046e4:	7afb      	ldrb	r3, [r7, #11]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d10b      	bne.n	8004702 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	069b      	lsls	r3, r3, #26
 80046f4:	401a      	ands	r2, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	069b      	lsls	r3, r3, #26
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d001      	beq.n	8004702 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80046fe:	2301      	movs	r3, #1
 8004700:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004702:	68fb      	ldr	r3, [r7, #12]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004724:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004726:	7dfb      	ldrb	r3, [r7, #23]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d003      	beq.n	8004734 <HAL_CAN_GetRxMessage+0x24>
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	2b02      	cmp	r3, #2
 8004730:	f040 80f3 	bne.w	800491a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10e      	bne.n	8004758 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d116      	bne.n	8004776 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0e7      	b.n	8004928 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d107      	bne.n	8004776 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0d8      	b.n	8004928 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	331b      	adds	r3, #27
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	4413      	add	r3, r2
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0204 	and.w	r2, r3, #4
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10c      	bne.n	80047ae <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	331b      	adds	r3, #27
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	4413      	add	r3, r2
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	0d5b      	lsrs	r3, r3, #21
 80047a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e00b      	b.n	80047c6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	331b      	adds	r3, #27
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	4413      	add	r3, r2
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	331b      	adds	r3, #27
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	4413      	add	r3, r2
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0202 	and.w	r2, r3, #2
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	331b      	adds	r3, #27
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	4413      	add	r3, r2
 80047e8:	3304      	adds	r3, #4
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 020f 	and.w	r2, r3, #15
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	331b      	adds	r3, #27
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	4413      	add	r3, r2
 8004800:	3304      	adds	r3, #4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	b2da      	uxtb	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	331b      	adds	r3, #27
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	4413      	add	r3, r2
 8004818:	3304      	adds	r3, #4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	b29a      	uxth	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	4413      	add	r3, r2
 800482e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	4413      	add	r3, r2
 8004844:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	0a1a      	lsrs	r2, r3, #8
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	3301      	adds	r3, #1
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	4413      	add	r3, r2
 800485e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0c1a      	lsrs	r2, r3, #16
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	3302      	adds	r3, #2
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	4413      	add	r3, r2
 8004878:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	0e1a      	lsrs	r2, r3, #24
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	3303      	adds	r3, #3
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	4413      	add	r3, r2
 8004892:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	3304      	adds	r3, #4
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0a1a      	lsrs	r2, r3, #8
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	3305      	adds	r3, #5
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	0c1a      	lsrs	r2, r3, #16
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	3306      	adds	r3, #6
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	4413      	add	r3, r2
 80048de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	0e1a      	lsrs	r2, r3, #24
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	3307      	adds	r3, #7
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d108      	bne.n	8004906 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0220 	orr.w	r2, r2, #32
 8004902:	60da      	str	r2, [r3, #12]
 8004904:	e007      	b.n	8004916 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0220 	orr.w	r2, r2, #32
 8004914:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e006      	b.n	8004928 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
  }
}
 8004928:	4618      	mov	r0, r3
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004948:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800494a:	7afb      	ldrb	r3, [r7, #11]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d002      	beq.n	8004956 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004950:	7afb      	ldrb	r3, [r7, #11]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d10f      	bne.n	8004976 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e005      	b.n	8004976 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004976:	68fb      	ldr	r3, [r7, #12]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004994:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d002      	beq.n	80049a2 <HAL_CAN_ActivateNotification+0x1e>
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d109      	bne.n	80049b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6959      	ldr	r1, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e006      	b.n	80049c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
  }
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	; 0x28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80049d8:	2300      	movs	r3, #0
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d07c      	beq.n	8004b10 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d023      	beq.n	8004a68 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2201      	movs	r2, #1
 8004a26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f97d 	bl	8004d32 <HAL_CAN_TxMailbox0CompleteCallback>
 8004a38:	e016      	b.n	8004a68 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a4c:	e00c      	b.n	8004a68 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	e002      	b.n	8004a68 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f983 	bl	8004d6e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d024      	beq.n	8004abc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f95d 	bl	8004d46 <HAL_CAN_TxMailbox1CompleteCallback>
 8004a8c:	e016      	b.n	8004abc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa0:	e00c      	b.n	8004abc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d004      	beq.n	8004ab6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab4:	e002      	b.n	8004abc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f963 	bl	8004d82 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d024      	beq.n	8004b10 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ace:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f93d 	bl	8004d5a <HAL_CAN_TxMailbox2CompleteCallback>
 8004ae0:	e016      	b.n	8004b10 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
 8004af4:	e00c      	b.n	8004b10 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
 8004b08:	e002      	b.n	8004b10 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f943 	bl	8004d96 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2210      	movs	r2, #16
 8004b32:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d006      	beq.n	8004b56 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f934 	bl	8004dbe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d009      	beq.n	8004b74 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f91b 	bl	8004daa <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2210      	movs	r2, #16
 8004b96:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d006      	beq.n	8004bba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f916 	bl	8004de6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d009      	beq.n	8004bd8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8fd 	bl	8004dd2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00b      	beq.n	8004bfa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d006      	beq.n	8004bfa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2210      	movs	r2, #16
 8004bf2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f900 	bl	8004dfa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d006      	beq.n	8004c1c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2208      	movs	r2, #8
 8004c14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f8f9 	bl	8004e0e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d075      	beq.n	8004d12 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d06c      	beq.n	8004d0a <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d008      	beq.n	8004c68 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	f043 0302 	orr.w	r3, r3, #2
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	f043 0304 	orr.w	r3, r3, #4
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d03d      	beq.n	8004d0a <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d038      	beq.n	8004d0a <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c9e:	2b30      	cmp	r3, #48	; 0x30
 8004ca0:	d017      	beq.n	8004cd2 <HAL_CAN_IRQHandler+0x302>
 8004ca2:	2b30      	cmp	r3, #48	; 0x30
 8004ca4:	d804      	bhi.n	8004cb0 <HAL_CAN_IRQHandler+0x2e0>
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	d009      	beq.n	8004cbe <HAL_CAN_IRQHandler+0x2ee>
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	d00c      	beq.n	8004cc8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004cae:	e024      	b.n	8004cfa <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004cb0:	2b50      	cmp	r3, #80	; 0x50
 8004cb2:	d018      	beq.n	8004ce6 <HAL_CAN_IRQHandler+0x316>
 8004cb4:	2b60      	cmp	r3, #96	; 0x60
 8004cb6:	d01b      	beq.n	8004cf0 <HAL_CAN_IRQHandler+0x320>
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d00f      	beq.n	8004cdc <HAL_CAN_IRQHandler+0x30c>
            break;
 8004cbc:	e01d      	b.n	8004cfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	f043 0308 	orr.w	r3, r3, #8
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cc6:	e018      	b.n	8004cfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	f043 0310 	orr.w	r3, r3, #16
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cd0:	e013      	b.n	8004cfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	f043 0320 	orr.w	r3, r3, #32
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cda:	e00e      	b.n	8004cfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ce4:	e009      	b.n	8004cfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cee:	e004      	b.n	8004cfa <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004cf8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699a      	ldr	r2, [r3, #24]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004d08:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2204      	movs	r2, #4
 8004d10:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f87c 	bl	8004e22 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	3728      	adds	r7, #40	; 0x28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
	...

08004e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <__NVIC_SetPriorityGrouping+0x40>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e54:	4013      	ands	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e60:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <__NVIC_SetPriorityGrouping+0x44>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e66:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <__NVIC_SetPriorityGrouping+0x40>)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	60d3      	str	r3, [r2, #12]
}
 8004e6c:	bf00      	nop
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	e000ed00 	.word	0xe000ed00
 8004e7c:	05fa0000 	.word	0x05fa0000

08004e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e84:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <__NVIC_GetPriorityGrouping+0x18>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	f003 0307 	and.w	r3, r3, #7
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	e000ed00 	.word	0xe000ed00

08004e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	db0b      	blt.n	8004ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	f003 021f 	and.w	r2, r3, #31
 8004eb4:	4907      	ldr	r1, [pc, #28]	; (8004ed4 <__NVIC_EnableIRQ+0x38>)
 8004eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eba:	095b      	lsrs	r3, r3, #5
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8004ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	e000e100 	.word	0xe000e100

08004ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	6039      	str	r1, [r7, #0]
 8004ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	db0a      	blt.n	8004f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	490c      	ldr	r1, [pc, #48]	; (8004f24 <__NVIC_SetPriority+0x4c>)
 8004ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef6:	0112      	lsls	r2, r2, #4
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	440b      	add	r3, r1
 8004efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f00:	e00a      	b.n	8004f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	4908      	ldr	r1, [pc, #32]	; (8004f28 <__NVIC_SetPriority+0x50>)
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	3b04      	subs	r3, #4
 8004f10:	0112      	lsls	r2, r2, #4
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	440b      	add	r3, r1
 8004f16:	761a      	strb	r2, [r3, #24]
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	e000e100 	.word	0xe000e100
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	; 0x24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f1c3 0307 	rsb	r3, r3, #7
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	bf28      	it	cs
 8004f4a:	2304      	movcs	r3, #4
 8004f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3304      	adds	r3, #4
 8004f52:	2b06      	cmp	r3, #6
 8004f54:	d902      	bls.n	8004f5c <NVIC_EncodePriority+0x30>
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3b03      	subs	r3, #3
 8004f5a:	e000      	b.n	8004f5e <NVIC_EncodePriority+0x32>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f60:	f04f 32ff 	mov.w	r2, #4294967295
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43da      	mvns	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	401a      	ands	r2, r3
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f74:	f04f 31ff 	mov.w	r1, #4294967295
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	43d9      	mvns	r1, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f84:	4313      	orrs	r3, r2
         );
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3724      	adds	r7, #36	; 0x24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff ff4c 	bl	8004e38 <__NVIC_SetPriorityGrouping>
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fba:	f7ff ff61 	bl	8004e80 <__NVIC_GetPriorityGrouping>
 8004fbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	6978      	ldr	r0, [r7, #20]
 8004fc6:	f7ff ffb1 	bl	8004f2c <NVIC_EncodePriority>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff ff80 	bl	8004ed8 <__NVIC_SetPriority>
}
 8004fd8:	bf00      	nop
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff ff54 	bl	8004e9c <__NVIC_EnableIRQ>
}
 8004ff4:	bf00      	nop
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800500c:	4ba9      	ldr	r3, [pc, #676]	; (80052b4 <HAL_ETH_Init+0x2b8>)
 800500e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8005014:	2300      	movs	r3, #0
 8005016:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e183      	b.n	800532a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fd f9ca 	bl	80023d0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800503c:	4b9e      	ldr	r3, [pc, #632]	; (80052b8 <HAL_ETH_Init+0x2bc>)
 800503e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005040:	4a9d      	ldr	r2, [pc, #628]	; (80052b8 <HAL_ETH_Init+0x2bc>)
 8005042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005046:	6453      	str	r3, [r2, #68]	; 0x44
 8005048:	4b9b      	ldr	r3, [pc, #620]	; (80052b8 <HAL_ETH_Init+0x2bc>)
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005054:	4b99      	ldr	r3, [pc, #612]	; (80052bc <HAL_ETH_Init+0x2c0>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a98      	ldr	r2, [pc, #608]	; (80052bc <HAL_ETH_Init+0x2c0>)
 800505a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800505e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005060:	4b96      	ldr	r3, [pc, #600]	; (80052bc <HAL_ETH_Init+0x2c0>)
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	4994      	ldr	r1, [pc, #592]	; (80052bc <HAL_ETH_Init+0x2c0>)
 800506a:	4313      	orrs	r3, r2
 800506c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005084:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005086:	f7fe ffb5 	bl	8003ff4 <HAL_GetTick>
 800508a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800508c:	e011      	b.n	80050b2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800508e:	f7fe ffb1 	bl	8003ff4 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800509c:	d909      	bls.n	80050b2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2203      	movs	r2, #3
 80050a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e13b      	b.n	800532a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e4      	bne.n	800508e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f023 031c 	bic.w	r3, r3, #28
 80050d2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80050d4:	f001 fbbe 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 80050d8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	4a78      	ldr	r2, [pc, #480]	; (80052c0 <HAL_ETH_Init+0x2c4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d908      	bls.n	80050f4 <HAL_ETH_Init+0xf8>
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	4a77      	ldr	r2, [pc, #476]	; (80052c4 <HAL_ETH_Init+0x2c8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d804      	bhi.n	80050f4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f043 0308 	orr.w	r3, r3, #8
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	e027      	b.n	8005144 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	4a73      	ldr	r2, [pc, #460]	; (80052c4 <HAL_ETH_Init+0x2c8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d908      	bls.n	800510e <HAL_ETH_Init+0x112>
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	4a72      	ldr	r2, [pc, #456]	; (80052c8 <HAL_ETH_Init+0x2cc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d804      	bhi.n	800510e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f043 030c 	orr.w	r3, r3, #12
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	e01a      	b.n	8005144 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	4a6d      	ldr	r2, [pc, #436]	; (80052c8 <HAL_ETH_Init+0x2cc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d903      	bls.n	800511e <HAL_ETH_Init+0x122>
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	4a6c      	ldr	r2, [pc, #432]	; (80052cc <HAL_ETH_Init+0x2d0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d911      	bls.n	8005142 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	4a6a      	ldr	r2, [pc, #424]	; (80052cc <HAL_ETH_Init+0x2d0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d908      	bls.n	8005138 <HAL_ETH_Init+0x13c>
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	4a69      	ldr	r2, [pc, #420]	; (80052d0 <HAL_ETH_Init+0x2d4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d804      	bhi.n	8005138 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f043 0304 	orr.w	r3, r3, #4
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	e005      	b.n	8005144 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f043 0310 	orr.w	r3, r3, #16
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	e000      	b.n	8005144 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8005142:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800514c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005150:	2100      	movs	r1, #0
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f956 	bl	8005404 <HAL_ETH_WritePHYRegister>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8005162:	6939      	ldr	r1, [r7, #16]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f9b3 	bl	80054d0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e0d9      	b.n	800532a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8005176:	20ff      	movs	r0, #255	; 0xff
 8005178:	f7fe ff48 	bl	800400c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80a7 	beq.w	80052d4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005186:	f7fe ff35 	bl	8003ff4 <HAL_GetTick>
 800518a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800518c:	f107 030c 	add.w	r3, r7, #12
 8005190:	461a      	mov	r2, r3
 8005192:	2101      	movs	r1, #1
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f8cd 	bl	8005334 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800519a:	f7fe ff2b 	bl	8003ff4 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d90f      	bls.n	80051cc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80051b0:	6939      	ldr	r1, [r7, #16]
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f98c 	bl	80054d0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e0ae      	b.n	800532a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0da      	beq.n	800518c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80051d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051da:	2100      	movs	r1, #0
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f911 	bl	8005404 <HAL_ETH_WritePHYRegister>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80051ec:	6939      	ldr	r1, [r7, #16]
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f96e 	bl	80054d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80051fc:	2301      	movs	r3, #1
 80051fe:	e094      	b.n	800532a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8005200:	f7fe fef8 	bl	8003ff4 <HAL_GetTick>
 8005204:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8005206:	f107 030c 	add.w	r3, r7, #12
 800520a:	461a      	mov	r2, r3
 800520c:	2101      	movs	r1, #1
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f890 	bl	8005334 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8005214:	f7fe feee 	bl	8003ff4 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005222:	4293      	cmp	r3, r2
 8005224:	d90f      	bls.n	8005246 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800522a:	6939      	ldr	r1, [r7, #16]
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f94f 	bl	80054d0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e071      	b.n	800532a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0da      	beq.n	8005206 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8005250:	f107 030c 	add.w	r3, r7, #12
 8005254:	461a      	mov	r2, r3
 8005256:	211f      	movs	r1, #31
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f86b 	bl	8005334 <HAL_ETH_ReadPHYRegister>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005268:	6939      	ldr	r1, [r7, #16]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f930 	bl	80054d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8005278:	2301      	movs	r3, #1
 800527a:	e056      	b.n	800532a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	d004      	beq.n	8005290 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800528c:	60da      	str	r2, [r3, #12]
 800528e:	e002      	b.n	8005296 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	609a      	str	r2, [r3, #8]
 80052a6:	e037      	b.n	8005318 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	e032      	b.n	8005318 <HAL_ETH_Init+0x31c>
 80052b2:	bf00      	nop
 80052b4:	03938700 	.word	0x03938700
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40013800 	.word	0x40013800
 80052c0:	01312cff 	.word	0x01312cff
 80052c4:	02160ebf 	.word	0x02160ebf
 80052c8:	039386ff 	.word	0x039386ff
 80052cc:	05f5e0ff 	.word	0x05f5e0ff
 80052d0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	08db      	lsrs	r3, r3, #3
 80052da:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80052e4:	4313      	orrs	r3, r2
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	2100      	movs	r1, #0
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f889 	bl	8005404 <HAL_ETH_WritePHYRegister>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80052fc:	6939      	ldr	r1, [r7, #16]
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f8e6 	bl	80054d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e00c      	b.n	800532a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8005310:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005314:	f7fe fe7a 	bl	800400c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8005318:	6939      	ldr	r1, [r7, #16]
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f8d8 	bl	80054d0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop

08005334 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	460b      	mov	r3, r1
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b82      	cmp	r3, #130	; 0x82
 8005354:	d101      	bne.n	800535a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8005356:	2302      	movs	r3, #2
 8005358:	e050      	b.n	80053fc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2282      	movs	r2, #130	; 0x82
 800535e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f003 031c 	and.w	r3, r3, #28
 8005370:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8a1b      	ldrh	r3, [r3, #16]
 8005376:	02db      	lsls	r3, r3, #11
 8005378:	b29b      	uxth	r3, r3
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005380:	897b      	ldrh	r3, [r7, #10]
 8005382:	019b      	lsls	r3, r3, #6
 8005384:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f023 0302 	bic.w	r3, r3, #2
 8005394:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80053a6:	f7fe fe25 	bl	8003ff4 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80053ac:	e015      	b.n	80053da <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80053ae:	f7fe fe21 	bl	8003ff4 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053bc:	d309      	bcc.n	80053d2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e014      	b.n	80053fc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1e4      	bne.n	80053ae <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	460b      	mov	r3, r1
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b42      	cmp	r3, #66	; 0x42
 8005424:	d101      	bne.n	800542a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005426:	2302      	movs	r3, #2
 8005428:	e04e      	b.n	80054c8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2242      	movs	r2, #66	; 0x42
 800542e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f003 031c 	and.w	r3, r3, #28
 8005440:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8a1b      	ldrh	r3, [r3, #16]
 8005446:	02db      	lsls	r3, r3, #11
 8005448:	b29b      	uxth	r3, r3
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8005450:	897b      	ldrh	r3, [r7, #10]
 8005452:	019b      	lsls	r3, r3, #6
 8005454:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005480:	f7fe fdb8 	bl	8003ff4 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005486:	e015      	b.n	80054b4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005488:	f7fe fdb4 	bl	8003ff4 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005496:	d309      	bcc.n	80054ac <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e00d      	b.n	80054c8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e4      	bne.n	8005488 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b0b0      	sub	sp, #192	; 0xc0
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d007      	beq.n	80054f6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ec:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80054fe:	2300      	movs	r3, #0
 8005500:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005502:	2300      	movs	r3, #0
 8005504:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005506:	2300      	movs	r3, #0
 8005508:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800550a:	2300      	movs	r3, #0
 800550c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d103      	bne.n	800551e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800551a:	663b      	str	r3, [r7, #96]	; 0x60
 800551c:	e001      	b.n	8005522 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800551e:	2300      	movs	r3, #0
 8005520:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005526:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005528:	2300      	movs	r3, #0
 800552a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800552c:	2300      	movs	r3, #0
 800552e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005530:	2300      	movs	r3, #0
 8005532:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005534:	2300      	movs	r3, #0
 8005536:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005538:	2300      	movs	r3, #0
 800553a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005540:	2300      	movs	r3, #0
 8005542:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005546:	2300      	movs	r3, #0
 8005548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800554c:	2300      	movs	r3, #0
 800554e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005552:	2300      	movs	r3, #0
 8005554:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005558:	2300      	movs	r3, #0
 800555a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800555e:	2300      	movs	r3, #0
 8005560:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8005564:	2300      	movs	r3, #0
 8005566:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800556a:	2300      	movs	r3, #0
 800556c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005576:	2300      	movs	r3, #0
 8005578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800557c:	2300      	movs	r3, #0
 800557e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005582:	2300      	movs	r3, #0
 8005584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005588:	2300      	movs	r3, #0
 800558a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800558e:	2300      	movs	r3, #0
 8005590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8005594:	2300      	movs	r3, #0
 8005596:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80055a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80055a8:	4bab      	ldr	r3, [pc, #684]	; (8005858 <ETH_MACDMAConfig+0x388>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80055b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80055b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80055b4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80055b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80055b8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80055ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80055bc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80055c2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80055c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80055c6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80055c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80055ca:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80055d0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80055d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80055d4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80055d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80055d8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80055da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80055dc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80055de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80055e0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80055e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80055e4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80055e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80055f8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005604:	2001      	movs	r0, #1
 8005606:	f7fe fd01 	bl	800400c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005612:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005614:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005618:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800561a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800561c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800561e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005622:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005624:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005628:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800562a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800562e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005634:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005638:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005640:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005642:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800564e:	2001      	movs	r0, #1
 8005650:	f7fe fcdc 	bl	800400c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800565c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005666:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005670:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800567c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005680:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005684:	4013      	ands	r3, r2
 8005686:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800568a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800568e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005690:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005694:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005696:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800569a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800569c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80056a0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80056a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80056a6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80056a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80056ac:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80056ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80056c0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80056cc:	2001      	movs	r0, #1
 80056ce:	f7fe fc9d 	bl	800400c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80056da:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80056dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80056e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80056f6:	2001      	movs	r0, #1
 80056f8:	f7fe fc88 	bl	800400c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005704:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005706:	2300      	movs	r3, #0
 8005708:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800570a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800570e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005710:	2300      	movs	r3, #0
 8005712:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005714:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005718:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800571a:	2300      	movs	r3, #0
 800571c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005722:	2300      	movs	r3, #0
 8005724:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005726:	2300      	movs	r3, #0
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800572a:	2304      	movs	r3, #4
 800572c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800572e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005738:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800573a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005744:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800574a:	2300      	movs	r3, #0
 800574c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800574e:	2300      	movs	r3, #0
 8005750:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	f241 0318 	movw	r3, #4120	; 0x1018
 800575a:	4413      	add	r3, r2
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8005762:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005766:	4b3d      	ldr	r3, [pc, #244]	; (800585c <ETH_MACDMAConfig+0x38c>)
 8005768:	4013      	ands	r3, r2
 800576a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800576e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005770:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005772:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005774:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005776:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005778:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800577a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800577c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800577e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005780:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005782:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005784:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005786:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800578a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800578e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005790:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	f241 0318 	movw	r3, #4120	; 0x1018
 80057a2:	4413      	add	r3, r2
 80057a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80057a8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	f241 0318 	movw	r3, #4120	; 0x1018
 80057b2:	4413      	add	r3, r2
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80057ba:	2001      	movs	r0, #1
 80057bc:	f7fe fc26 	bl	800400c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80057c8:	4413      	add	r3, r2
 80057ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80057ce:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80057d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80057d4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80057d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80057d8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80057dc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80057de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80057e0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80057e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80057e6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80057e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80057ea:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80057f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005808:	2001      	movs	r0, #1
 800580a:	f7fe fbff 	bl	800400c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005816:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800581a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d10d      	bne.n	8005840 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	f241 031c 	movw	r3, #4124	; 0x101c
 800582c:	4413      	add	r3, r2
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6811      	ldr	r1, [r2, #0]
 8005834:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <ETH_MACDMAConfig+0x390>)
 8005836:	431a      	orrs	r2, r3
 8005838:	f241 031c 	movw	r3, #4124	; 0x101c
 800583c:	440b      	add	r3, r1
 800583e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	461a      	mov	r2, r3
 8005846:	2100      	movs	r1, #0
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 f80b 	bl	8005864 <ETH_MACAddressConfig>
}
 800584e:	bf00      	nop
 8005850:	37c0      	adds	r7, #192	; 0xc0
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	ff20810f 	.word	0xff20810f
 800585c:	f8de3f23 	.word	0xf8de3f23
 8005860:	00010040 	.word	0x00010040

08005864 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3305      	adds	r3, #5
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	021b      	lsls	r3, r3, #8
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	3204      	adds	r2, #4
 800587c:	7812      	ldrb	r2, [r2, #0]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	4b11      	ldr	r3, [pc, #68]	; (80058cc <ETH_MACAddressConfig+0x68>)
 8005886:	4413      	add	r3, r2
 8005888:	461a      	mov	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3303      	adds	r3, #3
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	061a      	lsls	r2, r3, #24
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3302      	adds	r3, #2
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	041b      	lsls	r3, r3, #16
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3301      	adds	r3, #1
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	4313      	orrs	r3, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	7812      	ldrb	r2, [r2, #0]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <ETH_MACAddressConfig+0x6c>)
 80058b6:	4413      	add	r3, r2
 80058b8:	461a      	mov	r2, r3
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	6013      	str	r3, [r2, #0]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40028040 	.word	0x40028040
 80058d0:	40028044 	.word	0x40028044

080058d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b089      	sub	sp, #36	; 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80058e6:	2300      	movs	r3, #0
 80058e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80058ea:	2300      	movs	r3, #0
 80058ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80058ee:	2300      	movs	r3, #0
 80058f0:	61fb      	str	r3, [r7, #28]
 80058f2:	e175      	b.n	8005be0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80058f4:	2201      	movs	r2, #1
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4013      	ands	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	429a      	cmp	r2, r3
 800590e:	f040 8164 	bne.w	8005bda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d00b      	beq.n	8005932 <HAL_GPIO_Init+0x5e>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d007      	beq.n	8005932 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005926:	2b11      	cmp	r3, #17
 8005928:	d003      	beq.n	8005932 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b12      	cmp	r3, #18
 8005930:	d130      	bne.n	8005994 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	2203      	movs	r2, #3
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43db      	mvns	r3, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4013      	ands	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	4313      	orrs	r3, r2
 800595a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005968:	2201      	movs	r2, #1
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	4013      	ands	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	091b      	lsrs	r3, r3, #4
 800597e:	f003 0201 	and.w	r2, r3, #1
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4313      	orrs	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	2203      	movs	r2, #3
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	43db      	mvns	r3, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d003      	beq.n	80059d4 <HAL_GPIO_Init+0x100>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	2b12      	cmp	r3, #18
 80059d2:	d123      	bne.n	8005a1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	08da      	lsrs	r2, r3, #3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3208      	adds	r2, #8
 80059dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	220f      	movs	r2, #15
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	43db      	mvns	r3, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4013      	ands	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	08da      	lsrs	r2, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3208      	adds	r2, #8
 8005a16:	69b9      	ldr	r1, [r7, #24]
 8005a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	2203      	movs	r2, #3
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4013      	ands	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f003 0203 	and.w	r2, r3, #3
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80be 	beq.w	8005bda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a5e:	4b65      	ldr	r3, [pc, #404]	; (8005bf4 <HAL_GPIO_Init+0x320>)
 8005a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a62:	4a64      	ldr	r2, [pc, #400]	; (8005bf4 <HAL_GPIO_Init+0x320>)
 8005a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a68:	6453      	str	r3, [r2, #68]	; 0x44
 8005a6a:	4b62      	ldr	r3, [pc, #392]	; (8005bf4 <HAL_GPIO_Init+0x320>)
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a76:	4a60      	ldr	r2, [pc, #384]	; (8005bf8 <HAL_GPIO_Init+0x324>)
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	089b      	lsrs	r3, r3, #2
 8005a7c:	3302      	adds	r3, #2
 8005a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	220f      	movs	r2, #15
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43db      	mvns	r3, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	4013      	ands	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a57      	ldr	r2, [pc, #348]	; (8005bfc <HAL_GPIO_Init+0x328>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d037      	beq.n	8005b12 <HAL_GPIO_Init+0x23e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a56      	ldr	r2, [pc, #344]	; (8005c00 <HAL_GPIO_Init+0x32c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d031      	beq.n	8005b0e <HAL_GPIO_Init+0x23a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a55      	ldr	r2, [pc, #340]	; (8005c04 <HAL_GPIO_Init+0x330>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d02b      	beq.n	8005b0a <HAL_GPIO_Init+0x236>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a54      	ldr	r2, [pc, #336]	; (8005c08 <HAL_GPIO_Init+0x334>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d025      	beq.n	8005b06 <HAL_GPIO_Init+0x232>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a53      	ldr	r2, [pc, #332]	; (8005c0c <HAL_GPIO_Init+0x338>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d01f      	beq.n	8005b02 <HAL_GPIO_Init+0x22e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a52      	ldr	r2, [pc, #328]	; (8005c10 <HAL_GPIO_Init+0x33c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d019      	beq.n	8005afe <HAL_GPIO_Init+0x22a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a51      	ldr	r2, [pc, #324]	; (8005c14 <HAL_GPIO_Init+0x340>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d013      	beq.n	8005afa <HAL_GPIO_Init+0x226>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a50      	ldr	r2, [pc, #320]	; (8005c18 <HAL_GPIO_Init+0x344>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00d      	beq.n	8005af6 <HAL_GPIO_Init+0x222>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a4f      	ldr	r2, [pc, #316]	; (8005c1c <HAL_GPIO_Init+0x348>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d007      	beq.n	8005af2 <HAL_GPIO_Init+0x21e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a4e      	ldr	r2, [pc, #312]	; (8005c20 <HAL_GPIO_Init+0x34c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d101      	bne.n	8005aee <HAL_GPIO_Init+0x21a>
 8005aea:	2309      	movs	r3, #9
 8005aec:	e012      	b.n	8005b14 <HAL_GPIO_Init+0x240>
 8005aee:	230a      	movs	r3, #10
 8005af0:	e010      	b.n	8005b14 <HAL_GPIO_Init+0x240>
 8005af2:	2308      	movs	r3, #8
 8005af4:	e00e      	b.n	8005b14 <HAL_GPIO_Init+0x240>
 8005af6:	2307      	movs	r3, #7
 8005af8:	e00c      	b.n	8005b14 <HAL_GPIO_Init+0x240>
 8005afa:	2306      	movs	r3, #6
 8005afc:	e00a      	b.n	8005b14 <HAL_GPIO_Init+0x240>
 8005afe:	2305      	movs	r3, #5
 8005b00:	e008      	b.n	8005b14 <HAL_GPIO_Init+0x240>
 8005b02:	2304      	movs	r3, #4
 8005b04:	e006      	b.n	8005b14 <HAL_GPIO_Init+0x240>
 8005b06:	2303      	movs	r3, #3
 8005b08:	e004      	b.n	8005b14 <HAL_GPIO_Init+0x240>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e002      	b.n	8005b14 <HAL_GPIO_Init+0x240>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <HAL_GPIO_Init+0x240>
 8005b12:	2300      	movs	r3, #0
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	f002 0203 	and.w	r2, r2, #3
 8005b1a:	0092      	lsls	r2, r2, #2
 8005b1c:	4093      	lsls	r3, r2
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b24:	4934      	ldr	r1, [pc, #208]	; (8005bf8 <HAL_GPIO_Init+0x324>)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	089b      	lsrs	r3, r3, #2
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b32:	4b3c      	ldr	r3, [pc, #240]	; (8005c24 <HAL_GPIO_Init+0x350>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	43db      	mvns	r3, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b56:	4a33      	ldr	r2, [pc, #204]	; (8005c24 <HAL_GPIO_Init+0x350>)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005b5c:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <HAL_GPIO_Init+0x350>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	43db      	mvns	r3, r3
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b80:	4a28      	ldr	r2, [pc, #160]	; (8005c24 <HAL_GPIO_Init+0x350>)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b86:	4b27      	ldr	r3, [pc, #156]	; (8005c24 <HAL_GPIO_Init+0x350>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005baa:	4a1e      	ldr	r2, [pc, #120]	; (8005c24 <HAL_GPIO_Init+0x350>)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bb0:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <HAL_GPIO_Init+0x350>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bd4:	4a13      	ldr	r2, [pc, #76]	; (8005c24 <HAL_GPIO_Init+0x350>)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	f67f ae86 	bls.w	80058f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005be8:	bf00      	nop
 8005bea:	3724      	adds	r7, #36	; 0x24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	40013800 	.word	0x40013800
 8005bfc:	40020000 	.word	0x40020000
 8005c00:	40020400 	.word	0x40020400
 8005c04:	40020800 	.word	0x40020800
 8005c08:	40020c00 	.word	0x40020c00
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	40021400 	.word	0x40021400
 8005c14:	40021800 	.word	0x40021800
 8005c18:	40021c00 	.word	0x40021c00
 8005c1c:	40022000 	.word	0x40022000
 8005c20:	40022400 	.word	0x40022400
 8005c24:	40013c00 	.word	0x40013c00

08005c28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	887b      	ldrh	r3, [r7, #2]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c40:	2301      	movs	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
 8005c44:	e001      	b.n	8005c4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c46:	2300      	movs	r3, #0
 8005c48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	807b      	strh	r3, [r7, #2]
 8005c64:	4613      	mov	r3, r2
 8005c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c68:	787b      	ldrb	r3, [r7, #1]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c6e:	887a      	ldrh	r2, [r7, #2]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c74:	e003      	b.n	8005c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c76:	887b      	ldrh	r3, [r7, #2]
 8005c78:	041a      	lsls	r2, r3, #16
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	619a      	str	r2, [r3, #24]
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	887b      	ldrh	r3, [r7, #2]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ca2:	887b      	ldrh	r3, [r7, #2]
 8005ca4:	041a      	lsls	r2, r3, #16
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005caa:	e002      	b.n	8005cb2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cac:	887a      	ldrh	r2, [r7, #2]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	619a      	str	r2, [r3, #24]
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cc0:	b08f      	sub	sp, #60	; 0x3c
 8005cc2:	af0a      	add	r7, sp, #40	; 0x28
 8005cc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e116      	b.n	8005efe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fc fc6c 	bl	80025c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f002 f944 	bl	8007f9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	687e      	ldr	r6, [r7, #4]
 8005d1c:	466d      	mov	r5, sp
 8005d1e:	f106 0410 	add.w	r4, r6, #16
 8005d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d32:	1d33      	adds	r3, r6, #4
 8005d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d36:	6838      	ldr	r0, [r7, #0]
 8005d38:	f002 f8d8 	bl	8007eec <USB_CoreInit>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d005      	beq.n	8005d4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e0d7      	b.n	8005efe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f002 f932 	bl	8007fbe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]
 8005d5e:	e04a      	b.n	8005df6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d60:	7bfa      	ldrb	r2, [r7, #15]
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	333d      	adds	r3, #61	; 0x3d
 8005d70:	2201      	movs	r2, #1
 8005d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d74:	7bfa      	ldrb	r2, [r7, #15]
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	1a9b      	subs	r3, r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	333c      	adds	r3, #60	; 0x3c
 8005d84:	7bfa      	ldrb	r2, [r7, #15]
 8005d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d88:	7bfa      	ldrb	r2, [r7, #15]
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	b298      	uxth	r0, r3
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	4613      	mov	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	440b      	add	r3, r1
 8005d9a:	3342      	adds	r3, #66	; 0x42
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005da0:	7bfa      	ldrb	r2, [r7, #15]
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	4613      	mov	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	333f      	adds	r3, #63	; 0x3f
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005db4:	7bfa      	ldrb	r2, [r7, #15]
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	3344      	adds	r3, #68	; 0x44
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005dc8:	7bfa      	ldrb	r2, [r7, #15]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	1a9b      	subs	r3, r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	3348      	adds	r3, #72	; 0x48
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ddc:	7bfa      	ldrb	r2, [r7, #15]
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	4613      	mov	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	3350      	adds	r3, #80	; 0x50
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	3301      	adds	r3, #1
 8005df4:	73fb      	strb	r3, [r7, #15]
 8005df6:	7bfa      	ldrb	r2, [r7, #15]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d3af      	bcc.n	8005d60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
 8005e04:	e044      	b.n	8005e90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e06:	7bfa      	ldrb	r2, [r7, #15]
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005e18:	2200      	movs	r2, #0
 8005e1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e1c:	7bfa      	ldrb	r2, [r7, #15]
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	4613      	mov	r3, r2
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	1a9b      	subs	r3, r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	440b      	add	r3, r1
 8005e2a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005e2e:	7bfa      	ldrb	r2, [r7, #15]
 8005e30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e32:	7bfa      	ldrb	r2, [r7, #15]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005e44:	2200      	movs	r2, #0
 8005e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e48:	7bfa      	ldrb	r2, [r7, #15]
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	1a9b      	subs	r3, r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e5e:	7bfa      	ldrb	r2, [r7, #15]
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	4613      	mov	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	1a9b      	subs	r3, r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e74:	7bfa      	ldrb	r2, [r7, #15]
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	1a9b      	subs	r3, r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	440b      	add	r3, r1
 8005e82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	73fb      	strb	r3, [r7, #15]
 8005e90:	7bfa      	ldrb	r2, [r7, #15]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d3b5      	bcc.n	8005e06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	603b      	str	r3, [r7, #0]
 8005ea0:	687e      	ldr	r6, [r7, #4]
 8005ea2:	466d      	mov	r5, sp
 8005ea4:	f106 0410 	add.w	r4, r6, #16
 8005ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005eb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8005eb8:	1d33      	adds	r3, r6, #4
 8005eba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ebc:	6838      	ldr	r0, [r7, #0]
 8005ebe:	f002 f8a9 	bl	8008014 <USB_DevInit>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e014      	b.n	8005efe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d102      	bne.n	8005ef2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f80b 	bl	8005f08 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f002 fa5b 	bl	80083b2 <USB_DevDisconnect>

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005f08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_PCDEx_ActivateLPM+0x44>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	10000003 	.word	0x10000003

08005f50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f5e:	6013      	str	r3, [r2, #0]
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40007000 	.word	0x40007000

08005f70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e29b      	b.n	80064be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 8087 	beq.w	80060a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f94:	4b96      	ldr	r3, [pc, #600]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f003 030c 	and.w	r3, r3, #12
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d00c      	beq.n	8005fba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa0:	4b93      	ldr	r3, [pc, #588]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 030c 	and.w	r3, r3, #12
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d112      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x62>
 8005fac:	4b90      	ldr	r3, [pc, #576]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fb8:	d10b      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fba:	4b8d      	ldr	r3, [pc, #564]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d06c      	beq.n	80060a0 <HAL_RCC_OscConfig+0x130>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d168      	bne.n	80060a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e275      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fda:	d106      	bne.n	8005fea <HAL_RCC_OscConfig+0x7a>
 8005fdc:	4b84      	ldr	r3, [pc, #528]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a83      	ldr	r2, [pc, #524]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8005fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	e02e      	b.n	8006048 <HAL_RCC_OscConfig+0xd8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10c      	bne.n	800600c <HAL_RCC_OscConfig+0x9c>
 8005ff2:	4b7f      	ldr	r3, [pc, #508]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a7e      	ldr	r2, [pc, #504]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8005ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	4b7c      	ldr	r3, [pc, #496]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a7b      	ldr	r2, [pc, #492]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	e01d      	b.n	8006048 <HAL_RCC_OscConfig+0xd8>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006014:	d10c      	bne.n	8006030 <HAL_RCC_OscConfig+0xc0>
 8006016:	4b76      	ldr	r3, [pc, #472]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a75      	ldr	r2, [pc, #468]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 800601c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	4b73      	ldr	r3, [pc, #460]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a72      	ldr	r2, [pc, #456]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	e00b      	b.n	8006048 <HAL_RCC_OscConfig+0xd8>
 8006030:	4b6f      	ldr	r3, [pc, #444]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a6e      	ldr	r2, [pc, #440]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	4b6c      	ldr	r3, [pc, #432]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a6b      	ldr	r2, [pc, #428]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d013      	beq.n	8006078 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006050:	f7fd ffd0 	bl	8003ff4 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006058:	f7fd ffcc 	bl	8003ff4 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	; 0x64
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e229      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606a:	4b61      	ldr	r3, [pc, #388]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f0      	beq.n	8006058 <HAL_RCC_OscConfig+0xe8>
 8006076:	e014      	b.n	80060a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fd ffbc 	bl	8003ff4 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006080:	f7fd ffb8 	bl	8003ff4 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	; 0x64
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e215      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006092:	4b57      	ldr	r3, [pc, #348]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCC_OscConfig+0x110>
 800609e:	e000      	b.n	80060a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d069      	beq.n	8006182 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060ae:	4b50      	ldr	r3, [pc, #320]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 030c 	and.w	r3, r3, #12
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00b      	beq.n	80060d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ba:	4b4d      	ldr	r3, [pc, #308]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 030c 	and.w	r3, r3, #12
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d11c      	bne.n	8006100 <HAL_RCC_OscConfig+0x190>
 80060c6:	4b4a      	ldr	r3, [pc, #296]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d116      	bne.n	8006100 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d2:	4b47      	ldr	r3, [pc, #284]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_RCC_OscConfig+0x17a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d001      	beq.n	80060ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e1e9      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ea:	4b41      	ldr	r3, [pc, #260]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	493d      	ldr	r1, [pc, #244]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060fe:	e040      	b.n	8006182 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d023      	beq.n	8006150 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006108:	4b39      	ldr	r3, [pc, #228]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a38      	ldr	r2, [pc, #224]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006114:	f7fd ff6e 	bl	8003ff4 <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800611c:	f7fd ff6a 	bl	8003ff4 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e1c7      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800612e:	4b30      	ldr	r3, [pc, #192]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0f0      	beq.n	800611c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613a:	4b2d      	ldr	r3, [pc, #180]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	4929      	ldr	r1, [pc, #164]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 800614a:	4313      	orrs	r3, r2
 800614c:	600b      	str	r3, [r1, #0]
 800614e:	e018      	b.n	8006182 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006150:	4b27      	ldr	r3, [pc, #156]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a26      	ldr	r2, [pc, #152]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fd ff4a 	bl	8003ff4 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006164:	f7fd ff46 	bl	8003ff4 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e1a3      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006176:	4b1e      	ldr	r3, [pc, #120]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f0      	bne.n	8006164 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d038      	beq.n	8006200 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d019      	beq.n	80061ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006196:	4b16      	ldr	r3, [pc, #88]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 8006198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800619a:	4a15      	ldr	r2, [pc, #84]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a2:	f7fd ff27 	bl	8003ff4 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a8:	e008      	b.n	80061bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061aa:	f7fd ff23 	bl	8003ff4 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e180      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061bc:	4b0c      	ldr	r3, [pc, #48]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 80061be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0f0      	beq.n	80061aa <HAL_RCC_OscConfig+0x23a>
 80061c8:	e01a      	b.n	8006200 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ca:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 80061cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ce:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <HAL_RCC_OscConfig+0x280>)
 80061d0:	f023 0301 	bic.w	r3, r3, #1
 80061d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d6:	f7fd ff0d 	bl	8003ff4 <HAL_GetTick>
 80061da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061dc:	e00a      	b.n	80061f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061de:	f7fd ff09 	bl	8003ff4 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d903      	bls.n	80061f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e166      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
 80061f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061f4:	4b92      	ldr	r3, [pc, #584]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80061f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1ee      	bne.n	80061de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 80a4 	beq.w	8006356 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800620e:	4b8c      	ldr	r3, [pc, #560]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10d      	bne.n	8006236 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800621a:	4b89      	ldr	r3, [pc, #548]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	4a88      	ldr	r2, [pc, #544]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006224:	6413      	str	r3, [r2, #64]	; 0x40
 8006226:	4b86      	ldr	r3, [pc, #536]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006232:	2301      	movs	r3, #1
 8006234:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006236:	4b83      	ldr	r3, [pc, #524]	; (8006444 <HAL_RCC_OscConfig+0x4d4>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623e:	2b00      	cmp	r3, #0
 8006240:	d118      	bne.n	8006274 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006242:	4b80      	ldr	r3, [pc, #512]	; (8006444 <HAL_RCC_OscConfig+0x4d4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a7f      	ldr	r2, [pc, #508]	; (8006444 <HAL_RCC_OscConfig+0x4d4>)
 8006248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800624e:	f7fd fed1 	bl	8003ff4 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006256:	f7fd fecd 	bl	8003ff4 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b64      	cmp	r3, #100	; 0x64
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e12a      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006268:	4b76      	ldr	r3, [pc, #472]	; (8006444 <HAL_RCC_OscConfig+0x4d4>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f0      	beq.n	8006256 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d106      	bne.n	800628a <HAL_RCC_OscConfig+0x31a>
 800627c:	4b70      	ldr	r3, [pc, #448]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	4a6f      	ldr	r2, [pc, #444]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006282:	f043 0301 	orr.w	r3, r3, #1
 8006286:	6713      	str	r3, [r2, #112]	; 0x70
 8006288:	e02d      	b.n	80062e6 <HAL_RCC_OscConfig+0x376>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10c      	bne.n	80062ac <HAL_RCC_OscConfig+0x33c>
 8006292:	4b6b      	ldr	r3, [pc, #428]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006296:	4a6a      	ldr	r2, [pc, #424]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006298:	f023 0301 	bic.w	r3, r3, #1
 800629c:	6713      	str	r3, [r2, #112]	; 0x70
 800629e:	4b68      	ldr	r3, [pc, #416]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a2:	4a67      	ldr	r2, [pc, #412]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80062a4:	f023 0304 	bic.w	r3, r3, #4
 80062a8:	6713      	str	r3, [r2, #112]	; 0x70
 80062aa:	e01c      	b.n	80062e6 <HAL_RCC_OscConfig+0x376>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b05      	cmp	r3, #5
 80062b2:	d10c      	bne.n	80062ce <HAL_RCC_OscConfig+0x35e>
 80062b4:	4b62      	ldr	r3, [pc, #392]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80062b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b8:	4a61      	ldr	r2, [pc, #388]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80062ba:	f043 0304 	orr.w	r3, r3, #4
 80062be:	6713      	str	r3, [r2, #112]	; 0x70
 80062c0:	4b5f      	ldr	r3, [pc, #380]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	4a5e      	ldr	r2, [pc, #376]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	6713      	str	r3, [r2, #112]	; 0x70
 80062cc:	e00b      	b.n	80062e6 <HAL_RCC_OscConfig+0x376>
 80062ce:	4b5c      	ldr	r3, [pc, #368]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	4a5b      	ldr	r2, [pc, #364]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	6713      	str	r3, [r2, #112]	; 0x70
 80062da:	4b59      	ldr	r3, [pc, #356]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	4a58      	ldr	r2, [pc, #352]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80062e0:	f023 0304 	bic.w	r3, r3, #4
 80062e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d015      	beq.n	800631a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ee:	f7fd fe81 	bl	8003ff4 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f4:	e00a      	b.n	800630c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f6:	f7fd fe7d 	bl	8003ff4 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	f241 3288 	movw	r2, #5000	; 0x1388
 8006304:	4293      	cmp	r3, r2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e0d8      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800630c:	4b4c      	ldr	r3, [pc, #304]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0ee      	beq.n	80062f6 <HAL_RCC_OscConfig+0x386>
 8006318:	e014      	b.n	8006344 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631a:	f7fd fe6b 	bl	8003ff4 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006320:	e00a      	b.n	8006338 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006322:	f7fd fe67 	bl	8003ff4 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006330:	4293      	cmp	r3, r2
 8006332:	d901      	bls.n	8006338 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e0c2      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006338:	4b41      	ldr	r3, [pc, #260]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 800633a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1ee      	bne.n	8006322 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d105      	bne.n	8006356 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800634a:	4b3d      	ldr	r3, [pc, #244]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	4a3c      	ldr	r2, [pc, #240]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006354:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 80ae 	beq.w	80064bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006360:	4b37      	ldr	r3, [pc, #220]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 030c 	and.w	r3, r3, #12
 8006368:	2b08      	cmp	r3, #8
 800636a:	d06d      	beq.n	8006448 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d14b      	bne.n	800640c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006374:	4b32      	ldr	r3, [pc, #200]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a31      	ldr	r2, [pc, #196]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 800637a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800637e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006380:	f7fd fe38 	bl	8003ff4 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006388:	f7fd fe34 	bl	8003ff4 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e091      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800639a:	4b29      	ldr	r3, [pc, #164]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f0      	bne.n	8006388 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69da      	ldr	r2, [r3, #28]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	019b      	lsls	r3, r3, #6
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	085b      	lsrs	r3, r3, #1
 80063be:	3b01      	subs	r3, #1
 80063c0:	041b      	lsls	r3, r3, #16
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	061b      	lsls	r3, r3, #24
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	071b      	lsls	r3, r3, #28
 80063d2:	491b      	ldr	r1, [pc, #108]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063d8:	4b19      	ldr	r3, [pc, #100]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a18      	ldr	r2, [pc, #96]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 80063de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fd fe06 	bl	8003ff4 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fd fe02 	bl	8003ff4 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e05f      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063fe:	4b10      	ldr	r3, [pc, #64]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f0      	beq.n	80063ec <HAL_RCC_OscConfig+0x47c>
 800640a:	e057      	b.n	80064bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800640c:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a0b      	ldr	r2, [pc, #44]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006418:	f7fd fdec 	bl	8003ff4 <HAL_GetTick>
 800641c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800641e:	e008      	b.n	8006432 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006420:	f7fd fde8 	bl	8003ff4 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d901      	bls.n	8006432 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e045      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006432:	4b03      	ldr	r3, [pc, #12]	; (8006440 <HAL_RCC_OscConfig+0x4d0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f0      	bne.n	8006420 <HAL_RCC_OscConfig+0x4b0>
 800643e:	e03d      	b.n	80064bc <HAL_RCC_OscConfig+0x54c>
 8006440:	40023800 	.word	0x40023800
 8006444:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006448:	4b1f      	ldr	r3, [pc, #124]	; (80064c8 <HAL_RCC_OscConfig+0x558>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d030      	beq.n	80064b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006460:	429a      	cmp	r2, r3
 8006462:	d129      	bne.n	80064b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646e:	429a      	cmp	r2, r3
 8006470:	d122      	bne.n	80064b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006478:	4013      	ands	r3, r2
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800647e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006480:	4293      	cmp	r3, r2
 8006482:	d119      	bne.n	80064b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	3b01      	subs	r3, #1
 8006492:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006494:	429a      	cmp	r2, r3
 8006496:	d10f      	bne.n	80064b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d107      	bne.n	80064b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d001      	beq.n	80064bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	40023800 	.word	0x40023800

080064cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0d0      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064e4:	4b6a      	ldr	r3, [pc, #424]	; (8006690 <HAL_RCC_ClockConfig+0x1c4>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d910      	bls.n	8006514 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064f2:	4b67      	ldr	r3, [pc, #412]	; (8006690 <HAL_RCC_ClockConfig+0x1c4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f023 020f 	bic.w	r2, r3, #15
 80064fa:	4965      	ldr	r1, [pc, #404]	; (8006690 <HAL_RCC_ClockConfig+0x1c4>)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	4313      	orrs	r3, r2
 8006500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006502:	4b63      	ldr	r3, [pc, #396]	; (8006690 <HAL_RCC_ClockConfig+0x1c4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d001      	beq.n	8006514 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0b8      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d020      	beq.n	8006562 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800652c:	4b59      	ldr	r3, [pc, #356]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	4a58      	ldr	r2, [pc, #352]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 8006532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006536:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006544:	4b53      	ldr	r3, [pc, #332]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	4a52      	ldr	r2, [pc, #328]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 800654a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800654e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006550:	4b50      	ldr	r3, [pc, #320]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	494d      	ldr	r1, [pc, #308]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 800655e:	4313      	orrs	r3, r2
 8006560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d040      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d107      	bne.n	8006586 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	4b47      	ldr	r3, [pc, #284]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d115      	bne.n	80065ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e07f      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d107      	bne.n	800659e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800658e:	4b41      	ldr	r3, [pc, #260]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e073      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800659e:	4b3d      	ldr	r3, [pc, #244]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e06b      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ae:	4b39      	ldr	r3, [pc, #228]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f023 0203 	bic.w	r2, r3, #3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4936      	ldr	r1, [pc, #216]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c0:	f7fd fd18 	bl	8003ff4 <HAL_GetTick>
 80065c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c6:	e00a      	b.n	80065de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c8:	f7fd fd14 	bl	8003ff4 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e053      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065de:	4b2d      	ldr	r3, [pc, #180]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 020c 	and.w	r2, r3, #12
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d1eb      	bne.n	80065c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065f0:	4b27      	ldr	r3, [pc, #156]	; (8006690 <HAL_RCC_ClockConfig+0x1c4>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d210      	bcs.n	8006620 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fe:	4b24      	ldr	r3, [pc, #144]	; (8006690 <HAL_RCC_ClockConfig+0x1c4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 020f 	bic.w	r2, r3, #15
 8006606:	4922      	ldr	r1, [pc, #136]	; (8006690 <HAL_RCC_ClockConfig+0x1c4>)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	4313      	orrs	r3, r2
 800660c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b20      	ldr	r3, [pc, #128]	; (8006690 <HAL_RCC_ClockConfig+0x1c4>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e032      	b.n	8006686 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800662c:	4b19      	ldr	r3, [pc, #100]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4916      	ldr	r1, [pc, #88]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 800663a:	4313      	orrs	r3, r2
 800663c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	2b00      	cmp	r3, #0
 8006648:	d009      	beq.n	800665e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800664a:	4b12      	ldr	r3, [pc, #72]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	490e      	ldr	r1, [pc, #56]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 800665a:	4313      	orrs	r3, r2
 800665c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800665e:	f000 f821 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8006662:	4601      	mov	r1, r0
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <HAL_RCC_ClockConfig+0x1c8>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	f003 030f 	and.w	r3, r3, #15
 800666e:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <HAL_RCC_ClockConfig+0x1cc>)
 8006670:	5cd3      	ldrb	r3, [r2, r3]
 8006672:	fa21 f303 	lsr.w	r3, r1, r3
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <HAL_RCC_ClockConfig+0x1d0>)
 8006678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800667a:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <HAL_RCC_ClockConfig+0x1d4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fb fffe 	bl	8002680 <HAL_InitTick>

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40023c00 	.word	0x40023c00
 8006694:	40023800 	.word	0x40023800
 8006698:	0800c88c 	.word	0x0800c88c
 800669c:	20000004 	.word	0x20000004
 80066a0:	20000008 	.word	0x20000008

080066a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
 80066b2:	2300      	movs	r3, #0
 80066b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066ba:	4b63      	ldr	r3, [pc, #396]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 030c 	and.w	r3, r3, #12
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d007      	beq.n	80066d6 <HAL_RCC_GetSysClockFreq+0x32>
 80066c6:	2b08      	cmp	r3, #8
 80066c8:	d008      	beq.n	80066dc <HAL_RCC_GetSysClockFreq+0x38>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f040 80b4 	bne.w	8006838 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066d0:	4b5e      	ldr	r3, [pc, #376]	; (800684c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80066d2:	60bb      	str	r3, [r7, #8]
      break;
 80066d4:	e0b3      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066d6:	4b5e      	ldr	r3, [pc, #376]	; (8006850 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80066d8:	60bb      	str	r3, [r7, #8]
      break;
 80066da:	e0b0      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066dc:	4b5a      	ldr	r3, [pc, #360]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80066e6:	4b58      	ldr	r3, [pc, #352]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d04a      	beq.n	8006788 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066f2:	4b55      	ldr	r3, [pc, #340]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	099b      	lsrs	r3, r3, #6
 80066f8:	f04f 0400 	mov.w	r4, #0
 80066fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	ea03 0501 	and.w	r5, r3, r1
 8006708:	ea04 0602 	and.w	r6, r4, r2
 800670c:	4629      	mov	r1, r5
 800670e:	4632      	mov	r2, r6
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	f04f 0400 	mov.w	r4, #0
 8006718:	0154      	lsls	r4, r2, #5
 800671a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800671e:	014b      	lsls	r3, r1, #5
 8006720:	4619      	mov	r1, r3
 8006722:	4622      	mov	r2, r4
 8006724:	1b49      	subs	r1, r1, r5
 8006726:	eb62 0206 	sbc.w	r2, r2, r6
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	f04f 0400 	mov.w	r4, #0
 8006732:	0194      	lsls	r4, r2, #6
 8006734:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006738:	018b      	lsls	r3, r1, #6
 800673a:	1a5b      	subs	r3, r3, r1
 800673c:	eb64 0402 	sbc.w	r4, r4, r2
 8006740:	f04f 0100 	mov.w	r1, #0
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	00e2      	lsls	r2, r4, #3
 800674a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800674e:	00d9      	lsls	r1, r3, #3
 8006750:	460b      	mov	r3, r1
 8006752:	4614      	mov	r4, r2
 8006754:	195b      	adds	r3, r3, r5
 8006756:	eb44 0406 	adc.w	r4, r4, r6
 800675a:	f04f 0100 	mov.w	r1, #0
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	0262      	lsls	r2, r4, #9
 8006764:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006768:	0259      	lsls	r1, r3, #9
 800676a:	460b      	mov	r3, r1
 800676c:	4614      	mov	r4, r2
 800676e:	4618      	mov	r0, r3
 8006770:	4621      	mov	r1, r4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f04f 0400 	mov.w	r4, #0
 8006778:	461a      	mov	r2, r3
 800677a:	4623      	mov	r3, r4
 800677c:	f7f9 fd6a 	bl	8000254 <__aeabi_uldivmod>
 8006780:	4603      	mov	r3, r0
 8006782:	460c      	mov	r4, r1
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e049      	b.n	800681c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006788:	4b2f      	ldr	r3, [pc, #188]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	099b      	lsrs	r3, r3, #6
 800678e:	f04f 0400 	mov.w	r4, #0
 8006792:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	ea03 0501 	and.w	r5, r3, r1
 800679e:	ea04 0602 	and.w	r6, r4, r2
 80067a2:	4629      	mov	r1, r5
 80067a4:	4632      	mov	r2, r6
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	f04f 0400 	mov.w	r4, #0
 80067ae:	0154      	lsls	r4, r2, #5
 80067b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80067b4:	014b      	lsls	r3, r1, #5
 80067b6:	4619      	mov	r1, r3
 80067b8:	4622      	mov	r2, r4
 80067ba:	1b49      	subs	r1, r1, r5
 80067bc:	eb62 0206 	sbc.w	r2, r2, r6
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	f04f 0400 	mov.w	r4, #0
 80067c8:	0194      	lsls	r4, r2, #6
 80067ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80067ce:	018b      	lsls	r3, r1, #6
 80067d0:	1a5b      	subs	r3, r3, r1
 80067d2:	eb64 0402 	sbc.w	r4, r4, r2
 80067d6:	f04f 0100 	mov.w	r1, #0
 80067da:	f04f 0200 	mov.w	r2, #0
 80067de:	00e2      	lsls	r2, r4, #3
 80067e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80067e4:	00d9      	lsls	r1, r3, #3
 80067e6:	460b      	mov	r3, r1
 80067e8:	4614      	mov	r4, r2
 80067ea:	195b      	adds	r3, r3, r5
 80067ec:	eb44 0406 	adc.w	r4, r4, r6
 80067f0:	f04f 0100 	mov.w	r1, #0
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	02a2      	lsls	r2, r4, #10
 80067fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80067fe:	0299      	lsls	r1, r3, #10
 8006800:	460b      	mov	r3, r1
 8006802:	4614      	mov	r4, r2
 8006804:	4618      	mov	r0, r3
 8006806:	4621      	mov	r1, r4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f04f 0400 	mov.w	r4, #0
 800680e:	461a      	mov	r2, r3
 8006810:	4623      	mov	r3, r4
 8006812:	f7f9 fd1f 	bl	8000254 <__aeabi_uldivmod>
 8006816:	4603      	mov	r3, r0
 8006818:	460c      	mov	r4, r1
 800681a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800681c:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	0c1b      	lsrs	r3, r3, #16
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	3301      	adds	r3, #1
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	fbb2 f3f3 	udiv	r3, r2, r3
 8006834:	60bb      	str	r3, [r7, #8]
      break;
 8006836:	e002      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006838:	4b04      	ldr	r3, [pc, #16]	; (800684c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800683a:	60bb      	str	r3, [r7, #8]
      break;
 800683c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800683e:	68bb      	ldr	r3, [r7, #8]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006848:	40023800 	.word	0x40023800
 800684c:	00f42400 	.word	0x00f42400
 8006850:	007a1200 	.word	0x007a1200

08006854 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006858:	4b03      	ldr	r3, [pc, #12]	; (8006868 <HAL_RCC_GetHCLKFreq+0x14>)
 800685a:	681b      	ldr	r3, [r3, #0]
}
 800685c:	4618      	mov	r0, r3
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	20000004 	.word	0x20000004

0800686c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006870:	f7ff fff0 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 8006874:	4601      	mov	r1, r0
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	0a9b      	lsrs	r3, r3, #10
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	4a03      	ldr	r2, [pc, #12]	; (8006890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006882:	5cd3      	ldrb	r3, [r2, r3]
 8006884:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40023800 	.word	0x40023800
 8006890:	0800c89c 	.word	0x0800c89c

08006894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006898:	f7ff ffdc 	bl	8006854 <HAL_RCC_GetHCLKFreq>
 800689c:	4601      	mov	r1, r0
 800689e:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	0b5b      	lsrs	r3, r3, #13
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	4a03      	ldr	r2, [pc, #12]	; (80068b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068aa:	5cd3      	ldrb	r3, [r2, r3]
 80068ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40023800 	.word	0x40023800
 80068b8:	0800c89c 	.word	0x0800c89c

080068bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	220f      	movs	r2, #15
 80068ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068cc:	4b12      	ldr	r3, [pc, #72]	; (8006918 <HAL_RCC_GetClockConfig+0x5c>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0203 	and.w	r2, r3, #3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068d8:	4b0f      	ldr	r3, [pc, #60]	; (8006918 <HAL_RCC_GetClockConfig+0x5c>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80068e4:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <HAL_RCC_GetClockConfig+0x5c>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80068f0:	4b09      	ldr	r3, [pc, #36]	; (8006918 <HAL_RCC_GetClockConfig+0x5c>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	08db      	lsrs	r3, r3, #3
 80068f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80068fe:	4b07      	ldr	r3, [pc, #28]	; (800691c <HAL_RCC_GetClockConfig+0x60>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 020f 	and.w	r2, r3, #15
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	601a      	str	r2, [r3, #0]
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40023800 	.word	0x40023800
 800691c:	40023c00 	.word	0x40023c00

08006920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d012      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006948:	4b69      	ldr	r3, [pc, #420]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	4a68      	ldr	r2, [pc, #416]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800694e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006952:	6093      	str	r3, [r2, #8]
 8006954:	4b66      	ldr	r3, [pc, #408]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695c:	4964      	ldr	r1, [pc, #400]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800695e:	4313      	orrs	r3, r2
 8006960:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800696a:	2301      	movs	r3, #1
 800696c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d017      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800697a:	4b5d      	ldr	r3, [pc, #372]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800697c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006988:	4959      	ldr	r1, [pc, #356]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800698a:	4313      	orrs	r3, r2
 800698c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006998:	d101      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800699a:	2301      	movs	r3, #1
 800699c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80069a6:	2301      	movs	r3, #1
 80069a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d017      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069b6:	4b4e      	ldr	r3, [pc, #312]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c4:	494a      	ldr	r1, [pc, #296]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d4:	d101      	bne.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80069d6:	2301      	movs	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80069e2:	2301      	movs	r3, #1
 80069e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80069f2:	2301      	movs	r3, #1
 80069f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 808b 	beq.w	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a04:	4b3a      	ldr	r3, [pc, #232]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	4a39      	ldr	r2, [pc, #228]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8006a10:	4b37      	ldr	r3, [pc, #220]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a1c:	4b35      	ldr	r3, [pc, #212]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a34      	ldr	r2, [pc, #208]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a28:	f7fd fae4 	bl	8003ff4 <HAL_GetTick>
 8006a2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a30:	f7fd fae0 	bl	8003ff4 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b64      	cmp	r3, #100	; 0x64
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e38d      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a42:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a4e:	4b28      	ldr	r3, [pc, #160]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d035      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d02e      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a6c:	4b20      	ldr	r3, [pc, #128]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a76:	4b1e      	ldr	r3, [pc, #120]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7a:	4a1d      	ldr	r2, [pc, #116]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a82:	4b1b      	ldr	r3, [pc, #108]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a86:	4a1a      	ldr	r2, [pc, #104]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006a8e:	4a18      	ldr	r2, [pc, #96]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a94:	4b16      	ldr	r3, [pc, #88]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d114      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa0:	f7fd faa8 	bl	8003ff4 <HAL_GetTick>
 8006aa4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa6:	e00a      	b.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aa8:	f7fd faa4 	bl	8003ff4 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e34f      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0ee      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad6:	d111      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ad8:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006ae6:	400b      	ands	r3, r1
 8006ae8:	4901      	ldr	r1, [pc, #4]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	608b      	str	r3, [r1, #8]
 8006aee:	e00b      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006af0:	40023800 	.word	0x40023800
 8006af4:	40007000 	.word	0x40007000
 8006af8:	0ffffcff 	.word	0x0ffffcff
 8006afc:	4bb3      	ldr	r3, [pc, #716]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	4ab2      	ldr	r2, [pc, #712]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b06:	6093      	str	r3, [r2, #8]
 8006b08:	4bb0      	ldr	r3, [pc, #704]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b14:	49ad      	ldr	r1, [pc, #692]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0310 	and.w	r3, r3, #16
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d010      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b26:	4ba9      	ldr	r3, [pc, #676]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b2c:	4aa7      	ldr	r2, [pc, #668]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006b36:	4ba5      	ldr	r3, [pc, #660]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	49a2      	ldr	r1, [pc, #648]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b54:	4b9d      	ldr	r3, [pc, #628]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b62:	499a      	ldr	r1, [pc, #616]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b76:	4b95      	ldr	r3, [pc, #596]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b84:	4991      	ldr	r1, [pc, #580]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b98:	4b8c      	ldr	r3, [pc, #560]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba6:	4989      	ldr	r1, [pc, #548]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bba:	4b84      	ldr	r3, [pc, #528]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc8:	4980      	ldr	r1, [pc, #512]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00a      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bdc:	4b7b      	ldr	r3, [pc, #492]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be2:	f023 0203 	bic.w	r2, r3, #3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bea:	4978      	ldr	r1, [pc, #480]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bfe:	4b73      	ldr	r3, [pc, #460]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c04:	f023 020c 	bic.w	r2, r3, #12
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0c:	496f      	ldr	r1, [pc, #444]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c20:	4b6a      	ldr	r3, [pc, #424]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2e:	4967      	ldr	r1, [pc, #412]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c42:	4b62      	ldr	r3, [pc, #392]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c50:	495e      	ldr	r1, [pc, #376]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c64:	4b59      	ldr	r3, [pc, #356]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c72:	4956      	ldr	r1, [pc, #344]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006c86:	4b51      	ldr	r3, [pc, #324]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c94:	494d      	ldr	r1, [pc, #308]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006ca8:	4b48      	ldr	r3, [pc, #288]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb6:	4945      	ldr	r1, [pc, #276]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006cca:	4b40      	ldr	r3, [pc, #256]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd8:	493c      	ldr	r1, [pc, #240]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cec:	4b37      	ldr	r3, [pc, #220]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cfa:	4934      	ldr	r1, [pc, #208]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d011      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d0e:	4b2f      	ldr	r3, [pc, #188]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d1c:	492b      	ldr	r1, [pc, #172]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d2c:	d101      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00a      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d4e:	4b1f      	ldr	r3, [pc, #124]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d5c:	491b      	ldr	r1, [pc, #108]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006d70:	4b16      	ldr	r3, [pc, #88]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d80:	4912      	ldr	r1, [pc, #72]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006d94:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da4:	4909      	ldr	r1, [pc, #36]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00f      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006db8:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dbe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc8:	e002      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006dca:	bf00      	nop
 8006dcc:	40023800 	.word	0x40023800
 8006dd0:	4985      	ldr	r1, [pc, #532]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006de4:	4b80      	ldr	r3, [pc, #512]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df4:	497c      	ldr	r1, [pc, #496]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d005      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e0a:	f040 80d6 	bne.w	8006fba <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e0e:	4b76      	ldr	r3, [pc, #472]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a75      	ldr	r2, [pc, #468]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e1a:	f7fd f8eb 	bl	8003ff4 <HAL_GetTick>
 8006e1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e20:	e008      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e22:	f7fd f8e7 	bl	8003ff4 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b64      	cmp	r3, #100	; 0x64
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e194      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e34:	4b6c      	ldr	r3, [pc, #432]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f0      	bne.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d021      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11d      	bne.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e54:	4b64      	ldr	r3, [pc, #400]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e5a:	0c1b      	lsrs	r3, r3, #16
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e62:	4b61      	ldr	r3, [pc, #388]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e68:	0e1b      	lsrs	r3, r3, #24
 8006e6a:	f003 030f 	and.w	r3, r3, #15
 8006e6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	019a      	lsls	r2, r3, #6
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	041b      	lsls	r3, r3, #16
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	061b      	lsls	r3, r3, #24
 8006e80:	431a      	orrs	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	071b      	lsls	r3, r3, #28
 8006e88:	4957      	ldr	r1, [pc, #348]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d004      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea4:	d00a      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d02e      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eba:	d129      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ebc:	4b4a      	ldr	r3, [pc, #296]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec2:	0c1b      	lsrs	r3, r3, #16
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006eca:	4b47      	ldr	r3, [pc, #284]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ed0:	0f1b      	lsrs	r3, r3, #28
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	019a      	lsls	r2, r3, #6
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	061b      	lsls	r3, r3, #24
 8006eea:	431a      	orrs	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	071b      	lsls	r3, r3, #28
 8006ef0:	493d      	ldr	r1, [pc, #244]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ef8:	4b3b      	ldr	r3, [pc, #236]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006efe:	f023 021f 	bic.w	r2, r3, #31
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	3b01      	subs	r3, #1
 8006f08:	4937      	ldr	r1, [pc, #220]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01d      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f1c:	4b32      	ldr	r3, [pc, #200]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f22:	0e1b      	lsrs	r3, r3, #24
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f2a:	4b2f      	ldr	r3, [pc, #188]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f30:	0f1b      	lsrs	r3, r3, #28
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	019a      	lsls	r2, r3, #6
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	041b      	lsls	r3, r3, #16
 8006f44:	431a      	orrs	r2, r3
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	061b      	lsls	r3, r3, #24
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	071b      	lsls	r3, r3, #28
 8006f50:	4925      	ldr	r1, [pc, #148]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d011      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	019a      	lsls	r2, r3, #6
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	041b      	lsls	r3, r3, #16
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	061b      	lsls	r3, r3, #24
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	071b      	lsls	r3, r3, #28
 8006f80:	4919      	ldr	r1, [pc, #100]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f88:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f94:	f7fd f82e 	bl	8003ff4 <HAL_GetTick>
 8006f98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f9a:	e008      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f9c:	f7fd f82a 	bl	8003ff4 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b64      	cmp	r3, #100	; 0x64
 8006fa8:	d901      	bls.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e0d7      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fae:	4b0e      	ldr	r3, [pc, #56]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0f0      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	f040 80cd 	bne.w	800715c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006fc2:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fce:	f7fd f811 	bl	8003ff4 <HAL_GetTick>
 8006fd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fd4:	e00a      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006fd6:	f7fd f80d 	bl	8003ff4 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b64      	cmp	r3, #100	; 0x64
 8006fe2:	d903      	bls.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e0ba      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8006fe8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fec:	4b5e      	ldr	r3, [pc, #376]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff8:	d0ed      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007016:	2b00      	cmp	r3, #0
 8007018:	d02e      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d12a      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007022:	4b51      	ldr	r3, [pc, #324]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007028:	0c1b      	lsrs	r3, r3, #16
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007030:	4b4d      	ldr	r3, [pc, #308]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007036:	0f1b      	lsrs	r3, r3, #28
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	019a      	lsls	r2, r3, #6
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	041b      	lsls	r3, r3, #16
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	061b      	lsls	r3, r3, #24
 8007050:	431a      	orrs	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	071b      	lsls	r3, r3, #28
 8007056:	4944      	ldr	r1, [pc, #272]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007058:	4313      	orrs	r3, r2
 800705a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800705e:	4b42      	ldr	r3, [pc, #264]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007064:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706c:	3b01      	subs	r3, #1
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	493d      	ldr	r1, [pc, #244]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007072:	4313      	orrs	r3, r2
 8007074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d022      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800708c:	d11d      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800708e:	4b36      	ldr	r3, [pc, #216]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007094:	0e1b      	lsrs	r3, r3, #24
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800709c:	4b32      	ldr	r3, [pc, #200]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a2:	0f1b      	lsrs	r3, r3, #28
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	019a      	lsls	r2, r3, #6
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	041b      	lsls	r3, r3, #16
 80070b6:	431a      	orrs	r2, r3
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	061b      	lsls	r3, r3, #24
 80070bc:	431a      	orrs	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	071b      	lsls	r3, r3, #28
 80070c2:	4929      	ldr	r1, [pc, #164]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0308 	and.w	r3, r3, #8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d028      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070d6:	4b24      	ldr	r3, [pc, #144]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070dc:	0e1b      	lsrs	r3, r3, #24
 80070de:	f003 030f 	and.w	r3, r3, #15
 80070e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80070e4:	4b20      	ldr	r3, [pc, #128]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ea:	0c1b      	lsrs	r3, r3, #16
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	019a      	lsls	r2, r3, #6
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	041b      	lsls	r3, r3, #16
 80070fc:	431a      	orrs	r2, r3
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	061b      	lsls	r3, r3, #24
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	071b      	lsls	r3, r3, #28
 800710a:	4917      	ldr	r1, [pc, #92]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007112:	4b15      	ldr	r3, [pc, #84]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	4911      	ldr	r1, [pc, #68]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007122:	4313      	orrs	r3, r2
 8007124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007128:	4b0f      	ldr	r3, [pc, #60]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a0e      	ldr	r2, [pc, #56]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800712e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007134:	f7fc ff5e 	bl	8003ff4 <HAL_GetTick>
 8007138:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800713a:	e008      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800713c:	f7fc ff5a 	bl	8003ff4 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b64      	cmp	r3, #100	; 0x64
 8007148:	d901      	bls.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e007      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800714e:	4b06      	ldr	r3, [pc, #24]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715a:	d1ef      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3720      	adds	r7, #32
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40023800 	.word	0x40023800

0800716c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e01d      	b.n	80071ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f815 	bl	80071c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4619      	mov	r1, r3
 80071aa:	4610      	mov	r0, r2
 80071ac:	f000 f986 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
	...

080071d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <HAL_TIM_Base_Start_IT+0x50>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b06      	cmp	r3, #6
 8007200:	d00b      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x42>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007208:	d007      	beq.n	800721a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f042 0201 	orr.w	r2, r2, #1
 8007218:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	00010007 	.word	0x00010007

0800722c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b02      	cmp	r3, #2
 8007240:	d122      	bne.n	8007288 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b02      	cmp	r3, #2
 800724e:	d11b      	bne.n	8007288 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0202 	mvn.w	r2, #2
 8007258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f905 	bl	800747e <HAL_TIM_IC_CaptureCallback>
 8007274:	e005      	b.n	8007282 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8f7 	bl	800746a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f908 	bl	8007492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b04      	cmp	r3, #4
 8007294:	d122      	bne.n	80072dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d11b      	bne.n	80072dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f06f 0204 	mvn.w	r2, #4
 80072ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f8db 	bl	800747e <HAL_TIM_IC_CaptureCallback>
 80072c8:	e005      	b.n	80072d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f8cd 	bl	800746a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f8de 	bl	8007492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	f003 0308 	and.w	r3, r3, #8
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	d122      	bne.n	8007330 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f003 0308 	and.w	r3, r3, #8
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d11b      	bne.n	8007330 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f06f 0208 	mvn.w	r2, #8
 8007300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2204      	movs	r2, #4
 8007306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f8b1 	bl	800747e <HAL_TIM_IC_CaptureCallback>
 800731c:	e005      	b.n	800732a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f8a3 	bl	800746a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f8b4 	bl	8007492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f003 0310 	and.w	r3, r3, #16
 800733a:	2b10      	cmp	r3, #16
 800733c:	d122      	bne.n	8007384 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f003 0310 	and.w	r3, r3, #16
 8007348:	2b10      	cmp	r3, #16
 800734a:	d11b      	bne.n	8007384 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f06f 0210 	mvn.w	r2, #16
 8007354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2208      	movs	r2, #8
 800735a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f887 	bl	800747e <HAL_TIM_IC_CaptureCallback>
 8007370:	e005      	b.n	800737e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f879 	bl	800746a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f88a 	bl	8007492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b01      	cmp	r3, #1
 8007390:	d10e      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b01      	cmp	r3, #1
 800739e:	d107      	bne.n	80073b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f06f 0201 	mvn.w	r2, #1
 80073a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7fa fb8c 	bl	8001ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ba:	2b80      	cmp	r3, #128	; 0x80
 80073bc:	d10e      	bne.n	80073dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c8:	2b80      	cmp	r3, #128	; 0x80
 80073ca:	d107      	bne.n	80073dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f91a 	bl	8007610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ea:	d10e      	bne.n	800740a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f6:	2b80      	cmp	r3, #128	; 0x80
 80073f8:	d107      	bne.n	800740a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f90d 	bl	8007624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b40      	cmp	r3, #64	; 0x40
 8007416:	d10e      	bne.n	8007436 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d107      	bne.n	8007436 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800742e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f838 	bl	80074a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b20      	cmp	r3, #32
 8007442:	d10e      	bne.n	8007462 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b20      	cmp	r3, #32
 8007450:	d107      	bne.n	8007462 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f06f 0220 	mvn.w	r2, #32
 800745a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f8cd 	bl	80075fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007462:	bf00      	nop
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
	...

080074bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a40      	ldr	r2, [pc, #256]	; (80075d0 <TIM_Base_SetConfig+0x114>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d013      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074da:	d00f      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a3d      	ldr	r2, [pc, #244]	; (80075d4 <TIM_Base_SetConfig+0x118>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00b      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a3c      	ldr	r2, [pc, #240]	; (80075d8 <TIM_Base_SetConfig+0x11c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d007      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a3b      	ldr	r2, [pc, #236]	; (80075dc <TIM_Base_SetConfig+0x120>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d003      	beq.n	80074fc <TIM_Base_SetConfig+0x40>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a3a      	ldr	r2, [pc, #232]	; (80075e0 <TIM_Base_SetConfig+0x124>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d108      	bne.n	800750e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a2f      	ldr	r2, [pc, #188]	; (80075d0 <TIM_Base_SetConfig+0x114>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d02b      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d027      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a2c      	ldr	r2, [pc, #176]	; (80075d4 <TIM_Base_SetConfig+0x118>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d023      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a2b      	ldr	r2, [pc, #172]	; (80075d8 <TIM_Base_SetConfig+0x11c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d01f      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a2a      	ldr	r2, [pc, #168]	; (80075dc <TIM_Base_SetConfig+0x120>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d01b      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a29      	ldr	r2, [pc, #164]	; (80075e0 <TIM_Base_SetConfig+0x124>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d017      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a28      	ldr	r2, [pc, #160]	; (80075e4 <TIM_Base_SetConfig+0x128>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d013      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a27      	ldr	r2, [pc, #156]	; (80075e8 <TIM_Base_SetConfig+0x12c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d00f      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a26      	ldr	r2, [pc, #152]	; (80075ec <TIM_Base_SetConfig+0x130>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00b      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a25      	ldr	r2, [pc, #148]	; (80075f0 <TIM_Base_SetConfig+0x134>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d007      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a24      	ldr	r2, [pc, #144]	; (80075f4 <TIM_Base_SetConfig+0x138>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d003      	beq.n	800756e <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a23      	ldr	r2, [pc, #140]	; (80075f8 <TIM_Base_SetConfig+0x13c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d108      	bne.n	8007580 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a0a      	ldr	r2, [pc, #40]	; (80075d0 <TIM_Base_SetConfig+0x114>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_Base_SetConfig+0xf8>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a0c      	ldr	r2, [pc, #48]	; (80075e0 <TIM_Base_SetConfig+0x124>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d103      	bne.n	80075bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	615a      	str	r2, [r3, #20]
}
 80075c2:	bf00      	nop
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40010000 	.word	0x40010000
 80075d4:	40000400 	.word	0x40000400
 80075d8:	40000800 	.word	0x40000800
 80075dc:	40000c00 	.word	0x40000c00
 80075e0:	40010400 	.word	0x40010400
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40014400 	.word	0x40014400
 80075ec:	40014800 	.word	0x40014800
 80075f0:	40001800 	.word	0x40001800
 80075f4:	40001c00 	.word	0x40001c00
 80075f8:	40002000 	.word	0x40002000

080075fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e040      	b.n	80076cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7fa ff70 	bl	8002540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2224      	movs	r2, #36	; 0x24
 8007664:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0201 	bic.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f82c 	bl	80076d4 <UART_SetConfig>
 800767c:	4603      	mov	r3, r0
 800767e:	2b01      	cmp	r3, #1
 8007680:	d101      	bne.n	8007686 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e022      	b.n	80076cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 faca 	bl	8007c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0201 	orr.w	r2, r2, #1
 80076c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fb51 	bl	8007d6c <UART_CheckIdleState>
 80076ca:	4603      	mov	r3, r0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80076dc:	2300      	movs	r3, #0
 80076de:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	431a      	orrs	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4bb1      	ldr	r3, [pc, #708]	; (80079c8 <UART_SetConfig+0x2f4>)
 8007704:	4013      	ands	r3, r2
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	6939      	ldr	r1, [r7, #16]
 800770c:	430b      	orrs	r3, r1
 800770e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68da      	ldr	r2, [r3, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	430a      	orrs	r2, r1
 8007748:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a9f      	ldr	r2, [pc, #636]	; (80079cc <UART_SetConfig+0x2f8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d121      	bne.n	8007798 <UART_SetConfig+0xc4>
 8007754:	4b9e      	ldr	r3, [pc, #632]	; (80079d0 <UART_SetConfig+0x2fc>)
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b03      	cmp	r3, #3
 8007760:	d816      	bhi.n	8007790 <UART_SetConfig+0xbc>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <UART_SetConfig+0x94>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	08007779 	.word	0x08007779
 800776c:	08007785 	.word	0x08007785
 8007770:	0800777f 	.word	0x0800777f
 8007774:	0800778b 	.word	0x0800778b
 8007778:	2301      	movs	r3, #1
 800777a:	77fb      	strb	r3, [r7, #31]
 800777c:	e151      	b.n	8007a22 <UART_SetConfig+0x34e>
 800777e:	2302      	movs	r3, #2
 8007780:	77fb      	strb	r3, [r7, #31]
 8007782:	e14e      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007784:	2304      	movs	r3, #4
 8007786:	77fb      	strb	r3, [r7, #31]
 8007788:	e14b      	b.n	8007a22 <UART_SetConfig+0x34e>
 800778a:	2308      	movs	r3, #8
 800778c:	77fb      	strb	r3, [r7, #31]
 800778e:	e148      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007790:	2310      	movs	r3, #16
 8007792:	77fb      	strb	r3, [r7, #31]
 8007794:	bf00      	nop
 8007796:	e144      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a8d      	ldr	r2, [pc, #564]	; (80079d4 <UART_SetConfig+0x300>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d134      	bne.n	800780c <UART_SetConfig+0x138>
 80077a2:	4b8b      	ldr	r3, [pc, #556]	; (80079d0 <UART_SetConfig+0x2fc>)
 80077a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a8:	f003 030c 	and.w	r3, r3, #12
 80077ac:	2b0c      	cmp	r3, #12
 80077ae:	d829      	bhi.n	8007804 <UART_SetConfig+0x130>
 80077b0:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <UART_SetConfig+0xe4>)
 80077b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b6:	bf00      	nop
 80077b8:	080077ed 	.word	0x080077ed
 80077bc:	08007805 	.word	0x08007805
 80077c0:	08007805 	.word	0x08007805
 80077c4:	08007805 	.word	0x08007805
 80077c8:	080077f9 	.word	0x080077f9
 80077cc:	08007805 	.word	0x08007805
 80077d0:	08007805 	.word	0x08007805
 80077d4:	08007805 	.word	0x08007805
 80077d8:	080077f3 	.word	0x080077f3
 80077dc:	08007805 	.word	0x08007805
 80077e0:	08007805 	.word	0x08007805
 80077e4:	08007805 	.word	0x08007805
 80077e8:	080077ff 	.word	0x080077ff
 80077ec:	2300      	movs	r3, #0
 80077ee:	77fb      	strb	r3, [r7, #31]
 80077f0:	e117      	b.n	8007a22 <UART_SetConfig+0x34e>
 80077f2:	2302      	movs	r3, #2
 80077f4:	77fb      	strb	r3, [r7, #31]
 80077f6:	e114      	b.n	8007a22 <UART_SetConfig+0x34e>
 80077f8:	2304      	movs	r3, #4
 80077fa:	77fb      	strb	r3, [r7, #31]
 80077fc:	e111      	b.n	8007a22 <UART_SetConfig+0x34e>
 80077fe:	2308      	movs	r3, #8
 8007800:	77fb      	strb	r3, [r7, #31]
 8007802:	e10e      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007804:	2310      	movs	r3, #16
 8007806:	77fb      	strb	r3, [r7, #31]
 8007808:	bf00      	nop
 800780a:	e10a      	b.n	8007a22 <UART_SetConfig+0x34e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a71      	ldr	r2, [pc, #452]	; (80079d8 <UART_SetConfig+0x304>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d120      	bne.n	8007858 <UART_SetConfig+0x184>
 8007816:	4b6e      	ldr	r3, [pc, #440]	; (80079d0 <UART_SetConfig+0x2fc>)
 8007818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007820:	2b10      	cmp	r3, #16
 8007822:	d00f      	beq.n	8007844 <UART_SetConfig+0x170>
 8007824:	2b10      	cmp	r3, #16
 8007826:	d802      	bhi.n	800782e <UART_SetConfig+0x15a>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <UART_SetConfig+0x164>
 800782c:	e010      	b.n	8007850 <UART_SetConfig+0x17c>
 800782e:	2b20      	cmp	r3, #32
 8007830:	d005      	beq.n	800783e <UART_SetConfig+0x16a>
 8007832:	2b30      	cmp	r3, #48	; 0x30
 8007834:	d009      	beq.n	800784a <UART_SetConfig+0x176>
 8007836:	e00b      	b.n	8007850 <UART_SetConfig+0x17c>
 8007838:	2300      	movs	r3, #0
 800783a:	77fb      	strb	r3, [r7, #31]
 800783c:	e0f1      	b.n	8007a22 <UART_SetConfig+0x34e>
 800783e:	2302      	movs	r3, #2
 8007840:	77fb      	strb	r3, [r7, #31]
 8007842:	e0ee      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007844:	2304      	movs	r3, #4
 8007846:	77fb      	strb	r3, [r7, #31]
 8007848:	e0eb      	b.n	8007a22 <UART_SetConfig+0x34e>
 800784a:	2308      	movs	r3, #8
 800784c:	77fb      	strb	r3, [r7, #31]
 800784e:	e0e8      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007850:	2310      	movs	r3, #16
 8007852:	77fb      	strb	r3, [r7, #31]
 8007854:	bf00      	nop
 8007856:	e0e4      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a5f      	ldr	r2, [pc, #380]	; (80079dc <UART_SetConfig+0x308>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d120      	bne.n	80078a4 <UART_SetConfig+0x1d0>
 8007862:	4b5b      	ldr	r3, [pc, #364]	; (80079d0 <UART_SetConfig+0x2fc>)
 8007864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007868:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800786c:	2b40      	cmp	r3, #64	; 0x40
 800786e:	d00f      	beq.n	8007890 <UART_SetConfig+0x1bc>
 8007870:	2b40      	cmp	r3, #64	; 0x40
 8007872:	d802      	bhi.n	800787a <UART_SetConfig+0x1a6>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <UART_SetConfig+0x1b0>
 8007878:	e010      	b.n	800789c <UART_SetConfig+0x1c8>
 800787a:	2b80      	cmp	r3, #128	; 0x80
 800787c:	d005      	beq.n	800788a <UART_SetConfig+0x1b6>
 800787e:	2bc0      	cmp	r3, #192	; 0xc0
 8007880:	d009      	beq.n	8007896 <UART_SetConfig+0x1c2>
 8007882:	e00b      	b.n	800789c <UART_SetConfig+0x1c8>
 8007884:	2300      	movs	r3, #0
 8007886:	77fb      	strb	r3, [r7, #31]
 8007888:	e0cb      	b.n	8007a22 <UART_SetConfig+0x34e>
 800788a:	2302      	movs	r3, #2
 800788c:	77fb      	strb	r3, [r7, #31]
 800788e:	e0c8      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007890:	2304      	movs	r3, #4
 8007892:	77fb      	strb	r3, [r7, #31]
 8007894:	e0c5      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007896:	2308      	movs	r3, #8
 8007898:	77fb      	strb	r3, [r7, #31]
 800789a:	e0c2      	b.n	8007a22 <UART_SetConfig+0x34e>
 800789c:	2310      	movs	r3, #16
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	bf00      	nop
 80078a2:	e0be      	b.n	8007a22 <UART_SetConfig+0x34e>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a4d      	ldr	r2, [pc, #308]	; (80079e0 <UART_SetConfig+0x30c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d124      	bne.n	80078f8 <UART_SetConfig+0x224>
 80078ae:	4b48      	ldr	r3, [pc, #288]	; (80079d0 <UART_SetConfig+0x2fc>)
 80078b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078bc:	d012      	beq.n	80078e4 <UART_SetConfig+0x210>
 80078be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c2:	d802      	bhi.n	80078ca <UART_SetConfig+0x1f6>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d007      	beq.n	80078d8 <UART_SetConfig+0x204>
 80078c8:	e012      	b.n	80078f0 <UART_SetConfig+0x21c>
 80078ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ce:	d006      	beq.n	80078de <UART_SetConfig+0x20a>
 80078d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d4:	d009      	beq.n	80078ea <UART_SetConfig+0x216>
 80078d6:	e00b      	b.n	80078f0 <UART_SetConfig+0x21c>
 80078d8:	2300      	movs	r3, #0
 80078da:	77fb      	strb	r3, [r7, #31]
 80078dc:	e0a1      	b.n	8007a22 <UART_SetConfig+0x34e>
 80078de:	2302      	movs	r3, #2
 80078e0:	77fb      	strb	r3, [r7, #31]
 80078e2:	e09e      	b.n	8007a22 <UART_SetConfig+0x34e>
 80078e4:	2304      	movs	r3, #4
 80078e6:	77fb      	strb	r3, [r7, #31]
 80078e8:	e09b      	b.n	8007a22 <UART_SetConfig+0x34e>
 80078ea:	2308      	movs	r3, #8
 80078ec:	77fb      	strb	r3, [r7, #31]
 80078ee:	e098      	b.n	8007a22 <UART_SetConfig+0x34e>
 80078f0:	2310      	movs	r3, #16
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	bf00      	nop
 80078f6:	e094      	b.n	8007a22 <UART_SetConfig+0x34e>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a39      	ldr	r2, [pc, #228]	; (80079e4 <UART_SetConfig+0x310>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d124      	bne.n	800794c <UART_SetConfig+0x278>
 8007902:	4b33      	ldr	r3, [pc, #204]	; (80079d0 <UART_SetConfig+0x2fc>)
 8007904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800790c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007910:	d012      	beq.n	8007938 <UART_SetConfig+0x264>
 8007912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007916:	d802      	bhi.n	800791e <UART_SetConfig+0x24a>
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <UART_SetConfig+0x258>
 800791c:	e012      	b.n	8007944 <UART_SetConfig+0x270>
 800791e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007922:	d006      	beq.n	8007932 <UART_SetConfig+0x25e>
 8007924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007928:	d009      	beq.n	800793e <UART_SetConfig+0x26a>
 800792a:	e00b      	b.n	8007944 <UART_SetConfig+0x270>
 800792c:	2301      	movs	r3, #1
 800792e:	77fb      	strb	r3, [r7, #31]
 8007930:	e077      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007932:	2302      	movs	r3, #2
 8007934:	77fb      	strb	r3, [r7, #31]
 8007936:	e074      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007938:	2304      	movs	r3, #4
 800793a:	77fb      	strb	r3, [r7, #31]
 800793c:	e071      	b.n	8007a22 <UART_SetConfig+0x34e>
 800793e:	2308      	movs	r3, #8
 8007940:	77fb      	strb	r3, [r7, #31]
 8007942:	e06e      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007944:	2310      	movs	r3, #16
 8007946:	77fb      	strb	r3, [r7, #31]
 8007948:	bf00      	nop
 800794a:	e06a      	b.n	8007a22 <UART_SetConfig+0x34e>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a25      	ldr	r2, [pc, #148]	; (80079e8 <UART_SetConfig+0x314>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d124      	bne.n	80079a0 <UART_SetConfig+0x2cc>
 8007956:	4b1e      	ldr	r3, [pc, #120]	; (80079d0 <UART_SetConfig+0x2fc>)
 8007958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007964:	d012      	beq.n	800798c <UART_SetConfig+0x2b8>
 8007966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796a:	d802      	bhi.n	8007972 <UART_SetConfig+0x29e>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d007      	beq.n	8007980 <UART_SetConfig+0x2ac>
 8007970:	e012      	b.n	8007998 <UART_SetConfig+0x2c4>
 8007972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007976:	d006      	beq.n	8007986 <UART_SetConfig+0x2b2>
 8007978:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800797c:	d009      	beq.n	8007992 <UART_SetConfig+0x2be>
 800797e:	e00b      	b.n	8007998 <UART_SetConfig+0x2c4>
 8007980:	2300      	movs	r3, #0
 8007982:	77fb      	strb	r3, [r7, #31]
 8007984:	e04d      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007986:	2302      	movs	r3, #2
 8007988:	77fb      	strb	r3, [r7, #31]
 800798a:	e04a      	b.n	8007a22 <UART_SetConfig+0x34e>
 800798c:	2304      	movs	r3, #4
 800798e:	77fb      	strb	r3, [r7, #31]
 8007990:	e047      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007992:	2308      	movs	r3, #8
 8007994:	77fb      	strb	r3, [r7, #31]
 8007996:	e044      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007998:	2310      	movs	r3, #16
 800799a:	77fb      	strb	r3, [r7, #31]
 800799c:	bf00      	nop
 800799e:	e040      	b.n	8007a22 <UART_SetConfig+0x34e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a11      	ldr	r2, [pc, #68]	; (80079ec <UART_SetConfig+0x318>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d139      	bne.n	8007a1e <UART_SetConfig+0x34a>
 80079aa:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <UART_SetConfig+0x2fc>)
 80079ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079b8:	d027      	beq.n	8007a0a <UART_SetConfig+0x336>
 80079ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079be:	d817      	bhi.n	80079f0 <UART_SetConfig+0x31c>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d01c      	beq.n	80079fe <UART_SetConfig+0x32a>
 80079c4:	e027      	b.n	8007a16 <UART_SetConfig+0x342>
 80079c6:	bf00      	nop
 80079c8:	efff69f3 	.word	0xefff69f3
 80079cc:	40011000 	.word	0x40011000
 80079d0:	40023800 	.word	0x40023800
 80079d4:	40004400 	.word	0x40004400
 80079d8:	40004800 	.word	0x40004800
 80079dc:	40004c00 	.word	0x40004c00
 80079e0:	40005000 	.word	0x40005000
 80079e4:	40011400 	.word	0x40011400
 80079e8:	40007800 	.word	0x40007800
 80079ec:	40007c00 	.word	0x40007c00
 80079f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f4:	d006      	beq.n	8007a04 <UART_SetConfig+0x330>
 80079f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80079fa:	d009      	beq.n	8007a10 <UART_SetConfig+0x33c>
 80079fc:	e00b      	b.n	8007a16 <UART_SetConfig+0x342>
 80079fe:	2300      	movs	r3, #0
 8007a00:	77fb      	strb	r3, [r7, #31]
 8007a02:	e00e      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007a04:	2302      	movs	r3, #2
 8007a06:	77fb      	strb	r3, [r7, #31]
 8007a08:	e00b      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007a0a:	2304      	movs	r3, #4
 8007a0c:	77fb      	strb	r3, [r7, #31]
 8007a0e:	e008      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007a10:	2308      	movs	r3, #8
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e005      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007a16:	2310      	movs	r3, #16
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	bf00      	nop
 8007a1c:	e001      	b.n	8007a22 <UART_SetConfig+0x34e>
 8007a1e:	2310      	movs	r3, #16
 8007a20:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a2a:	d17f      	bne.n	8007b2c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007a2c:	7ffb      	ldrb	r3, [r7, #31]
 8007a2e:	2b08      	cmp	r3, #8
 8007a30:	d85c      	bhi.n	8007aec <UART_SetConfig+0x418>
 8007a32:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <UART_SetConfig+0x364>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a5d 	.word	0x08007a5d
 8007a3c:	08007a7d 	.word	0x08007a7d
 8007a40:	08007a9d 	.word	0x08007a9d
 8007a44:	08007aed 	.word	0x08007aed
 8007a48:	08007ab5 	.word	0x08007ab5
 8007a4c:	08007aed 	.word	0x08007aed
 8007a50:	08007aed 	.word	0x08007aed
 8007a54:	08007aed 	.word	0x08007aed
 8007a58:	08007ad5 	.word	0x08007ad5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a5c:	f7fe ff06 	bl	800686c <HAL_RCC_GetPCLK1Freq>
 8007a60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	005a      	lsls	r2, r3, #1
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	085b      	lsrs	r3, r3, #1
 8007a6c:	441a      	add	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	61bb      	str	r3, [r7, #24]
        break;
 8007a7a:	e03a      	b.n	8007af2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a7c:	f7fe ff0a 	bl	8006894 <HAL_RCC_GetPCLK2Freq>
 8007a80:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	005a      	lsls	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	085b      	lsrs	r3, r3, #1
 8007a8c:	441a      	add	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	61bb      	str	r3, [r7, #24]
        break;
 8007a9a:	e02a      	b.n	8007af2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	085a      	lsrs	r2, r3, #1
 8007aa2:	4b5f      	ldr	r3, [pc, #380]	; (8007c20 <UART_SetConfig+0x54c>)
 8007aa4:	4413      	add	r3, r2
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6852      	ldr	r2, [r2, #4]
 8007aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	61bb      	str	r3, [r7, #24]
        break;
 8007ab2:	e01e      	b.n	8007af2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ab4:	f7fe fdf6 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8007ab8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	005a      	lsls	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	085b      	lsrs	r3, r3, #1
 8007ac4:	441a      	add	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	61bb      	str	r3, [r7, #24]
        break;
 8007ad2:	e00e      	b.n	8007af2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	085b      	lsrs	r3, r3, #1
 8007ada:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	61bb      	str	r3, [r7, #24]
        break;
 8007aea:	e002      	b.n	8007af2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	75fb      	strb	r3, [r7, #23]
        break;
 8007af0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	2b0f      	cmp	r3, #15
 8007af6:	d916      	bls.n	8007b26 <UART_SetConfig+0x452>
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007afe:	d212      	bcs.n	8007b26 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f023 030f 	bic.w	r3, r3, #15
 8007b08:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	085b      	lsrs	r3, r3, #1
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	897b      	ldrh	r3, [r7, #10]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	897a      	ldrh	r2, [r7, #10]
 8007b22:	60da      	str	r2, [r3, #12]
 8007b24:	e070      	b.n	8007c08 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	75fb      	strb	r3, [r7, #23]
 8007b2a:	e06d      	b.n	8007c08 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007b2c:	7ffb      	ldrb	r3, [r7, #31]
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d859      	bhi.n	8007be6 <UART_SetConfig+0x512>
 8007b32:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <UART_SetConfig+0x464>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b5d 	.word	0x08007b5d
 8007b3c:	08007b7b 	.word	0x08007b7b
 8007b40:	08007b99 	.word	0x08007b99
 8007b44:	08007be7 	.word	0x08007be7
 8007b48:	08007bb1 	.word	0x08007bb1
 8007b4c:	08007be7 	.word	0x08007be7
 8007b50:	08007be7 	.word	0x08007be7
 8007b54:	08007be7 	.word	0x08007be7
 8007b58:	08007bcf 	.word	0x08007bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b5c:	f7fe fe86 	bl	800686c <HAL_RCC_GetPCLK1Freq>
 8007b60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	085a      	lsrs	r2, r3, #1
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	441a      	add	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	61bb      	str	r3, [r7, #24]
        break;
 8007b78:	e038      	b.n	8007bec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b7a:	f7fe fe8b 	bl	8006894 <HAL_RCC_GetPCLK2Freq>
 8007b7e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	085a      	lsrs	r2, r3, #1
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	441a      	add	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	61bb      	str	r3, [r7, #24]
        break;
 8007b96:	e029      	b.n	8007bec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	085a      	lsrs	r2, r3, #1
 8007b9e:	4b21      	ldr	r3, [pc, #132]	; (8007c24 <UART_SetConfig+0x550>)
 8007ba0:	4413      	add	r3, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6852      	ldr	r2, [r2, #4]
 8007ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	61bb      	str	r3, [r7, #24]
        break;
 8007bae:	e01d      	b.n	8007bec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bb0:	f7fe fd78 	bl	80066a4 <HAL_RCC_GetSysClockFreq>
 8007bb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	085a      	lsrs	r2, r3, #1
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	441a      	add	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	61bb      	str	r3, [r7, #24]
        break;
 8007bcc:	e00e      	b.n	8007bec <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	085b      	lsrs	r3, r3, #1
 8007bd4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	61bb      	str	r3, [r7, #24]
        break;
 8007be4:	e002      	b.n	8007bec <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	75fb      	strb	r3, [r7, #23]
        break;
 8007bea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	2b0f      	cmp	r3, #15
 8007bf0:	d908      	bls.n	8007c04 <UART_SetConfig+0x530>
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf8:	d204      	bcs.n	8007c04 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	60da      	str	r2, [r3, #12]
 8007c02:	e001      	b.n	8007c08 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3720      	adds	r7, #32
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	01e84800 	.word	0x01e84800
 8007c24:	00f42400 	.word	0x00f42400

08007c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	f003 0302 	and.w	r3, r3, #2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9a:	f003 0308 	and.w	r3, r3, #8
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00a      	beq.n	8007cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	f003 0320 	and.w	r3, r3, #32
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01a      	beq.n	8007d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d26:	d10a      	bne.n	8007d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	605a      	str	r2, [r3, #4]
  }
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007d7a:	f7fc f93b 	bl	8003ff4 <HAL_GetTick>
 8007d7e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b08      	cmp	r3, #8
 8007d8c:	d10e      	bne.n	8007dac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f82a 	bl	8007df6 <UART_WaitOnFlagUntilTimeout>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e020      	b.n	8007dee <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0304 	and.w	r3, r3, #4
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d10e      	bne.n	8007dd8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f814 	bl	8007df6 <UART_WaitOnFlagUntilTimeout>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e00a      	b.n	8007dee <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	603b      	str	r3, [r7, #0]
 8007e02:	4613      	mov	r3, r2
 8007e04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e06:	e05d      	b.n	8007ec4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0e:	d059      	beq.n	8007ec4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e10:	f7fc f8f0 	bl	8003ff4 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d302      	bcc.n	8007e26 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d11b      	bne.n	8007e5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0201 	bic.w	r2, r2, #1
 8007e44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e042      	b.n	8007ee4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0304 	and.w	r3, r3, #4
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d02b      	beq.n	8007ec4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e7a:	d123      	bne.n	8007ec4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e84:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e94:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689a      	ldr	r2, [r3, #8]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 0201 	bic.w	r2, r2, #1
 8007ea4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e00f      	b.n	8007ee4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69da      	ldr	r2, [r3, #28]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	bf0c      	ite	eq
 8007ed4:	2301      	moveq	r3, #1
 8007ed6:	2300      	movne	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d092      	beq.n	8007e08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007eec:	b084      	sub	sp, #16
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	f107 001c 	add.w	r0, r7, #28
 8007efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d120      	bne.n	8007f46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	4b20      	ldr	r3, [pc, #128]	; (8007f98 <USB_CoreInit+0xac>)
 8007f16:	4013      	ands	r3, r2
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d105      	bne.n	8007f3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa52 	bl	80083e4 <USB_CoreReset>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
 8007f44:	e010      	b.n	8007f68 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa46 	bl	80083e4 <USB_CoreReset>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d10b      	bne.n	8007f86 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f043 0206 	orr.w	r2, r3, #6
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f043 0220 	orr.w	r2, r3, #32
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f92:	b004      	add	sp, #16
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	ffbdffbf 	.word	0xffbdffbf

08007f9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f023 0201 	bic.w	r2, r3, #1
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d106      	bne.n	8007fea <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	60da      	str	r2, [r3, #12]
 8007fe8:	e00b      	b.n	8008002 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d106      	bne.n	8007ffe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	60da      	str	r2, [r3, #12]
 8007ffc:	e001      	b.n	8008002 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e003      	b.n	800800a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008002:	2032      	movs	r0, #50	; 0x32
 8008004:	f7fc f802 	bl	800400c <HAL_Delay>

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008014:	b084      	sub	sp, #16
 8008016:	b580      	push	{r7, lr}
 8008018:	b086      	sub	sp, #24
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800802e:	2300      	movs	r3, #0
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	e009      	b.n	8008048 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	3340      	adds	r3, #64	; 0x40
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	2200      	movs	r2, #0
 8008040:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3301      	adds	r3, #1
 8008046:	613b      	str	r3, [r7, #16]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2b0e      	cmp	r3, #14
 800804c:	d9f2      	bls.n	8008034 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800804e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008050:	2b00      	cmp	r3, #0
 8008052:	d11c      	bne.n	800808e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008062:	f043 0302 	orr.w	r3, r3, #2
 8008066:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	e005      	b.n	800809a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008092:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080a0:	461a      	mov	r2, r3
 80080a2:	2300      	movs	r3, #0
 80080a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ac:	4619      	mov	r1, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b4:	461a      	mov	r2, r3
 80080b6:	680b      	ldr	r3, [r1, #0]
 80080b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d10c      	bne.n	80080da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d104      	bne.n	80080d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080c6:	2100      	movs	r1, #0
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f959 	bl	8008380 <USB_SetDevSpeed>
 80080ce:	e018      	b.n	8008102 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080d0:	2101      	movs	r1, #1
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f954 	bl	8008380 <USB_SetDevSpeed>
 80080d8:	e013      	b.n	8008102 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d10c      	bne.n	80080fa <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d104      	bne.n	80080f0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080e6:	2100      	movs	r1, #0
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f949 	bl	8008380 <USB_SetDevSpeed>
 80080ee:	e008      	b.n	8008102 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080f0:	2101      	movs	r1, #1
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f944 	bl	8008380 <USB_SetDevSpeed>
 80080f8:	e003      	b.n	8008102 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080fa:	2103      	movs	r1, #3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f93f 	bl	8008380 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008102:	2110      	movs	r1, #16
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f8f3 	bl	80082f0 <USB_FlushTxFifo>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f911 	bl	800833c <USB_FlushRxFifo>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800812a:	461a      	mov	r2, r3
 800812c:	2300      	movs	r3, #0
 800812e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008136:	461a      	mov	r2, r3
 8008138:	2300      	movs	r3, #0
 800813a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008142:	461a      	mov	r2, r3
 8008144:	2300      	movs	r3, #0
 8008146:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008148:	2300      	movs	r3, #0
 800814a:	613b      	str	r3, [r7, #16]
 800814c:	e043      	b.n	80081d6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008164:	d118      	bne.n	8008198 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008178:	461a      	mov	r2, r3
 800817a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	e013      	b.n	80081aa <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818e:	461a      	mov	r2, r3
 8008190:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	e008      	b.n	80081aa <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a4:	461a      	mov	r2, r3
 80081a6:	2300      	movs	r3, #0
 80081a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b6:	461a      	mov	r2, r3
 80081b8:	2300      	movs	r3, #0
 80081ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c8:	461a      	mov	r2, r3
 80081ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	3301      	adds	r3, #1
 80081d4:	613b      	str	r3, [r7, #16]
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d3b7      	bcc.n	800814e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081de:	2300      	movs	r3, #0
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	e043      	b.n	800826c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081fa:	d118      	bne.n	800822e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820e:	461a      	mov	r2, r3
 8008210:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	e013      	b.n	8008240 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008224:	461a      	mov	r2, r3
 8008226:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800822a:	6013      	str	r3, [r2, #0]
 800822c:	e008      	b.n	8008240 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	461a      	mov	r2, r3
 800823c:	2300      	movs	r3, #0
 800823e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800824c:	461a      	mov	r2, r3
 800824e:	2300      	movs	r3, #0
 8008250:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825e:	461a      	mov	r2, r3
 8008260:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008264:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3301      	adds	r3, #1
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	429a      	cmp	r2, r3
 8008272:	d3b7      	bcc.n	80081e4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008286:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008294:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	2b00      	cmp	r3, #0
 800829a:	d105      	bne.n	80082a8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	f043 0210 	orr.w	r2, r3, #16
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699a      	ldr	r2, [r3, #24]
 80082ac:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <USB_DevInit+0x2d4>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d005      	beq.n	80082c6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	f043 0208 	orr.w	r2, r3, #8
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d105      	bne.n	80082d8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	699a      	ldr	r2, [r3, #24]
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <USB_DevInit+0x2d8>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082e4:	b004      	add	sp, #16
 80082e6:	4770      	bx	lr
 80082e8:	803c3800 	.word	0x803c3800
 80082ec:	40000004 	.word	0x40000004

080082f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	019b      	lsls	r3, r3, #6
 8008302:	f043 0220 	orr.w	r2, r3, #32
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3301      	adds	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4a09      	ldr	r2, [pc, #36]	; (8008338 <USB_FlushTxFifo+0x48>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d901      	bls.n	800831c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e006      	b.n	800832a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	f003 0320 	and.w	r3, r3, #32
 8008324:	2b20      	cmp	r3, #32
 8008326:	d0f0      	beq.n	800830a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	00030d40 	.word	0x00030d40

0800833c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008344:	2300      	movs	r3, #0
 8008346:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2210      	movs	r2, #16
 800834c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4a09      	ldr	r2, [pc, #36]	; (800837c <USB_FlushRxFifo+0x40>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d901      	bls.n	8008360 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e006      	b.n	800836e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	f003 0310 	and.w	r3, r3, #16
 8008368:	2b10      	cmp	r3, #16
 800836a:	d0f0      	beq.n	800834e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	00030d40 	.word	0x00030d40

08008380 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083a0:	4313      	orrs	r3, r2
 80083a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083cc:	f043 0302 	orr.w	r3, r3, #2
 80083d0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80083d2:	2003      	movs	r0, #3
 80083d4:	f7fb fe1a 	bl	800400c <HAL_Delay>

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3301      	adds	r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4a13      	ldr	r2, [pc, #76]	; (8008448 <USB_CoreReset+0x64>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d901      	bls.n	8008402 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e01b      	b.n	800843a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	daf2      	bge.n	80083f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f043 0201 	orr.w	r2, r3, #1
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3301      	adds	r3, #1
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4a09      	ldr	r2, [pc, #36]	; (8008448 <USB_CoreReset+0x64>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d901      	bls.n	800842c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e006      	b.n	800843a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b01      	cmp	r3, #1
 8008436:	d0f0      	beq.n	800841a <USB_CoreReset+0x36>

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	00030d40 	.word	0x00030d40

0800844c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008450:	bf00      	nop
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
	...

0800845c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008462:	f3ef 8305 	mrs	r3, IPSR
 8008466:	60bb      	str	r3, [r7, #8]
  return(result);
 8008468:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10f      	bne.n	800848e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800846e:	f3ef 8310 	mrs	r3, PRIMASK
 8008472:	607b      	str	r3, [r7, #4]
  return(result);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800847a:	f3ef 8311 	mrs	r3, BASEPRI
 800847e:	603b      	str	r3, [r7, #0]
  return(result);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d007      	beq.n	8008496 <osKernelInitialize+0x3a>
 8008486:	4b0e      	ldr	r3, [pc, #56]	; (80084c0 <osKernelInitialize+0x64>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b02      	cmp	r3, #2
 800848c:	d103      	bne.n	8008496 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800848e:	f06f 0305 	mvn.w	r3, #5
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	e00c      	b.n	80084b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008496:	4b0a      	ldr	r3, [pc, #40]	; (80084c0 <osKernelInitialize+0x64>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d105      	bne.n	80084aa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800849e:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <osKernelInitialize+0x64>)
 80084a0:	2201      	movs	r2, #1
 80084a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	e002      	b.n	80084b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80084aa:	f04f 33ff 	mov.w	r3, #4294967295
 80084ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80084b0:	68fb      	ldr	r3, [r7, #12]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	200000dc 	.word	0x200000dc

080084c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ca:	f3ef 8305 	mrs	r3, IPSR
 80084ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80084d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10f      	bne.n	80084f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084d6:	f3ef 8310 	mrs	r3, PRIMASK
 80084da:	607b      	str	r3, [r7, #4]
  return(result);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d105      	bne.n	80084ee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084e2:	f3ef 8311 	mrs	r3, BASEPRI
 80084e6:	603b      	str	r3, [r7, #0]
  return(result);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d007      	beq.n	80084fe <osKernelStart+0x3a>
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <osKernelStart+0x68>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d103      	bne.n	80084fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80084f6:	f06f 0305 	mvn.w	r3, #5
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e010      	b.n	8008520 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80084fe:	4b0b      	ldr	r3, [pc, #44]	; (800852c <osKernelStart+0x68>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d109      	bne.n	800851a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008506:	f7ff ffa1 	bl	800844c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800850a:	4b08      	ldr	r3, [pc, #32]	; (800852c <osKernelStart+0x68>)
 800850c:	2202      	movs	r2, #2
 800850e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008510:	f001 f8b6 	bl	8009680 <vTaskStartScheduler>
      stat = osOK;
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	e002      	b.n	8008520 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800851a:	f04f 33ff 	mov.w	r3, #4294967295
 800851e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008520:	68fb      	ldr	r3, [r7, #12]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	200000dc 	.word	0x200000dc

08008530 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008530:	b580      	push	{r7, lr}
 8008532:	b090      	sub	sp, #64	; 0x40
 8008534:	af04      	add	r7, sp, #16
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800853c:	2300      	movs	r3, #0
 800853e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008540:	f3ef 8305 	mrs	r3, IPSR
 8008544:	61fb      	str	r3, [r7, #28]
  return(result);
 8008546:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008548:	2b00      	cmp	r3, #0
 800854a:	f040 808f 	bne.w	800866c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800854e:	f3ef 8310 	mrs	r3, PRIMASK
 8008552:	61bb      	str	r3, [r7, #24]
  return(result);
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d105      	bne.n	8008566 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800855a:	f3ef 8311 	mrs	r3, BASEPRI
 800855e:	617b      	str	r3, [r7, #20]
  return(result);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <osThreadNew+0x3e>
 8008566:	4b44      	ldr	r3, [pc, #272]	; (8008678 <osThreadNew+0x148>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b02      	cmp	r3, #2
 800856c:	d07e      	beq.n	800866c <osThreadNew+0x13c>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d07b      	beq.n	800866c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008574:	2380      	movs	r3, #128	; 0x80
 8008576:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008578:	2318      	movs	r3, #24
 800857a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800857c:	2300      	movs	r3, #0
 800857e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008580:	f04f 33ff 	mov.w	r3, #4294967295
 8008584:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d045      	beq.n	8008618 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <osThreadNew+0x6a>
        name = attr->name;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d008      	beq.n	80085c0 <osThreadNew+0x90>
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	2b38      	cmp	r3, #56	; 0x38
 80085b2:	d805      	bhi.n	80085c0 <osThreadNew+0x90>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <osThreadNew+0x94>
        return (NULL);
 80085c0:	2300      	movs	r3, #0
 80085c2:	e054      	b.n	800866e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	089b      	lsrs	r3, r3, #2
 80085d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00e      	beq.n	80085fa <osThreadNew+0xca>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	2bbf      	cmp	r3, #191	; 0xbf
 80085e2:	d90a      	bls.n	80085fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d006      	beq.n	80085fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <osThreadNew+0xca>
        mem = 1;
 80085f4:	2301      	movs	r3, #1
 80085f6:	623b      	str	r3, [r7, #32]
 80085f8:	e010      	b.n	800861c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10c      	bne.n	800861c <osThreadNew+0xec>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d108      	bne.n	800861c <osThreadNew+0xec>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d104      	bne.n	800861c <osThreadNew+0xec>
          mem = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	623b      	str	r3, [r7, #32]
 8008616:	e001      	b.n	800861c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d110      	bne.n	8008644 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800862a:	9202      	str	r2, [sp, #8]
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 fe2b 	bl	8009294 <xTaskCreateStatic>
 800863e:	4603      	mov	r3, r0
 8008640:	613b      	str	r3, [r7, #16]
 8008642:	e013      	b.n	800866c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d110      	bne.n	800866c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864c:	b29a      	uxth	r2, r3
 800864e:	f107 0310 	add.w	r3, r7, #16
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 fe79 	bl	8009354 <xTaskCreate>
 8008662:	4603      	mov	r3, r0
 8008664:	2b01      	cmp	r3, #1
 8008666:	d001      	beq.n	800866c <osThreadNew+0x13c>
          hTask = NULL;
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800866c:	693b      	ldr	r3, [r7, #16]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3730      	adds	r7, #48	; 0x30
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	200000dc 	.word	0x200000dc

0800867c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008684:	f3ef 8305 	mrs	r3, IPSR
 8008688:	613b      	str	r3, [r7, #16]
  return(result);
 800868a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10f      	bne.n	80086b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008690:	f3ef 8310 	mrs	r3, PRIMASK
 8008694:	60fb      	str	r3, [r7, #12]
  return(result);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d105      	bne.n	80086a8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800869c:	f3ef 8311 	mrs	r3, BASEPRI
 80086a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d007      	beq.n	80086b8 <osDelay+0x3c>
 80086a8:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <osDelay+0x58>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d103      	bne.n	80086b8 <osDelay+0x3c>
    stat = osErrorISR;
 80086b0:	f06f 0305 	mvn.w	r3, #5
 80086b4:	617b      	str	r3, [r7, #20]
 80086b6:	e007      	b.n	80086c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 ffa6 	bl	8009614 <vTaskDelay>
    }
  }

  return (stat);
 80086c8:	697b      	ldr	r3, [r7, #20]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	200000dc 	.word	0x200000dc

080086d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4a07      	ldr	r2, [pc, #28]	; (8008704 <vApplicationGetIdleTaskMemory+0x2c>)
 80086e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	4a06      	ldr	r2, [pc, #24]	; (8008708 <vApplicationGetIdleTaskMemory+0x30>)
 80086ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2280      	movs	r2, #128	; 0x80
 80086f4:	601a      	str	r2, [r3, #0]
}
 80086f6:	bf00      	nop
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	200000e0 	.word	0x200000e0
 8008708:	200001a0 	.word	0x200001a0

0800870c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4a07      	ldr	r2, [pc, #28]	; (8008738 <vApplicationGetTimerTaskMemory+0x2c>)
 800871c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	4a06      	ldr	r2, [pc, #24]	; (800873c <vApplicationGetTimerTaskMemory+0x30>)
 8008722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800872a:	601a      	str	r2, [r3, #0]
}
 800872c:	bf00      	nop
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	200003a0 	.word	0x200003a0
 800873c:	20000460 	.word	0x20000460

08008740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f103 0208 	add.w	r2, r3, #8
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f04f 32ff 	mov.w	r2, #4294967295
 8008758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f103 0208 	add.w	r2, r3, #8
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f103 0208 	add.w	r2, r3, #8
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800879a:	b480      	push	{r7}
 800879c:	b085      	sub	sp, #20
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
}
 80087d6:	bf00      	nop
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087e2:	b480      	push	{r7}
 80087e4:	b085      	sub	sp, #20
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d103      	bne.n	8008802 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	e00c      	b.n	800881c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3308      	adds	r3, #8
 8008806:	60fb      	str	r3, [r7, #12]
 8008808:	e002      	b.n	8008810 <vListInsert+0x2e>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	429a      	cmp	r2, r3
 800881a:	d2f6      	bcs.n	800880a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	601a      	str	r2, [r3, #0]
}
 8008848:	bf00      	nop
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6892      	ldr	r2, [r2, #8]
 800886a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6852      	ldr	r2, [r2, #4]
 8008874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	429a      	cmp	r2, r3
 800887e:	d103      	bne.n	8008888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	1e5a      	subs	r2, r3, #1
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10b      	bne.n	80088d4 <xQueueGenericReset+0x2c>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	b672      	cpsid	i
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	b662      	cpsie	i
 80088d0:	60bb      	str	r3, [r7, #8]
 80088d2:	e7fe      	b.n	80088d2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80088d4:	f002 f8a8 	bl	800aa28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e0:	68f9      	ldr	r1, [r7, #12]
 80088e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088e4:	fb01 f303 	mul.w	r3, r1, r3
 80088e8:	441a      	add	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008904:	3b01      	subs	r3, #1
 8008906:	68f9      	ldr	r1, [r7, #12]
 8008908:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800890a:	fb01 f303 	mul.w	r3, r1, r3
 800890e:	441a      	add	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	22ff      	movs	r2, #255	; 0xff
 8008918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	22ff      	movs	r2, #255	; 0xff
 8008920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d114      	bne.n	8008954 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d01a      	beq.n	8008968 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3310      	adds	r3, #16
 8008936:	4618      	mov	r0, r3
 8008938:	f001 f96e 	bl	8009c18 <xTaskRemoveFromEventList>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d012      	beq.n	8008968 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008942:	4b0d      	ldr	r3, [pc, #52]	; (8008978 <xQueueGenericReset+0xd0>)
 8008944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	e009      	b.n	8008968 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3310      	adds	r3, #16
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff fef1 	bl	8008740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3324      	adds	r3, #36	; 0x24
 8008962:	4618      	mov	r0, r3
 8008964:	f7ff feec 	bl	8008740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008968:	f002 f890 	bl	800aa8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800896c:	2301      	movs	r3, #1
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08e      	sub	sp, #56	; 0x38
 8008980:	af02      	add	r7, sp, #8
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10b      	bne.n	80089a8 <xQueueGenericCreateStatic+0x2c>
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	b672      	cpsid	i
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	b662      	cpsie	i
 80089a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80089a6:	e7fe      	b.n	80089a6 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10b      	bne.n	80089c6 <xQueueGenericCreateStatic+0x4a>
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	b672      	cpsid	i
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	b662      	cpsie	i
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
 80089c4:	e7fe      	b.n	80089c4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <xQueueGenericCreateStatic+0x56>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <xQueueGenericCreateStatic+0x5a>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e000      	b.n	80089d8 <xQueueGenericCreateStatic+0x5c>
 80089d6:	2300      	movs	r3, #0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10b      	bne.n	80089f4 <xQueueGenericCreateStatic+0x78>
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	b672      	cpsid	i
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	b662      	cpsie	i
 80089f0:	623b      	str	r3, [r7, #32]
 80089f2:	e7fe      	b.n	80089f2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d102      	bne.n	8008a00 <xQueueGenericCreateStatic+0x84>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <xQueueGenericCreateStatic+0x88>
 8008a00:	2301      	movs	r3, #1
 8008a02:	e000      	b.n	8008a06 <xQueueGenericCreateStatic+0x8a>
 8008a04:	2300      	movs	r3, #0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10b      	bne.n	8008a22 <xQueueGenericCreateStatic+0xa6>
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	b672      	cpsid	i
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	b662      	cpsie	i
 8008a1e:	61fb      	str	r3, [r7, #28]
 8008a20:	e7fe      	b.n	8008a20 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a22:	2350      	movs	r3, #80	; 0x50
 8008a24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b50      	cmp	r3, #80	; 0x50
 8008a2a:	d00b      	beq.n	8008a44 <xQueueGenericCreateStatic+0xc8>
 8008a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a30:	b672      	cpsid	i
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	b662      	cpsie	i
 8008a40:	61bb      	str	r3, [r7, #24]
 8008a42:	e7fe      	b.n	8008a42 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00d      	beq.n	8008a6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a58:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	4613      	mov	r3, r2
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	68b9      	ldr	r1, [r7, #8]
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 f805 	bl	8008a76 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3730      	adds	r7, #48	; 0x30
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	60b9      	str	r1, [r7, #8]
 8008a80:	607a      	str	r2, [r7, #4]
 8008a82:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d103      	bne.n	8008a92 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	e002      	b.n	8008a98 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	69b8      	ldr	r0, [r7, #24]
 8008aa8:	f7ff fefe 	bl	80088a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	78fa      	ldrb	r2, [r7, #3]
 8008ab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ab4:	bf00      	nop
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08e      	sub	sp, #56	; 0x38
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008aca:	2300      	movs	r3, #0
 8008acc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10b      	bne.n	8008af0 <xQueueGenericSend+0x34>
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	b672      	cpsid	i
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	b662      	cpsie	i
 8008aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aee:	e7fe      	b.n	8008aee <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d103      	bne.n	8008afe <xQueueGenericSend+0x42>
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <xQueueGenericSend+0x46>
 8008afe:	2301      	movs	r3, #1
 8008b00:	e000      	b.n	8008b04 <xQueueGenericSend+0x48>
 8008b02:	2300      	movs	r3, #0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10b      	bne.n	8008b20 <xQueueGenericSend+0x64>
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	b672      	cpsid	i
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	b662      	cpsie	i
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b1e:	e7fe      	b.n	8008b1e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d103      	bne.n	8008b2e <xQueueGenericSend+0x72>
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d101      	bne.n	8008b32 <xQueueGenericSend+0x76>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e000      	b.n	8008b34 <xQueueGenericSend+0x78>
 8008b32:	2300      	movs	r3, #0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10b      	bne.n	8008b50 <xQueueGenericSend+0x94>
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	b672      	cpsid	i
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	b662      	cpsie	i
 8008b4c:	623b      	str	r3, [r7, #32]
 8008b4e:	e7fe      	b.n	8008b4e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b50:	f001 fa28 	bl	8009fa4 <xTaskGetSchedulerState>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d102      	bne.n	8008b60 <xQueueGenericSend+0xa4>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <xQueueGenericSend+0xa8>
 8008b60:	2301      	movs	r3, #1
 8008b62:	e000      	b.n	8008b66 <xQueueGenericSend+0xaa>
 8008b64:	2300      	movs	r3, #0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10b      	bne.n	8008b82 <xQueueGenericSend+0xc6>
 8008b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6e:	b672      	cpsid	i
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	b662      	cpsie	i
 8008b7e:	61fb      	str	r3, [r7, #28]
 8008b80:	e7fe      	b.n	8008b80 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b82:	f001 ff51 	bl	800aa28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d302      	bcc.n	8008b98 <xQueueGenericSend+0xdc>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d129      	bne.n	8008bec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	68b9      	ldr	r1, [r7, #8]
 8008b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b9e:	f000 fa0d 	bl	8008fbc <prvCopyDataToQueue>
 8008ba2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d010      	beq.n	8008bce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bae:	3324      	adds	r3, #36	; 0x24
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f001 f831 	bl	8009c18 <xTaskRemoveFromEventList>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d013      	beq.n	8008be4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008bbc:	4b3f      	ldr	r3, [pc, #252]	; (8008cbc <xQueueGenericSend+0x200>)
 8008bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	e00a      	b.n	8008be4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d007      	beq.n	8008be4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bd4:	4b39      	ldr	r3, [pc, #228]	; (8008cbc <xQueueGenericSend+0x200>)
 8008bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008be4:	f001 ff52 	bl	800aa8c <vPortExitCritical>
				return pdPASS;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e063      	b.n	8008cb4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d103      	bne.n	8008bfa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bf2:	f001 ff4b 	bl	800aa8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e05c      	b.n	8008cb4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d106      	bne.n	8008c0e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c00:	f107 0314 	add.w	r3, r7, #20
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 f86b 	bl	8009ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c0e:	f001 ff3d 	bl	800aa8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c12:	f000 fda7 	bl	8009764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c16:	f001 ff07 	bl	800aa28 <vPortEnterCritical>
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c20:	b25b      	sxtb	r3, r3
 8008c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c26:	d103      	bne.n	8008c30 <xQueueGenericSend+0x174>
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c36:	b25b      	sxtb	r3, r3
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3c:	d103      	bne.n	8008c46 <xQueueGenericSend+0x18a>
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c46:	f001 ff21 	bl	800aa8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c4a:	1d3a      	adds	r2, r7, #4
 8008c4c:	f107 0314 	add.w	r3, r7, #20
 8008c50:	4611      	mov	r1, r2
 8008c52:	4618      	mov	r0, r3
 8008c54:	f001 f85a 	bl	8009d0c <xTaskCheckForTimeOut>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d124      	bne.n	8008ca8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c60:	f000 faa4 	bl	80091ac <prvIsQueueFull>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d018      	beq.n	8008c9c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	3310      	adds	r3, #16
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 ff7e 	bl	8009b74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c7a:	f000 fa2f 	bl	80090dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c7e:	f000 fd7f 	bl	8009780 <xTaskResumeAll>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f47f af7c 	bne.w	8008b82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008c8a:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <xQueueGenericSend+0x200>)
 8008c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	e772      	b.n	8008b82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c9e:	f000 fa1d 	bl	80090dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ca2:	f000 fd6d 	bl	8009780 <xTaskResumeAll>
 8008ca6:	e76c      	b.n	8008b82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008caa:	f000 fa17 	bl	80090dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cae:	f000 fd67 	bl	8009780 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008cb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3738      	adds	r7, #56	; 0x38
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	e000ed04 	.word	0xe000ed04

08008cc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08e      	sub	sp, #56	; 0x38
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10b      	bne.n	8008cf0 <xQueueGenericSendFromISR+0x30>
 8008cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cdc:	b672      	cpsid	i
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	b662      	cpsie	i
 8008cec:	627b      	str	r3, [r7, #36]	; 0x24
 8008cee:	e7fe      	b.n	8008cee <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d103      	bne.n	8008cfe <xQueueGenericSendFromISR+0x3e>
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <xQueueGenericSendFromISR+0x42>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e000      	b.n	8008d04 <xQueueGenericSendFromISR+0x44>
 8008d02:	2300      	movs	r3, #0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10b      	bne.n	8008d20 <xQueueGenericSendFromISR+0x60>
 8008d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0c:	b672      	cpsid	i
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	b662      	cpsie	i
 8008d1c:	623b      	str	r3, [r7, #32]
 8008d1e:	e7fe      	b.n	8008d1e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d103      	bne.n	8008d2e <xQueueGenericSendFromISR+0x6e>
 8008d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d101      	bne.n	8008d32 <xQueueGenericSendFromISR+0x72>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e000      	b.n	8008d34 <xQueueGenericSendFromISR+0x74>
 8008d32:	2300      	movs	r3, #0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10b      	bne.n	8008d50 <xQueueGenericSendFromISR+0x90>
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	b672      	cpsid	i
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	b662      	cpsie	i
 8008d4c:	61fb      	str	r3, [r7, #28]
 8008d4e:	e7fe      	b.n	8008d4e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d50:	f001 ff4a 	bl	800abe8 <vPortValidateInterruptPriority>
	__asm volatile
 8008d54:	f3ef 8211 	mrs	r2, BASEPRI
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	b672      	cpsid	i
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	b662      	cpsie	i
 8008d6c:	61ba      	str	r2, [r7, #24]
 8008d6e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d70:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d302      	bcc.n	8008d86 <xQueueGenericSendFromISR+0xc6>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d12c      	bne.n	8008de0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	68b9      	ldr	r1, [r7, #8]
 8008d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d96:	f000 f911 	bl	8008fbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d9a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da2:	d112      	bne.n	8008dca <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d016      	beq.n	8008dda <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	3324      	adds	r3, #36	; 0x24
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 ff31 	bl	8009c18 <xTaskRemoveFromEventList>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00e      	beq.n	8008dda <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00b      	beq.n	8008dda <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	e007      	b.n	8008dda <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008dce:	3301      	adds	r3, #1
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	b25a      	sxtb	r2, r3
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008dde:	e001      	b.n	8008de4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008de0:	2300      	movs	r3, #0
 8008de2:	637b      	str	r3, [r7, #52]	; 0x34
 8008de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3738      	adds	r7, #56	; 0x38
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b08c      	sub	sp, #48	; 0x30
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10b      	bne.n	8008e2a <xQueueReceive+0x32>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	b672      	cpsid	i
 8008e18:	f383 8811 	msr	BASEPRI, r3
 8008e1c:	f3bf 8f6f 	isb	sy
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	b662      	cpsie	i
 8008e26:	623b      	str	r3, [r7, #32]
 8008e28:	e7fe      	b.n	8008e28 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d103      	bne.n	8008e38 <xQueueReceive+0x40>
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <xQueueReceive+0x44>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e000      	b.n	8008e3e <xQueueReceive+0x46>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10b      	bne.n	8008e5a <xQueueReceive+0x62>
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	b672      	cpsid	i
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	b662      	cpsie	i
 8008e56:	61fb      	str	r3, [r7, #28]
 8008e58:	e7fe      	b.n	8008e58 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e5a:	f001 f8a3 	bl	8009fa4 <xTaskGetSchedulerState>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d102      	bne.n	8008e6a <xQueueReceive+0x72>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <xQueueReceive+0x76>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <xQueueReceive+0x78>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <xQueueReceive+0x94>
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	b672      	cpsid	i
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	b662      	cpsie	i
 8008e88:	61bb      	str	r3, [r7, #24]
 8008e8a:	e7fe      	b.n	8008e8a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e8c:	f001 fdcc 	bl	800aa28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d01f      	beq.n	8008edc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ea0:	f000 f8f6 	bl	8009090 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	1e5a      	subs	r2, r3, #1
 8008ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00f      	beq.n	8008ed4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	3310      	adds	r3, #16
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 fead 	bl	8009c18 <xTaskRemoveFromEventList>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d007      	beq.n	8008ed4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ec4:	4b3c      	ldr	r3, [pc, #240]	; (8008fb8 <xQueueReceive+0x1c0>)
 8008ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ed4:	f001 fdda 	bl	800aa8c <vPortExitCritical>
				return pdPASS;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e069      	b.n	8008fb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d103      	bne.n	8008eea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ee2:	f001 fdd3 	bl	800aa8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	e062      	b.n	8008fb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d106      	bne.n	8008efe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ef0:	f107 0310 	add.w	r3, r7, #16
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 fef3 	bl	8009ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008efa:	2301      	movs	r3, #1
 8008efc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008efe:	f001 fdc5 	bl	800aa8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f02:	f000 fc2f 	bl	8009764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f06:	f001 fd8f 	bl	800aa28 <vPortEnterCritical>
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f10:	b25b      	sxtb	r3, r3
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	d103      	bne.n	8008f20 <xQueueReceive+0x128>
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f26:	b25b      	sxtb	r3, r3
 8008f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2c:	d103      	bne.n	8008f36 <xQueueReceive+0x13e>
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f36:	f001 fda9 	bl	800aa8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f3a:	1d3a      	adds	r2, r7, #4
 8008f3c:	f107 0310 	add.w	r3, r7, #16
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fee2 	bl	8009d0c <xTaskCheckForTimeOut>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d123      	bne.n	8008f96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f50:	f000 f916 	bl	8009180 <prvIsQueueEmpty>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d017      	beq.n	8008f8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	3324      	adds	r3, #36	; 0x24
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	4611      	mov	r1, r2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 fe06 	bl	8009b74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f6a:	f000 f8b7 	bl	80090dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f6e:	f000 fc07 	bl	8009780 <xTaskResumeAll>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d189      	bne.n	8008e8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008f78:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <xQueueReceive+0x1c0>)
 8008f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	e780      	b.n	8008e8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f8c:	f000 f8a6 	bl	80090dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f90:	f000 fbf6 	bl	8009780 <xTaskResumeAll>
 8008f94:	e77a      	b.n	8008e8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f98:	f000 f8a0 	bl	80090dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f9c:	f000 fbf0 	bl	8009780 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fa2:	f000 f8ed 	bl	8009180 <prvIsQueueEmpty>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f43f af6f 	beq.w	8008e8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3730      	adds	r7, #48	; 0x30
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10d      	bne.n	8008ff6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d14d      	bne.n	800907e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fffa 	bl	8009fe0 <xTaskPriorityDisinherit>
 8008fec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	609a      	str	r2, [r3, #8]
 8008ff4:	e043      	b.n	800907e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d119      	bne.n	8009030 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6858      	ldr	r0, [r3, #4]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	461a      	mov	r2, r3
 8009006:	68b9      	ldr	r1, [r7, #8]
 8009008:	f002 feac 	bl	800bd64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009014:	441a      	add	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	429a      	cmp	r2, r3
 8009024:	d32b      	bcc.n	800907e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	605a      	str	r2, [r3, #4]
 800902e:	e026      	b.n	800907e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	68d8      	ldr	r0, [r3, #12]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009038:	461a      	mov	r2, r3
 800903a:	68b9      	ldr	r1, [r7, #8]
 800903c:	f002 fe92 	bl	800bd64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009048:	425b      	negs	r3, r3
 800904a:	441a      	add	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	68da      	ldr	r2, [r3, #12]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d207      	bcs.n	800906c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009064:	425b      	negs	r3, r3
 8009066:	441a      	add	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b02      	cmp	r3, #2
 8009070:	d105      	bne.n	800907e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	3b01      	subs	r3, #1
 800907c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009086:	697b      	ldr	r3, [r7, #20]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d018      	beq.n	80090d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68da      	ldr	r2, [r3, #12]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	441a      	add	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	68da      	ldr	r2, [r3, #12]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d303      	bcc.n	80090c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	68d9      	ldr	r1, [r3, #12]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	461a      	mov	r2, r3
 80090ce:	6838      	ldr	r0, [r7, #0]
 80090d0:	f002 fe48 	bl	800bd64 <memcpy>
	}
}
 80090d4:	bf00      	nop
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090e4:	f001 fca0 	bl	800aa28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090f0:	e011      	b.n	8009116 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d012      	beq.n	8009120 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3324      	adds	r3, #36	; 0x24
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fd8a 	bl	8009c18 <xTaskRemoveFromEventList>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800910a:	f000 fe63 	bl	8009dd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800910e:	7bfb      	ldrb	r3, [r7, #15]
 8009110:	3b01      	subs	r3, #1
 8009112:	b2db      	uxtb	r3, r3
 8009114:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800911a:	2b00      	cmp	r3, #0
 800911c:	dce9      	bgt.n	80090f2 <prvUnlockQueue+0x16>
 800911e:	e000      	b.n	8009122 <prvUnlockQueue+0x46>
					break;
 8009120:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	22ff      	movs	r2, #255	; 0xff
 8009126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800912a:	f001 fcaf 	bl	800aa8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800912e:	f001 fc7b 	bl	800aa28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009138:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800913a:	e011      	b.n	8009160 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d012      	beq.n	800916a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	3310      	adds	r3, #16
 8009148:	4618      	mov	r0, r3
 800914a:	f000 fd65 	bl	8009c18 <xTaskRemoveFromEventList>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009154:	f000 fe3e 	bl	8009dd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009158:	7bbb      	ldrb	r3, [r7, #14]
 800915a:	3b01      	subs	r3, #1
 800915c:	b2db      	uxtb	r3, r3
 800915e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009164:	2b00      	cmp	r3, #0
 8009166:	dce9      	bgt.n	800913c <prvUnlockQueue+0x60>
 8009168:	e000      	b.n	800916c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800916a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	22ff      	movs	r2, #255	; 0xff
 8009170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009174:	f001 fc8a 	bl	800aa8c <vPortExitCritical>
}
 8009178:	bf00      	nop
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009188:	f001 fc4e 	bl	800aa28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009190:	2b00      	cmp	r3, #0
 8009192:	d102      	bne.n	800919a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009194:	2301      	movs	r3, #1
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	e001      	b.n	800919e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800919a:	2300      	movs	r3, #0
 800919c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800919e:	f001 fc75 	bl	800aa8c <vPortExitCritical>

	return xReturn;
 80091a2:	68fb      	ldr	r3, [r7, #12]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091b4:	f001 fc38 	bl	800aa28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d102      	bne.n	80091ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091c4:	2301      	movs	r3, #1
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	e001      	b.n	80091ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091ca:	2300      	movs	r3, #0
 80091cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091ce:	f001 fc5d 	bl	800aa8c <vPortExitCritical>

	return xReturn;
 80091d2:	68fb      	ldr	r3, [r7, #12]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091e6:	2300      	movs	r3, #0
 80091e8:	60fb      	str	r3, [r7, #12]
 80091ea:	e014      	b.n	8009216 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091ec:	4a0e      	ldr	r2, [pc, #56]	; (8009228 <vQueueAddToRegistry+0x4c>)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10b      	bne.n	8009210 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80091f8:	490b      	ldr	r1, [pc, #44]	; (8009228 <vQueueAddToRegistry+0x4c>)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009202:	4a09      	ldr	r2, [pc, #36]	; (8009228 <vQueueAddToRegistry+0x4c>)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	4413      	add	r3, r2
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800920e:	e005      	b.n	800921c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3301      	adds	r3, #1
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b07      	cmp	r3, #7
 800921a:	d9e7      	bls.n	80091ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800921c:	bf00      	nop
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	20001404 	.word	0x20001404

0800922c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800923c:	f001 fbf4 	bl	800aa28 <vPortEnterCritical>
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009246:	b25b      	sxtb	r3, r3
 8009248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924c:	d103      	bne.n	8009256 <vQueueWaitForMessageRestricted+0x2a>
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800925c:	b25b      	sxtb	r3, r3
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009262:	d103      	bne.n	800926c <vQueueWaitForMessageRestricted+0x40>
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800926c:	f001 fc0e 	bl	800aa8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	2b00      	cmp	r3, #0
 8009276:	d106      	bne.n	8009286 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	3324      	adds	r3, #36	; 0x24
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	68b9      	ldr	r1, [r7, #8]
 8009280:	4618      	mov	r0, r3
 8009282:	f000 fc9d 	bl	8009bc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009286:	6978      	ldr	r0, [r7, #20]
 8009288:	f7ff ff28 	bl	80090dc <prvUnlockQueue>
	}
 800928c:	bf00      	nop
 800928e:	3718      	adds	r7, #24
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08e      	sub	sp, #56	; 0x38
 8009298:	af04      	add	r7, sp, #16
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
 80092a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10b      	bne.n	80092c0 <xTaskCreateStatic+0x2c>
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	b672      	cpsid	i
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	b662      	cpsie	i
 80092bc:	623b      	str	r3, [r7, #32]
 80092be:	e7fe      	b.n	80092be <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10b      	bne.n	80092de <xTaskCreateStatic+0x4a>
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	b672      	cpsid	i
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	b662      	cpsie	i
 80092da:	61fb      	str	r3, [r7, #28]
 80092dc:	e7fe      	b.n	80092dc <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092de:	23c0      	movs	r3, #192	; 0xc0
 80092e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2bc0      	cmp	r3, #192	; 0xc0
 80092e6:	d00b      	beq.n	8009300 <xTaskCreateStatic+0x6c>
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	b672      	cpsid	i
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	b662      	cpsie	i
 80092fc:	61bb      	str	r3, [r7, #24]
 80092fe:	e7fe      	b.n	80092fe <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009300:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	2b00      	cmp	r3, #0
 8009306:	d01e      	beq.n	8009346 <xTaskCreateStatic+0xb2>
 8009308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930a:	2b00      	cmp	r3, #0
 800930c:	d01b      	beq.n	8009346 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009316:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	2202      	movs	r2, #2
 800931c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009320:	2300      	movs	r3, #0
 8009322:	9303      	str	r3, [sp, #12]
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	9302      	str	r3, [sp, #8]
 8009328:	f107 0314 	add.w	r3, r7, #20
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 f851 	bl	80093e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800933e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009340:	f000 f8f8 	bl	8009534 <prvAddNewTaskToReadyList>
 8009344:	e001      	b.n	800934a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009346:	2300      	movs	r3, #0
 8009348:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800934a:	697b      	ldr	r3, [r7, #20]
	}
 800934c:	4618      	mov	r0, r3
 800934e:	3728      	adds	r7, #40	; 0x28
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009354:	b580      	push	{r7, lr}
 8009356:	b08c      	sub	sp, #48	; 0x30
 8009358:	af04      	add	r7, sp, #16
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	603b      	str	r3, [r7, #0]
 8009360:	4613      	mov	r3, r2
 8009362:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009364:	88fb      	ldrh	r3, [r7, #6]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4618      	mov	r0, r3
 800936a:	f7f8 f955 	bl	8001618 <pvPortMalloc>
 800936e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00e      	beq.n	8009394 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009376:	20c0      	movs	r0, #192	; 0xc0
 8009378:	f7f8 f94e 	bl	8001618 <pvPortMalloc>
 800937c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d003      	beq.n	800938c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	631a      	str	r2, [r3, #48]	; 0x30
 800938a:	e005      	b.n	8009398 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800938c:	6978      	ldr	r0, [r7, #20]
 800938e:	f7f8 f951 	bl	8001634 <vPortFree>
 8009392:	e001      	b.n	8009398 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009394:	2300      	movs	r3, #0
 8009396:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d017      	beq.n	80093ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093a6:	88fa      	ldrh	r2, [r7, #6]
 80093a8:	2300      	movs	r3, #0
 80093aa:	9303      	str	r3, [sp, #12]
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	9302      	str	r3, [sp, #8]
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	68b9      	ldr	r1, [r7, #8]
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 f80f 	bl	80093e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093c2:	69f8      	ldr	r0, [r7, #28]
 80093c4:	f000 f8b6 	bl	8009534 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093c8:	2301      	movs	r3, #1
 80093ca:	61bb      	str	r3, [r7, #24]
 80093cc:	e002      	b.n	80093d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093ce:	f04f 33ff 	mov.w	r3, #4294967295
 80093d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093d4:	69bb      	ldr	r3, [r7, #24]
	}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3720      	adds	r7, #32
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
	...

080093e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	461a      	mov	r2, r3
 80093f8:	21a5      	movs	r1, #165	; 0xa5
 80093fa:	f002 fcd7 	bl	800bdac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009402:	6879      	ldr	r1, [r7, #4]
 8009404:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009408:	440b      	add	r3, r1
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	f023 0307 	bic.w	r3, r3, #7
 8009416:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	f003 0307 	and.w	r3, r3, #7
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00b      	beq.n	800943a <prvInitialiseNewTask+0x5a>
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	b672      	cpsid	i
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	b662      	cpsie	i
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	e7fe      	b.n	8009438 <prvInitialiseNewTask+0x58>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	69ba      	ldr	r2, [r7, #24]
 800943e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01f      	beq.n	8009486 <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009446:	2300      	movs	r3, #0
 8009448:	61fb      	str	r3, [r7, #28]
 800944a:	e012      	b.n	8009472 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	4413      	add	r3, r2
 8009452:	7819      	ldrb	r1, [r3, #0]
 8009454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	4413      	add	r3, r2
 800945a:	3334      	adds	r3, #52	; 0x34
 800945c:	460a      	mov	r2, r1
 800945e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4413      	add	r3, r2
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d006      	beq.n	800947a <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	3301      	adds	r3, #1
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	2b0f      	cmp	r3, #15
 8009476:	d9e9      	bls.n	800944c <prvInitialiseNewTask+0x6c>
 8009478:	e000      	b.n	800947c <prvInitialiseNewTask+0x9c>
			{
				break;
 800947a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	2200      	movs	r2, #0
 8009480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009484:	e003      	b.n	800948e <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	2b37      	cmp	r3, #55	; 0x37
 8009492:	d901      	bls.n	8009498 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009494:	2337      	movs	r3, #55	; 0x37
 8009496:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800949c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094a2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80094a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a6:	2200      	movs	r2, #0
 80094a8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	3304      	adds	r3, #4
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff f966 	bl	8008780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	3318      	adds	r3, #24
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7ff f961 	bl	8008780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	2200      	movs	r2, #0
 80094d8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	3358      	adds	r3, #88	; 0x58
 80094e8:	2260      	movs	r2, #96	; 0x60
 80094ea:	2100      	movs	r1, #0
 80094ec:	4618      	mov	r0, r3
 80094ee:	f002 fc5d 	bl	800bdac <memset>
 80094f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f4:	4a0c      	ldr	r2, [pc, #48]	; (8009528 <prvInitialiseNewTask+0x148>)
 80094f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	4a0c      	ldr	r2, [pc, #48]	; (800952c <prvInitialiseNewTask+0x14c>)
 80094fc:	661a      	str	r2, [r3, #96]	; 0x60
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	4a0b      	ldr	r2, [pc, #44]	; (8009530 <prvInitialiseNewTask+0x150>)
 8009502:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	68f9      	ldr	r1, [r7, #12]
 8009508:	69b8      	ldr	r0, [r7, #24]
 800950a:	f001 f981 	bl	800a810 <pxPortInitialiseStack>
 800950e:	4602      	mov	r2, r0
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d002      	beq.n	8009520 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800951e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009520:	bf00      	nop
 8009522:	3720      	adds	r7, #32
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	0800cb64 	.word	0x0800cb64
 800952c:	0800cb84 	.word	0x0800cb84
 8009530:	0800cb44 	.word	0x0800cb44

08009534 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800953c:	f001 fa74 	bl	800aa28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009540:	4b2d      	ldr	r3, [pc, #180]	; (80095f8 <prvAddNewTaskToReadyList+0xc4>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3301      	adds	r3, #1
 8009546:	4a2c      	ldr	r2, [pc, #176]	; (80095f8 <prvAddNewTaskToReadyList+0xc4>)
 8009548:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800954a:	4b2c      	ldr	r3, [pc, #176]	; (80095fc <prvAddNewTaskToReadyList+0xc8>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d109      	bne.n	8009566 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009552:	4a2a      	ldr	r2, [pc, #168]	; (80095fc <prvAddNewTaskToReadyList+0xc8>)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009558:	4b27      	ldr	r3, [pc, #156]	; (80095f8 <prvAddNewTaskToReadyList+0xc4>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d110      	bne.n	8009582 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009560:	f000 fc5e 	bl	8009e20 <prvInitialiseTaskLists>
 8009564:	e00d      	b.n	8009582 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009566:	4b26      	ldr	r3, [pc, #152]	; (8009600 <prvAddNewTaskToReadyList+0xcc>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d109      	bne.n	8009582 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800956e:	4b23      	ldr	r3, [pc, #140]	; (80095fc <prvAddNewTaskToReadyList+0xc8>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009578:	429a      	cmp	r2, r3
 800957a:	d802      	bhi.n	8009582 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800957c:	4a1f      	ldr	r2, [pc, #124]	; (80095fc <prvAddNewTaskToReadyList+0xc8>)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009582:	4b20      	ldr	r3, [pc, #128]	; (8009604 <prvAddNewTaskToReadyList+0xd0>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3301      	adds	r3, #1
 8009588:	4a1e      	ldr	r2, [pc, #120]	; (8009604 <prvAddNewTaskToReadyList+0xd0>)
 800958a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800958c:	4b1d      	ldr	r3, [pc, #116]	; (8009604 <prvAddNewTaskToReadyList+0xd0>)
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009598:	4b1b      	ldr	r3, [pc, #108]	; (8009608 <prvAddNewTaskToReadyList+0xd4>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	429a      	cmp	r2, r3
 800959e:	d903      	bls.n	80095a8 <prvAddNewTaskToReadyList+0x74>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a4:	4a18      	ldr	r2, [pc, #96]	; (8009608 <prvAddNewTaskToReadyList+0xd4>)
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4a15      	ldr	r2, [pc, #84]	; (800960c <prvAddNewTaskToReadyList+0xd8>)
 80095b6:	441a      	add	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3304      	adds	r3, #4
 80095bc:	4619      	mov	r1, r3
 80095be:	4610      	mov	r0, r2
 80095c0:	f7ff f8eb 	bl	800879a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095c4:	f001 fa62 	bl	800aa8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095c8:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <prvAddNewTaskToReadyList+0xcc>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00e      	beq.n	80095ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095d0:	4b0a      	ldr	r3, [pc, #40]	; (80095fc <prvAddNewTaskToReadyList+0xc8>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095da:	429a      	cmp	r2, r3
 80095dc:	d207      	bcs.n	80095ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095de:	4b0c      	ldr	r3, [pc, #48]	; (8009610 <prvAddNewTaskToReadyList+0xdc>)
 80095e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095ee:	bf00      	nop
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	20000d34 	.word	0x20000d34
 80095fc:	20000860 	.word	0x20000860
 8009600:	20000d40 	.word	0x20000d40
 8009604:	20000d50 	.word	0x20000d50
 8009608:	20000d3c 	.word	0x20000d3c
 800960c:	20000864 	.word	0x20000864
 8009610:	e000ed04 	.word	0xe000ed04

08009614 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800961c:	2300      	movs	r3, #0
 800961e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d018      	beq.n	8009658 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009626:	4b14      	ldr	r3, [pc, #80]	; (8009678 <vTaskDelay+0x64>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00b      	beq.n	8009646 <vTaskDelay+0x32>
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	b672      	cpsid	i
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	b662      	cpsie	i
 8009642:	60bb      	str	r3, [r7, #8]
 8009644:	e7fe      	b.n	8009644 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8009646:	f000 f88d 	bl	8009764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800964a:	2100      	movs	r1, #0
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fd37 	bl	800a0c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009652:	f000 f895 	bl	8009780 <xTaskResumeAll>
 8009656:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d107      	bne.n	800966e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800965e:	4b07      	ldr	r3, [pc, #28]	; (800967c <vTaskDelay+0x68>)
 8009660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800966e:	bf00      	nop
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20000d5c 	.word	0x20000d5c
 800967c:	e000ed04 	.word	0xe000ed04

08009680 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08a      	sub	sp, #40	; 0x28
 8009684:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009686:	2300      	movs	r3, #0
 8009688:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800968e:	463a      	mov	r2, r7
 8009690:	1d39      	adds	r1, r7, #4
 8009692:	f107 0308 	add.w	r3, r7, #8
 8009696:	4618      	mov	r0, r3
 8009698:	f7ff f81e 	bl	80086d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	9202      	str	r2, [sp, #8]
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	2300      	movs	r3, #0
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	2300      	movs	r3, #0
 80096ac:	460a      	mov	r2, r1
 80096ae:	4925      	ldr	r1, [pc, #148]	; (8009744 <vTaskStartScheduler+0xc4>)
 80096b0:	4825      	ldr	r0, [pc, #148]	; (8009748 <vTaskStartScheduler+0xc8>)
 80096b2:	f7ff fdef 	bl	8009294 <xTaskCreateStatic>
 80096b6:	4602      	mov	r2, r0
 80096b8:	4b24      	ldr	r3, [pc, #144]	; (800974c <vTaskStartScheduler+0xcc>)
 80096ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096bc:	4b23      	ldr	r3, [pc, #140]	; (800974c <vTaskStartScheduler+0xcc>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096c4:	2301      	movs	r3, #1
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	e001      	b.n	80096ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096ca:	2300      	movs	r3, #0
 80096cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d102      	bne.n	80096da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096d4:	f000 fd48 	bl	800a168 <xTimerCreateTimerTask>
 80096d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d11c      	bne.n	800971a <vTaskStartScheduler+0x9a>
 80096e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e4:	b672      	cpsid	i
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	b662      	cpsie	i
 80096f4:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096f6:	4b16      	ldr	r3, [pc, #88]	; (8009750 <vTaskStartScheduler+0xd0>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3358      	adds	r3, #88	; 0x58
 80096fc:	4a15      	ldr	r2, [pc, #84]	; (8009754 <vTaskStartScheduler+0xd4>)
 80096fe:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009700:	4b15      	ldr	r3, [pc, #84]	; (8009758 <vTaskStartScheduler+0xd8>)
 8009702:	f04f 32ff 	mov.w	r2, #4294967295
 8009706:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009708:	4b14      	ldr	r3, [pc, #80]	; (800975c <vTaskStartScheduler+0xdc>)
 800970a:	2201      	movs	r2, #1
 800970c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800970e:	4b14      	ldr	r3, [pc, #80]	; (8009760 <vTaskStartScheduler+0xe0>)
 8009710:	2200      	movs	r2, #0
 8009712:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009714:	f001 f90c 	bl	800a930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009718:	e00f      	b.n	800973a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009720:	d10b      	bne.n	800973a <vTaskStartScheduler+0xba>
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	b672      	cpsid	i
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	b662      	cpsie	i
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	e7fe      	b.n	8009738 <vTaskStartScheduler+0xb8>
}
 800973a:	bf00      	nop
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	0800c800 	.word	0x0800c800
 8009748:	08009ded 	.word	0x08009ded
 800974c:	20000d58 	.word	0x20000d58
 8009750:	20000860 	.word	0x20000860
 8009754:	2000001c 	.word	0x2000001c
 8009758:	20000d54 	.word	0x20000d54
 800975c:	20000d40 	.word	0x20000d40
 8009760:	20000d38 	.word	0x20000d38

08009764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009764:	b480      	push	{r7}
 8009766:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009768:	4b04      	ldr	r3, [pc, #16]	; (800977c <vTaskSuspendAll+0x18>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3301      	adds	r3, #1
 800976e:	4a03      	ldr	r2, [pc, #12]	; (800977c <vTaskSuspendAll+0x18>)
 8009770:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009772:	bf00      	nop
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	20000d5c 	.word	0x20000d5c

08009780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009786:	2300      	movs	r3, #0
 8009788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800978a:	2300      	movs	r3, #0
 800978c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800978e:	4b42      	ldr	r3, [pc, #264]	; (8009898 <xTaskResumeAll+0x118>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10b      	bne.n	80097ae <xTaskResumeAll+0x2e>
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	b672      	cpsid	i
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	b662      	cpsie	i
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	e7fe      	b.n	80097ac <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097ae:	f001 f93b 	bl	800aa28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097b2:	4b39      	ldr	r3, [pc, #228]	; (8009898 <xTaskResumeAll+0x118>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3b01      	subs	r3, #1
 80097b8:	4a37      	ldr	r2, [pc, #220]	; (8009898 <xTaskResumeAll+0x118>)
 80097ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097bc:	4b36      	ldr	r3, [pc, #216]	; (8009898 <xTaskResumeAll+0x118>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d162      	bne.n	800988a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097c4:	4b35      	ldr	r3, [pc, #212]	; (800989c <xTaskResumeAll+0x11c>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d05e      	beq.n	800988a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097cc:	e02f      	b.n	800982e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ce:	4b34      	ldr	r3, [pc, #208]	; (80098a0 <xTaskResumeAll+0x120>)
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3318      	adds	r3, #24
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff f83a 	bl	8008854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	3304      	adds	r3, #4
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff f835 	bl	8008854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ee:	4b2d      	ldr	r3, [pc, #180]	; (80098a4 <xTaskResumeAll+0x124>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d903      	bls.n	80097fe <xTaskResumeAll+0x7e>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fa:	4a2a      	ldr	r2, [pc, #168]	; (80098a4 <xTaskResumeAll+0x124>)
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4a27      	ldr	r2, [pc, #156]	; (80098a8 <xTaskResumeAll+0x128>)
 800980c:	441a      	add	r2, r3
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3304      	adds	r3, #4
 8009812:	4619      	mov	r1, r3
 8009814:	4610      	mov	r0, r2
 8009816:	f7fe ffc0 	bl	800879a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981e:	4b23      	ldr	r3, [pc, #140]	; (80098ac <xTaskResumeAll+0x12c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009824:	429a      	cmp	r2, r3
 8009826:	d302      	bcc.n	800982e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009828:	4b21      	ldr	r3, [pc, #132]	; (80098b0 <xTaskResumeAll+0x130>)
 800982a:	2201      	movs	r2, #1
 800982c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800982e:	4b1c      	ldr	r3, [pc, #112]	; (80098a0 <xTaskResumeAll+0x120>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1cb      	bne.n	80097ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800983c:	f000 fb92 	bl	8009f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009840:	4b1c      	ldr	r3, [pc, #112]	; (80098b4 <xTaskResumeAll+0x134>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d010      	beq.n	800986e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800984c:	f000 f846 	bl	80098dc <xTaskIncrementTick>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d002      	beq.n	800985c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009856:	4b16      	ldr	r3, [pc, #88]	; (80098b0 <xTaskResumeAll+0x130>)
 8009858:	2201      	movs	r2, #1
 800985a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3b01      	subs	r3, #1
 8009860:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1f1      	bne.n	800984c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009868:	4b12      	ldr	r3, [pc, #72]	; (80098b4 <xTaskResumeAll+0x134>)
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800986e:	4b10      	ldr	r3, [pc, #64]	; (80098b0 <xTaskResumeAll+0x130>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d009      	beq.n	800988a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009876:	2301      	movs	r3, #1
 8009878:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800987a:	4b0f      	ldr	r3, [pc, #60]	; (80098b8 <xTaskResumeAll+0x138>)
 800987c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800988a:	f001 f8ff 	bl	800aa8c <vPortExitCritical>

	return xAlreadyYielded;
 800988e:	68bb      	ldr	r3, [r7, #8]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20000d5c 	.word	0x20000d5c
 800989c:	20000d34 	.word	0x20000d34
 80098a0:	20000cf4 	.word	0x20000cf4
 80098a4:	20000d3c 	.word	0x20000d3c
 80098a8:	20000864 	.word	0x20000864
 80098ac:	20000860 	.word	0x20000860
 80098b0:	20000d48 	.word	0x20000d48
 80098b4:	20000d44 	.word	0x20000d44
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098c2:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <xTaskGetTickCount+0x1c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098c8:	687b      	ldr	r3, [r7, #4]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	20000d38 	.word	0x20000d38

080098dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098e6:	4b53      	ldr	r3, [pc, #332]	; (8009a34 <xTaskIncrementTick+0x158>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f040 8090 	bne.w	8009a10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098f0:	4b51      	ldr	r3, [pc, #324]	; (8009a38 <xTaskIncrementTick+0x15c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3301      	adds	r3, #1
 80098f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098f8:	4a4f      	ldr	r2, [pc, #316]	; (8009a38 <xTaskIncrementTick+0x15c>)
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d121      	bne.n	8009948 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009904:	4b4d      	ldr	r3, [pc, #308]	; (8009a3c <xTaskIncrementTick+0x160>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00b      	beq.n	8009926 <xTaskIncrementTick+0x4a>
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	b672      	cpsid	i
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	b662      	cpsie	i
 8009922:	603b      	str	r3, [r7, #0]
 8009924:	e7fe      	b.n	8009924 <xTaskIncrementTick+0x48>
 8009926:	4b45      	ldr	r3, [pc, #276]	; (8009a3c <xTaskIncrementTick+0x160>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	4b44      	ldr	r3, [pc, #272]	; (8009a40 <xTaskIncrementTick+0x164>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a42      	ldr	r2, [pc, #264]	; (8009a3c <xTaskIncrementTick+0x160>)
 8009932:	6013      	str	r3, [r2, #0]
 8009934:	4a42      	ldr	r2, [pc, #264]	; (8009a40 <xTaskIncrementTick+0x164>)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	4b42      	ldr	r3, [pc, #264]	; (8009a44 <xTaskIncrementTick+0x168>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3301      	adds	r3, #1
 8009940:	4a40      	ldr	r2, [pc, #256]	; (8009a44 <xTaskIncrementTick+0x168>)
 8009942:	6013      	str	r3, [r2, #0]
 8009944:	f000 fb0e 	bl	8009f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009948:	4b3f      	ldr	r3, [pc, #252]	; (8009a48 <xTaskIncrementTick+0x16c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	429a      	cmp	r2, r3
 8009950:	d349      	bcc.n	80099e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009952:	4b3a      	ldr	r3, [pc, #232]	; (8009a3c <xTaskIncrementTick+0x160>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d104      	bne.n	8009966 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800995c:	4b3a      	ldr	r3, [pc, #232]	; (8009a48 <xTaskIncrementTick+0x16c>)
 800995e:	f04f 32ff 	mov.w	r2, #4294967295
 8009962:	601a      	str	r2, [r3, #0]
					break;
 8009964:	e03f      	b.n	80099e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009966:	4b35      	ldr	r3, [pc, #212]	; (8009a3c <xTaskIncrementTick+0x160>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	429a      	cmp	r2, r3
 800997c:	d203      	bcs.n	8009986 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800997e:	4a32      	ldr	r2, [pc, #200]	; (8009a48 <xTaskIncrementTick+0x16c>)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009984:	e02f      	b.n	80099e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	3304      	adds	r3, #4
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe ff62 	bl	8008854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009994:	2b00      	cmp	r3, #0
 8009996:	d004      	beq.n	80099a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	3318      	adds	r3, #24
 800999c:	4618      	mov	r0, r3
 800999e:	f7fe ff59 	bl	8008854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a6:	4b29      	ldr	r3, [pc, #164]	; (8009a4c <xTaskIncrementTick+0x170>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d903      	bls.n	80099b6 <xTaskIncrementTick+0xda>
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b2:	4a26      	ldr	r2, [pc, #152]	; (8009a4c <xTaskIncrementTick+0x170>)
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ba:	4613      	mov	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4a23      	ldr	r2, [pc, #140]	; (8009a50 <xTaskIncrementTick+0x174>)
 80099c4:	441a      	add	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	3304      	adds	r3, #4
 80099ca:	4619      	mov	r1, r3
 80099cc:	4610      	mov	r0, r2
 80099ce:	f7fe fee4 	bl	800879a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d6:	4b1f      	ldr	r3, [pc, #124]	; (8009a54 <xTaskIncrementTick+0x178>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	429a      	cmp	r2, r3
 80099de:	d3b8      	bcc.n	8009952 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80099e0:	2301      	movs	r3, #1
 80099e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099e4:	e7b5      	b.n	8009952 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099e6:	4b1b      	ldr	r3, [pc, #108]	; (8009a54 <xTaskIncrementTick+0x178>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ec:	4918      	ldr	r1, [pc, #96]	; (8009a50 <xTaskIncrementTick+0x174>)
 80099ee:	4613      	mov	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	440b      	add	r3, r1
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d901      	bls.n	8009a02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80099fe:	2301      	movs	r3, #1
 8009a00:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8009a02:	4b15      	ldr	r3, [pc, #84]	; (8009a58 <xTaskIncrementTick+0x17c>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d109      	bne.n	8009a1e <xTaskIncrementTick+0x142>
			{
				vApplicationTickHook();
 8009a0a:	f7f7 fd30 	bl	800146e <vApplicationTickHook>
 8009a0e:	e006      	b.n	8009a1e <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a10:	4b11      	ldr	r3, [pc, #68]	; (8009a58 <xTaskIncrementTick+0x17c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3301      	adds	r3, #1
 8009a16:	4a10      	ldr	r2, [pc, #64]	; (8009a58 <xTaskIncrementTick+0x17c>)
 8009a18:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8009a1a:	f7f7 fd28 	bl	800146e <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a1e:	4b0f      	ldr	r3, [pc, #60]	; (8009a5c <xTaskIncrementTick+0x180>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8009a26:	2301      	movs	r3, #1
 8009a28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a2a:	697b      	ldr	r3, [r7, #20]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20000d5c 	.word	0x20000d5c
 8009a38:	20000d38 	.word	0x20000d38
 8009a3c:	20000cec 	.word	0x20000cec
 8009a40:	20000cf0 	.word	0x20000cf0
 8009a44:	20000d4c 	.word	0x20000d4c
 8009a48:	20000d54 	.word	0x20000d54
 8009a4c:	20000d3c 	.word	0x20000d3c
 8009a50:	20000864 	.word	0x20000864
 8009a54:	20000860 	.word	0x20000860
 8009a58:	20000d44 	.word	0x20000d44
 8009a5c:	20000d48 	.word	0x20000d48

08009a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a66:	4b3d      	ldr	r3, [pc, #244]	; (8009b5c <vTaskSwitchContext+0xfc>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a6e:	4b3c      	ldr	r3, [pc, #240]	; (8009b60 <vTaskSwitchContext+0x100>)
 8009a70:	2201      	movs	r2, #1
 8009a72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a74:	e06e      	b.n	8009b54 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8009a76:	4b3a      	ldr	r3, [pc, #232]	; (8009b60 <vTaskSwitchContext+0x100>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009a7c:	4b39      	ldr	r3, [pc, #228]	; (8009b64 <vTaskSwitchContext+0x104>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a82:	613b      	str	r3, [r7, #16]
 8009a84:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009a88:	60fb      	str	r3, [r7, #12]
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d111      	bne.n	8009ab8 <vTaskSwitchContext+0x58>
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	3304      	adds	r3, #4
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d10b      	bne.n	8009ab8 <vTaskSwitchContext+0x58>
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d105      	bne.n	8009ab8 <vTaskSwitchContext+0x58>
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	330c      	adds	r3, #12
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d008      	beq.n	8009aca <vTaskSwitchContext+0x6a>
 8009ab8:	4b2a      	ldr	r3, [pc, #168]	; (8009b64 <vTaskSwitchContext+0x104>)
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	4b29      	ldr	r3, [pc, #164]	; (8009b64 <vTaskSwitchContext+0x104>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3334      	adds	r3, #52	; 0x34
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	f7f7 fcd9 	bl	800147c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aca:	4b27      	ldr	r3, [pc, #156]	; (8009b68 <vTaskSwitchContext+0x108>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	e011      	b.n	8009af6 <vTaskSwitchContext+0x96>
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10b      	bne.n	8009af0 <vTaskSwitchContext+0x90>
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	b672      	cpsid	i
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	b662      	cpsie	i
 8009aec:	607b      	str	r3, [r7, #4]
 8009aee:	e7fe      	b.n	8009aee <vTaskSwitchContext+0x8e>
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	491d      	ldr	r1, [pc, #116]	; (8009b6c <vTaskSwitchContext+0x10c>)
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	4613      	mov	r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	4413      	add	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	440b      	add	r3, r1
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0e3      	beq.n	8009ad2 <vTaskSwitchContext+0x72>
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4a15      	ldr	r2, [pc, #84]	; (8009b6c <vTaskSwitchContext+0x10c>)
 8009b16:	4413      	add	r3, r2
 8009b18:	60bb      	str	r3, [r7, #8]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	605a      	str	r2, [r3, #4]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	3308      	adds	r3, #8
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d104      	bne.n	8009b3a <vTaskSwitchContext+0xda>
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	605a      	str	r2, [r3, #4]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	4a08      	ldr	r2, [pc, #32]	; (8009b64 <vTaskSwitchContext+0x104>)
 8009b42:	6013      	str	r3, [r2, #0]
 8009b44:	4a08      	ldr	r2, [pc, #32]	; (8009b68 <vTaskSwitchContext+0x108>)
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b4a:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <vTaskSwitchContext+0x104>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	3358      	adds	r3, #88	; 0x58
 8009b50:	4a07      	ldr	r2, [pc, #28]	; (8009b70 <vTaskSwitchContext+0x110>)
 8009b52:	6013      	str	r3, [r2, #0]
}
 8009b54:	bf00      	nop
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	20000d5c 	.word	0x20000d5c
 8009b60:	20000d48 	.word	0x20000d48
 8009b64:	20000860 	.word	0x20000860
 8009b68:	20000d3c 	.word	0x20000d3c
 8009b6c:	20000864 	.word	0x20000864
 8009b70:	2000001c 	.word	0x2000001c

08009b74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10b      	bne.n	8009b9c <vTaskPlaceOnEventList+0x28>
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	b672      	cpsid	i
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	b662      	cpsie	i
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	e7fe      	b.n	8009b9a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b9c:	4b07      	ldr	r3, [pc, #28]	; (8009bbc <vTaskPlaceOnEventList+0x48>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3318      	adds	r3, #24
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7fe fe1c 	bl	80087e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009baa:	2101      	movs	r1, #1
 8009bac:	6838      	ldr	r0, [r7, #0]
 8009bae:	f000 fa87 	bl	800a0c0 <prvAddCurrentTaskToDelayedList>
}
 8009bb2:	bf00      	nop
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000860 	.word	0x20000860

08009bc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10b      	bne.n	8009bea <vTaskPlaceOnEventListRestricted+0x2a>
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	b672      	cpsid	i
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	b662      	cpsie	i
 8009be6:	617b      	str	r3, [r7, #20]
 8009be8:	e7fe      	b.n	8009be8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bea:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <vTaskPlaceOnEventListRestricted+0x54>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3318      	adds	r3, #24
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7fe fdd1 	bl	800879a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d002      	beq.n	8009c04 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009c02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	68b8      	ldr	r0, [r7, #8]
 8009c08:	f000 fa5a 	bl	800a0c0 <prvAddCurrentTaskToDelayedList>
	}
 8009c0c:	bf00      	nop
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20000860 	.word	0x20000860

08009c18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10b      	bne.n	8009c46 <xTaskRemoveFromEventList+0x2e>
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	b672      	cpsid	i
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	b662      	cpsie	i
 8009c42:	60fb      	str	r3, [r7, #12]
 8009c44:	e7fe      	b.n	8009c44 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	3318      	adds	r3, #24
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fe fe02 	bl	8008854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c50:	4b1d      	ldr	r3, [pc, #116]	; (8009cc8 <xTaskRemoveFromEventList+0xb0>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11d      	bne.n	8009c94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe fdf9 	bl	8008854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c66:	4b19      	ldr	r3, [pc, #100]	; (8009ccc <xTaskRemoveFromEventList+0xb4>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d903      	bls.n	8009c76 <xTaskRemoveFromEventList+0x5e>
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c72:	4a16      	ldr	r2, [pc, #88]	; (8009ccc <xTaskRemoveFromEventList+0xb4>)
 8009c74:	6013      	str	r3, [r2, #0]
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4a13      	ldr	r2, [pc, #76]	; (8009cd0 <xTaskRemoveFromEventList+0xb8>)
 8009c84:	441a      	add	r2, r3
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	f7fe fd84 	bl	800879a <vListInsertEnd>
 8009c92:	e005      	b.n	8009ca0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	3318      	adds	r3, #24
 8009c98:	4619      	mov	r1, r3
 8009c9a:	480e      	ldr	r0, [pc, #56]	; (8009cd4 <xTaskRemoveFromEventList+0xbc>)
 8009c9c:	f7fe fd7d 	bl	800879a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca4:	4b0c      	ldr	r3, [pc, #48]	; (8009cd8 <xTaskRemoveFromEventList+0xc0>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d905      	bls.n	8009cba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009cb2:	4b0a      	ldr	r3, [pc, #40]	; (8009cdc <xTaskRemoveFromEventList+0xc4>)
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	e001      	b.n	8009cbe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009cbe:	697b      	ldr	r3, [r7, #20]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	20000d5c 	.word	0x20000d5c
 8009ccc:	20000d3c 	.word	0x20000d3c
 8009cd0:	20000864 	.word	0x20000864
 8009cd4:	20000cf4 	.word	0x20000cf4
 8009cd8:	20000860 	.word	0x20000860
 8009cdc:	20000d48 	.word	0x20000d48

08009ce0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ce8:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <vTaskInternalSetTimeOutState+0x24>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cf0:	4b05      	ldr	r3, [pc, #20]	; (8009d08 <vTaskInternalSetTimeOutState+0x28>)
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	605a      	str	r2, [r3, #4]
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	20000d4c 	.word	0x20000d4c
 8009d08:	20000d38 	.word	0x20000d38

08009d0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10b      	bne.n	8009d34 <xTaskCheckForTimeOut+0x28>
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	b672      	cpsid	i
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	b662      	cpsie	i
 8009d30:	613b      	str	r3, [r7, #16]
 8009d32:	e7fe      	b.n	8009d32 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10b      	bne.n	8009d52 <xTaskCheckForTimeOut+0x46>
 8009d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3e:	b672      	cpsid	i
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	b662      	cpsie	i
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	e7fe      	b.n	8009d50 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8009d52:	f000 fe69 	bl	800aa28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d56:	4b1d      	ldr	r3, [pc, #116]	; (8009dcc <xTaskCheckForTimeOut+0xc0>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6e:	d102      	bne.n	8009d76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d70:	2300      	movs	r3, #0
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e023      	b.n	8009dbe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <xTaskCheckForTimeOut+0xc4>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d007      	beq.n	8009d92 <xTaskCheckForTimeOut+0x86>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d302      	bcc.n	8009d92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	61fb      	str	r3, [r7, #28]
 8009d90:	e015      	b.n	8009dbe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d20b      	bcs.n	8009db4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	1ad2      	subs	r2, r2, r3
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7ff ff99 	bl	8009ce0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009dae:	2300      	movs	r3, #0
 8009db0:	61fb      	str	r3, [r7, #28]
 8009db2:	e004      	b.n	8009dbe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	2200      	movs	r2, #0
 8009db8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009dbe:	f000 fe65 	bl	800aa8c <vPortExitCritical>

	return xReturn;
 8009dc2:	69fb      	ldr	r3, [r7, #28]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	20000d38 	.word	0x20000d38
 8009dd0:	20000d4c 	.word	0x20000d4c

08009dd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009dd8:	4b03      	ldr	r3, [pc, #12]	; (8009de8 <vTaskMissedYield+0x14>)
 8009dda:	2201      	movs	r2, #1
 8009ddc:	601a      	str	r2, [r3, #0]
}
 8009dde:	bf00      	nop
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	20000d48 	.word	0x20000d48

08009dec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009df4:	f000 f854 	bl	8009ea0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009df8:	4b07      	ldr	r3, [pc, #28]	; (8009e18 <prvIdleTask+0x2c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d907      	bls.n	8009e10 <prvIdleTask+0x24>
			{
				taskYIELD();
 8009e00:	4b06      	ldr	r3, [pc, #24]	; (8009e1c <prvIdleTask+0x30>)
 8009e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009e10:	f7f7 fb26 	bl	8001460 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009e14:	e7ee      	b.n	8009df4 <prvIdleTask+0x8>
 8009e16:	bf00      	nop
 8009e18:	20000864 	.word	0x20000864
 8009e1c:	e000ed04 	.word	0xe000ed04

08009e20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e26:	2300      	movs	r3, #0
 8009e28:	607b      	str	r3, [r7, #4]
 8009e2a:	e00c      	b.n	8009e46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4a12      	ldr	r2, [pc, #72]	; (8009e80 <prvInitialiseTaskLists+0x60>)
 8009e38:	4413      	add	r3, r2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7fe fc80 	bl	8008740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3301      	adds	r3, #1
 8009e44:	607b      	str	r3, [r7, #4]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b37      	cmp	r3, #55	; 0x37
 8009e4a:	d9ef      	bls.n	8009e2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e4c:	480d      	ldr	r0, [pc, #52]	; (8009e84 <prvInitialiseTaskLists+0x64>)
 8009e4e:	f7fe fc77 	bl	8008740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e52:	480d      	ldr	r0, [pc, #52]	; (8009e88 <prvInitialiseTaskLists+0x68>)
 8009e54:	f7fe fc74 	bl	8008740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e58:	480c      	ldr	r0, [pc, #48]	; (8009e8c <prvInitialiseTaskLists+0x6c>)
 8009e5a:	f7fe fc71 	bl	8008740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e5e:	480c      	ldr	r0, [pc, #48]	; (8009e90 <prvInitialiseTaskLists+0x70>)
 8009e60:	f7fe fc6e 	bl	8008740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e64:	480b      	ldr	r0, [pc, #44]	; (8009e94 <prvInitialiseTaskLists+0x74>)
 8009e66:	f7fe fc6b 	bl	8008740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e6a:	4b0b      	ldr	r3, [pc, #44]	; (8009e98 <prvInitialiseTaskLists+0x78>)
 8009e6c:	4a05      	ldr	r2, [pc, #20]	; (8009e84 <prvInitialiseTaskLists+0x64>)
 8009e6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e70:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <prvInitialiseTaskLists+0x7c>)
 8009e72:	4a05      	ldr	r2, [pc, #20]	; (8009e88 <prvInitialiseTaskLists+0x68>)
 8009e74:	601a      	str	r2, [r3, #0]
}
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20000864 	.word	0x20000864
 8009e84:	20000cc4 	.word	0x20000cc4
 8009e88:	20000cd8 	.word	0x20000cd8
 8009e8c:	20000cf4 	.word	0x20000cf4
 8009e90:	20000d08 	.word	0x20000d08
 8009e94:	20000d20 	.word	0x20000d20
 8009e98:	20000cec 	.word	0x20000cec
 8009e9c:	20000cf0 	.word	0x20000cf0

08009ea0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ea6:	e019      	b.n	8009edc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ea8:	f000 fdbe 	bl	800aa28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eac:	4b0f      	ldr	r3, [pc, #60]	; (8009eec <prvCheckTasksWaitingTermination+0x4c>)
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fe fccb 	bl	8008854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ebe:	4b0c      	ldr	r3, [pc, #48]	; (8009ef0 <prvCheckTasksWaitingTermination+0x50>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	4a0a      	ldr	r2, [pc, #40]	; (8009ef0 <prvCheckTasksWaitingTermination+0x50>)
 8009ec6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <prvCheckTasksWaitingTermination+0x54>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	4a09      	ldr	r2, [pc, #36]	; (8009ef4 <prvCheckTasksWaitingTermination+0x54>)
 8009ed0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ed2:	f000 fddb 	bl	800aa8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f80e 	bl	8009ef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009edc:	4b05      	ldr	r3, [pc, #20]	; (8009ef4 <prvCheckTasksWaitingTermination+0x54>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1e1      	bne.n	8009ea8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	20000d08 	.word	0x20000d08
 8009ef0:	20000d34 	.word	0x20000d34
 8009ef4:	20000d1c 	.word	0x20000d1c

08009ef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3358      	adds	r3, #88	; 0x58
 8009f04:	4618      	mov	r0, r3
 8009f06:	f002 f873 	bl	800bff0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d108      	bne.n	8009f26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7f7 fb8b 	bl	8001634 <vPortFree>
				vPortFree( pxTCB );
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7f7 fb88 	bl	8001634 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f24:	e019      	b.n	8009f5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d103      	bne.n	8009f38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7f7 fb7f 	bl	8001634 <vPortFree>
	}
 8009f36:	e010      	b.n	8009f5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d00b      	beq.n	8009f5a <prvDeleteTCB+0x62>
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	b672      	cpsid	i
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	b662      	cpsie	i
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	e7fe      	b.n	8009f58 <prvDeleteTCB+0x60>
	}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f6a:	4b0c      	ldr	r3, [pc, #48]	; (8009f9c <prvResetNextTaskUnblockTime+0x38>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d104      	bne.n	8009f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f74:	4b0a      	ldr	r3, [pc, #40]	; (8009fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f7c:	e008      	b.n	8009f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f7e:	4b07      	ldr	r3, [pc, #28]	; (8009f9c <prvResetNextTaskUnblockTime+0x38>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	4a04      	ldr	r2, [pc, #16]	; (8009fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8009f8e:	6013      	str	r3, [r2, #0]
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr
 8009f9c:	20000cec 	.word	0x20000cec
 8009fa0:	20000d54 	.word	0x20000d54

08009fa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009faa:	4b0b      	ldr	r3, [pc, #44]	; (8009fd8 <xTaskGetSchedulerState+0x34>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d102      	bne.n	8009fb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	607b      	str	r3, [r7, #4]
 8009fb6:	e008      	b.n	8009fca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fb8:	4b08      	ldr	r3, [pc, #32]	; (8009fdc <xTaskGetSchedulerState+0x38>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d102      	bne.n	8009fc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	607b      	str	r3, [r7, #4]
 8009fc4:	e001      	b.n	8009fca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009fca:	687b      	ldr	r3, [r7, #4]
	}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	20000d40 	.word	0x20000d40
 8009fdc:	20000d5c 	.word	0x20000d5c

08009fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009fec:	2300      	movs	r3, #0
 8009fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d058      	beq.n	800a0a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ff6:	4b2f      	ldr	r3, [pc, #188]	; (800a0b4 <xTaskPriorityDisinherit+0xd4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d00b      	beq.n	800a018 <xTaskPriorityDisinherit+0x38>
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	b672      	cpsid	i
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	b662      	cpsie	i
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	e7fe      	b.n	800a016 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10b      	bne.n	800a038 <xTaskPriorityDisinherit+0x58>
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	b672      	cpsid	i
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	b662      	cpsie	i
 800a034:	60bb      	str	r3, [r7, #8]
 800a036:	e7fe      	b.n	800a036 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a03c:	1e5a      	subs	r2, r3, #1
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d02c      	beq.n	800a0a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a052:	2b00      	cmp	r3, #0
 800a054:	d128      	bne.n	800a0a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	3304      	adds	r3, #4
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fe fbfa 	bl	8008854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a078:	4b0f      	ldr	r3, [pc, #60]	; (800a0b8 <xTaskPriorityDisinherit+0xd8>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d903      	bls.n	800a088 <xTaskPriorityDisinherit+0xa8>
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	4a0c      	ldr	r2, [pc, #48]	; (800a0b8 <xTaskPriorityDisinherit+0xd8>)
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4a09      	ldr	r2, [pc, #36]	; (800a0bc <xTaskPriorityDisinherit+0xdc>)
 800a096:	441a      	add	r2, r3
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4619      	mov	r1, r3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f7fe fb7b 	bl	800879a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0a8:	697b      	ldr	r3, [r7, #20]
	}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20000860 	.word	0x20000860
 800a0b8:	20000d3c 	.word	0x20000d3c
 800a0bc:	20000864 	.word	0x20000864

0800a0c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0ca:	4b21      	ldr	r3, [pc, #132]	; (800a150 <prvAddCurrentTaskToDelayedList+0x90>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0d0:	4b20      	ldr	r3, [pc, #128]	; (800a154 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fe fbbc 	bl	8008854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e2:	d10a      	bne.n	800a0fa <prvAddCurrentTaskToDelayedList+0x3a>
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d007      	beq.n	800a0fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0ea:	4b1a      	ldr	r3, [pc, #104]	; (800a154 <prvAddCurrentTaskToDelayedList+0x94>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	4819      	ldr	r0, [pc, #100]	; (800a158 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0f4:	f7fe fb51 	bl	800879a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0f8:	e026      	b.n	800a148 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4413      	add	r3, r2
 800a100:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a102:	4b14      	ldr	r3, [pc, #80]	; (800a154 <prvAddCurrentTaskToDelayedList+0x94>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d209      	bcs.n	800a126 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a112:	4b12      	ldr	r3, [pc, #72]	; (800a15c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	4b0f      	ldr	r3, [pc, #60]	; (800a154 <prvAddCurrentTaskToDelayedList+0x94>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3304      	adds	r3, #4
 800a11c:	4619      	mov	r1, r3
 800a11e:	4610      	mov	r0, r2
 800a120:	f7fe fb5f 	bl	80087e2 <vListInsert>
}
 800a124:	e010      	b.n	800a148 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a126:	4b0e      	ldr	r3, [pc, #56]	; (800a160 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	4b0a      	ldr	r3, [pc, #40]	; (800a154 <prvAddCurrentTaskToDelayedList+0x94>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3304      	adds	r3, #4
 800a130:	4619      	mov	r1, r3
 800a132:	4610      	mov	r0, r2
 800a134:	f7fe fb55 	bl	80087e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a138:	4b0a      	ldr	r3, [pc, #40]	; (800a164 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d202      	bcs.n	800a148 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a142:	4a08      	ldr	r2, [pc, #32]	; (800a164 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	6013      	str	r3, [r2, #0]
}
 800a148:	bf00      	nop
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20000d38 	.word	0x20000d38
 800a154:	20000860 	.word	0x20000860
 800a158:	20000d20 	.word	0x20000d20
 800a15c:	20000cf0 	.word	0x20000cf0
 800a160:	20000cec 	.word	0x20000cec
 800a164:	20000d54 	.word	0x20000d54

0800a168 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b08a      	sub	sp, #40	; 0x28
 800a16c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a16e:	2300      	movs	r3, #0
 800a170:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a172:	f000 fb0d 	bl	800a790 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a176:	4b1d      	ldr	r3, [pc, #116]	; (800a1ec <xTimerCreateTimerTask+0x84>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d021      	beq.n	800a1c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a17e:	2300      	movs	r3, #0
 800a180:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a182:	2300      	movs	r3, #0
 800a184:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a186:	1d3a      	adds	r2, r7, #4
 800a188:	f107 0108 	add.w	r1, r7, #8
 800a18c:	f107 030c 	add.w	r3, r7, #12
 800a190:	4618      	mov	r0, r3
 800a192:	f7fe fabb 	bl	800870c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a196:	6879      	ldr	r1, [r7, #4]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	9202      	str	r2, [sp, #8]
 800a19e:	9301      	str	r3, [sp, #4]
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	460a      	mov	r2, r1
 800a1a8:	4911      	ldr	r1, [pc, #68]	; (800a1f0 <xTimerCreateTimerTask+0x88>)
 800a1aa:	4812      	ldr	r0, [pc, #72]	; (800a1f4 <xTimerCreateTimerTask+0x8c>)
 800a1ac:	f7ff f872 	bl	8009294 <xTaskCreateStatic>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	4b11      	ldr	r3, [pc, #68]	; (800a1f8 <xTimerCreateTimerTask+0x90>)
 800a1b4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a1b6:	4b10      	ldr	r3, [pc, #64]	; (800a1f8 <xTimerCreateTimerTask+0x90>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10b      	bne.n	800a1e0 <xTimerCreateTimerTask+0x78>
 800a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1cc:	b672      	cpsid	i
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	b662      	cpsie	i
 800a1dc:	613b      	str	r3, [r7, #16]
 800a1de:	e7fe      	b.n	800a1de <xTimerCreateTimerTask+0x76>
	return xReturn;
 800a1e0:	697b      	ldr	r3, [r7, #20]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3718      	adds	r7, #24
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	20000d90 	.word	0x20000d90
 800a1f0:	0800c808 	.word	0x0800c808
 800a1f4:	0800a335 	.word	0x0800a335
 800a1f8:	20000d94 	.word	0x20000d94

0800a1fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b08a      	sub	sp, #40	; 0x28
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a20a:	2300      	movs	r3, #0
 800a20c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10b      	bne.n	800a22c <xTimerGenericCommand+0x30>
 800a214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a218:	b672      	cpsid	i
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	b662      	cpsie	i
 800a228:	623b      	str	r3, [r7, #32]
 800a22a:	e7fe      	b.n	800a22a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a22c:	4b19      	ldr	r3, [pc, #100]	; (800a294 <xTimerGenericCommand+0x98>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d02a      	beq.n	800a28a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2b05      	cmp	r3, #5
 800a244:	dc18      	bgt.n	800a278 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a246:	f7ff fead 	bl	8009fa4 <xTaskGetSchedulerState>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d109      	bne.n	800a264 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a250:	4b10      	ldr	r3, [pc, #64]	; (800a294 <xTimerGenericCommand+0x98>)
 800a252:	6818      	ldr	r0, [r3, #0]
 800a254:	f107 0110 	add.w	r1, r7, #16
 800a258:	2300      	movs	r3, #0
 800a25a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a25c:	f7fe fc2e 	bl	8008abc <xQueueGenericSend>
 800a260:	6278      	str	r0, [r7, #36]	; 0x24
 800a262:	e012      	b.n	800a28a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a264:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <xTimerGenericCommand+0x98>)
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	f107 0110 	add.w	r1, r7, #16
 800a26c:	2300      	movs	r3, #0
 800a26e:	2200      	movs	r2, #0
 800a270:	f7fe fc24 	bl	8008abc <xQueueGenericSend>
 800a274:	6278      	str	r0, [r7, #36]	; 0x24
 800a276:	e008      	b.n	800a28a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a278:	4b06      	ldr	r3, [pc, #24]	; (800a294 <xTimerGenericCommand+0x98>)
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	f107 0110 	add.w	r1, r7, #16
 800a280:	2300      	movs	r3, #0
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	f7fe fd1c 	bl	8008cc0 <xQueueGenericSendFromISR>
 800a288:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3728      	adds	r7, #40	; 0x28
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	20000d90 	.word	0x20000d90

0800a298 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b088      	sub	sp, #32
 800a29c:	af02      	add	r7, sp, #8
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2a2:	4b23      	ldr	r3, [pc, #140]	; (800a330 <prvProcessExpiredTimer+0x98>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f7fe facf 	bl	8008854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2bc:	f003 0304 	and.w	r3, r3, #4
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d023      	beq.n	800a30c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	699a      	ldr	r2, [r3, #24]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	18d1      	adds	r1, r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	6978      	ldr	r0, [r7, #20]
 800a2d2:	f000 f8d3 	bl	800a47c <prvInsertTimerInActiveList>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d020      	beq.n	800a31e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	6978      	ldr	r0, [r7, #20]
 800a2e8:	f7ff ff88 	bl	800a1fc <xTimerGenericCommand>
 800a2ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d114      	bne.n	800a31e <prvProcessExpiredTimer+0x86>
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	b672      	cpsid	i
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	b662      	cpsie	i
 800a308:	60fb      	str	r3, [r7, #12]
 800a30a:	e7fe      	b.n	800a30a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a312:	f023 0301 	bic.w	r3, r3, #1
 800a316:	b2da      	uxtb	r2, r3
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	6978      	ldr	r0, [r7, #20]
 800a324:	4798      	blx	r3
}
 800a326:	bf00      	nop
 800a328:	3718      	adds	r7, #24
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	20000d88 	.word	0x20000d88

0800a334 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a33c:	f107 0308 	add.w	r3, r7, #8
 800a340:	4618      	mov	r0, r3
 800a342:	f000 f857 	bl	800a3f4 <prvGetNextExpireTime>
 800a346:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	4619      	mov	r1, r3
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 f803 	bl	800a358 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a352:	f000 f8d5 	bl	800a500 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a356:	e7f1      	b.n	800a33c <prvTimerTask+0x8>

0800a358 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a362:	f7ff f9ff 	bl	8009764 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a366:	f107 0308 	add.w	r3, r7, #8
 800a36a:	4618      	mov	r0, r3
 800a36c:	f000 f866 	bl	800a43c <prvSampleTimeNow>
 800a370:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d130      	bne.n	800a3da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10a      	bne.n	800a394 <prvProcessTimerOrBlockTask+0x3c>
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	429a      	cmp	r2, r3
 800a384:	d806      	bhi.n	800a394 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a386:	f7ff f9fb 	bl	8009780 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a38a:	68f9      	ldr	r1, [r7, #12]
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff ff83 	bl	800a298 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a392:	e024      	b.n	800a3de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d008      	beq.n	800a3ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a39a:	4b13      	ldr	r3, [pc, #76]	; (800a3e8 <prvProcessTimerOrBlockTask+0x90>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <prvProcessTimerOrBlockTask+0x50>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e000      	b.n	800a3aa <prvProcessTimerOrBlockTask+0x52>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a3ac:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <prvProcessTimerOrBlockTask+0x94>)
 800a3ae:	6818      	ldr	r0, [r3, #0]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	f7fe ff37 	bl	800922c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a3be:	f7ff f9df 	bl	8009780 <xTaskResumeAll>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a3c8:	4b09      	ldr	r3, [pc, #36]	; (800a3f0 <prvProcessTimerOrBlockTask+0x98>)
 800a3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	f3bf 8f6f 	isb	sy
}
 800a3d8:	e001      	b.n	800a3de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a3da:	f7ff f9d1 	bl	8009780 <xTaskResumeAll>
}
 800a3de:	bf00      	nop
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	20000d8c 	.word	0x20000d8c
 800a3ec:	20000d90 	.word	0x20000d90
 800a3f0:	e000ed04 	.word	0xe000ed04

0800a3f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3fc:	4b0e      	ldr	r3, [pc, #56]	; (800a438 <prvGetNextExpireTime+0x44>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <prvGetNextExpireTime+0x16>
 800a406:	2201      	movs	r2, #1
 800a408:	e000      	b.n	800a40c <prvGetNextExpireTime+0x18>
 800a40a:	2200      	movs	r2, #0
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d105      	bne.n	800a424 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a418:	4b07      	ldr	r3, [pc, #28]	; (800a438 <prvGetNextExpireTime+0x44>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	e001      	b.n	800a428 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a428:	68fb      	ldr	r3, [r7, #12]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20000d88 	.word	0x20000d88

0800a43c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a444:	f7ff fa3a 	bl	80098bc <xTaskGetTickCount>
 800a448:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a44a:	4b0b      	ldr	r3, [pc, #44]	; (800a478 <prvSampleTimeNow+0x3c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	429a      	cmp	r2, r3
 800a452:	d205      	bcs.n	800a460 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a454:	f000 f936 	bl	800a6c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	e002      	b.n	800a466 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a466:	4a04      	ldr	r2, [pc, #16]	; (800a478 <prvSampleTimeNow+0x3c>)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a46c:	68fb      	ldr	r3, [r7, #12]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000d98 	.word	0x20000d98

0800a47c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a48a:	2300      	movs	r3, #0
 800a48c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d812      	bhi.n	800a4c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	1ad2      	subs	r2, r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d302      	bcc.n	800a4b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	617b      	str	r3, [r7, #20]
 800a4b4:	e01b      	b.n	800a4ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a4b6:	4b10      	ldr	r3, [pc, #64]	; (800a4f8 <prvInsertTimerInActiveList+0x7c>)
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4619      	mov	r1, r3
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	f7fe f98e 	bl	80087e2 <vListInsert>
 800a4c6:	e012      	b.n	800a4ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d206      	bcs.n	800a4de <prvInsertTimerInActiveList+0x62>
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d302      	bcc.n	800a4de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	e007      	b.n	800a4ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a4de:	4b07      	ldr	r3, [pc, #28]	; (800a4fc <prvInsertTimerInActiveList+0x80>)
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	f7fe f97a 	bl	80087e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a4ee:	697b      	ldr	r3, [r7, #20]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3718      	adds	r7, #24
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	20000d8c 	.word	0x20000d8c
 800a4fc:	20000d88 	.word	0x20000d88

0800a500 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08e      	sub	sp, #56	; 0x38
 800a504:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a506:	e0cc      	b.n	800a6a2 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	da19      	bge.n	800a542 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a50e:	1d3b      	adds	r3, r7, #4
 800a510:	3304      	adds	r3, #4
 800a512:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10b      	bne.n	800a532 <prvProcessReceivedCommands+0x32>
 800a51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51e:	b672      	cpsid	i
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	b662      	cpsie	i
 800a52e:	61fb      	str	r3, [r7, #28]
 800a530:	e7fe      	b.n	800a530 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a538:	6850      	ldr	r0, [r2, #4]
 800a53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a53c:	6892      	ldr	r2, [r2, #8]
 800a53e:	4611      	mov	r1, r2
 800a540:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f2c0 80ab 	blt.w	800a6a0 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d004      	beq.n	800a560 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	3304      	adds	r3, #4
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe f97a 	bl	8008854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a560:	463b      	mov	r3, r7
 800a562:	4618      	mov	r0, r3
 800a564:	f7ff ff6a 	bl	800a43c <prvSampleTimeNow>
 800a568:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b09      	cmp	r3, #9
 800a56e:	f200 8098 	bhi.w	800a6a2 <prvProcessReceivedCommands+0x1a2>
 800a572:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <prvProcessReceivedCommands+0x78>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a5a1 	.word	0x0800a5a1
 800a57c:	0800a5a1 	.word	0x0800a5a1
 800a580:	0800a5a1 	.word	0x0800a5a1
 800a584:	0800a617 	.word	0x0800a617
 800a588:	0800a62b 	.word	0x0800a62b
 800a58c:	0800a677 	.word	0x0800a677
 800a590:	0800a5a1 	.word	0x0800a5a1
 800a594:	0800a5a1 	.word	0x0800a5a1
 800a598:	0800a617 	.word	0x0800a617
 800a59c:	0800a62b 	.word	0x0800a62b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5a6:	f043 0301 	orr.w	r3, r3, #1
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	18d1      	adds	r1, r2, r3
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5c0:	f7ff ff5c 	bl	800a47c <prvInsertTimerInActiveList>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d06b      	beq.n	800a6a2 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5d8:	f003 0304 	and.w	r3, r3, #4
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d060      	beq.n	800a6a2 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	441a      	add	r2, r3
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5f2:	f7ff fe03 	bl	800a1fc <xTimerGenericCommand>
 800a5f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d151      	bne.n	800a6a2 <prvProcessReceivedCommands+0x1a2>
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	b672      	cpsid	i
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	b662      	cpsie	i
 800a612:	61bb      	str	r3, [r7, #24]
 800a614:	e7fe      	b.n	800a614 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a61c:	f023 0301 	bic.w	r3, r3, #1
 800a620:	b2da      	uxtb	r2, r3
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a628:	e03b      	b.n	800a6a2 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a630:	f043 0301 	orr.w	r3, r3, #1
 800a634:	b2da      	uxtb	r2, r3
 800a636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a638:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10b      	bne.n	800a662 <prvProcessReceivedCommands+0x162>
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	b672      	cpsid	i
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	b662      	cpsie	i
 800a65e:	617b      	str	r3, [r7, #20]
 800a660:	e7fe      	b.n	800a660 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	699a      	ldr	r2, [r3, #24]
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	18d1      	adds	r1, r2, r3
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a66e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a670:	f7ff ff04 	bl	800a47c <prvInsertTimerInActiveList>
					break;
 800a674:	e015      	b.n	800a6a2 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a67c:	f003 0302 	and.w	r3, r3, #2
 800a680:	2b00      	cmp	r3, #0
 800a682:	d103      	bne.n	800a68c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a686:	f7f6 ffd5 	bl	8001634 <vPortFree>
 800a68a:	e00a      	b.n	800a6a2 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a692:	f023 0301 	bic.w	r3, r3, #1
 800a696:	b2da      	uxtb	r2, r3
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a69e:	e000      	b.n	800a6a2 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a6a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6a2:	4b07      	ldr	r3, [pc, #28]	; (800a6c0 <prvProcessReceivedCommands+0x1c0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	1d39      	adds	r1, r7, #4
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe fba4 	bl	8008df8 <xQueueReceive>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f47f af28 	bne.w	800a508 <prvProcessReceivedCommands+0x8>
	}
}
 800a6b8:	bf00      	nop
 800a6ba:	3730      	adds	r7, #48	; 0x30
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20000d90 	.word	0x20000d90

0800a6c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b088      	sub	sp, #32
 800a6c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6ca:	e049      	b.n	800a760 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6cc:	4b2e      	ldr	r3, [pc, #184]	; (800a788 <prvSwitchTimerLists+0xc4>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6d6:	4b2c      	ldr	r3, [pc, #176]	; (800a788 <prvSwitchTimerLists+0xc4>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fe f8b5 	bl	8008854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6f8:	f003 0304 	and.w	r3, r3, #4
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d02f      	beq.n	800a760 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	4413      	add	r3, r2
 800a708:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d90e      	bls.n	800a730 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a71e:	4b1a      	ldr	r3, [pc, #104]	; (800a788 <prvSwitchTimerLists+0xc4>)
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	3304      	adds	r3, #4
 800a726:	4619      	mov	r1, r3
 800a728:	4610      	mov	r0, r2
 800a72a:	f7fe f85a 	bl	80087e2 <vListInsert>
 800a72e:	e017      	b.n	800a760 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a730:	2300      	movs	r3, #0
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	2300      	movs	r3, #0
 800a736:	693a      	ldr	r2, [r7, #16]
 800a738:	2100      	movs	r1, #0
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f7ff fd5e 	bl	800a1fc <xTimerGenericCommand>
 800a740:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10b      	bne.n	800a760 <prvSwitchTimerLists+0x9c>
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	b672      	cpsid	i
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	b662      	cpsie	i
 800a75c:	603b      	str	r3, [r7, #0]
 800a75e:	e7fe      	b.n	800a75e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a760:	4b09      	ldr	r3, [pc, #36]	; (800a788 <prvSwitchTimerLists+0xc4>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1b0      	bne.n	800a6cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a76a:	4b07      	ldr	r3, [pc, #28]	; (800a788 <prvSwitchTimerLists+0xc4>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a770:	4b06      	ldr	r3, [pc, #24]	; (800a78c <prvSwitchTimerLists+0xc8>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a04      	ldr	r2, [pc, #16]	; (800a788 <prvSwitchTimerLists+0xc4>)
 800a776:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a778:	4a04      	ldr	r2, [pc, #16]	; (800a78c <prvSwitchTimerLists+0xc8>)
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	6013      	str	r3, [r2, #0]
}
 800a77e:	bf00      	nop
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	20000d88 	.word	0x20000d88
 800a78c:	20000d8c 	.word	0x20000d8c

0800a790 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a796:	f000 f947 	bl	800aa28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a79a:	4b15      	ldr	r3, [pc, #84]	; (800a7f0 <prvCheckForValidListAndQueue+0x60>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d120      	bne.n	800a7e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7a2:	4814      	ldr	r0, [pc, #80]	; (800a7f4 <prvCheckForValidListAndQueue+0x64>)
 800a7a4:	f7fd ffcc 	bl	8008740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7a8:	4813      	ldr	r0, [pc, #76]	; (800a7f8 <prvCheckForValidListAndQueue+0x68>)
 800a7aa:	f7fd ffc9 	bl	8008740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7ae:	4b13      	ldr	r3, [pc, #76]	; (800a7fc <prvCheckForValidListAndQueue+0x6c>)
 800a7b0:	4a10      	ldr	r2, [pc, #64]	; (800a7f4 <prvCheckForValidListAndQueue+0x64>)
 800a7b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7b4:	4b12      	ldr	r3, [pc, #72]	; (800a800 <prvCheckForValidListAndQueue+0x70>)
 800a7b6:	4a10      	ldr	r2, [pc, #64]	; (800a7f8 <prvCheckForValidListAndQueue+0x68>)
 800a7b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	4b11      	ldr	r3, [pc, #68]	; (800a804 <prvCheckForValidListAndQueue+0x74>)
 800a7c0:	4a11      	ldr	r2, [pc, #68]	; (800a808 <prvCheckForValidListAndQueue+0x78>)
 800a7c2:	2110      	movs	r1, #16
 800a7c4:	200a      	movs	r0, #10
 800a7c6:	f7fe f8d9 	bl	800897c <xQueueGenericCreateStatic>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	4b08      	ldr	r3, [pc, #32]	; (800a7f0 <prvCheckForValidListAndQueue+0x60>)
 800a7ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <prvCheckForValidListAndQueue+0x60>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d005      	beq.n	800a7e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a7d8:	4b05      	ldr	r3, [pc, #20]	; (800a7f0 <prvCheckForValidListAndQueue+0x60>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	490b      	ldr	r1, [pc, #44]	; (800a80c <prvCheckForValidListAndQueue+0x7c>)
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fe fcfc 	bl	80091dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7e4:	f000 f952 	bl	800aa8c <vPortExitCritical>
}
 800a7e8:	bf00      	nop
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	20000d90 	.word	0x20000d90
 800a7f4:	20000d60 	.word	0x20000d60
 800a7f8:	20000d74 	.word	0x20000d74
 800a7fc:	20000d88 	.word	0x20000d88
 800a800:	20000d8c 	.word	0x20000d8c
 800a804:	20000e3c 	.word	0x20000e3c
 800a808:	20000d9c 	.word	0x20000d9c
 800a80c:	0800c810 	.word	0x0800c810

0800a810 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3b04      	subs	r3, #4
 800a820:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	3b04      	subs	r3, #4
 800a82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	f023 0201 	bic.w	r2, r3, #1
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3b04      	subs	r3, #4
 800a83e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a840:	4a0c      	ldr	r2, [pc, #48]	; (800a874 <pxPortInitialiseStack+0x64>)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	3b14      	subs	r3, #20
 800a84a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3b04      	subs	r3, #4
 800a856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f06f 0202 	mvn.w	r2, #2
 800a85e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3b20      	subs	r3, #32
 800a864:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a866:	68fb      	ldr	r3, [r7, #12]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	0800a879 	.word	0x0800a879

0800a878 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a882:	4b13      	ldr	r3, [pc, #76]	; (800a8d0 <prvTaskExitError+0x58>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a88a:	d00b      	beq.n	800a8a4 <prvTaskExitError+0x2c>
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	b672      	cpsid	i
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	b662      	cpsie	i
 800a8a0:	60fb      	str	r3, [r7, #12]
 800a8a2:	e7fe      	b.n	800a8a2 <prvTaskExitError+0x2a>
 800a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a8:	b672      	cpsid	i
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	b662      	cpsie	i
 800a8b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8ba:	bf00      	nop
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0fc      	beq.n	800a8bc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8c2:	bf00      	nop
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	20000010 	.word	0x20000010
	...

0800a8e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a8e0:	4b07      	ldr	r3, [pc, #28]	; (800a900 <pxCurrentTCBConst2>)
 800a8e2:	6819      	ldr	r1, [r3, #0]
 800a8e4:	6808      	ldr	r0, [r1, #0]
 800a8e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ea:	f380 8809 	msr	PSP, r0
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f04f 0000 	mov.w	r0, #0
 800a8f6:	f380 8811 	msr	BASEPRI, r0
 800a8fa:	4770      	bx	lr
 800a8fc:	f3af 8000 	nop.w

0800a900 <pxCurrentTCBConst2>:
 800a900:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a904:	bf00      	nop
 800a906:	bf00      	nop

0800a908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a908:	4808      	ldr	r0, [pc, #32]	; (800a92c <prvPortStartFirstTask+0x24>)
 800a90a:	6800      	ldr	r0, [r0, #0]
 800a90c:	6800      	ldr	r0, [r0, #0]
 800a90e:	f380 8808 	msr	MSP, r0
 800a912:	f04f 0000 	mov.w	r0, #0
 800a916:	f380 8814 	msr	CONTROL, r0
 800a91a:	b662      	cpsie	i
 800a91c:	b661      	cpsie	f
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	df00      	svc	0
 800a928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a92a:	bf00      	nop
 800a92c:	e000ed08 	.word	0xe000ed08

0800a930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a936:	4b36      	ldr	r3, [pc, #216]	; (800aa10 <xPortStartScheduler+0xe0>)
 800a938:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	22ff      	movs	r2, #255	; 0xff
 800a946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a950:	78fb      	ldrb	r3, [r7, #3]
 800a952:	b2db      	uxtb	r3, r3
 800a954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	4b2e      	ldr	r3, [pc, #184]	; (800aa14 <xPortStartScheduler+0xe4>)
 800a95c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a95e:	4b2e      	ldr	r3, [pc, #184]	; (800aa18 <xPortStartScheduler+0xe8>)
 800a960:	2207      	movs	r2, #7
 800a962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a964:	e009      	b.n	800a97a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a966:	4b2c      	ldr	r3, [pc, #176]	; (800aa18 <xPortStartScheduler+0xe8>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3b01      	subs	r3, #1
 800a96c:	4a2a      	ldr	r2, [pc, #168]	; (800aa18 <xPortStartScheduler+0xe8>)
 800a96e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a970:	78fb      	ldrb	r3, [r7, #3]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	b2db      	uxtb	r3, r3
 800a978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a97a:	78fb      	ldrb	r3, [r7, #3]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a982:	2b80      	cmp	r3, #128	; 0x80
 800a984:	d0ef      	beq.n	800a966 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a986:	4b24      	ldr	r3, [pc, #144]	; (800aa18 <xPortStartScheduler+0xe8>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f1c3 0307 	rsb	r3, r3, #7
 800a98e:	2b04      	cmp	r3, #4
 800a990:	d00b      	beq.n	800a9aa <xPortStartScheduler+0x7a>
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	b672      	cpsid	i
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	b662      	cpsie	i
 800a9a6:	60bb      	str	r3, [r7, #8]
 800a9a8:	e7fe      	b.n	800a9a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9aa:	4b1b      	ldr	r3, [pc, #108]	; (800aa18 <xPortStartScheduler+0xe8>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	021b      	lsls	r3, r3, #8
 800a9b0:	4a19      	ldr	r2, [pc, #100]	; (800aa18 <xPortStartScheduler+0xe8>)
 800a9b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9b4:	4b18      	ldr	r3, [pc, #96]	; (800aa18 <xPortStartScheduler+0xe8>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9bc:	4a16      	ldr	r2, [pc, #88]	; (800aa18 <xPortStartScheduler+0xe8>)
 800a9be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9c8:	4b14      	ldr	r3, [pc, #80]	; (800aa1c <xPortStartScheduler+0xec>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a13      	ldr	r2, [pc, #76]	; (800aa1c <xPortStartScheduler+0xec>)
 800a9ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9d4:	4b11      	ldr	r3, [pc, #68]	; (800aa1c <xPortStartScheduler+0xec>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a10      	ldr	r2, [pc, #64]	; (800aa1c <xPortStartScheduler+0xec>)
 800a9da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a9de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9e0:	f000 f8d4 	bl	800ab8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9e4:	4b0e      	ldr	r3, [pc, #56]	; (800aa20 <xPortStartScheduler+0xf0>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a9ea:	f000 f8f3 	bl	800abd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <xPortStartScheduler+0xf4>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a0c      	ldr	r2, [pc, #48]	; (800aa24 <xPortStartScheduler+0xf4>)
 800a9f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a9f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9fa:	f7ff ff85 	bl	800a908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9fe:	f7ff f82f 	bl	8009a60 <vTaskSwitchContext>
	prvTaskExitError();
 800aa02:	f7ff ff39 	bl	800a878 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	e000e400 	.word	0xe000e400
 800aa14:	20000e8c 	.word	0x20000e8c
 800aa18:	20000e90 	.word	0x20000e90
 800aa1c:	e000ed20 	.word	0xe000ed20
 800aa20:	20000010 	.word	0x20000010
 800aa24:	e000ef34 	.word	0xe000ef34

0800aa28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	b672      	cpsid	i
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	b662      	cpsie	i
 800aa42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa44:	4b0f      	ldr	r3, [pc, #60]	; (800aa84 <vPortEnterCritical+0x5c>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	4a0e      	ldr	r2, [pc, #56]	; (800aa84 <vPortEnterCritical+0x5c>)
 800aa4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa4e:	4b0d      	ldr	r3, [pc, #52]	; (800aa84 <vPortEnterCritical+0x5c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d110      	bne.n	800aa78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa56:	4b0c      	ldr	r3, [pc, #48]	; (800aa88 <vPortEnterCritical+0x60>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00b      	beq.n	800aa78 <vPortEnterCritical+0x50>
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	b672      	cpsid	i
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	b662      	cpsie	i
 800aa74:	603b      	str	r3, [r7, #0]
 800aa76:	e7fe      	b.n	800aa76 <vPortEnterCritical+0x4e>
	}
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	20000010 	.word	0x20000010
 800aa88:	e000ed04 	.word	0xe000ed04

0800aa8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa92:	4b12      	ldr	r3, [pc, #72]	; (800aadc <vPortExitCritical+0x50>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10b      	bne.n	800aab2 <vPortExitCritical+0x26>
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	b672      	cpsid	i
 800aaa0:	f383 8811 	msr	BASEPRI, r3
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	b662      	cpsie	i
 800aaae:	607b      	str	r3, [r7, #4]
 800aab0:	e7fe      	b.n	800aab0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800aab2:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <vPortExitCritical+0x50>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	3b01      	subs	r3, #1
 800aab8:	4a08      	ldr	r2, [pc, #32]	; (800aadc <vPortExitCritical+0x50>)
 800aaba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aabc:	4b07      	ldr	r3, [pc, #28]	; (800aadc <vPortExitCritical+0x50>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d104      	bne.n	800aace <vPortExitCritical+0x42>
 800aac4:	2300      	movs	r3, #0
 800aac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aace:	bf00      	nop
 800aad0:	370c      	adds	r7, #12
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	20000010 	.word	0x20000010

0800aae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aae0:	f3ef 8009 	mrs	r0, PSP
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	4b15      	ldr	r3, [pc, #84]	; (800ab40 <pxCurrentTCBConst>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	f01e 0f10 	tst.w	lr, #16
 800aaf0:	bf08      	it	eq
 800aaf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aaf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafa:	6010      	str	r0, [r2, #0]
 800aafc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ab04:	b672      	cpsid	i
 800ab06:	f380 8811 	msr	BASEPRI, r0
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	f3bf 8f6f 	isb	sy
 800ab12:	b662      	cpsie	i
 800ab14:	f7fe ffa4 	bl	8009a60 <vTaskSwitchContext>
 800ab18:	f04f 0000 	mov.w	r0, #0
 800ab1c:	f380 8811 	msr	BASEPRI, r0
 800ab20:	bc09      	pop	{r0, r3}
 800ab22:	6819      	ldr	r1, [r3, #0]
 800ab24:	6808      	ldr	r0, [r1, #0]
 800ab26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2a:	f01e 0f10 	tst.w	lr, #16
 800ab2e:	bf08      	it	eq
 800ab30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab34:	f380 8809 	msr	PSP, r0
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop

0800ab40 <pxCurrentTCBConst>:
 800ab40:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop

0800ab48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	b672      	cpsid	i
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	b662      	cpsie	i
 800ab62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab64:	f7fe feba 	bl	80098dc <xTaskIncrementTick>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab6e:	4b06      	ldr	r3, [pc, #24]	; (800ab88 <SysTick_Handler+0x40>)
 800ab70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	2300      	movs	r3, #0
 800ab78:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	e000ed04 	.word	0xe000ed04

0800ab8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab90:	4b0b      	ldr	r3, [pc, #44]	; (800abc0 <vPortSetupTimerInterrupt+0x34>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab96:	4b0b      	ldr	r3, [pc, #44]	; (800abc4 <vPortSetupTimerInterrupt+0x38>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab9c:	4b0a      	ldr	r3, [pc, #40]	; (800abc8 <vPortSetupTimerInterrupt+0x3c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a0a      	ldr	r2, [pc, #40]	; (800abcc <vPortSetupTimerInterrupt+0x40>)
 800aba2:	fba2 2303 	umull	r2, r3, r2, r3
 800aba6:	099b      	lsrs	r3, r3, #6
 800aba8:	4a09      	ldr	r2, [pc, #36]	; (800abd0 <vPortSetupTimerInterrupt+0x44>)
 800abaa:	3b01      	subs	r3, #1
 800abac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800abae:	4b04      	ldr	r3, [pc, #16]	; (800abc0 <vPortSetupTimerInterrupt+0x34>)
 800abb0:	2207      	movs	r2, #7
 800abb2:	601a      	str	r2, [r3, #0]
}
 800abb4:	bf00      	nop
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	e000e010 	.word	0xe000e010
 800abc4:	e000e018 	.word	0xe000e018
 800abc8:	20000004 	.word	0x20000004
 800abcc:	10624dd3 	.word	0x10624dd3
 800abd0:	e000e014 	.word	0xe000e014

0800abd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800abd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800abe4 <vPortEnableVFP+0x10>
 800abd8:	6801      	ldr	r1, [r0, #0]
 800abda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800abde:	6001      	str	r1, [r0, #0]
 800abe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800abe2:	bf00      	nop
 800abe4:	e000ed88 	.word	0xe000ed88

0800abe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800abee:	f3ef 8305 	mrs	r3, IPSR
 800abf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b0f      	cmp	r3, #15
 800abf8:	d915      	bls.n	800ac26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abfa:	4a18      	ldr	r2, [pc, #96]	; (800ac5c <vPortValidateInterruptPriority+0x74>)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4413      	add	r3, r2
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ac04:	4b16      	ldr	r3, [pc, #88]	; (800ac60 <vPortValidateInterruptPriority+0x78>)
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	7afa      	ldrb	r2, [r7, #11]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d20b      	bcs.n	800ac26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	b672      	cpsid	i
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	b662      	cpsie	i
 800ac22:	607b      	str	r3, [r7, #4]
 800ac24:	e7fe      	b.n	800ac24 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ac26:	4b0f      	ldr	r3, [pc, #60]	; (800ac64 <vPortValidateInterruptPriority+0x7c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac2e:	4b0e      	ldr	r3, [pc, #56]	; (800ac68 <vPortValidateInterruptPriority+0x80>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d90b      	bls.n	800ac4e <vPortValidateInterruptPriority+0x66>
 800ac36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3a:	b672      	cpsid	i
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	b662      	cpsie	i
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	e7fe      	b.n	800ac4c <vPortValidateInterruptPriority+0x64>
	}
 800ac4e:	bf00      	nop
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	e000e3f0 	.word	0xe000e3f0
 800ac60:	20000e8c 	.word	0x20000e8c
 800ac64:	e000ed0c 	.word	0xe000ed0c
 800ac68:	20000e90 	.word	0x20000e90

0800ac6c <__cxa_end_cleanup>:
 800ac6c:	b41e      	push	{r1, r2, r3, r4}
 800ac6e:	f000 f89c 	bl	800adaa <__gnu_end_cleanup>
 800ac72:	bc1e      	pop	{r1, r2, r3, r4}
 800ac74:	f7f6 f9f0 	bl	8001058 <_Unwind_Resume>

0800ac78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800ac78:	7803      	ldrb	r3, [r0, #0]
 800ac7a:	2b47      	cmp	r3, #71	; 0x47
 800ac7c:	d117      	bne.n	800acae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ac7e:	7843      	ldrb	r3, [r0, #1]
 800ac80:	2b4e      	cmp	r3, #78	; 0x4e
 800ac82:	d114      	bne.n	800acae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ac84:	7883      	ldrb	r3, [r0, #2]
 800ac86:	2b55      	cmp	r3, #85	; 0x55
 800ac88:	d111      	bne.n	800acae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ac8a:	78c3      	ldrb	r3, [r0, #3]
 800ac8c:	2b43      	cmp	r3, #67	; 0x43
 800ac8e:	d10e      	bne.n	800acae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ac90:	7903      	ldrb	r3, [r0, #4]
 800ac92:	2b43      	cmp	r3, #67	; 0x43
 800ac94:	d10b      	bne.n	800acae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ac96:	7943      	ldrb	r3, [r0, #5]
 800ac98:	2b2b      	cmp	r3, #43	; 0x2b
 800ac9a:	d108      	bne.n	800acae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ac9c:	7983      	ldrb	r3, [r0, #6]
 800ac9e:	2b2b      	cmp	r3, #43	; 0x2b
 800aca0:	d105      	bne.n	800acae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800aca2:	79c0      	ldrb	r0, [r0, #7]
 800aca4:	2801      	cmp	r0, #1
 800aca6:	bf8c      	ite	hi
 800aca8:	2000      	movhi	r0, #0
 800acaa:	2001      	movls	r0, #1
 800acac:	4770      	bx	lr
 800acae:	2000      	movs	r0, #0
 800acb0:	4770      	bx	lr
	...

0800acb4 <__cxa_type_match>:
 800acb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800acb8:	461e      	mov	r6, r3
 800acba:	7803      	ldrb	r3, [r0, #0]
 800acbc:	2b47      	cmp	r3, #71	; 0x47
 800acbe:	460d      	mov	r5, r1
 800acc0:	4602      	mov	r2, r0
 800acc2:	79c1      	ldrb	r1, [r0, #7]
 800acc4:	d113      	bne.n	800acee <__cxa_type_match+0x3a>
 800acc6:	7843      	ldrb	r3, [r0, #1]
 800acc8:	2b4e      	cmp	r3, #78	; 0x4e
 800acca:	d110      	bne.n	800acee <__cxa_type_match+0x3a>
 800accc:	7883      	ldrb	r3, [r0, #2]
 800acce:	2b55      	cmp	r3, #85	; 0x55
 800acd0:	d10d      	bne.n	800acee <__cxa_type_match+0x3a>
 800acd2:	78c3      	ldrb	r3, [r0, #3]
 800acd4:	2b43      	cmp	r3, #67	; 0x43
 800acd6:	d10a      	bne.n	800acee <__cxa_type_match+0x3a>
 800acd8:	7903      	ldrb	r3, [r0, #4]
 800acda:	2b46      	cmp	r3, #70	; 0x46
 800acdc:	d107      	bne.n	800acee <__cxa_type_match+0x3a>
 800acde:	7943      	ldrb	r3, [r0, #5]
 800ace0:	2b4f      	cmp	r3, #79	; 0x4f
 800ace2:	d104      	bne.n	800acee <__cxa_type_match+0x3a>
 800ace4:	7983      	ldrb	r3, [r0, #6]
 800ace6:	2b52      	cmp	r3, #82	; 0x52
 800ace8:	d101      	bne.n	800acee <__cxa_type_match+0x3a>
 800acea:	2900      	cmp	r1, #0
 800acec:	d031      	beq.n	800ad52 <__cxa_type_match+0x9e>
 800acee:	4610      	mov	r0, r2
 800acf0:	f7ff ffc2 	bl	800ac78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800acf4:	f080 0001 	eor.w	r0, r0, #1
 800acf8:	b2c0      	uxtb	r0, r0
 800acfa:	2300      	movs	r3, #0
 800acfc:	2400      	movs	r4, #0
 800acfe:	9401      	str	r4, [sp, #4]
 800ad00:	bb53      	cbnz	r3, 800ad58 <__cxa_type_match+0xa4>
 800ad02:	bb58      	cbnz	r0, 800ad5c <__cxa_type_match+0xa8>
 800ad04:	2901      	cmp	r1, #1
 800ad06:	bf0a      	itet	eq
 800ad08:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 800ad0c:	f1a2 0320 	subne.w	r3, r2, #32
 800ad10:	3b78      	subeq	r3, #120	; 0x78
 800ad12:	2901      	cmp	r1, #1
 800ad14:	bf08      	it	eq
 800ad16:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 800ad1a:	681c      	ldr	r4, [r3, #0]
 800ad1c:	bf18      	it	ne
 800ad1e:	3258      	addne	r2, #88	; 0x58
 800ad20:	9201      	str	r2, [sp, #4]
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	4620      	mov	r0, r4
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	4798      	blx	r3
 800ad2a:	b1c8      	cbz	r0, 800ad60 <__cxa_type_match+0xac>
 800ad2c:	9b01      	ldr	r3, [sp, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	2702      	movs	r7, #2
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	aa01      	add	r2, sp, #4
 800ad38:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	2301      	movs	r3, #1
 800ad40:	4628      	mov	r0, r5
 800ad42:	47c0      	blx	r8
 800ad44:	b170      	cbz	r0, 800ad64 <__cxa_type_match+0xb0>
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	6033      	str	r3, [r6, #0]
 800ad4a:	4638      	mov	r0, r7
 800ad4c:	b002      	add	sp, #8
 800ad4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad52:	2301      	movs	r3, #1
 800ad54:	4608      	mov	r0, r1
 800ad56:	e7d1      	b.n	800acfc <__cxa_type_match+0x48>
 800ad58:	4c03      	ldr	r4, [pc, #12]	; (800ad68 <__cxa_type_match+0xb4>)
 800ad5a:	e7e2      	b.n	800ad22 <__cxa_type_match+0x6e>
 800ad5c:	4c03      	ldr	r4, [pc, #12]	; (800ad6c <__cxa_type_match+0xb8>)
 800ad5e:	e7e0      	b.n	800ad22 <__cxa_type_match+0x6e>
 800ad60:	2701      	movs	r7, #1
 800ad62:	e7e7      	b.n	800ad34 <__cxa_type_match+0x80>
 800ad64:	4607      	mov	r7, r0
 800ad66:	e7f0      	b.n	800ad4a <__cxa_type_match+0x96>
 800ad68:	0800c98c 	.word	0x0800c98c
 800ad6c:	0800c994 	.word	0x0800c994

0800ad70 <__cxa_begin_cleanup>:
 800ad70:	b510      	push	{r4, lr}
 800ad72:	4604      	mov	r4, r0
 800ad74:	f000 f83a 	bl	800adec <__cxa_get_globals>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f1a4 0120 	sub.w	r1, r4, #32
 800ad80:	f7ff ff7a 	bl	800ac78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800ad84:	b160      	cbz	r0, 800ada0 <__cxa_begin_cleanup+0x30>
 800ad86:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad92:	d103      	bne.n	800ad9c <__cxa_begin_cleanup+0x2c>
 800ad94:	6893      	ldr	r3, [r2, #8]
 800ad96:	f844 3c08 	str.w	r3, [r4, #-8]
 800ad9a:	6091      	str	r1, [r2, #8]
 800ad9c:	2001      	movs	r0, #1
 800ad9e:	bd10      	pop	{r4, pc}
 800ada0:	6893      	ldr	r3, [r2, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0f9      	beq.n	800ad9a <__cxa_begin_cleanup+0x2a>
 800ada6:	f000 fc8b 	bl	800b6c0 <_ZSt9terminatev>

0800adaa <__gnu_end_cleanup>:
 800adaa:	b510      	push	{r4, lr}
 800adac:	f000 f81e 	bl	800adec <__cxa_get_globals>
 800adb0:	6882      	ldr	r2, [r0, #8]
 800adb2:	4601      	mov	r1, r0
 800adb4:	b90a      	cbnz	r2, 800adba <__gnu_end_cleanup+0x10>
 800adb6:	f000 fc83 	bl	800b6c0 <_ZSt9terminatev>
 800adba:	f102 0420 	add.w	r4, r2, #32
 800adbe:	4620      	mov	r0, r4
 800adc0:	f7ff ff5a 	bl	800ac78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800adc4:	b140      	cbz	r0, 800add8 <__gnu_end_cleanup+0x2e>
 800adc6:	69d3      	ldr	r3, [r2, #28]
 800adc8:	3b01      	subs	r3, #1
 800adca:	61d3      	str	r3, [r2, #28]
 800adcc:	b913      	cbnz	r3, 800add4 <__gnu_end_cleanup+0x2a>
 800adce:	6990      	ldr	r0, [r2, #24]
 800add0:	6088      	str	r0, [r1, #8]
 800add2:	6193      	str	r3, [r2, #24]
 800add4:	4620      	mov	r0, r4
 800add6:	bd10      	pop	{r4, pc}
 800add8:	6088      	str	r0, [r1, #8]
 800adda:	e7fb      	b.n	800add4 <__gnu_end_cleanup+0x2a>

0800addc <__cxa_pure_virtual>:
 800addc:	b508      	push	{r3, lr}
 800adde:	f000 fc6f 	bl	800b6c0 <_ZSt9terminatev>
	...

0800ade4 <__cxa_get_globals_fast>:
 800ade4:	4800      	ldr	r0, [pc, #0]	; (800ade8 <__cxa_get_globals_fast+0x4>)
 800ade6:	4770      	bx	lr
 800ade8:	20000e94 	.word	0x20000e94

0800adec <__cxa_get_globals>:
 800adec:	4800      	ldr	r0, [pc, #0]	; (800adf0 <__cxa_get_globals+0x4>)
 800adee:	4770      	bx	lr
 800adf0:	20000e94 	.word	0x20000e94

0800adf4 <_ZdlPvj>:
 800adf4:	f000 bc56 	b.w	800b6a4 <_ZdlPv>

0800adf8 <_ZL12read_uleb128PKhPm>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	2300      	movs	r3, #0
 800adfc:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 800ae00:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800ae04:	f810 5b01 	ldrb.w	r5, [r0], #1
 800ae08:	1994      	adds	r4, r2, r6
 800ae0a:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 800ae0e:	40a2      	lsls	r2, r4
 800ae10:	4313      	orrs	r3, r2
 800ae12:	062a      	lsls	r2, r5, #24
 800ae14:	d4f4      	bmi.n	800ae00 <_ZL12read_uleb128PKhPm+0x8>
 800ae16:	600b      	str	r3, [r1, #0]
 800ae18:	bd70      	pop	{r4, r5, r6, pc}

0800ae1a <_ZL12read_sleb128PKhPl>:
 800ae1a:	b530      	push	{r4, r5, lr}
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	461a      	mov	r2, r3
 800ae20:	f810 4b01 	ldrb.w	r4, [r0], #1
 800ae24:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800ae28:	4095      	lsls	r5, r2
 800ae2a:	432b      	orrs	r3, r5
 800ae2c:	0625      	lsls	r5, r4, #24
 800ae2e:	f102 0207 	add.w	r2, r2, #7
 800ae32:	d4f5      	bmi.n	800ae20 <_ZL12read_sleb128PKhPl+0x6>
 800ae34:	2a1f      	cmp	r2, #31
 800ae36:	d806      	bhi.n	800ae46 <_ZL12read_sleb128PKhPl+0x2c>
 800ae38:	0664      	lsls	r4, r4, #25
 800ae3a:	bf42      	ittt	mi
 800ae3c:	f04f 34ff 	movmi.w	r4, #4294967295
 800ae40:	fa04 f202 	lslmi.w	r2, r4, r2
 800ae44:	4313      	orrmi	r3, r2
 800ae46:	600b      	str	r3, [r1, #0]
 800ae48:	bd30      	pop	{r4, r5, pc}

0800ae4a <_ZL28read_encoded_value_with_basehjPKhPj>:
 800ae4a:	2850      	cmp	r0, #80	; 0x50
 800ae4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae4e:	4605      	mov	r5, r0
 800ae50:	460e      	mov	r6, r1
 800ae52:	4614      	mov	r4, r2
 800ae54:	461f      	mov	r7, r3
 800ae56:	d107      	bne.n	800ae68 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 800ae58:	1cd0      	adds	r0, r2, #3
 800ae5a:	f020 0003 	bic.w	r0, r0, #3
 800ae5e:	f850 3b04 	ldr.w	r3, [r0], #4
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	b003      	add	sp, #12
 800ae66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae68:	f000 030f 	and.w	r3, r0, #15
 800ae6c:	2b0c      	cmp	r3, #12
 800ae6e:	d82e      	bhi.n	800aece <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 800ae70:	e8df f003 	tbb	[pc, r3]
 800ae74:	251d0725 	.word	0x251d0725
 800ae78:	2d2d2d29 	.word	0x2d2d2d29
 800ae7c:	2521182d 	.word	0x2521182d
 800ae80:	29          	.byte	0x29
 800ae81:	00          	.byte	0x00
 800ae82:	a901      	add	r1, sp, #4
 800ae84:	4620      	mov	r0, r4
 800ae86:	f7ff ffb7 	bl	800adf8 <_ZL12read_uleb128PKhPm>
 800ae8a:	9b01      	ldr	r3, [sp, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d0e8      	beq.n	800ae62 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 800ae90:	f005 0270 	and.w	r2, r5, #112	; 0x70
 800ae94:	2a10      	cmp	r2, #16
 800ae96:	bf08      	it	eq
 800ae98:	4626      	moveq	r6, r4
 800ae9a:	4433      	add	r3, r6
 800ae9c:	062a      	lsls	r2, r5, #24
 800ae9e:	bf48      	it	mi
 800aea0:	681b      	ldrmi	r3, [r3, #0]
 800aea2:	e7de      	b.n	800ae62 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 800aea4:	a901      	add	r1, sp, #4
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7ff ffb7 	bl	800ae1a <_ZL12read_sleb128PKhPl>
 800aeac:	e7ed      	b.n	800ae8a <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f830 3b02 	ldrh.w	r3, [r0], #2
 800aeb4:	e7ea      	b.n	800ae8c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f930 3b02 	ldrsh.w	r3, [r0], #2
 800aebc:	e7e6      	b.n	800ae8c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800aebe:	4620      	mov	r0, r4
 800aec0:	f850 3b04 	ldr.w	r3, [r0], #4
 800aec4:	e7e2      	b.n	800ae8c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800aec6:	4620      	mov	r0, r4
 800aec8:	f850 3b08 	ldr.w	r3, [r0], #8
 800aecc:	e7de      	b.n	800ae8c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800aece:	f000 fe3e 	bl	800bb4e <abort>

0800aed2 <_Unwind_GetGR>:
 800aed2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aed4:	ab03      	add	r3, sp, #12
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	2300      	movs	r3, #0
 800aeda:	460a      	mov	r2, r1
 800aedc:	4619      	mov	r1, r3
 800aede:	f7f5 fcff 	bl	80008e0 <_Unwind_VRS_Get>
 800aee2:	9803      	ldr	r0, [sp, #12]
 800aee4:	b005      	add	sp, #20
 800aee6:	f85d fb04 	ldr.w	pc, [sp], #4

0800aeea <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 800aeea:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800aeee:	2820      	cmp	r0, #32
 800aef0:	b508      	push	{r3, lr}
 800aef2:	d010      	beq.n	800af16 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 800aef4:	d804      	bhi.n	800af00 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x16>
 800aef6:	b1c0      	cbz	r0, 800af2a <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 800aef8:	2810      	cmp	r0, #16
 800aefa:	d016      	beq.n	800af2a <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 800aefc:	f000 fe27 	bl	800bb4e <abort>
 800af00:	2840      	cmp	r0, #64	; 0x40
 800af02:	d00d      	beq.n	800af20 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x36>
 800af04:	2850      	cmp	r0, #80	; 0x50
 800af06:	d010      	beq.n	800af2a <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 800af08:	2830      	cmp	r0, #48	; 0x30
 800af0a:	d1f7      	bne.n	800aefc <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x12>
 800af0c:	4608      	mov	r0, r1
 800af0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800af12:	f7f6 ba9b 	b.w	800144c <_Unwind_GetDataRelBase>
 800af16:	4608      	mov	r0, r1
 800af18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800af1c:	f7f6 ba9a 	b.w	8001454 <_Unwind_GetTextRelBase>
 800af20:	4608      	mov	r0, r1
 800af22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800af26:	f7f6 ba81 	b.w	800142c <_Unwind_GetRegionStart>
 800af2a:	2000      	movs	r0, #0
 800af2c:	bd08      	pop	{r3, pc}

0800af2e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 800af2e:	29ff      	cmp	r1, #255	; 0xff
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	460c      	mov	r4, r1
 800af34:	4615      	mov	r5, r2
 800af36:	461e      	mov	r6, r3
 800af38:	d00b      	beq.n	800af52 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj+0x24>
 800af3a:	4601      	mov	r1, r0
 800af3c:	4620      	mov	r0, r4
 800af3e:	f7ff ffd4 	bl	800aeea <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800af42:	4601      	mov	r1, r0
 800af44:	4633      	mov	r3, r6
 800af46:	462a      	mov	r2, r5
 800af48:	4620      	mov	r0, r4
 800af4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af4e:	f7ff bf7c 	b.w	800ae4a <_ZL28read_encoded_value_with_basehjPKhPj>
 800af52:	2100      	movs	r1, #0
 800af54:	e7f6      	b.n	800af44 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj+0x16>

0800af56 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800af56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af58:	460e      	mov	r6, r1
 800af5a:	4614      	mov	r4, r2
 800af5c:	4605      	mov	r5, r0
 800af5e:	b108      	cbz	r0, 800af64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 800af60:	f7f6 fa64 	bl	800142c <_Unwind_GetRegionStart>
 800af64:	6020      	str	r0, [r4, #0]
 800af66:	7831      	ldrb	r1, [r6, #0]
 800af68:	29ff      	cmp	r1, #255	; 0xff
 800af6a:	f106 0201 	add.w	r2, r6, #1
 800af6e:	d01d      	beq.n	800afac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800af70:	1d23      	adds	r3, r4, #4
 800af72:	4628      	mov	r0, r5
 800af74:	f7ff ffdb 	bl	800af2e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800af78:	4602      	mov	r2, r0
 800af7a:	7813      	ldrb	r3, [r2, #0]
 800af7c:	7523      	strb	r3, [r4, #20]
 800af7e:	2bff      	cmp	r3, #255	; 0xff
 800af80:	f102 0001 	add.w	r0, r2, #1
 800af84:	d014      	beq.n	800afb0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 800af86:	2310      	movs	r3, #16
 800af88:	7523      	strb	r3, [r4, #20]
 800af8a:	a901      	add	r1, sp, #4
 800af8c:	f7ff ff34 	bl	800adf8 <_ZL12read_uleb128PKhPm>
 800af90:	9b01      	ldr	r3, [sp, #4]
 800af92:	4403      	add	r3, r0
 800af94:	60e3      	str	r3, [r4, #12]
 800af96:	7803      	ldrb	r3, [r0, #0]
 800af98:	7563      	strb	r3, [r4, #21]
 800af9a:	a901      	add	r1, sp, #4
 800af9c:	3001      	adds	r0, #1
 800af9e:	f7ff ff2b 	bl	800adf8 <_ZL12read_uleb128PKhPm>
 800afa2:	9b01      	ldr	r3, [sp, #4]
 800afa4:	4403      	add	r3, r0
 800afa6:	6123      	str	r3, [r4, #16]
 800afa8:	b002      	add	sp, #8
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	6060      	str	r0, [r4, #4]
 800afae:	e7e4      	b.n	800af7a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 800afb0:	2300      	movs	r3, #0
 800afb2:	e7ef      	b.n	800af94 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

0800afb4 <__gxx_personality_v0>:
 800afb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb8:	b091      	sub	sp, #68	; 0x44
 800afba:	2300      	movs	r3, #0
 800afbc:	9304      	str	r3, [sp, #16]
 800afbe:	f000 0303 	and.w	r3, r0, #3
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	4607      	mov	r7, r0
 800afc6:	460c      	mov	r4, r1
 800afc8:	4616      	mov	r6, r2
 800afca:	d011      	beq.n	800aff0 <__gxx_personality_v0+0x3c>
 800afcc:	d303      	bcc.n	800afd6 <__gxx_personality_v0+0x22>
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d003      	beq.n	800afda <__gxx_personality_v0+0x26>
 800afd2:	f000 fdbc 	bl	800bb4e <abort>
 800afd6:	0702      	lsls	r2, r0, #28
 800afd8:	d51a      	bpl.n	800b010 <__gxx_personality_v0+0x5c>
 800afda:	4631      	mov	r1, r6
 800afdc:	4620      	mov	r0, r4
 800afde:	f7f6 fa11 	bl	8001404 <__gnu_unwind_frame>
 800afe2:	b118      	cbz	r0, 800afec <__gxx_personality_v0+0x38>
 800afe4:	2009      	movs	r0, #9
 800afe6:	b011      	add	sp, #68	; 0x44
 800afe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afec:	2008      	movs	r0, #8
 800afee:	e7fa      	b.n	800afe6 <__gxx_personality_v0+0x32>
 800aff0:	f000 0508 	and.w	r5, r0, #8
 800aff4:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 800aff8:	bb75      	cbnz	r5, 800b058 <__gxx_personality_v0+0xa4>
 800affa:	f8d1 9020 	ldr.w	r9, [r1, #32]
 800affe:	4610      	mov	r0, r2
 800b000:	210d      	movs	r1, #13
 800b002:	f7ff ff66 	bl	800aed2 <_Unwind_GetGR>
 800b006:	4581      	cmp	r9, r0
 800b008:	f040 8145 	bne.w	800b296 <__gxx_personality_v0+0x2e2>
 800b00c:	2506      	movs	r5, #6
 800b00e:	e000      	b.n	800b012 <__gxx_personality_v0+0x5e>
 800b010:	2501      	movs	r5, #1
 800b012:	ab10      	add	r3, sp, #64	; 0x40
 800b014:	f007 0708 	and.w	r7, r7, #8
 800b018:	f843 4d2c 	str.w	r4, [r3, #-44]!
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	2300      	movs	r3, #0
 800b020:	433d      	orrs	r5, r7
 800b022:	220c      	movs	r2, #12
 800b024:	4619      	mov	r1, r3
 800b026:	4630      	mov	r0, r6
 800b028:	f7f5 fc7c 	bl	8000924 <_Unwind_VRS_Set>
 800b02c:	2d06      	cmp	r5, #6
 800b02e:	f040 813e 	bne.w	800b2ae <__gxx_personality_v0+0x2fa>
 800b032:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800b034:	e9d4 980a 	ldrd	r9, r8, [r4, #40]	; 0x28
 800b038:	2f00      	cmp	r7, #0
 800b03a:	bf0c      	ite	eq
 800b03c:	f04f 0a01 	moveq.w	sl, #1
 800b040:	f04f 0a03 	movne.w	sl, #3
 800b044:	f015 0508 	ands.w	r5, r5, #8
 800b048:	f000 80c7 	beq.w	800b1da <__gxx_personality_v0+0x226>
 800b04c:	f1ba 0f01 	cmp.w	sl, #1
 800b050:	f040 80be 	bne.w	800b1d0 <__gxx_personality_v0+0x21c>
 800b054:	f000 fb34 	bl	800b6c0 <_ZSt9terminatev>
 800b058:	2502      	movs	r5, #2
 800b05a:	e7da      	b.n	800b012 <__gxx_personality_v0+0x5e>
 800b05c:	2000      	movs	r0, #0
 800b05e:	e13b      	b.n	800b2d8 <__gxx_personality_v0+0x324>
 800b060:	9a07      	ldr	r2, [sp, #28]
 800b062:	4413      	add	r3, r2
 800b064:	42bb      	cmp	r3, r7
 800b066:	f240 813f 	bls.w	800b2e8 <__gxx_personality_v0+0x334>
 800b06a:	9f08      	ldr	r7, [sp, #32]
 800b06c:	b10f      	cbz	r7, 800b072 <__gxx_personality_v0+0xbe>
 800b06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b070:	441f      	add	r7, r3
 800b072:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b074:	b110      	cbz	r0, 800b07c <__gxx_personality_v0+0xc8>
 800b076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b078:	3801      	subs	r0, #1
 800b07a:	4418      	add	r0, r3
 800b07c:	2f00      	cmp	r7, #0
 800b07e:	d0ac      	beq.n	800afda <__gxx_personality_v0+0x26>
 800b080:	2800      	cmp	r0, #0
 800b082:	f000 8104 	beq.w	800b28e <__gxx_personality_v0+0x2da>
 800b086:	f015 0308 	ands.w	r3, r5, #8
 800b08a:	9302      	str	r3, [sp, #8]
 800b08c:	d034      	beq.n	800b0f8 <__gxx_personality_v0+0x144>
 800b08e:	2347      	movs	r3, #71	; 0x47
 800b090:	7023      	strb	r3, [r4, #0]
 800b092:	234e      	movs	r3, #78	; 0x4e
 800b094:	7063      	strb	r3, [r4, #1]
 800b096:	2355      	movs	r3, #85	; 0x55
 800b098:	70a3      	strb	r3, [r4, #2]
 800b09a:	2343      	movs	r3, #67	; 0x43
 800b09c:	70e3      	strb	r3, [r4, #3]
 800b09e:	2346      	movs	r3, #70	; 0x46
 800b0a0:	7123      	strb	r3, [r4, #4]
 800b0a2:	234f      	movs	r3, #79	; 0x4f
 800b0a4:	7163      	strb	r3, [r4, #5]
 800b0a6:	2352      	movs	r3, #82	; 0x52
 800b0a8:	71a3      	strb	r3, [r4, #6]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	71e3      	strb	r3, [r4, #7]
 800b0ae:	f04f 0a00 	mov.w	sl, #0
 800b0b2:	f06f 0b03 	mvn.w	fp, #3
 800b0b6:	a907      	add	r1, sp, #28
 800b0b8:	f7ff feaf 	bl	800ae1a <_ZL12read_sleb128PKhPl>
 800b0bc:	a908      	add	r1, sp, #32
 800b0be:	9003      	str	r0, [sp, #12]
 800b0c0:	f7ff feab 	bl	800ae1a <_ZL12read_sleb128PKhPl>
 800b0c4:	9907      	ldr	r1, [sp, #28]
 800b0c6:	2900      	cmp	r1, #0
 800b0c8:	d067      	beq.n	800b19a <__gxx_personality_v0+0x1e6>
 800b0ca:	dd3e      	ble.n	800b14a <__gxx_personality_v0+0x196>
 800b0cc:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800b0d0:	28ff      	cmp	r0, #255	; 0xff
 800b0d2:	d034      	beq.n	800b13e <__gxx_personality_v0+0x18a>
 800b0d4:	f000 0307 	and.w	r3, r0, #7
 800b0d8:	2b04      	cmp	r3, #4
 800b0da:	f63f af7a 	bhi.w	800afd2 <__gxx_personality_v0+0x1e>
 800b0de:	a201      	add	r2, pc, #4	; (adr r2, 800b0e4 <__gxx_personality_v0+0x130>)
 800b0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e4:	0800b10b 	.word	0x0800b10b
 800b0e8:	0800afd3 	.word	0x0800afd3
 800b0ec:	0800b145 	.word	0x0800b145
 800b0f0:	0800b10b 	.word	0x0800b10b
 800b0f4:	0800b139 	.word	0x0800b139
 800b0f8:	79e3      	ldrb	r3, [r4, #7]
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	bf0c      	ite	eq
 800b0fe:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 800b102:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	e7d1      	b.n	800b0ae <__gxx_personality_v0+0xfa>
 800b10a:	f04f 0c04 	mov.w	ip, #4
 800b10e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b110:	ab09      	add	r3, sp, #36	; 0x24
 800b112:	fb0c 2211 	mls	r2, ip, r1, r2
 800b116:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b118:	f7ff fe97 	bl	800ae4a <_ZL28read_encoded_value_with_basehjPKhPj>
 800b11c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b11e:	b131      	cbz	r1, 800b12e <__gxx_personality_v0+0x17a>
 800b120:	b37c      	cbz	r4, 800b182 <__gxx_personality_v0+0x1ce>
 800b122:	ab04      	add	r3, sp, #16
 800b124:	2200      	movs	r2, #0
 800b126:	4620      	mov	r0, r4
 800b128:	f7ff fdc4 	bl	800acb4 <__cxa_type_match>
 800b12c:	b348      	cbz	r0, 800b182 <__gxx_personality_v0+0x1ce>
 800b12e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800b132:	f04f 0a03 	mov.w	sl, #3
 800b136:	e038      	b.n	800b1aa <__gxx_personality_v0+0x1f6>
 800b138:	f04f 0c08 	mov.w	ip, #8
 800b13c:	e7e7      	b.n	800b10e <__gxx_personality_v0+0x15a>
 800b13e:	f04f 0c00 	mov.w	ip, #0
 800b142:	e7e4      	b.n	800b10e <__gxx_personality_v0+0x15a>
 800b144:	f04f 0c02 	mov.w	ip, #2
 800b148:	e7e1      	b.n	800b10e <__gxx_personality_v0+0x15a>
 800b14a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b14c:	fb01 b10b 	mla	r1, r1, fp, fp
 800b150:	eb03 0901 	add.w	r9, r3, r1
 800b154:	b1e4      	cbz	r4, 800b190 <__gxx_personality_v0+0x1dc>
 800b156:	9a02      	ldr	r2, [sp, #8]
 800b158:	b9d2      	cbnz	r2, 800b190 <__gxx_personality_v0+0x1dc>
 800b15a:	9b04      	ldr	r3, [sp, #16]
 800b15c:	9306      	str	r3, [sp, #24]
 800b15e:	f1a9 0904 	sub.w	r9, r9, #4
 800b162:	f859 1f04 	ldr.w	r1, [r9, #4]!
 800b166:	b141      	cbz	r1, 800b17a <__gxx_personality_v0+0x1c6>
 800b168:	ab06      	add	r3, sp, #24
 800b16a:	2200      	movs	r2, #0
 800b16c:	4449      	add	r1, r9
 800b16e:	4620      	mov	r0, r4
 800b170:	f7ff fda0 	bl	800acb4 <__cxa_type_match>
 800b174:	2800      	cmp	r0, #0
 800b176:	d0f4      	beq.n	800b162 <__gxx_personality_v0+0x1ae>
 800b178:	2101      	movs	r1, #1
 800b17a:	f081 0101 	eor.w	r1, r1, #1
 800b17e:	2900      	cmp	r1, #0
 800b180:	d1d5      	bne.n	800b12e <__gxx_personality_v0+0x17a>
 800b182:	9808      	ldr	r0, [sp, #32]
 800b184:	2800      	cmp	r0, #0
 800b186:	d07e      	beq.n	800b286 <__gxx_personality_v0+0x2d2>
 800b188:	9b03      	ldr	r3, [sp, #12]
 800b18a:	4403      	add	r3, r0
 800b18c:	4618      	mov	r0, r3
 800b18e:	e792      	b.n	800b0b6 <__gxx_personality_v0+0x102>
 800b190:	5859      	ldr	r1, [r3, r1]
 800b192:	fab1 f181 	clz	r1, r1
 800b196:	0949      	lsrs	r1, r1, #5
 800b198:	e7f1      	b.n	800b17e <__gxx_personality_v0+0x1ca>
 800b19a:	f04f 0a01 	mov.w	sl, #1
 800b19e:	e7f0      	b.n	800b182 <__gxx_personality_v0+0x1ce>
 800b1a0:	f04f 0900 	mov.w	r9, #0
 800b1a4:	464f      	mov	r7, r9
 800b1a6:	f04f 0a01 	mov.w	sl, #1
 800b1aa:	07eb      	lsls	r3, r5, #31
 800b1ac:	f57f af4a 	bpl.w	800b044 <__gxx_personality_v0+0x90>
 800b1b0:	f1ba 0f02 	cmp.w	sl, #2
 800b1b4:	f43f af11 	beq.w	800afda <__gxx_personality_v0+0x26>
 800b1b8:	210d      	movs	r1, #13
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	9d04      	ldr	r5, [sp, #16]
 800b1be:	f7ff fe88 	bl	800aed2 <_Unwind_GetGR>
 800b1c2:	e9c4 980a 	strd	r9, r8, [r4, #40]	; 0x28
 800b1c6:	e9c4 0508 	strd	r0, r5, [r4, #32]
 800b1ca:	6327      	str	r7, [r4, #48]	; 0x30
 800b1cc:	2006      	movs	r0, #6
 800b1ce:	e70a      	b.n	800afe6 <__gxx_personality_v0+0x32>
 800b1d0:	f1b9 0f00 	cmp.w	r9, #0
 800b1d4:	da2a      	bge.n	800b22c <__gxx_personality_v0+0x278>
 800b1d6:	f000 fa85 	bl	800b6e4 <_ZSt10unexpectedv>
 800b1da:	f1ba 0f01 	cmp.w	sl, #1
 800b1de:	d102      	bne.n	800b1e6 <__gxx_personality_v0+0x232>
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f000 fb5f 	bl	800b8a4 <__cxa_call_terminate>
 800b1e6:	f1b9 0f00 	cmp.w	r9, #0
 800b1ea:	da1f      	bge.n	800b22c <__gxx_personality_v0+0x278>
 800b1ec:	aa0a      	add	r2, sp, #40	; 0x28
 800b1ee:	4641      	mov	r1, r8
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f7ff feb0 	bl	800af56 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800b1f6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800b1fa:	28ff      	cmp	r0, #255	; 0xff
 800b1fc:	d00f      	beq.n	800b21e <__gxx_personality_v0+0x26a>
 800b1fe:	4631      	mov	r1, r6
 800b200:	f7ff fe73 	bl	800aeea <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800b204:	f06f 0303 	mvn.w	r3, #3
 800b208:	fb09 3203 	mla	r2, r9, r3, r3
 800b20c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b20e:	900c      	str	r0, [sp, #48]	; 0x30
 800b210:	4413      	add	r3, r2
 800b212:	2200      	movs	r2, #0
 800b214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b218:	b119      	cbz	r1, 800b222 <__gxx_personality_v0+0x26e>
 800b21a:	3201      	adds	r2, #1
 800b21c:	e7fa      	b.n	800b214 <__gxx_personality_v0+0x260>
 800b21e:	4628      	mov	r0, r5
 800b220:	e7f0      	b.n	800b204 <__gxx_personality_v0+0x250>
 800b222:	e9c4 200a 	strd	r2, r0, [r4, #40]	; 0x28
 800b226:	2204      	movs	r2, #4
 800b228:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 800b22c:	ab10      	add	r3, sp, #64	; 0x40
 800b22e:	4630      	mov	r0, r6
 800b230:	f843 4d1c 	str.w	r4, [r3, #-28]!
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	2300      	movs	r3, #0
 800b238:	461a      	mov	r2, r3
 800b23a:	4619      	mov	r1, r3
 800b23c:	f7f5 fb72 	bl	8000924 <_Unwind_VRS_Set>
 800b240:	ab10      	add	r3, sp, #64	; 0x40
 800b242:	2201      	movs	r2, #1
 800b244:	f843 9d20 	str.w	r9, [r3, #-32]!
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	2300      	movs	r3, #0
 800b24c:	4619      	mov	r1, r3
 800b24e:	4630      	mov	r0, r6
 800b250:	f7f5 fb68 	bl	8000924 <_Unwind_VRS_Set>
 800b254:	210f      	movs	r1, #15
 800b256:	4630      	mov	r0, r6
 800b258:	f7ff fe3b 	bl	800aed2 <_Unwind_GetGR>
 800b25c:	ab10      	add	r3, sp, #64	; 0x40
 800b25e:	f000 0001 	and.w	r0, r0, #1
 800b262:	4307      	orrs	r7, r0
 800b264:	f843 7d24 	str.w	r7, [r3, #-36]!
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	2300      	movs	r3, #0
 800b26c:	220f      	movs	r2, #15
 800b26e:	4619      	mov	r1, r3
 800b270:	4630      	mov	r0, r6
 800b272:	f7f5 fb57 	bl	8000924 <_Unwind_VRS_Set>
 800b276:	f1ba 0f02 	cmp.w	sl, #2
 800b27a:	d102      	bne.n	800b282 <__gxx_personality_v0+0x2ce>
 800b27c:	4620      	mov	r0, r4
 800b27e:	f7ff fd77 	bl	800ad70 <__cxa_begin_cleanup>
 800b282:	2007      	movs	r0, #7
 800b284:	e6af      	b.n	800afe6 <__gxx_personality_v0+0x32>
 800b286:	f1ba 0f00 	cmp.w	sl, #0
 800b28a:	f43f aea6 	beq.w	800afda <__gxx_personality_v0+0x26>
 800b28e:	4681      	mov	r9, r0
 800b290:	f04f 0a02 	mov.w	sl, #2
 800b294:	e789      	b.n	800b1aa <__gxx_personality_v0+0x1f6>
 800b296:	aa10      	add	r2, sp, #64	; 0x40
 800b298:	4643      	mov	r3, r8
 800b29a:	f842 4d2c 	str.w	r4, [r2, #-44]!
 800b29e:	4641      	mov	r1, r8
 800b2a0:	9200      	str	r2, [sp, #0]
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	220c      	movs	r2, #12
 800b2a6:	f045 0502 	orr.w	r5, r5, #2
 800b2aa:	f7f5 fb3b 	bl	8000924 <_Unwind_VRS_Set>
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f7f6 f8c2 	bl	8001438 <_Unwind_GetLanguageSpecificData>
 800b2b4:	4680      	mov	r8, r0
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	f43f ae8f 	beq.w	800afda <__gxx_personality_v0+0x26>
 800b2bc:	4601      	mov	r1, r0
 800b2be:	aa0a      	add	r2, sp, #40	; 0x28
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	f7ff fe48 	bl	800af56 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800b2c6:	4681      	mov	r9, r0
 800b2c8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800b2cc:	28ff      	cmp	r0, #255	; 0xff
 800b2ce:	f43f aec5 	beq.w	800b05c <__gxx_personality_v0+0xa8>
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	f7ff fe09 	bl	800aeea <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800b2d8:	900c      	str	r0, [sp, #48]	; 0x30
 800b2da:	210f      	movs	r1, #15
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f7ff fdf8 	bl	800aed2 <_Unwind_GetGR>
 800b2e2:	f020 0001 	bic.w	r0, r0, #1
 800b2e6:	1e47      	subs	r7, r0, #1
 800b2e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b2ea:	454b      	cmp	r3, r9
 800b2ec:	f67f af58 	bls.w	800b1a0 <__gxx_personality_v0+0x1ec>
 800b2f0:	464a      	mov	r2, r9
 800b2f2:	ab06      	add	r3, sp, #24
 800b2f4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800b2f8:	2000      	movs	r0, #0
 800b2fa:	f7ff fe18 	bl	800af2e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800b2fe:	ab07      	add	r3, sp, #28
 800b300:	4602      	mov	r2, r0
 800b302:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800b306:	2000      	movs	r0, #0
 800b308:	f7ff fe11 	bl	800af2e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800b30c:	ab08      	add	r3, sp, #32
 800b30e:	4602      	mov	r2, r0
 800b310:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800b314:	2000      	movs	r0, #0
 800b316:	f7ff fe0a 	bl	800af2e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800b31a:	a909      	add	r1, sp, #36	; 0x24
 800b31c:	f7ff fd6c 	bl	800adf8 <_ZL12read_uleb128PKhPm>
 800b320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b322:	9a06      	ldr	r2, [sp, #24]
 800b324:	4413      	add	r3, r2
 800b326:	42bb      	cmp	r3, r7
 800b328:	4681      	mov	r9, r0
 800b32a:	f67f ae99 	bls.w	800b060 <__gxx_personality_v0+0xac>
 800b32e:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800b332:	e7d9      	b.n	800b2e8 <__gxx_personality_v0+0x334>

0800b334 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 800b334:	2801      	cmp	r0, #1
 800b336:	b510      	push	{r4, lr}
 800b338:	d903      	bls.n	800b342 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 800b33a:	f851 0c14 	ldr.w	r0, [r1, #-20]
 800b33e:	f000 f9b3 	bl	800b6a8 <_ZN10__cxxabiv111__terminateEPFvvE>
 800b342:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 800b346:	f3bf 8f5b 	dmb	ish
 800b34a:	e853 2f00 	ldrex	r2, [r3]
 800b34e:	3a01      	subs	r2, #1
 800b350:	e843 2000 	strex	r0, r2, [r3]
 800b354:	2800      	cmp	r0, #0
 800b356:	d1f8      	bne.n	800b34a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 800b358:	f3bf 8f5b 	dmb	ish
 800b35c:	b95a      	cbnz	r2, 800b376 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 800b35e:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800b362:	f101 0458 	add.w	r4, r1, #88	; 0x58
 800b366:	b10b      	cbz	r3, 800b36c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x38>
 800b368:	4620      	mov	r0, r4
 800b36a:	4798      	blx	r3
 800b36c:	4620      	mov	r0, r4
 800b36e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b372:	f000 ba33 	b.w	800b7dc <__cxa_free_exception>
 800b376:	bd10      	pop	{r4, pc}

0800b378 <__cxa_init_primary_exception>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	2500      	movs	r5, #0
 800b37c:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 800b380:	f840 5c80 	str.w	r5, [r0, #-128]
 800b384:	4604      	mov	r4, r0
 800b386:	f000 f9a5 	bl	800b6d4 <_ZSt14get_unexpectedv>
 800b38a:	f844 0c70 	str.w	r0, [r4, #-112]
 800b38e:	f000 f98f 	bl	800b6b0 <_ZSt13get_terminatev>
 800b392:	2347      	movs	r3, #71	; 0x47
 800b394:	f804 3c58 	strb.w	r3, [r4, #-88]
 800b398:	234e      	movs	r3, #78	; 0x4e
 800b39a:	f804 3c57 	strb.w	r3, [r4, #-87]
 800b39e:	2355      	movs	r3, #85	; 0x55
 800b3a0:	f804 3c56 	strb.w	r3, [r4, #-86]
 800b3a4:	2343      	movs	r3, #67	; 0x43
 800b3a6:	f804 3c55 	strb.w	r3, [r4, #-85]
 800b3aa:	f804 3c54 	strb.w	r3, [r4, #-84]
 800b3ae:	232b      	movs	r3, #43	; 0x2b
 800b3b0:	f804 3c53 	strb.w	r3, [r4, #-83]
 800b3b4:	f804 3c52 	strb.w	r3, [r4, #-82]
 800b3b8:	4b04      	ldr	r3, [pc, #16]	; (800b3cc <__cxa_init_primary_exception+0x54>)
 800b3ba:	f844 0c6c 	str.w	r0, [r4, #-108]
 800b3be:	f804 5c51 	strb.w	r5, [r4, #-81]
 800b3c2:	f844 3c50 	str.w	r3, [r4, #-80]
 800b3c6:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	0800b335 	.word	0x0800b335

0800b3d0 <__cxa_throw>:
 800b3d0:	b508      	push	{r3, lr}
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	460d      	mov	r5, r1
 800b3d6:	4616      	mov	r6, r2
 800b3d8:	f7ff fd08 	bl	800adec <__cxa_get_globals>
 800b3dc:	6843      	ldr	r3, [r0, #4]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	6043      	str	r3, [r0, #4]
 800b3e2:	4632      	mov	r2, r6
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f7ff ffc6 	bl	800b378 <__cxa_init_primary_exception>
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	f844 3b28 	str.w	r3, [r4], #40
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f7f5 fe1d 	bl	8001034 <_Unwind_RaiseException>
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 f856 	bl	800b4ac <__cxa_begin_catch>
 800b400:	f000 f95e 	bl	800b6c0 <_ZSt9terminatev>

0800b404 <__cxa_rethrow>:
 800b404:	b508      	push	{r3, lr}
 800b406:	f7ff fcf1 	bl	800adec <__cxa_get_globals>
 800b40a:	e9d0 4200 	ldrd	r4, r2, [r0]
 800b40e:	3201      	adds	r2, #1
 800b410:	6042      	str	r2, [r0, #4]
 800b412:	b34c      	cbz	r4, 800b468 <__cxa_rethrow+0x64>
 800b414:	f894 2020 	ldrb.w	r2, [r4, #32]
 800b418:	2a47      	cmp	r2, #71	; 0x47
 800b41a:	d127      	bne.n	800b46c <__cxa_rethrow+0x68>
 800b41c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800b420:	2a4e      	cmp	r2, #78	; 0x4e
 800b422:	d123      	bne.n	800b46c <__cxa_rethrow+0x68>
 800b424:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800b428:	2a55      	cmp	r2, #85	; 0x55
 800b42a:	d11f      	bne.n	800b46c <__cxa_rethrow+0x68>
 800b42c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800b430:	2a43      	cmp	r2, #67	; 0x43
 800b432:	d11b      	bne.n	800b46c <__cxa_rethrow+0x68>
 800b434:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800b438:	2a43      	cmp	r2, #67	; 0x43
 800b43a:	d117      	bne.n	800b46c <__cxa_rethrow+0x68>
 800b43c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800b440:	2a2b      	cmp	r2, #43	; 0x2b
 800b442:	d113      	bne.n	800b46c <__cxa_rethrow+0x68>
 800b444:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800b448:	2a2b      	cmp	r2, #43	; 0x2b
 800b44a:	d10f      	bne.n	800b46c <__cxa_rethrow+0x68>
 800b44c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800b450:	2a01      	cmp	r2, #1
 800b452:	d80b      	bhi.n	800b46c <__cxa_rethrow+0x68>
 800b454:	6962      	ldr	r2, [r4, #20]
 800b456:	4252      	negs	r2, r2
 800b458:	6162      	str	r2, [r4, #20]
 800b45a:	3420      	adds	r4, #32
 800b45c:	4620      	mov	r0, r4
 800b45e:	f7f5 fe0d 	bl	800107c <_Unwind_Resume_or_Rethrow>
 800b462:	4620      	mov	r0, r4
 800b464:	f000 f822 	bl	800b4ac <__cxa_begin_catch>
 800b468:	f000 f92a 	bl	800b6c0 <_ZSt9terminatev>
 800b46c:	2200      	movs	r2, #0
 800b46e:	6002      	str	r2, [r0, #0]
 800b470:	e7f3      	b.n	800b45a <__cxa_rethrow+0x56>

0800b472 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800b472:	7803      	ldrb	r3, [r0, #0]
 800b474:	2b47      	cmp	r3, #71	; 0x47
 800b476:	d117      	bne.n	800b4a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b478:	7843      	ldrb	r3, [r0, #1]
 800b47a:	2b4e      	cmp	r3, #78	; 0x4e
 800b47c:	d114      	bne.n	800b4a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b47e:	7883      	ldrb	r3, [r0, #2]
 800b480:	2b55      	cmp	r3, #85	; 0x55
 800b482:	d111      	bne.n	800b4a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b484:	78c3      	ldrb	r3, [r0, #3]
 800b486:	2b43      	cmp	r3, #67	; 0x43
 800b488:	d10e      	bne.n	800b4a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b48a:	7903      	ldrb	r3, [r0, #4]
 800b48c:	2b43      	cmp	r3, #67	; 0x43
 800b48e:	d10b      	bne.n	800b4a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b490:	7943      	ldrb	r3, [r0, #5]
 800b492:	2b2b      	cmp	r3, #43	; 0x2b
 800b494:	d108      	bne.n	800b4a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b496:	7983      	ldrb	r3, [r0, #6]
 800b498:	2b2b      	cmp	r3, #43	; 0x2b
 800b49a:	d105      	bne.n	800b4a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b49c:	79c0      	ldrb	r0, [r0, #7]
 800b49e:	2801      	cmp	r0, #1
 800b4a0:	bf8c      	ite	hi
 800b4a2:	2000      	movhi	r0, #0
 800b4a4:	2001      	movls	r0, #1
 800b4a6:	4770      	bx	lr
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	4770      	bx	lr

0800b4ac <__cxa_begin_catch>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	f7ff fc9c 	bl	800adec <__cxa_get_globals>
 800b4b4:	4601      	mov	r1, r0
 800b4b6:	6802      	ldr	r2, [r0, #0]
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f1a5 0420 	sub.w	r4, r5, #32
 800b4be:	f7ff ffd8 	bl	800b472 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800b4c2:	b930      	cbnz	r0, 800b4d2 <__cxa_begin_catch+0x26>
 800b4c4:	b10a      	cbz	r2, 800b4ca <__cxa_begin_catch+0x1e>
 800b4c6:	f000 f8fb 	bl	800b6c0 <_ZSt9terminatev>
 800b4ca:	600c      	str	r4, [r1, #0]
 800b4cc:	4614      	mov	r4, r2
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	bd38      	pop	{r3, r4, r5, pc}
 800b4d2:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	bfb4      	ite	lt
 800b4da:	f1c3 0301 	rsblt	r3, r3, #1
 800b4de:	3301      	addge	r3, #1
 800b4e0:	f845 3c0c 	str.w	r3, [r5, #-12]
 800b4e4:	684b      	ldr	r3, [r1, #4]
 800b4e6:	42a2      	cmp	r2, r4
 800b4e8:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4ec:	604b      	str	r3, [r1, #4]
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	bf1c      	itt	ne
 800b4f2:	f845 2c10 	strne.w	r2, [r5, #-16]
 800b4f6:	600c      	strne	r4, [r1, #0]
 800b4f8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800b4fa:	f7f5 f9e9 	bl	80008d0 <_Unwind_Complete>
 800b4fe:	e7e6      	b.n	800b4ce <__cxa_begin_catch+0x22>

0800b500 <__cxa_end_catch>:
 800b500:	b510      	push	{r4, lr}
 800b502:	f7ff fc6f 	bl	800ade4 <__cxa_get_globals_fast>
 800b506:	6802      	ldr	r2, [r0, #0]
 800b508:	4601      	mov	r1, r0
 800b50a:	b19a      	cbz	r2, 800b534 <__cxa_end_catch+0x34>
 800b50c:	f102 0420 	add.w	r4, r2, #32
 800b510:	4620      	mov	r0, r4
 800b512:	f7ff ffae 	bl	800b472 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800b516:	b928      	cbnz	r0, 800b524 <__cxa_end_catch+0x24>
 800b518:	6008      	str	r0, [r1, #0]
 800b51a:	4620      	mov	r0, r4
 800b51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b520:	f7f5 b9d8 	b.w	80008d4 <_Unwind_DeleteException>
 800b524:	6953      	ldr	r3, [r2, #20]
 800b526:	2b00      	cmp	r3, #0
 800b528:	da05      	bge.n	800b536 <__cxa_end_catch+0x36>
 800b52a:	3301      	adds	r3, #1
 800b52c:	d101      	bne.n	800b532 <__cxa_end_catch+0x32>
 800b52e:	6910      	ldr	r0, [r2, #16]
 800b530:	6008      	str	r0, [r1, #0]
 800b532:	6153      	str	r3, [r2, #20]
 800b534:	bd10      	pop	{r4, pc}
 800b536:	3b01      	subs	r3, #1
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <__cxa_end_catch+0x42>
 800b53c:	6913      	ldr	r3, [r2, #16]
 800b53e:	600b      	str	r3, [r1, #0]
 800b540:	e7eb      	b.n	800b51a <__cxa_end_catch+0x1a>
 800b542:	daf6      	bge.n	800b532 <__cxa_end_catch+0x32>
 800b544:	f000 f8bc 	bl	800b6c0 <_ZSt9terminatev>

0800b548 <_Znwj>:
 800b548:	b510      	push	{r4, lr}
 800b54a:	2800      	cmp	r0, #0
 800b54c:	bf14      	ite	ne
 800b54e:	4604      	movne	r4, r0
 800b550:	2401      	moveq	r4, #1
 800b552:	4620      	mov	r0, r4
 800b554:	f000 fbf6 	bl	800bd44 <malloc>
 800b558:	b930      	cbnz	r0, 800b568 <_Znwj+0x20>
 800b55a:	f000 f89b 	bl	800b694 <_ZSt15get_new_handlerv>
 800b55e:	b908      	cbnz	r0, 800b564 <_Znwj+0x1c>
 800b560:	f000 faf5 	bl	800bb4e <abort>
 800b564:	4780      	blx	r0
 800b566:	e7f4      	b.n	800b552 <_Znwj+0xa>
 800b568:	bd10      	pop	{r4, pc}
	...

0800b56c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 800b56c:	b510      	push	{r4, lr}
 800b56e:	4b03      	ldr	r3, [pc, #12]	; (800b57c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	4604      	mov	r4, r0
 800b574:	f000 f95c 	bl	800b830 <_ZNSt9type_infoD1Ev>
 800b578:	4620      	mov	r0, r4
 800b57a:	bd10      	pop	{r4, pc}
 800b57c:	0800c914 	.word	0x0800c914

0800b580 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 800b580:	b510      	push	{r4, lr}
 800b582:	4604      	mov	r4, r0
 800b584:	f7ff fff2 	bl	800b56c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 800b588:	4620      	mov	r0, r4
 800b58a:	2108      	movs	r1, #8
 800b58c:	f7ff fc32 	bl	800adf4 <_ZdlPvj>
 800b590:	4620      	mov	r0, r4
 800b592:	bd10      	pop	{r4, pc}

0800b594 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800b594:	b510      	push	{r4, lr}
 800b596:	4b03      	ldr	r3, [pc, #12]	; (800b5a4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800b598:	6003      	str	r3, [r0, #0]
 800b59a:	4604      	mov	r4, r0
 800b59c:	f000 f9fe 	bl	800b99c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	bd10      	pop	{r4, pc}
 800b5a4:	0800c968 	.word	0x0800c968

0800b5a8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800b5a8:	b510      	push	{r4, lr}
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	f7ff fff2 	bl	800b594 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	210c      	movs	r1, #12
 800b5b4:	f7ff fc1e 	bl	800adf4 <_ZdlPvj>
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	bd10      	pop	{r4, pc}

0800b5bc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800b5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c0:	9e06      	ldr	r6, [sp, #24]
 800b5c2:	4296      	cmp	r6, r2
 800b5c4:	4607      	mov	r7, r0
 800b5c6:	4688      	mov	r8, r1
 800b5c8:	4615      	mov	r5, r2
 800b5ca:	461c      	mov	r4, r3
 800b5cc:	d00a      	beq.n	800b5e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 800b5ce:	68b8      	ldr	r0, [r7, #8]
 800b5d0:	6803      	ldr	r3, [r0, #0]
 800b5d2:	9606      	str	r6, [sp, #24]
 800b5d4:	6a1e      	ldr	r6, [r3, #32]
 800b5d6:	462a      	mov	r2, r5
 800b5d8:	4623      	mov	r3, r4
 800b5da:	4641      	mov	r1, r8
 800b5dc:	46b4      	mov	ip, r6
 800b5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e2:	4760      	bx	ip
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	f000 f928 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	d0ef      	beq.n	800b5ce <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 800b5ee:	2006      	movs	r0, #6
 800b5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b5f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800b5f4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f8:	460e      	mov	r6, r1
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	4683      	mov	fp, r0
 800b5fe:	4617      	mov	r7, r2
 800b600:	4699      	mov	r9, r3
 800b602:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 800b606:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 800b60a:	f000 f916 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800b60e:	b190      	cbz	r0, 800b636 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 800b610:	2e00      	cmp	r6, #0
 800b612:	602c      	str	r4, [r5, #0]
 800b614:	712f      	strb	r7, [r5, #4]
 800b616:	db09      	blt.n	800b62c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800b618:	4434      	add	r4, r6
 800b61a:	45a0      	cmp	r8, r4
 800b61c:	bf0c      	ite	eq
 800b61e:	2406      	moveq	r4, #6
 800b620:	2401      	movne	r4, #1
 800b622:	71ac      	strb	r4, [r5, #6]
 800b624:	2000      	movs	r0, #0
 800b626:	b001      	add	sp, #4
 800b628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62c:	3602      	adds	r6, #2
 800b62e:	d1f9      	bne.n	800b624 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800b630:	2301      	movs	r3, #1
 800b632:	71ab      	strb	r3, [r5, #6]
 800b634:	e7f6      	b.n	800b624 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800b636:	4544      	cmp	r4, r8
 800b638:	d106      	bne.n	800b648 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800b63a:	4651      	mov	r1, sl
 800b63c:	4658      	mov	r0, fp
 800b63e:	f000 f8fc 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800b642:	b108      	cbz	r0, 800b648 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800b644:	716f      	strb	r7, [r5, #5]
 800b646:	e7ed      	b.n	800b624 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800b648:	f8db 0008 	ldr.w	r0, [fp, #8]
 800b64c:	6803      	ldr	r3, [r0, #0]
 800b64e:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 800b652:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 800b656:	69dc      	ldr	r4, [r3, #28]
 800b658:	463a      	mov	r2, r7
 800b65a:	464b      	mov	r3, r9
 800b65c:	4631      	mov	r1, r6
 800b65e:	46a4      	mov	ip, r4
 800b660:	b001      	add	sp, #4
 800b662:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b666:	4760      	bx	ip

0800b668 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800b668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66c:	4604      	mov	r4, r0
 800b66e:	460d      	mov	r5, r1
 800b670:	4616      	mov	r6, r2
 800b672:	461f      	mov	r7, r3
 800b674:	f000 f9c3 	bl	800b9fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800b678:	b948      	cbnz	r0, 800b68e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800b67a:	68a0      	ldr	r0, [r4, #8]
 800b67c:	6803      	ldr	r3, [r0, #0]
 800b67e:	699c      	ldr	r4, [r3, #24]
 800b680:	4632      	mov	r2, r6
 800b682:	463b      	mov	r3, r7
 800b684:	4629      	mov	r1, r5
 800b686:	46a4      	mov	ip, r4
 800b688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b68c:	4760      	bx	ip
 800b68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b694 <_ZSt15get_new_handlerv>:
 800b694:	4b02      	ldr	r3, [pc, #8]	; (800b6a0 <_ZSt15get_new_handlerv+0xc>)
 800b696:	6818      	ldr	r0, [r3, #0]
 800b698:	f3bf 8f5b 	dmb	ish
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	20000ea0 	.word	0x20000ea0

0800b6a4 <_ZdlPv>:
 800b6a4:	f000 bb56 	b.w	800bd54 <free>

0800b6a8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b6a8:	b508      	push	{r3, lr}
 800b6aa:	4780      	blx	r0
 800b6ac:	f000 fa4f 	bl	800bb4e <abort>

0800b6b0 <_ZSt13get_terminatev>:
 800b6b0:	4b02      	ldr	r3, [pc, #8]	; (800b6bc <_ZSt13get_terminatev+0xc>)
 800b6b2:	6818      	ldr	r0, [r3, #0]
 800b6b4:	f3bf 8f5b 	dmb	ish
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	20000018 	.word	0x20000018

0800b6c0 <_ZSt9terminatev>:
 800b6c0:	b508      	push	{r3, lr}
 800b6c2:	f7ff fff5 	bl	800b6b0 <_ZSt13get_terminatev>
 800b6c6:	f7ff ffef 	bl	800b6a8 <_ZN10__cxxabiv111__terminateEPFvvE>

0800b6ca <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800b6ca:	b508      	push	{r3, lr}
 800b6cc:	4780      	blx	r0
 800b6ce:	f7ff fff7 	bl	800b6c0 <_ZSt9terminatev>
	...

0800b6d4 <_ZSt14get_unexpectedv>:
 800b6d4:	4b02      	ldr	r3, [pc, #8]	; (800b6e0 <_ZSt14get_unexpectedv+0xc>)
 800b6d6:	6818      	ldr	r0, [r3, #0]
 800b6d8:	f3bf 8f5b 	dmb	ish
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	20000014 	.word	0x20000014

0800b6e4 <_ZSt10unexpectedv>:
 800b6e4:	b508      	push	{r3, lr}
 800b6e6:	f7ff fff5 	bl	800b6d4 <_ZSt14get_unexpectedv>
 800b6ea:	f7ff ffee 	bl	800b6ca <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

0800b6f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 800b6f0:	4a1c      	ldr	r2, [pc, #112]	; (800b764 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x74>)
 800b6f2:	6853      	ldr	r3, [r2, #4]
 800b6f4:	b570      	push	{r4, r5, r6, lr}
 800b6f6:	f1a0 0408 	sub.w	r4, r0, #8
 800b6fa:	4616      	mov	r6, r2
 800b6fc:	b123      	cbz	r3, 800b708 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x18>
 800b6fe:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b702:	1865      	adds	r5, r4, r1
 800b704:	42ab      	cmp	r3, r5
 800b706:	d903      	bls.n	800b710 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
 800b708:	f840 3c04 	str.w	r3, [r0, #-4]
 800b70c:	6074      	str	r4, [r6, #4]
 800b70e:	bd70      	pop	{r4, r5, r6, pc}
 800b710:	d108      	bne.n	800b724 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 800b712:	681d      	ldr	r5, [r3, #0]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	f840 3c04 	str.w	r3, [r0, #-4]
 800b71a:	4429      	add	r1, r5
 800b71c:	f840 1c08 	str.w	r1, [r0, #-8]
 800b720:	6054      	str	r4, [r2, #4]
 800b722:	e7f4      	b.n	800b70e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x1e>
 800b724:	3204      	adds	r2, #4
 800b726:	685e      	ldr	r6, [r3, #4]
 800b728:	b126      	cbz	r6, 800b734 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 800b72a:	42b5      	cmp	r5, r6
 800b72c:	d202      	bcs.n	800b734 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 800b72e:	1d1a      	adds	r2, r3, #4
 800b730:	4633      	mov	r3, r6
 800b732:	e7f8      	b.n	800b726 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x36>
 800b734:	42b5      	cmp	r5, r6
 800b736:	bf02      	ittt	eq
 800b738:	682e      	ldreq	r6, [r5, #0]
 800b73a:	686d      	ldreq	r5, [r5, #4]
 800b73c:	605d      	streq	r5, [r3, #4]
 800b73e:	6813      	ldr	r3, [r2, #0]
 800b740:	681d      	ldr	r5, [r3, #0]
 800b742:	bf08      	it	eq
 800b744:	1989      	addeq	r1, r1, r6
 800b746:	195e      	adds	r6, r3, r5
 800b748:	42b4      	cmp	r4, r6
 800b74a:	bf1f      	itttt	ne
 800b74c:	685b      	ldrne	r3, [r3, #4]
 800b74e:	f840 3c04 	strne.w	r3, [r0, #-4]
 800b752:	6813      	ldrne	r3, [r2, #0]
 800b754:	f840 1c08 	strne.w	r1, [r0, #-8]
 800b758:	bf06      	itte	eq
 800b75a:	1949      	addeq	r1, r1, r5
 800b75c:	6019      	streq	r1, [r3, #0]
 800b75e:	605c      	strne	r4, [r3, #4]
 800b760:	e7d5      	b.n	800b70e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x1e>
 800b762:	bf00      	nop
 800b764:	20000ea4 	.word	0x20000ea4

0800b768 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 800b768:	f100 0308 	add.w	r3, r0, #8
 800b76c:	b530      	push	{r4, r5, lr}
 800b76e:	2b08      	cmp	r3, #8
 800b770:	4a0e      	ldr	r2, [pc, #56]	; (800b7ac <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x44>)
 800b772:	bf38      	it	cc
 800b774:	2308      	movcc	r3, #8
 800b776:	3307      	adds	r3, #7
 800b778:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b77c:	f023 0307 	bic.w	r3, r3, #7
 800b780:	b168      	cbz	r0, 800b79e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x36>
 800b782:	e9d0 1400 	ldrd	r1, r4, [r0]
 800b786:	428b      	cmp	r3, r1
 800b788:	d90a      	bls.n	800b7a0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x38>
 800b78a:	1d02      	adds	r2, r0, #4
 800b78c:	4620      	mov	r0, r4
 800b78e:	e7f7      	b.n	800b780 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x18>
 800b790:	18c5      	adds	r5, r0, r3
 800b792:	606c      	str	r4, [r5, #4]
 800b794:	50c1      	str	r1, [r0, r3]
 800b796:	6810      	ldr	r0, [r2, #0]
 800b798:	6003      	str	r3, [r0, #0]
 800b79a:	6015      	str	r5, [r2, #0]
 800b79c:	3008      	adds	r0, #8
 800b79e:	bd30      	pop	{r4, r5, pc}
 800b7a0:	1ac9      	subs	r1, r1, r3
 800b7a2:	2907      	cmp	r1, #7
 800b7a4:	d8f4      	bhi.n	800b790 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 800b7a6:	6014      	str	r4, [r2, #0]
 800b7a8:	e7f8      	b.n	800b79c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 800b7aa:	bf00      	nop
 800b7ac:	20000ea4 	.word	0x20000ea4

0800b7b0 <__cxa_allocate_exception>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	f100 0480 	add.w	r4, r0, #128	; 0x80
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 fac4 	bl	800bd44 <malloc>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	b930      	cbnz	r0, 800b7ce <__cxa_allocate_exception+0x1e>
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f7ff ffd1 	bl	800b768 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	b908      	cbnz	r0, 800b7ce <__cxa_allocate_exception+0x1e>
 800b7ca:	f7ff ff79 	bl	800b6c0 <_ZSt9terminatev>
 800b7ce:	2280      	movs	r2, #128	; 0x80
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 faea 	bl	800bdac <memset>
 800b7d8:	3080      	adds	r0, #128	; 0x80
 800b7da:	bd10      	pop	{r4, pc}

0800b7dc <__cxa_free_exception>:
 800b7dc:	4a06      	ldr	r2, [pc, #24]	; (800b7f8 <__cxa_free_exception+0x1c>)
 800b7de:	6893      	ldr	r3, [r2, #8]
 800b7e0:	3880      	subs	r0, #128	; 0x80
 800b7e2:	4298      	cmp	r0, r3
 800b7e4:	d905      	bls.n	800b7f2 <__cxa_free_exception+0x16>
 800b7e6:	68d2      	ldr	r2, [r2, #12]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	4298      	cmp	r0, r3
 800b7ec:	d201      	bcs.n	800b7f2 <__cxa_free_exception+0x16>
 800b7ee:	f7ff bf7f 	b.w	800b6f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 800b7f2:	f000 baaf 	b.w	800bd54 <free>
 800b7f6:	bf00      	nop
 800b7f8:	20000ea4 	.word	0x20000ea4

0800b7fc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	4c08      	ldr	r4, [pc, #32]	; (800b820 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 800b800:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 800b804:	4628      	mov	r0, r5
 800b806:	60e5      	str	r5, [r4, #12]
 800b808:	f000 fa9c 	bl	800bd44 <malloc>
 800b80c:	60a0      	str	r0, [r4, #8]
 800b80e:	b910      	cbnz	r0, 800b816 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 800b810:	60e0      	str	r0, [r4, #12]
 800b812:	6060      	str	r0, [r4, #4]
 800b814:	bd38      	pop	{r3, r4, r5, pc}
 800b816:	2300      	movs	r3, #0
 800b818:	6060      	str	r0, [r4, #4]
 800b81a:	6005      	str	r5, [r0, #0]
 800b81c:	6043      	str	r3, [r0, #4]
 800b81e:	e7f9      	b.n	800b814 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 800b820:	20000ea4 	.word	0x20000ea4

0800b824 <_ZSt17__throw_bad_allocv>:
 800b824:	b508      	push	{r3, lr}
 800b826:	f000 f992 	bl	800bb4e <abort>

0800b82a <_ZSt20__throw_length_errorPKc>:
 800b82a:	b508      	push	{r3, lr}
 800b82c:	f000 f98f 	bl	800bb4e <abort>

0800b830 <_ZNSt9type_infoD1Ev>:
 800b830:	4770      	bx	lr

0800b832 <_ZNKSt9type_info14__is_pointer_pEv>:
 800b832:	2000      	movs	r0, #0
 800b834:	4770      	bx	lr

0800b836 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 800b836:	2000      	movs	r0, #0
 800b838:	4770      	bx	lr

0800b83a <_ZNKSt9type_infoeqERKS_>:
 800b83a:	4281      	cmp	r1, r0
 800b83c:	b508      	push	{r3, lr}
 800b83e:	d00e      	beq.n	800b85e <_ZNKSt9type_infoeqERKS_+0x24>
 800b840:	6840      	ldr	r0, [r0, #4]
 800b842:	7803      	ldrb	r3, [r0, #0]
 800b844:	2b2a      	cmp	r3, #42	; 0x2a
 800b846:	d00c      	beq.n	800b862 <_ZNKSt9type_infoeqERKS_+0x28>
 800b848:	6849      	ldr	r1, [r1, #4]
 800b84a:	780b      	ldrb	r3, [r1, #0]
 800b84c:	2b2a      	cmp	r3, #42	; 0x2a
 800b84e:	bf08      	it	eq
 800b850:	3101      	addeq	r1, #1
 800b852:	f7f4 fcf5 	bl	8000240 <strcmp>
 800b856:	fab0 f080 	clz	r0, r0
 800b85a:	0940      	lsrs	r0, r0, #5
 800b85c:	bd08      	pop	{r3, pc}
 800b85e:	2001      	movs	r0, #1
 800b860:	e7fc      	b.n	800b85c <_ZNKSt9type_infoeqERKS_+0x22>
 800b862:	2000      	movs	r0, #0
 800b864:	e7fa      	b.n	800b85c <_ZNKSt9type_infoeqERKS_+0x22>

0800b866 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 800b866:	f7ff bfe8 	b.w	800b83a <_ZNKSt9type_infoeqERKS_>

0800b86a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800b86a:	7803      	ldrb	r3, [r0, #0]
 800b86c:	2b47      	cmp	r3, #71	; 0x47
 800b86e:	d117      	bne.n	800b8a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b870:	7843      	ldrb	r3, [r0, #1]
 800b872:	2b4e      	cmp	r3, #78	; 0x4e
 800b874:	d114      	bne.n	800b8a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b876:	7883      	ldrb	r3, [r0, #2]
 800b878:	2b55      	cmp	r3, #85	; 0x55
 800b87a:	d111      	bne.n	800b8a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b87c:	78c3      	ldrb	r3, [r0, #3]
 800b87e:	2b43      	cmp	r3, #67	; 0x43
 800b880:	d10e      	bne.n	800b8a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b882:	7903      	ldrb	r3, [r0, #4]
 800b884:	2b43      	cmp	r3, #67	; 0x43
 800b886:	d10b      	bne.n	800b8a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b888:	7943      	ldrb	r3, [r0, #5]
 800b88a:	2b2b      	cmp	r3, #43	; 0x2b
 800b88c:	d108      	bne.n	800b8a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b88e:	7983      	ldrb	r3, [r0, #6]
 800b890:	2b2b      	cmp	r3, #43	; 0x2b
 800b892:	d105      	bne.n	800b8a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800b894:	79c0      	ldrb	r0, [r0, #7]
 800b896:	2801      	cmp	r0, #1
 800b898:	bf8c      	ite	hi
 800b89a:	2000      	movhi	r0, #0
 800b89c:	2001      	movls	r0, #1
 800b89e:	4770      	bx	lr
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	4770      	bx	lr

0800b8a4 <__cxa_call_terminate>:
 800b8a4:	b510      	push	{r4, lr}
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	b148      	cbz	r0, 800b8be <__cxa_call_terminate+0x1a>
 800b8aa:	f7ff fdff 	bl	800b4ac <__cxa_begin_catch>
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f7ff ffdb 	bl	800b86a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800b8b4:	b118      	cbz	r0, 800b8be <__cxa_call_terminate+0x1a>
 800b8b6:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800b8ba:	f7ff fef5 	bl	800b6a8 <_ZN10__cxxabiv111__terminateEPFvvE>
 800b8be:	f7ff feff 	bl	800b6c0 <_ZSt9terminatev>

0800b8c2 <__cxa_call_unexpected>:
 800b8c2:	b538      	push	{r3, r4, r5, lr}
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	f7ff ffd0 	bl	800b86a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800b8ca:	b140      	cbz	r0, 800b8de <__cxa_call_unexpected+0x1c>
 800b8cc:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800b8d0:	2500      	movs	r5, #0
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	f7ff fdea 	bl	800b4ac <__cxa_begin_catch>
 800b8d8:	b125      	cbz	r5, 800b8e4 <__cxa_call_unexpected+0x22>
 800b8da:	f7ff ff03 	bl	800b6e4 <_ZSt10unexpectedv>
 800b8de:	4604      	mov	r4, r0
 800b8e0:	2501      	movs	r5, #1
 800b8e2:	e7f6      	b.n	800b8d2 <__cxa_call_unexpected+0x10>
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f7ff fef0 	bl	800b6ca <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800b8ea <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	4770      	bx	lr
	...

0800b8f0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 800b8f0:	b510      	push	{r4, lr}
 800b8f2:	4b03      	ldr	r3, [pc, #12]	; (800b900 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 800b8f4:	6003      	str	r3, [r0, #0]
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	f000 f8ac 	bl	800ba54 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	bd10      	pop	{r4, pc}
 800b900:	0800ca30 	.word	0x0800ca30

0800b904 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 800b904:	b510      	push	{r4, lr}
 800b906:	4604      	mov	r4, r0
 800b908:	f7ff fff2 	bl	800b8f0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
 800b90c:	4620      	mov	r0, r4
 800b90e:	2110      	movs	r1, #16
 800b910:	f7ff fa70 	bl	800adf4 <_ZdlPvj>
 800b914:	4620      	mov	r0, r4
 800b916:	bd10      	pop	{r4, pc}

0800b918 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 800b918:	2b01      	cmp	r3, #1
 800b91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b91e:	4606      	mov	r6, r0
 800b920:	460c      	mov	r4, r1
 800b922:	4617      	mov	r7, r2
 800b924:	461d      	mov	r5, r3
 800b926:	d804      	bhi.n	800b932 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 800b928:	490b      	ldr	r1, [pc, #44]	; (800b958 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
 800b92a:	68c0      	ldr	r0, [r0, #12]
 800b92c:	f7ff ff85 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800b930:	b948      	cbnz	r0, 800b946 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2e>
 800b932:	68f0      	ldr	r0, [r6, #12]
 800b934:	68e1      	ldr	r1, [r4, #12]
 800b936:	6803      	ldr	r3, [r0, #0]
 800b938:	691e      	ldr	r6, [r3, #16]
 800b93a:	463a      	mov	r2, r7
 800b93c:	1cab      	adds	r3, r5, #2
 800b93e:	46b4      	mov	ip, r6
 800b940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b944:	4760      	bx	ip
 800b946:	68e0      	ldr	r0, [r4, #12]
 800b948:	6803      	ldr	r3, [r0, #0]
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	4798      	blx	r3
 800b94e:	f080 0001 	eor.w	r0, r0, #1
 800b952:	b2c0      	uxtb	r0, r0
 800b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b958:	0800c8d0 	.word	0x0800c8d0

0800b95c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800b95c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b95e:	2400      	movs	r4, #0
 800b960:	2310      	movs	r3, #16
 800b962:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b966:	6803      	ldr	r3, [r0, #0]
 800b968:	9400      	str	r4, [sp, #0]
 800b96a:	4615      	mov	r5, r2
 800b96c:	699e      	ldr	r6, [r3, #24]
 800b96e:	f88d 4004 	strb.w	r4, [sp, #4]
 800b972:	466b      	mov	r3, sp
 800b974:	6812      	ldr	r2, [r2, #0]
 800b976:	47b0      	blx	r6
 800b978:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b97c:	f003 0306 	and.w	r3, r3, #6
 800b980:	2b06      	cmp	r3, #6
 800b982:	bf03      	ittte	eq
 800b984:	9b00      	ldreq	r3, [sp, #0]
 800b986:	602b      	streq	r3, [r5, #0]
 800b988:	2001      	moveq	r0, #1
 800b98a:	4620      	movne	r0, r4
 800b98c:	b004      	add	sp, #16
 800b98e:	bd70      	pop	{r4, r5, r6, pc}

0800b990 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800b990:	9800      	ldr	r0, [sp, #0]
 800b992:	4290      	cmp	r0, r2
 800b994:	bf0c      	ite	eq
 800b996:	2006      	moveq	r0, #6
 800b998:	2001      	movne	r0, #1
 800b99a:	4770      	bx	lr

0800b99c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800b99c:	b510      	push	{r4, lr}
 800b99e:	4b03      	ldr	r3, [pc, #12]	; (800b9ac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800b9a0:	6003      	str	r3, [r0, #0]
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	f7ff ff44 	bl	800b830 <_ZNSt9type_infoD1Ev>
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	bd10      	pop	{r4, pc}
 800b9ac:	0800ca84 	.word	0x0800ca84

0800b9b0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800b9b0:	b510      	push	{r4, lr}
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	f7ff fff2 	bl	800b99c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	2108      	movs	r1, #8
 800b9bc:	f7ff fa1a 	bl	800adf4 <_ZdlPvj>
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	bd10      	pop	{r4, pc}

0800b9c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c8:	4698      	mov	r8, r3
 800b9ca:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800b9ce:	9e06      	ldr	r6, [sp, #24]
 800b9d0:	429e      	cmp	r6, r3
 800b9d2:	4607      	mov	r7, r0
 800b9d4:	4615      	mov	r5, r2
 800b9d6:	d107      	bne.n	800b9e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800b9d8:	9907      	ldr	r1, [sp, #28]
 800b9da:	f7ff ff2e 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800b9de:	b118      	cbz	r0, 800b9e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800b9e0:	7165      	strb	r5, [r4, #5]
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e8:	4641      	mov	r1, r8
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	f7ff ff25 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d0f6      	beq.n	800b9e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	6026      	str	r6, [r4, #0]
 800b9f8:	7125      	strb	r5, [r4, #4]
 800b9fa:	71a3      	strb	r3, [r4, #6]
 800b9fc:	e7f1      	b.n	800b9e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

0800b9fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800b9fe:	b538      	push	{r3, r4, r5, lr}
 800ba00:	4615      	mov	r5, r2
 800ba02:	461c      	mov	r4, r3
 800ba04:	f7ff ff19 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800ba08:	b120      	cbz	r0, 800ba14 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800ba0a:	2308      	movs	r3, #8
 800ba0c:	60e3      	str	r3, [r4, #12]
 800ba0e:	2306      	movs	r3, #6
 800ba10:	6025      	str	r5, [r4, #0]
 800ba12:	7123      	strb	r3, [r4, #4]
 800ba14:	bd38      	pop	{r3, r4, r5, pc}

0800ba16 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800ba16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	460c      	mov	r4, r1
 800ba1e:	4616      	mov	r6, r2
 800ba20:	461f      	mov	r7, r3
 800ba22:	f7ff ff0a 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800ba26:	b948      	cbnz	r0, 800ba3c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800ba28:	2f03      	cmp	r7, #3
 800ba2a:	d807      	bhi.n	800ba3c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800ba2c:	6823      	ldr	r3, [r4, #0]
 800ba2e:	4632      	mov	r2, r6
 800ba30:	4629      	mov	r1, r5
 800ba32:	4620      	mov	r0, r4
 800ba34:	695b      	ldr	r3, [r3, #20]
 800ba36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3a:	4718      	bx	r3
 800ba3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ba40 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 800ba40:	68c0      	ldr	r0, [r0, #12]
 800ba42:	68c9      	ldr	r1, [r1, #12]
 800ba44:	b410      	push	{r4}
 800ba46:	6804      	ldr	r4, [r0, #0]
 800ba48:	6924      	ldr	r4, [r4, #16]
 800ba4a:	3302      	adds	r3, #2
 800ba4c:	46a4      	mov	ip, r4
 800ba4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba52:	4760      	bx	ip

0800ba54 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 800ba54:	b510      	push	{r4, lr}
 800ba56:	4b03      	ldr	r3, [pc, #12]	; (800ba64 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 800ba58:	6003      	str	r3, [r0, #0]
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	f7ff fee8 	bl	800b830 <_ZNSt9type_infoD1Ev>
 800ba60:	4620      	mov	r0, r4
 800ba62:	bd10      	pop	{r4, pc}
 800ba64:	0800cae0 	.word	0x0800cae0

0800ba68 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	f7ff fff2 	bl	800ba54 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800ba70:	4620      	mov	r0, r4
 800ba72:	2110      	movs	r1, #16
 800ba74:	f7ff f9be 	bl	800adf4 <_ZdlPvj>
 800ba78:	4620      	mov	r0, r4
 800ba7a:	bd10      	pop	{r4, pc}

0800ba7c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 800ba7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba80:	4605      	mov	r5, r0
 800ba82:	460e      	mov	r6, r1
 800ba84:	4617      	mov	r7, r2
 800ba86:	4698      	mov	r8, r3
 800ba88:	f7ff fed7 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	b9f0      	cbnz	r0, 800bace <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800ba90:	4928      	ldr	r1, [pc, #160]	; (800bb34 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb8>)
 800ba92:	4630      	mov	r0, r6
 800ba94:	f7ff fed1 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800ba98:	b300      	cbz	r0, 800badc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800ba9a:	682b      	ldr	r3, [r5, #0]
 800ba9c:	4926      	ldr	r1, [pc, #152]	; (800bb38 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>)
 800ba9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800baa2:	f7ff feca 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800baa6:	b110      	cbz	r0, 800baae <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
 800baa8:	603c      	str	r4, [r7, #0]
 800baaa:	4604      	mov	r4, r0
 800baac:	e00f      	b.n	800bace <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800baae:	682b      	ldr	r3, [r5, #0]
 800bab0:	4922      	ldr	r1, [pc, #136]	; (800bb3c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc0>)
 800bab2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bab6:	f7ff fec0 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800baba:	4681      	mov	r9, r0
 800babc:	b170      	cbz	r0, 800badc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800babe:	68e8      	ldr	r0, [r5, #12]
 800bac0:	6803      	ldr	r3, [r0, #0]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	4798      	blx	r3
 800bac6:	4604      	mov	r4, r0
 800bac8:	b120      	cbz	r0, 800bad4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 800baca:	4b1d      	ldr	r3, [pc, #116]	; (800bb40 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>)
 800bacc:	603b      	str	r3, [r7, #0]
 800bace:	4620      	mov	r0, r4
 800bad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad4:	4b1b      	ldr	r3, [pc, #108]	; (800bb44 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc8>)
 800bad6:	603b      	str	r3, [r7, #0]
 800bad8:	464c      	mov	r4, r9
 800bada:	e7f8      	b.n	800bace <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bae2:	b32e      	cbz	r6, 800bb30 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb4>
 800bae4:	6833      	ldr	r3, [r6, #0]
 800bae6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800baea:	f7ff fea6 	bl	800b83a <_ZNKSt9type_infoeqERKS_>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d0db      	beq.n	800baaa <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x2e>
 800baf2:	f018 0f01 	tst.w	r8, #1
 800baf6:	d0ea      	beq.n	800bace <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800baf8:	68b3      	ldr	r3, [r6, #8]
 800bafa:	68aa      	ldr	r2, [r5, #8]
 800bafc:	f003 0060 	and.w	r0, r3, #96	; 0x60
 800bb00:	f002 0160 	and.w	r1, r2, #96	; 0x60
 800bb04:	ea30 0c01 	bics.w	ip, r0, r1
 800bb08:	bf18      	it	ne
 800bb0a:	400b      	andne	r3, r1
 800bb0c:	4381      	bics	r1, r0
 800bb0e:	d1de      	bne.n	800bace <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800bb10:	4393      	bics	r3, r2
 800bb12:	d1dc      	bne.n	800bace <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800bb14:	07d3      	lsls	r3, r2, #31
 800bb16:	682b      	ldr	r3, [r5, #0]
 800bb18:	699c      	ldr	r4, [r3, #24]
 800bb1a:	bf58      	it	pl
 800bb1c:	f028 0801 	bicpl.w	r8, r8, #1
 800bb20:	4643      	mov	r3, r8
 800bb22:	463a      	mov	r2, r7
 800bb24:	4631      	mov	r1, r6
 800bb26:	4628      	mov	r0, r5
 800bb28:	46a4      	mov	ip, r4
 800bb2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb2e:	4760      	bx	ip
 800bb30:	f000 f80a 	bl	800bb48 <__cxa_bad_typeid>
 800bb34:	0800c8b0 	.word	0x0800c8b0
 800bb38:	0800c9f8 	.word	0x0800c9f8
 800bb3c:	0800cb08 	.word	0x0800cb08
 800bb40:	0800cb00 	.word	0x0800cb00
 800bb44:	0800cafc 	.word	0x0800cafc

0800bb48 <__cxa_bad_typeid>:
 800bb48:	b508      	push	{r3, lr}
 800bb4a:	f000 f800 	bl	800bb4e <abort>

0800bb4e <abort>:
 800bb4e:	b508      	push	{r3, lr}
 800bb50:	2006      	movs	r0, #6
 800bb52:	f000 fad1 	bl	800c0f8 <raise>
 800bb56:	2001      	movs	r0, #1
 800bb58:	f7f6 fe52 	bl	8002800 <_exit>

0800bb5c <__errno>:
 800bb5c:	4b01      	ldr	r3, [pc, #4]	; (800bb64 <__errno+0x8>)
 800bb5e:	6818      	ldr	r0, [r3, #0]
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	2000001c 	.word	0x2000001c

0800bb68 <std>:
 800bb68:	2300      	movs	r3, #0
 800bb6a:	b510      	push	{r4, lr}
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	e9c0 3300 	strd	r3, r3, [r0]
 800bb72:	6083      	str	r3, [r0, #8]
 800bb74:	8181      	strh	r1, [r0, #12]
 800bb76:	6643      	str	r3, [r0, #100]	; 0x64
 800bb78:	81c2      	strh	r2, [r0, #14]
 800bb7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb7e:	6183      	str	r3, [r0, #24]
 800bb80:	4619      	mov	r1, r3
 800bb82:	2208      	movs	r2, #8
 800bb84:	305c      	adds	r0, #92	; 0x5c
 800bb86:	f000 f911 	bl	800bdac <memset>
 800bb8a:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <std+0x38>)
 800bb8c:	6263      	str	r3, [r4, #36]	; 0x24
 800bb8e:	4b05      	ldr	r3, [pc, #20]	; (800bba4 <std+0x3c>)
 800bb90:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb92:	4b05      	ldr	r3, [pc, #20]	; (800bba8 <std+0x40>)
 800bb94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb96:	4b05      	ldr	r3, [pc, #20]	; (800bbac <std+0x44>)
 800bb98:	6224      	str	r4, [r4, #32]
 800bb9a:	6323      	str	r3, [r4, #48]	; 0x30
 800bb9c:	bd10      	pop	{r4, pc}
 800bb9e:	bf00      	nop
 800bba0:	0800c131 	.word	0x0800c131
 800bba4:	0800c153 	.word	0x0800c153
 800bba8:	0800c18b 	.word	0x0800c18b
 800bbac:	0800c1af 	.word	0x0800c1af

0800bbb0 <_cleanup_r>:
 800bbb0:	4901      	ldr	r1, [pc, #4]	; (800bbb8 <_cleanup_r+0x8>)
 800bbb2:	f000 b885 	b.w	800bcc0 <_fwalk_reent>
 800bbb6:	bf00      	nop
 800bbb8:	0800c489 	.word	0x0800c489

0800bbbc <__sfmoreglue>:
 800bbbc:	b570      	push	{r4, r5, r6, lr}
 800bbbe:	1e4a      	subs	r2, r1, #1
 800bbc0:	2568      	movs	r5, #104	; 0x68
 800bbc2:	4355      	muls	r5, r2
 800bbc4:	460e      	mov	r6, r1
 800bbc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbca:	f000 f945 	bl	800be58 <_malloc_r>
 800bbce:	4604      	mov	r4, r0
 800bbd0:	b140      	cbz	r0, 800bbe4 <__sfmoreglue+0x28>
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	e9c0 1600 	strd	r1, r6, [r0]
 800bbd8:	300c      	adds	r0, #12
 800bbda:	60a0      	str	r0, [r4, #8]
 800bbdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbe0:	f000 f8e4 	bl	800bdac <memset>
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}

0800bbe8 <__sinit>:
 800bbe8:	6983      	ldr	r3, [r0, #24]
 800bbea:	b510      	push	{r4, lr}
 800bbec:	4604      	mov	r4, r0
 800bbee:	bb33      	cbnz	r3, 800bc3e <__sinit+0x56>
 800bbf0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bbf4:	6503      	str	r3, [r0, #80]	; 0x50
 800bbf6:	4b12      	ldr	r3, [pc, #72]	; (800bc40 <__sinit+0x58>)
 800bbf8:	4a12      	ldr	r2, [pc, #72]	; (800bc44 <__sinit+0x5c>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6282      	str	r2, [r0, #40]	; 0x28
 800bbfe:	4298      	cmp	r0, r3
 800bc00:	bf04      	itt	eq
 800bc02:	2301      	moveq	r3, #1
 800bc04:	6183      	streq	r3, [r0, #24]
 800bc06:	f000 f81f 	bl	800bc48 <__sfp>
 800bc0a:	6060      	str	r0, [r4, #4]
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f000 f81b 	bl	800bc48 <__sfp>
 800bc12:	60a0      	str	r0, [r4, #8]
 800bc14:	4620      	mov	r0, r4
 800bc16:	f000 f817 	bl	800bc48 <__sfp>
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	60e0      	str	r0, [r4, #12]
 800bc1e:	2104      	movs	r1, #4
 800bc20:	6860      	ldr	r0, [r4, #4]
 800bc22:	f7ff ffa1 	bl	800bb68 <std>
 800bc26:	2201      	movs	r2, #1
 800bc28:	2109      	movs	r1, #9
 800bc2a:	68a0      	ldr	r0, [r4, #8]
 800bc2c:	f7ff ff9c 	bl	800bb68 <std>
 800bc30:	2202      	movs	r2, #2
 800bc32:	2112      	movs	r1, #18
 800bc34:	68e0      	ldr	r0, [r4, #12]
 800bc36:	f7ff ff97 	bl	800bb68 <std>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	61a3      	str	r3, [r4, #24]
 800bc3e:	bd10      	pop	{r4, pc}
 800bc40:	0800cba4 	.word	0x0800cba4
 800bc44:	0800bbb1 	.word	0x0800bbb1

0800bc48 <__sfp>:
 800bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4a:	4b1b      	ldr	r3, [pc, #108]	; (800bcb8 <__sfp+0x70>)
 800bc4c:	681e      	ldr	r6, [r3, #0]
 800bc4e:	69b3      	ldr	r3, [r6, #24]
 800bc50:	4607      	mov	r7, r0
 800bc52:	b913      	cbnz	r3, 800bc5a <__sfp+0x12>
 800bc54:	4630      	mov	r0, r6
 800bc56:	f7ff ffc7 	bl	800bbe8 <__sinit>
 800bc5a:	3648      	adds	r6, #72	; 0x48
 800bc5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc60:	3b01      	subs	r3, #1
 800bc62:	d503      	bpl.n	800bc6c <__sfp+0x24>
 800bc64:	6833      	ldr	r3, [r6, #0]
 800bc66:	b133      	cbz	r3, 800bc76 <__sfp+0x2e>
 800bc68:	6836      	ldr	r6, [r6, #0]
 800bc6a:	e7f7      	b.n	800bc5c <__sfp+0x14>
 800bc6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc70:	b16d      	cbz	r5, 800bc8e <__sfp+0x46>
 800bc72:	3468      	adds	r4, #104	; 0x68
 800bc74:	e7f4      	b.n	800bc60 <__sfp+0x18>
 800bc76:	2104      	movs	r1, #4
 800bc78:	4638      	mov	r0, r7
 800bc7a:	f7ff ff9f 	bl	800bbbc <__sfmoreglue>
 800bc7e:	6030      	str	r0, [r6, #0]
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d1f1      	bne.n	800bc68 <__sfp+0x20>
 800bc84:	230c      	movs	r3, #12
 800bc86:	603b      	str	r3, [r7, #0]
 800bc88:	4604      	mov	r4, r0
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc8e:	4b0b      	ldr	r3, [pc, #44]	; (800bcbc <__sfp+0x74>)
 800bc90:	6665      	str	r5, [r4, #100]	; 0x64
 800bc92:	e9c4 5500 	strd	r5, r5, [r4]
 800bc96:	60a5      	str	r5, [r4, #8]
 800bc98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bc9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bca0:	2208      	movs	r2, #8
 800bca2:	4629      	mov	r1, r5
 800bca4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bca8:	f000 f880 	bl	800bdac <memset>
 800bcac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bcb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcb4:	e7e9      	b.n	800bc8a <__sfp+0x42>
 800bcb6:	bf00      	nop
 800bcb8:	0800cba4 	.word	0x0800cba4
 800bcbc:	ffff0001 	.word	0xffff0001

0800bcc0 <_fwalk_reent>:
 800bcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcc4:	4680      	mov	r8, r0
 800bcc6:	4689      	mov	r9, r1
 800bcc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bccc:	2600      	movs	r6, #0
 800bcce:	b914      	cbnz	r4, 800bcd6 <_fwalk_reent+0x16>
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bcda:	3f01      	subs	r7, #1
 800bcdc:	d501      	bpl.n	800bce2 <_fwalk_reent+0x22>
 800bcde:	6824      	ldr	r4, [r4, #0]
 800bce0:	e7f5      	b.n	800bcce <_fwalk_reent+0xe>
 800bce2:	89ab      	ldrh	r3, [r5, #12]
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d907      	bls.n	800bcf8 <_fwalk_reent+0x38>
 800bce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcec:	3301      	adds	r3, #1
 800bcee:	d003      	beq.n	800bcf8 <_fwalk_reent+0x38>
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	47c8      	blx	r9
 800bcf6:	4306      	orrs	r6, r0
 800bcf8:	3568      	adds	r5, #104	; 0x68
 800bcfa:	e7ee      	b.n	800bcda <_fwalk_reent+0x1a>

0800bcfc <__libc_init_array>:
 800bcfc:	b570      	push	{r4, r5, r6, lr}
 800bcfe:	4e0d      	ldr	r6, [pc, #52]	; (800bd34 <__libc_init_array+0x38>)
 800bd00:	4c0d      	ldr	r4, [pc, #52]	; (800bd38 <__libc_init_array+0x3c>)
 800bd02:	1ba4      	subs	r4, r4, r6
 800bd04:	10a4      	asrs	r4, r4, #2
 800bd06:	2500      	movs	r5, #0
 800bd08:	42a5      	cmp	r5, r4
 800bd0a:	d109      	bne.n	800bd20 <__libc_init_array+0x24>
 800bd0c:	4e0b      	ldr	r6, [pc, #44]	; (800bd3c <__libc_init_array+0x40>)
 800bd0e:	4c0c      	ldr	r4, [pc, #48]	; (800bd40 <__libc_init_array+0x44>)
 800bd10:	f000 fc8e 	bl	800c630 <_init>
 800bd14:	1ba4      	subs	r4, r4, r6
 800bd16:	10a4      	asrs	r4, r4, #2
 800bd18:	2500      	movs	r5, #0
 800bd1a:	42a5      	cmp	r5, r4
 800bd1c:	d105      	bne.n	800bd2a <__libc_init_array+0x2e>
 800bd1e:	bd70      	pop	{r4, r5, r6, pc}
 800bd20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd24:	4798      	blx	r3
 800bd26:	3501      	adds	r5, #1
 800bd28:	e7ee      	b.n	800bd08 <__libc_init_array+0xc>
 800bd2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd2e:	4798      	blx	r3
 800bd30:	3501      	adds	r5, #1
 800bd32:	e7f2      	b.n	800bd1a <__libc_init_array+0x1e>
 800bd34:	0800d1f0 	.word	0x0800d1f0
 800bd38:	0800d1f0 	.word	0x0800d1f0
 800bd3c:	0800d1f0 	.word	0x0800d1f0
 800bd40:	0800d1fc 	.word	0x0800d1fc

0800bd44 <malloc>:
 800bd44:	4b02      	ldr	r3, [pc, #8]	; (800bd50 <malloc+0xc>)
 800bd46:	4601      	mov	r1, r0
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	f000 b885 	b.w	800be58 <_malloc_r>
 800bd4e:	bf00      	nop
 800bd50:	2000001c 	.word	0x2000001c

0800bd54 <free>:
 800bd54:	4b02      	ldr	r3, [pc, #8]	; (800bd60 <free+0xc>)
 800bd56:	4601      	mov	r1, r0
 800bd58:	6818      	ldr	r0, [r3, #0]
 800bd5a:	f000 b82f 	b.w	800bdbc <_free_r>
 800bd5e:	bf00      	nop
 800bd60:	2000001c 	.word	0x2000001c

0800bd64 <memcpy>:
 800bd64:	b510      	push	{r4, lr}
 800bd66:	1e43      	subs	r3, r0, #1
 800bd68:	440a      	add	r2, r1
 800bd6a:	4291      	cmp	r1, r2
 800bd6c:	d100      	bne.n	800bd70 <memcpy+0xc>
 800bd6e:	bd10      	pop	{r4, pc}
 800bd70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd78:	e7f7      	b.n	800bd6a <memcpy+0x6>

0800bd7a <memmove>:
 800bd7a:	4288      	cmp	r0, r1
 800bd7c:	b510      	push	{r4, lr}
 800bd7e:	eb01 0302 	add.w	r3, r1, r2
 800bd82:	d807      	bhi.n	800bd94 <memmove+0x1a>
 800bd84:	1e42      	subs	r2, r0, #1
 800bd86:	4299      	cmp	r1, r3
 800bd88:	d00a      	beq.n	800bda0 <memmove+0x26>
 800bd8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd8e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bd92:	e7f8      	b.n	800bd86 <memmove+0xc>
 800bd94:	4283      	cmp	r3, r0
 800bd96:	d9f5      	bls.n	800bd84 <memmove+0xa>
 800bd98:	1881      	adds	r1, r0, r2
 800bd9a:	1ad2      	subs	r2, r2, r3
 800bd9c:	42d3      	cmn	r3, r2
 800bd9e:	d100      	bne.n	800bda2 <memmove+0x28>
 800bda0:	bd10      	pop	{r4, pc}
 800bda2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bda6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bdaa:	e7f7      	b.n	800bd9c <memmove+0x22>

0800bdac <memset>:
 800bdac:	4402      	add	r2, r0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d100      	bne.n	800bdb6 <memset+0xa>
 800bdb4:	4770      	bx	lr
 800bdb6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdba:	e7f9      	b.n	800bdb0 <memset+0x4>

0800bdbc <_free_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	2900      	cmp	r1, #0
 800bdc2:	d045      	beq.n	800be50 <_free_r+0x94>
 800bdc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdc8:	1f0c      	subs	r4, r1, #4
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	bfb8      	it	lt
 800bdce:	18e4      	addlt	r4, r4, r3
 800bdd0:	f7f5 fbf2 	bl	80015b8 <__malloc_lock>
 800bdd4:	4a1f      	ldr	r2, [pc, #124]	; (800be54 <_free_r+0x98>)
 800bdd6:	6813      	ldr	r3, [r2, #0]
 800bdd8:	4610      	mov	r0, r2
 800bdda:	b933      	cbnz	r3, 800bdea <_free_r+0x2e>
 800bddc:	6063      	str	r3, [r4, #4]
 800bdde:	6014      	str	r4, [r2, #0]
 800bde0:	4628      	mov	r0, r5
 800bde2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bde6:	f7f5 bc05 	b.w	80015f4 <__malloc_unlock>
 800bdea:	42a3      	cmp	r3, r4
 800bdec:	d90c      	bls.n	800be08 <_free_r+0x4c>
 800bdee:	6821      	ldr	r1, [r4, #0]
 800bdf0:	1862      	adds	r2, r4, r1
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	bf04      	itt	eq
 800bdf6:	681a      	ldreq	r2, [r3, #0]
 800bdf8:	685b      	ldreq	r3, [r3, #4]
 800bdfa:	6063      	str	r3, [r4, #4]
 800bdfc:	bf04      	itt	eq
 800bdfe:	1852      	addeq	r2, r2, r1
 800be00:	6022      	streq	r2, [r4, #0]
 800be02:	6004      	str	r4, [r0, #0]
 800be04:	e7ec      	b.n	800bde0 <_free_r+0x24>
 800be06:	4613      	mov	r3, r2
 800be08:	685a      	ldr	r2, [r3, #4]
 800be0a:	b10a      	cbz	r2, 800be10 <_free_r+0x54>
 800be0c:	42a2      	cmp	r2, r4
 800be0e:	d9fa      	bls.n	800be06 <_free_r+0x4a>
 800be10:	6819      	ldr	r1, [r3, #0]
 800be12:	1858      	adds	r0, r3, r1
 800be14:	42a0      	cmp	r0, r4
 800be16:	d10b      	bne.n	800be30 <_free_r+0x74>
 800be18:	6820      	ldr	r0, [r4, #0]
 800be1a:	4401      	add	r1, r0
 800be1c:	1858      	adds	r0, r3, r1
 800be1e:	4282      	cmp	r2, r0
 800be20:	6019      	str	r1, [r3, #0]
 800be22:	d1dd      	bne.n	800bde0 <_free_r+0x24>
 800be24:	6810      	ldr	r0, [r2, #0]
 800be26:	6852      	ldr	r2, [r2, #4]
 800be28:	605a      	str	r2, [r3, #4]
 800be2a:	4401      	add	r1, r0
 800be2c:	6019      	str	r1, [r3, #0]
 800be2e:	e7d7      	b.n	800bde0 <_free_r+0x24>
 800be30:	d902      	bls.n	800be38 <_free_r+0x7c>
 800be32:	230c      	movs	r3, #12
 800be34:	602b      	str	r3, [r5, #0]
 800be36:	e7d3      	b.n	800bde0 <_free_r+0x24>
 800be38:	6820      	ldr	r0, [r4, #0]
 800be3a:	1821      	adds	r1, r4, r0
 800be3c:	428a      	cmp	r2, r1
 800be3e:	bf04      	itt	eq
 800be40:	6811      	ldreq	r1, [r2, #0]
 800be42:	6852      	ldreq	r2, [r2, #4]
 800be44:	6062      	str	r2, [r4, #4]
 800be46:	bf04      	itt	eq
 800be48:	1809      	addeq	r1, r1, r0
 800be4a:	6021      	streq	r1, [r4, #0]
 800be4c:	605c      	str	r4, [r3, #4]
 800be4e:	e7c7      	b.n	800bde0 <_free_r+0x24>
 800be50:	bd38      	pop	{r3, r4, r5, pc}
 800be52:	bf00      	nop
 800be54:	20000eb4 	.word	0x20000eb4

0800be58 <_malloc_r>:
 800be58:	b570      	push	{r4, r5, r6, lr}
 800be5a:	1ccd      	adds	r5, r1, #3
 800be5c:	f025 0503 	bic.w	r5, r5, #3
 800be60:	3508      	adds	r5, #8
 800be62:	2d0c      	cmp	r5, #12
 800be64:	bf38      	it	cc
 800be66:	250c      	movcc	r5, #12
 800be68:	2d00      	cmp	r5, #0
 800be6a:	4606      	mov	r6, r0
 800be6c:	db01      	blt.n	800be72 <_malloc_r+0x1a>
 800be6e:	42a9      	cmp	r1, r5
 800be70:	d903      	bls.n	800be7a <_malloc_r+0x22>
 800be72:	230c      	movs	r3, #12
 800be74:	6033      	str	r3, [r6, #0]
 800be76:	2000      	movs	r0, #0
 800be78:	bd70      	pop	{r4, r5, r6, pc}
 800be7a:	f7f5 fb9d 	bl	80015b8 <__malloc_lock>
 800be7e:	4a21      	ldr	r2, [pc, #132]	; (800bf04 <_malloc_r+0xac>)
 800be80:	6814      	ldr	r4, [r2, #0]
 800be82:	4621      	mov	r1, r4
 800be84:	b991      	cbnz	r1, 800beac <_malloc_r+0x54>
 800be86:	4c20      	ldr	r4, [pc, #128]	; (800bf08 <_malloc_r+0xb0>)
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	b91b      	cbnz	r3, 800be94 <_malloc_r+0x3c>
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7f5 fb07 	bl	80014a0 <_sbrk_r>
 800be92:	6020      	str	r0, [r4, #0]
 800be94:	4629      	mov	r1, r5
 800be96:	4630      	mov	r0, r6
 800be98:	f7f5 fb02 	bl	80014a0 <_sbrk_r>
 800be9c:	1c43      	adds	r3, r0, #1
 800be9e:	d124      	bne.n	800beea <_malloc_r+0x92>
 800bea0:	230c      	movs	r3, #12
 800bea2:	6033      	str	r3, [r6, #0]
 800bea4:	4630      	mov	r0, r6
 800bea6:	f7f5 fba5 	bl	80015f4 <__malloc_unlock>
 800beaa:	e7e4      	b.n	800be76 <_malloc_r+0x1e>
 800beac:	680b      	ldr	r3, [r1, #0]
 800beae:	1b5b      	subs	r3, r3, r5
 800beb0:	d418      	bmi.n	800bee4 <_malloc_r+0x8c>
 800beb2:	2b0b      	cmp	r3, #11
 800beb4:	d90f      	bls.n	800bed6 <_malloc_r+0x7e>
 800beb6:	600b      	str	r3, [r1, #0]
 800beb8:	50cd      	str	r5, [r1, r3]
 800beba:	18cc      	adds	r4, r1, r3
 800bebc:	4630      	mov	r0, r6
 800bebe:	f7f5 fb99 	bl	80015f4 <__malloc_unlock>
 800bec2:	f104 000b 	add.w	r0, r4, #11
 800bec6:	1d23      	adds	r3, r4, #4
 800bec8:	f020 0007 	bic.w	r0, r0, #7
 800becc:	1ac3      	subs	r3, r0, r3
 800bece:	d0d3      	beq.n	800be78 <_malloc_r+0x20>
 800bed0:	425a      	negs	r2, r3
 800bed2:	50e2      	str	r2, [r4, r3]
 800bed4:	e7d0      	b.n	800be78 <_malloc_r+0x20>
 800bed6:	428c      	cmp	r4, r1
 800bed8:	684b      	ldr	r3, [r1, #4]
 800beda:	bf16      	itet	ne
 800bedc:	6063      	strne	r3, [r4, #4]
 800bede:	6013      	streq	r3, [r2, #0]
 800bee0:	460c      	movne	r4, r1
 800bee2:	e7eb      	b.n	800bebc <_malloc_r+0x64>
 800bee4:	460c      	mov	r4, r1
 800bee6:	6849      	ldr	r1, [r1, #4]
 800bee8:	e7cc      	b.n	800be84 <_malloc_r+0x2c>
 800beea:	1cc4      	adds	r4, r0, #3
 800beec:	f024 0403 	bic.w	r4, r4, #3
 800bef0:	42a0      	cmp	r0, r4
 800bef2:	d005      	beq.n	800bf00 <_malloc_r+0xa8>
 800bef4:	1a21      	subs	r1, r4, r0
 800bef6:	4630      	mov	r0, r6
 800bef8:	f7f5 fad2 	bl	80014a0 <_sbrk_r>
 800befc:	3001      	adds	r0, #1
 800befe:	d0cf      	beq.n	800bea0 <_malloc_r+0x48>
 800bf00:	6025      	str	r5, [r4, #0]
 800bf02:	e7db      	b.n	800bebc <_malloc_r+0x64>
 800bf04:	20000eb4 	.word	0x20000eb4
 800bf08:	20000eb8 	.word	0x20000eb8

0800bf0c <_puts_r>:
 800bf0c:	b570      	push	{r4, r5, r6, lr}
 800bf0e:	460e      	mov	r6, r1
 800bf10:	4605      	mov	r5, r0
 800bf12:	b118      	cbz	r0, 800bf1c <_puts_r+0x10>
 800bf14:	6983      	ldr	r3, [r0, #24]
 800bf16:	b90b      	cbnz	r3, 800bf1c <_puts_r+0x10>
 800bf18:	f7ff fe66 	bl	800bbe8 <__sinit>
 800bf1c:	69ab      	ldr	r3, [r5, #24]
 800bf1e:	68ac      	ldr	r4, [r5, #8]
 800bf20:	b913      	cbnz	r3, 800bf28 <_puts_r+0x1c>
 800bf22:	4628      	mov	r0, r5
 800bf24:	f7ff fe60 	bl	800bbe8 <__sinit>
 800bf28:	4b23      	ldr	r3, [pc, #140]	; (800bfb8 <_puts_r+0xac>)
 800bf2a:	429c      	cmp	r4, r3
 800bf2c:	d117      	bne.n	800bf5e <_puts_r+0x52>
 800bf2e:	686c      	ldr	r4, [r5, #4]
 800bf30:	89a3      	ldrh	r3, [r4, #12]
 800bf32:	071b      	lsls	r3, r3, #28
 800bf34:	d51d      	bpl.n	800bf72 <_puts_r+0x66>
 800bf36:	6923      	ldr	r3, [r4, #16]
 800bf38:	b1db      	cbz	r3, 800bf72 <_puts_r+0x66>
 800bf3a:	3e01      	subs	r6, #1
 800bf3c:	68a3      	ldr	r3, [r4, #8]
 800bf3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf42:	3b01      	subs	r3, #1
 800bf44:	60a3      	str	r3, [r4, #8]
 800bf46:	b9e9      	cbnz	r1, 800bf84 <_puts_r+0x78>
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	da2e      	bge.n	800bfaa <_puts_r+0x9e>
 800bf4c:	4622      	mov	r2, r4
 800bf4e:	210a      	movs	r1, #10
 800bf50:	4628      	mov	r0, r5
 800bf52:	f000 f931 	bl	800c1b8 <__swbuf_r>
 800bf56:	3001      	adds	r0, #1
 800bf58:	d011      	beq.n	800bf7e <_puts_r+0x72>
 800bf5a:	200a      	movs	r0, #10
 800bf5c:	e011      	b.n	800bf82 <_puts_r+0x76>
 800bf5e:	4b17      	ldr	r3, [pc, #92]	; (800bfbc <_puts_r+0xb0>)
 800bf60:	429c      	cmp	r4, r3
 800bf62:	d101      	bne.n	800bf68 <_puts_r+0x5c>
 800bf64:	68ac      	ldr	r4, [r5, #8]
 800bf66:	e7e3      	b.n	800bf30 <_puts_r+0x24>
 800bf68:	4b15      	ldr	r3, [pc, #84]	; (800bfc0 <_puts_r+0xb4>)
 800bf6a:	429c      	cmp	r4, r3
 800bf6c:	bf08      	it	eq
 800bf6e:	68ec      	ldreq	r4, [r5, #12]
 800bf70:	e7de      	b.n	800bf30 <_puts_r+0x24>
 800bf72:	4621      	mov	r1, r4
 800bf74:	4628      	mov	r0, r5
 800bf76:	f000 f983 	bl	800c280 <__swsetup_r>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d0dd      	beq.n	800bf3a <_puts_r+0x2e>
 800bf7e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	da04      	bge.n	800bf92 <_puts_r+0x86>
 800bf88:	69a2      	ldr	r2, [r4, #24]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	dc06      	bgt.n	800bf9c <_puts_r+0x90>
 800bf8e:	290a      	cmp	r1, #10
 800bf90:	d004      	beq.n	800bf9c <_puts_r+0x90>
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	6022      	str	r2, [r4, #0]
 800bf98:	7019      	strb	r1, [r3, #0]
 800bf9a:	e7cf      	b.n	800bf3c <_puts_r+0x30>
 800bf9c:	4622      	mov	r2, r4
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f000 f90a 	bl	800c1b8 <__swbuf_r>
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	d1c9      	bne.n	800bf3c <_puts_r+0x30>
 800bfa8:	e7e9      	b.n	800bf7e <_puts_r+0x72>
 800bfaa:	6823      	ldr	r3, [r4, #0]
 800bfac:	200a      	movs	r0, #10
 800bfae:	1c5a      	adds	r2, r3, #1
 800bfb0:	6022      	str	r2, [r4, #0]
 800bfb2:	7018      	strb	r0, [r3, #0]
 800bfb4:	e7e5      	b.n	800bf82 <_puts_r+0x76>
 800bfb6:	bf00      	nop
 800bfb8:	0800cb64 	.word	0x0800cb64
 800bfbc:	0800cb84 	.word	0x0800cb84
 800bfc0:	0800cb44 	.word	0x0800cb44

0800bfc4 <puts>:
 800bfc4:	4b02      	ldr	r3, [pc, #8]	; (800bfd0 <puts+0xc>)
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	6818      	ldr	r0, [r3, #0]
 800bfca:	f7ff bf9f 	b.w	800bf0c <_puts_r>
 800bfce:	bf00      	nop
 800bfd0:	2000001c 	.word	0x2000001c

0800bfd4 <cleanup_glue>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	6809      	ldr	r1, [r1, #0]
 800bfda:	4605      	mov	r5, r0
 800bfdc:	b109      	cbz	r1, 800bfe2 <cleanup_glue+0xe>
 800bfde:	f7ff fff9 	bl	800bfd4 <cleanup_glue>
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfea:	f7ff bee7 	b.w	800bdbc <_free_r>
	...

0800bff0 <_reclaim_reent>:
 800bff0:	4b2c      	ldr	r3, [pc, #176]	; (800c0a4 <_reclaim_reent+0xb4>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4283      	cmp	r3, r0
 800bff6:	b570      	push	{r4, r5, r6, lr}
 800bff8:	4604      	mov	r4, r0
 800bffa:	d051      	beq.n	800c0a0 <_reclaim_reent+0xb0>
 800bffc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bffe:	b143      	cbz	r3, 800c012 <_reclaim_reent+0x22>
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d14a      	bne.n	800c09c <_reclaim_reent+0xac>
 800c006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c008:	6819      	ldr	r1, [r3, #0]
 800c00a:	b111      	cbz	r1, 800c012 <_reclaim_reent+0x22>
 800c00c:	4620      	mov	r0, r4
 800c00e:	f7ff fed5 	bl	800bdbc <_free_r>
 800c012:	6961      	ldr	r1, [r4, #20]
 800c014:	b111      	cbz	r1, 800c01c <_reclaim_reent+0x2c>
 800c016:	4620      	mov	r0, r4
 800c018:	f7ff fed0 	bl	800bdbc <_free_r>
 800c01c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c01e:	b111      	cbz	r1, 800c026 <_reclaim_reent+0x36>
 800c020:	4620      	mov	r0, r4
 800c022:	f7ff fecb 	bl	800bdbc <_free_r>
 800c026:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c028:	b111      	cbz	r1, 800c030 <_reclaim_reent+0x40>
 800c02a:	4620      	mov	r0, r4
 800c02c:	f7ff fec6 	bl	800bdbc <_free_r>
 800c030:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c032:	b111      	cbz	r1, 800c03a <_reclaim_reent+0x4a>
 800c034:	4620      	mov	r0, r4
 800c036:	f7ff fec1 	bl	800bdbc <_free_r>
 800c03a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c03c:	b111      	cbz	r1, 800c044 <_reclaim_reent+0x54>
 800c03e:	4620      	mov	r0, r4
 800c040:	f7ff febc 	bl	800bdbc <_free_r>
 800c044:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c046:	b111      	cbz	r1, 800c04e <_reclaim_reent+0x5e>
 800c048:	4620      	mov	r0, r4
 800c04a:	f7ff feb7 	bl	800bdbc <_free_r>
 800c04e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c050:	b111      	cbz	r1, 800c058 <_reclaim_reent+0x68>
 800c052:	4620      	mov	r0, r4
 800c054:	f7ff feb2 	bl	800bdbc <_free_r>
 800c058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c05a:	b111      	cbz	r1, 800c062 <_reclaim_reent+0x72>
 800c05c:	4620      	mov	r0, r4
 800c05e:	f7ff fead 	bl	800bdbc <_free_r>
 800c062:	69a3      	ldr	r3, [r4, #24]
 800c064:	b1e3      	cbz	r3, 800c0a0 <_reclaim_reent+0xb0>
 800c066:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c068:	4620      	mov	r0, r4
 800c06a:	4798      	blx	r3
 800c06c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c06e:	b1b9      	cbz	r1, 800c0a0 <_reclaim_reent+0xb0>
 800c070:	4620      	mov	r0, r4
 800c072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c076:	f7ff bfad 	b.w	800bfd4 <cleanup_glue>
 800c07a:	5949      	ldr	r1, [r1, r5]
 800c07c:	b941      	cbnz	r1, 800c090 <_reclaim_reent+0xa0>
 800c07e:	3504      	adds	r5, #4
 800c080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c082:	2d80      	cmp	r5, #128	; 0x80
 800c084:	68d9      	ldr	r1, [r3, #12]
 800c086:	d1f8      	bne.n	800c07a <_reclaim_reent+0x8a>
 800c088:	4620      	mov	r0, r4
 800c08a:	f7ff fe97 	bl	800bdbc <_free_r>
 800c08e:	e7ba      	b.n	800c006 <_reclaim_reent+0x16>
 800c090:	680e      	ldr	r6, [r1, #0]
 800c092:	4620      	mov	r0, r4
 800c094:	f7ff fe92 	bl	800bdbc <_free_r>
 800c098:	4631      	mov	r1, r6
 800c09a:	e7ef      	b.n	800c07c <_reclaim_reent+0x8c>
 800c09c:	2500      	movs	r5, #0
 800c09e:	e7ef      	b.n	800c080 <_reclaim_reent+0x90>
 800c0a0:	bd70      	pop	{r4, r5, r6, pc}
 800c0a2:	bf00      	nop
 800c0a4:	2000001c 	.word	0x2000001c

0800c0a8 <_raise_r>:
 800c0a8:	291f      	cmp	r1, #31
 800c0aa:	b538      	push	{r3, r4, r5, lr}
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	460d      	mov	r5, r1
 800c0b0:	d904      	bls.n	800c0bc <_raise_r+0x14>
 800c0b2:	2316      	movs	r3, #22
 800c0b4:	6003      	str	r3, [r0, #0]
 800c0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
 800c0bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0be:	b112      	cbz	r2, 800c0c6 <_raise_r+0x1e>
 800c0c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0c4:	b94b      	cbnz	r3, 800c0da <_raise_r+0x32>
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f000 f830 	bl	800c12c <_getpid_r>
 800c0cc:	462a      	mov	r2, r5
 800c0ce:	4601      	mov	r1, r0
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0d6:	f000 b817 	b.w	800c108 <_kill_r>
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d00a      	beq.n	800c0f4 <_raise_r+0x4c>
 800c0de:	1c59      	adds	r1, r3, #1
 800c0e0:	d103      	bne.n	800c0ea <_raise_r+0x42>
 800c0e2:	2316      	movs	r3, #22
 800c0e4:	6003      	str	r3, [r0, #0]
 800c0e6:	2001      	movs	r0, #1
 800c0e8:	e7e7      	b.n	800c0ba <_raise_r+0x12>
 800c0ea:	2400      	movs	r4, #0
 800c0ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	4798      	blx	r3
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	e7e0      	b.n	800c0ba <_raise_r+0x12>

0800c0f8 <raise>:
 800c0f8:	4b02      	ldr	r3, [pc, #8]	; (800c104 <raise+0xc>)
 800c0fa:	4601      	mov	r1, r0
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	f7ff bfd3 	b.w	800c0a8 <_raise_r>
 800c102:	bf00      	nop
 800c104:	2000001c 	.word	0x2000001c

0800c108 <_kill_r>:
 800c108:	b538      	push	{r3, r4, r5, lr}
 800c10a:	4c07      	ldr	r4, [pc, #28]	; (800c128 <_kill_r+0x20>)
 800c10c:	2300      	movs	r3, #0
 800c10e:	4605      	mov	r5, r0
 800c110:	4608      	mov	r0, r1
 800c112:	4611      	mov	r1, r2
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	f7f6 fb63 	bl	80027e0 <_kill>
 800c11a:	1c43      	adds	r3, r0, #1
 800c11c:	d102      	bne.n	800c124 <_kill_r+0x1c>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	b103      	cbz	r3, 800c124 <_kill_r+0x1c>
 800c122:	602b      	str	r3, [r5, #0]
 800c124:	bd38      	pop	{r3, r4, r5, pc}
 800c126:	bf00      	nop
 800c128:	20001444 	.word	0x20001444

0800c12c <_getpid_r>:
 800c12c:	f7f6 bb50 	b.w	80027d0 <_getpid>

0800c130 <__sread>:
 800c130:	b510      	push	{r4, lr}
 800c132:	460c      	mov	r4, r1
 800c134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c138:	f000 fa46 	bl	800c5c8 <_read_r>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	bfab      	itete	ge
 800c140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c142:	89a3      	ldrhlt	r3, [r4, #12]
 800c144:	181b      	addge	r3, r3, r0
 800c146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c14a:	bfac      	ite	ge
 800c14c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c14e:	81a3      	strhlt	r3, [r4, #12]
 800c150:	bd10      	pop	{r4, pc}

0800c152 <__swrite>:
 800c152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c156:	461f      	mov	r7, r3
 800c158:	898b      	ldrh	r3, [r1, #12]
 800c15a:	05db      	lsls	r3, r3, #23
 800c15c:	4605      	mov	r5, r0
 800c15e:	460c      	mov	r4, r1
 800c160:	4616      	mov	r6, r2
 800c162:	d505      	bpl.n	800c170 <__swrite+0x1e>
 800c164:	2302      	movs	r3, #2
 800c166:	2200      	movs	r2, #0
 800c168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16c:	f000 f9b6 	bl	800c4dc <_lseek_r>
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c17a:	81a3      	strh	r3, [r4, #12]
 800c17c:	4632      	mov	r2, r6
 800c17e:	463b      	mov	r3, r7
 800c180:	4628      	mov	r0, r5
 800c182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c186:	f000 b869 	b.w	800c25c <_write_r>

0800c18a <__sseek>:
 800c18a:	b510      	push	{r4, lr}
 800c18c:	460c      	mov	r4, r1
 800c18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c192:	f000 f9a3 	bl	800c4dc <_lseek_r>
 800c196:	1c43      	adds	r3, r0, #1
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	bf15      	itete	ne
 800c19c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c19e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1a6:	81a3      	strheq	r3, [r4, #12]
 800c1a8:	bf18      	it	ne
 800c1aa:	81a3      	strhne	r3, [r4, #12]
 800c1ac:	bd10      	pop	{r4, pc}

0800c1ae <__sclose>:
 800c1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b2:	f000 b8d3 	b.w	800c35c <_close_r>
	...

0800c1b8 <__swbuf_r>:
 800c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ba:	460e      	mov	r6, r1
 800c1bc:	4614      	mov	r4, r2
 800c1be:	4605      	mov	r5, r0
 800c1c0:	b118      	cbz	r0, 800c1ca <__swbuf_r+0x12>
 800c1c2:	6983      	ldr	r3, [r0, #24]
 800c1c4:	b90b      	cbnz	r3, 800c1ca <__swbuf_r+0x12>
 800c1c6:	f7ff fd0f 	bl	800bbe8 <__sinit>
 800c1ca:	4b21      	ldr	r3, [pc, #132]	; (800c250 <__swbuf_r+0x98>)
 800c1cc:	429c      	cmp	r4, r3
 800c1ce:	d12a      	bne.n	800c226 <__swbuf_r+0x6e>
 800c1d0:	686c      	ldr	r4, [r5, #4]
 800c1d2:	69a3      	ldr	r3, [r4, #24]
 800c1d4:	60a3      	str	r3, [r4, #8]
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	071a      	lsls	r2, r3, #28
 800c1da:	d52e      	bpl.n	800c23a <__swbuf_r+0x82>
 800c1dc:	6923      	ldr	r3, [r4, #16]
 800c1de:	b363      	cbz	r3, 800c23a <__swbuf_r+0x82>
 800c1e0:	6923      	ldr	r3, [r4, #16]
 800c1e2:	6820      	ldr	r0, [r4, #0]
 800c1e4:	1ac0      	subs	r0, r0, r3
 800c1e6:	6963      	ldr	r3, [r4, #20]
 800c1e8:	b2f6      	uxtb	r6, r6
 800c1ea:	4283      	cmp	r3, r0
 800c1ec:	4637      	mov	r7, r6
 800c1ee:	dc04      	bgt.n	800c1fa <__swbuf_r+0x42>
 800c1f0:	4621      	mov	r1, r4
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	f000 f948 	bl	800c488 <_fflush_r>
 800c1f8:	bb28      	cbnz	r0, 800c246 <__swbuf_r+0x8e>
 800c1fa:	68a3      	ldr	r3, [r4, #8]
 800c1fc:	3b01      	subs	r3, #1
 800c1fe:	60a3      	str	r3, [r4, #8]
 800c200:	6823      	ldr	r3, [r4, #0]
 800c202:	1c5a      	adds	r2, r3, #1
 800c204:	6022      	str	r2, [r4, #0]
 800c206:	701e      	strb	r6, [r3, #0]
 800c208:	6963      	ldr	r3, [r4, #20]
 800c20a:	3001      	adds	r0, #1
 800c20c:	4283      	cmp	r3, r0
 800c20e:	d004      	beq.n	800c21a <__swbuf_r+0x62>
 800c210:	89a3      	ldrh	r3, [r4, #12]
 800c212:	07db      	lsls	r3, r3, #31
 800c214:	d519      	bpl.n	800c24a <__swbuf_r+0x92>
 800c216:	2e0a      	cmp	r6, #10
 800c218:	d117      	bne.n	800c24a <__swbuf_r+0x92>
 800c21a:	4621      	mov	r1, r4
 800c21c:	4628      	mov	r0, r5
 800c21e:	f000 f933 	bl	800c488 <_fflush_r>
 800c222:	b190      	cbz	r0, 800c24a <__swbuf_r+0x92>
 800c224:	e00f      	b.n	800c246 <__swbuf_r+0x8e>
 800c226:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <__swbuf_r+0x9c>)
 800c228:	429c      	cmp	r4, r3
 800c22a:	d101      	bne.n	800c230 <__swbuf_r+0x78>
 800c22c:	68ac      	ldr	r4, [r5, #8]
 800c22e:	e7d0      	b.n	800c1d2 <__swbuf_r+0x1a>
 800c230:	4b09      	ldr	r3, [pc, #36]	; (800c258 <__swbuf_r+0xa0>)
 800c232:	429c      	cmp	r4, r3
 800c234:	bf08      	it	eq
 800c236:	68ec      	ldreq	r4, [r5, #12]
 800c238:	e7cb      	b.n	800c1d2 <__swbuf_r+0x1a>
 800c23a:	4621      	mov	r1, r4
 800c23c:	4628      	mov	r0, r5
 800c23e:	f000 f81f 	bl	800c280 <__swsetup_r>
 800c242:	2800      	cmp	r0, #0
 800c244:	d0cc      	beq.n	800c1e0 <__swbuf_r+0x28>
 800c246:	f04f 37ff 	mov.w	r7, #4294967295
 800c24a:	4638      	mov	r0, r7
 800c24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c24e:	bf00      	nop
 800c250:	0800cb64 	.word	0x0800cb64
 800c254:	0800cb84 	.word	0x0800cb84
 800c258:	0800cb44 	.word	0x0800cb44

0800c25c <_write_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4c07      	ldr	r4, [pc, #28]	; (800c27c <_write_r+0x20>)
 800c260:	4605      	mov	r5, r0
 800c262:	4608      	mov	r0, r1
 800c264:	4611      	mov	r1, r2
 800c266:	2200      	movs	r2, #0
 800c268:	6022      	str	r2, [r4, #0]
 800c26a:	461a      	mov	r2, r3
 800c26c:	f7f6 faef 	bl	800284e <_write>
 800c270:	1c43      	adds	r3, r0, #1
 800c272:	d102      	bne.n	800c27a <_write_r+0x1e>
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	b103      	cbz	r3, 800c27a <_write_r+0x1e>
 800c278:	602b      	str	r3, [r5, #0]
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	20001444 	.word	0x20001444

0800c280 <__swsetup_r>:
 800c280:	4b32      	ldr	r3, [pc, #200]	; (800c34c <__swsetup_r+0xcc>)
 800c282:	b570      	push	{r4, r5, r6, lr}
 800c284:	681d      	ldr	r5, [r3, #0]
 800c286:	4606      	mov	r6, r0
 800c288:	460c      	mov	r4, r1
 800c28a:	b125      	cbz	r5, 800c296 <__swsetup_r+0x16>
 800c28c:	69ab      	ldr	r3, [r5, #24]
 800c28e:	b913      	cbnz	r3, 800c296 <__swsetup_r+0x16>
 800c290:	4628      	mov	r0, r5
 800c292:	f7ff fca9 	bl	800bbe8 <__sinit>
 800c296:	4b2e      	ldr	r3, [pc, #184]	; (800c350 <__swsetup_r+0xd0>)
 800c298:	429c      	cmp	r4, r3
 800c29a:	d10f      	bne.n	800c2bc <__swsetup_r+0x3c>
 800c29c:	686c      	ldr	r4, [r5, #4]
 800c29e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	0715      	lsls	r5, r2, #28
 800c2a6:	d42c      	bmi.n	800c302 <__swsetup_r+0x82>
 800c2a8:	06d0      	lsls	r0, r2, #27
 800c2aa:	d411      	bmi.n	800c2d0 <__swsetup_r+0x50>
 800c2ac:	2209      	movs	r2, #9
 800c2ae:	6032      	str	r2, [r6, #0]
 800c2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ba:	e03e      	b.n	800c33a <__swsetup_r+0xba>
 800c2bc:	4b25      	ldr	r3, [pc, #148]	; (800c354 <__swsetup_r+0xd4>)
 800c2be:	429c      	cmp	r4, r3
 800c2c0:	d101      	bne.n	800c2c6 <__swsetup_r+0x46>
 800c2c2:	68ac      	ldr	r4, [r5, #8]
 800c2c4:	e7eb      	b.n	800c29e <__swsetup_r+0x1e>
 800c2c6:	4b24      	ldr	r3, [pc, #144]	; (800c358 <__swsetup_r+0xd8>)
 800c2c8:	429c      	cmp	r4, r3
 800c2ca:	bf08      	it	eq
 800c2cc:	68ec      	ldreq	r4, [r5, #12]
 800c2ce:	e7e6      	b.n	800c29e <__swsetup_r+0x1e>
 800c2d0:	0751      	lsls	r1, r2, #29
 800c2d2:	d512      	bpl.n	800c2fa <__swsetup_r+0x7a>
 800c2d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2d6:	b141      	cbz	r1, 800c2ea <__swsetup_r+0x6a>
 800c2d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2dc:	4299      	cmp	r1, r3
 800c2de:	d002      	beq.n	800c2e6 <__swsetup_r+0x66>
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f7ff fd6b 	bl	800bdbc <_free_r>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	6363      	str	r3, [r4, #52]	; 0x34
 800c2ea:	89a3      	ldrh	r3, [r4, #12]
 800c2ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2f0:	81a3      	strh	r3, [r4, #12]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	6063      	str	r3, [r4, #4]
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	f043 0308 	orr.w	r3, r3, #8
 800c300:	81a3      	strh	r3, [r4, #12]
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	b94b      	cbnz	r3, 800c31a <__swsetup_r+0x9a>
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c30c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c310:	d003      	beq.n	800c31a <__swsetup_r+0x9a>
 800c312:	4621      	mov	r1, r4
 800c314:	4630      	mov	r0, r6
 800c316:	f000 f917 	bl	800c548 <__smakebuf_r>
 800c31a:	89a2      	ldrh	r2, [r4, #12]
 800c31c:	f012 0301 	ands.w	r3, r2, #1
 800c320:	d00c      	beq.n	800c33c <__swsetup_r+0xbc>
 800c322:	2300      	movs	r3, #0
 800c324:	60a3      	str	r3, [r4, #8]
 800c326:	6963      	ldr	r3, [r4, #20]
 800c328:	425b      	negs	r3, r3
 800c32a:	61a3      	str	r3, [r4, #24]
 800c32c:	6923      	ldr	r3, [r4, #16]
 800c32e:	b953      	cbnz	r3, 800c346 <__swsetup_r+0xc6>
 800c330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c334:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c338:	d1ba      	bne.n	800c2b0 <__swsetup_r+0x30>
 800c33a:	bd70      	pop	{r4, r5, r6, pc}
 800c33c:	0792      	lsls	r2, r2, #30
 800c33e:	bf58      	it	pl
 800c340:	6963      	ldrpl	r3, [r4, #20]
 800c342:	60a3      	str	r3, [r4, #8]
 800c344:	e7f2      	b.n	800c32c <__swsetup_r+0xac>
 800c346:	2000      	movs	r0, #0
 800c348:	e7f7      	b.n	800c33a <__swsetup_r+0xba>
 800c34a:	bf00      	nop
 800c34c:	2000001c 	.word	0x2000001c
 800c350:	0800cb64 	.word	0x0800cb64
 800c354:	0800cb84 	.word	0x0800cb84
 800c358:	0800cb44 	.word	0x0800cb44

0800c35c <_close_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	4c06      	ldr	r4, [pc, #24]	; (800c378 <_close_r+0x1c>)
 800c360:	2300      	movs	r3, #0
 800c362:	4605      	mov	r5, r0
 800c364:	4608      	mov	r0, r1
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	f7f6 fa8d 	bl	8002886 <_close>
 800c36c:	1c43      	adds	r3, r0, #1
 800c36e:	d102      	bne.n	800c376 <_close_r+0x1a>
 800c370:	6823      	ldr	r3, [r4, #0]
 800c372:	b103      	cbz	r3, 800c376 <_close_r+0x1a>
 800c374:	602b      	str	r3, [r5, #0]
 800c376:	bd38      	pop	{r3, r4, r5, pc}
 800c378:	20001444 	.word	0x20001444

0800c37c <__sflush_r>:
 800c37c:	898a      	ldrh	r2, [r1, #12]
 800c37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c382:	4605      	mov	r5, r0
 800c384:	0710      	lsls	r0, r2, #28
 800c386:	460c      	mov	r4, r1
 800c388:	d458      	bmi.n	800c43c <__sflush_r+0xc0>
 800c38a:	684b      	ldr	r3, [r1, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	dc05      	bgt.n	800c39c <__sflush_r+0x20>
 800c390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c392:	2b00      	cmp	r3, #0
 800c394:	dc02      	bgt.n	800c39c <__sflush_r+0x20>
 800c396:	2000      	movs	r0, #0
 800c398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c39e:	2e00      	cmp	r6, #0
 800c3a0:	d0f9      	beq.n	800c396 <__sflush_r+0x1a>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3a8:	682f      	ldr	r7, [r5, #0]
 800c3aa:	6a21      	ldr	r1, [r4, #32]
 800c3ac:	602b      	str	r3, [r5, #0]
 800c3ae:	d032      	beq.n	800c416 <__sflush_r+0x9a>
 800c3b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	075a      	lsls	r2, r3, #29
 800c3b6:	d505      	bpl.n	800c3c4 <__sflush_r+0x48>
 800c3b8:	6863      	ldr	r3, [r4, #4]
 800c3ba:	1ac0      	subs	r0, r0, r3
 800c3bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3be:	b10b      	cbz	r3, 800c3c4 <__sflush_r+0x48>
 800c3c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3c2:	1ac0      	subs	r0, r0, r3
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3ca:	6a21      	ldr	r1, [r4, #32]
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	47b0      	blx	r6
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	89a3      	ldrh	r3, [r4, #12]
 800c3d4:	d106      	bne.n	800c3e4 <__sflush_r+0x68>
 800c3d6:	6829      	ldr	r1, [r5, #0]
 800c3d8:	291d      	cmp	r1, #29
 800c3da:	d848      	bhi.n	800c46e <__sflush_r+0xf2>
 800c3dc:	4a29      	ldr	r2, [pc, #164]	; (800c484 <__sflush_r+0x108>)
 800c3de:	40ca      	lsrs	r2, r1
 800c3e0:	07d6      	lsls	r6, r2, #31
 800c3e2:	d544      	bpl.n	800c46e <__sflush_r+0xf2>
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	6062      	str	r2, [r4, #4]
 800c3e8:	04d9      	lsls	r1, r3, #19
 800c3ea:	6922      	ldr	r2, [r4, #16]
 800c3ec:	6022      	str	r2, [r4, #0]
 800c3ee:	d504      	bpl.n	800c3fa <__sflush_r+0x7e>
 800c3f0:	1c42      	adds	r2, r0, #1
 800c3f2:	d101      	bne.n	800c3f8 <__sflush_r+0x7c>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b903      	cbnz	r3, 800c3fa <__sflush_r+0x7e>
 800c3f8:	6560      	str	r0, [r4, #84]	; 0x54
 800c3fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3fc:	602f      	str	r7, [r5, #0]
 800c3fe:	2900      	cmp	r1, #0
 800c400:	d0c9      	beq.n	800c396 <__sflush_r+0x1a>
 800c402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c406:	4299      	cmp	r1, r3
 800c408:	d002      	beq.n	800c410 <__sflush_r+0x94>
 800c40a:	4628      	mov	r0, r5
 800c40c:	f7ff fcd6 	bl	800bdbc <_free_r>
 800c410:	2000      	movs	r0, #0
 800c412:	6360      	str	r0, [r4, #52]	; 0x34
 800c414:	e7c0      	b.n	800c398 <__sflush_r+0x1c>
 800c416:	2301      	movs	r3, #1
 800c418:	4628      	mov	r0, r5
 800c41a:	47b0      	blx	r6
 800c41c:	1c41      	adds	r1, r0, #1
 800c41e:	d1c8      	bne.n	800c3b2 <__sflush_r+0x36>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d0c5      	beq.n	800c3b2 <__sflush_r+0x36>
 800c426:	2b1d      	cmp	r3, #29
 800c428:	d001      	beq.n	800c42e <__sflush_r+0xb2>
 800c42a:	2b16      	cmp	r3, #22
 800c42c:	d101      	bne.n	800c432 <__sflush_r+0xb6>
 800c42e:	602f      	str	r7, [r5, #0]
 800c430:	e7b1      	b.n	800c396 <__sflush_r+0x1a>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c438:	81a3      	strh	r3, [r4, #12]
 800c43a:	e7ad      	b.n	800c398 <__sflush_r+0x1c>
 800c43c:	690f      	ldr	r7, [r1, #16]
 800c43e:	2f00      	cmp	r7, #0
 800c440:	d0a9      	beq.n	800c396 <__sflush_r+0x1a>
 800c442:	0793      	lsls	r3, r2, #30
 800c444:	680e      	ldr	r6, [r1, #0]
 800c446:	bf08      	it	eq
 800c448:	694b      	ldreq	r3, [r1, #20]
 800c44a:	600f      	str	r7, [r1, #0]
 800c44c:	bf18      	it	ne
 800c44e:	2300      	movne	r3, #0
 800c450:	eba6 0807 	sub.w	r8, r6, r7
 800c454:	608b      	str	r3, [r1, #8]
 800c456:	f1b8 0f00 	cmp.w	r8, #0
 800c45a:	dd9c      	ble.n	800c396 <__sflush_r+0x1a>
 800c45c:	4643      	mov	r3, r8
 800c45e:	463a      	mov	r2, r7
 800c460:	6a21      	ldr	r1, [r4, #32]
 800c462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c464:	4628      	mov	r0, r5
 800c466:	47b0      	blx	r6
 800c468:	2800      	cmp	r0, #0
 800c46a:	dc06      	bgt.n	800c47a <__sflush_r+0xfe>
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c472:	81a3      	strh	r3, [r4, #12]
 800c474:	f04f 30ff 	mov.w	r0, #4294967295
 800c478:	e78e      	b.n	800c398 <__sflush_r+0x1c>
 800c47a:	4407      	add	r7, r0
 800c47c:	eba8 0800 	sub.w	r8, r8, r0
 800c480:	e7e9      	b.n	800c456 <__sflush_r+0xda>
 800c482:	bf00      	nop
 800c484:	20400001 	.word	0x20400001

0800c488 <_fflush_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	690b      	ldr	r3, [r1, #16]
 800c48c:	4605      	mov	r5, r0
 800c48e:	460c      	mov	r4, r1
 800c490:	b1db      	cbz	r3, 800c4ca <_fflush_r+0x42>
 800c492:	b118      	cbz	r0, 800c49c <_fflush_r+0x14>
 800c494:	6983      	ldr	r3, [r0, #24]
 800c496:	b90b      	cbnz	r3, 800c49c <_fflush_r+0x14>
 800c498:	f7ff fba6 	bl	800bbe8 <__sinit>
 800c49c:	4b0c      	ldr	r3, [pc, #48]	; (800c4d0 <_fflush_r+0x48>)
 800c49e:	429c      	cmp	r4, r3
 800c4a0:	d109      	bne.n	800c4b6 <_fflush_r+0x2e>
 800c4a2:	686c      	ldr	r4, [r5, #4]
 800c4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4a8:	b17b      	cbz	r3, 800c4ca <_fflush_r+0x42>
 800c4aa:	4621      	mov	r1, r4
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4b2:	f7ff bf63 	b.w	800c37c <__sflush_r>
 800c4b6:	4b07      	ldr	r3, [pc, #28]	; (800c4d4 <_fflush_r+0x4c>)
 800c4b8:	429c      	cmp	r4, r3
 800c4ba:	d101      	bne.n	800c4c0 <_fflush_r+0x38>
 800c4bc:	68ac      	ldr	r4, [r5, #8]
 800c4be:	e7f1      	b.n	800c4a4 <_fflush_r+0x1c>
 800c4c0:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <_fflush_r+0x50>)
 800c4c2:	429c      	cmp	r4, r3
 800c4c4:	bf08      	it	eq
 800c4c6:	68ec      	ldreq	r4, [r5, #12]
 800c4c8:	e7ec      	b.n	800c4a4 <_fflush_r+0x1c>
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	bd38      	pop	{r3, r4, r5, pc}
 800c4ce:	bf00      	nop
 800c4d0:	0800cb64 	.word	0x0800cb64
 800c4d4:	0800cb84 	.word	0x0800cb84
 800c4d8:	0800cb44 	.word	0x0800cb44

0800c4dc <_lseek_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4c07      	ldr	r4, [pc, #28]	; (800c4fc <_lseek_r+0x20>)
 800c4e0:	4605      	mov	r5, r0
 800c4e2:	4608      	mov	r0, r1
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	6022      	str	r2, [r4, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f7f6 f9f2 	bl	80028d4 <_lseek>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d102      	bne.n	800c4fa <_lseek_r+0x1e>
 800c4f4:	6823      	ldr	r3, [r4, #0]
 800c4f6:	b103      	cbz	r3, 800c4fa <_lseek_r+0x1e>
 800c4f8:	602b      	str	r3, [r5, #0]
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	20001444 	.word	0x20001444

0800c500 <__swhatbuf_r>:
 800c500:	b570      	push	{r4, r5, r6, lr}
 800c502:	460e      	mov	r6, r1
 800c504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c508:	2900      	cmp	r1, #0
 800c50a:	b096      	sub	sp, #88	; 0x58
 800c50c:	4614      	mov	r4, r2
 800c50e:	461d      	mov	r5, r3
 800c510:	da07      	bge.n	800c522 <__swhatbuf_r+0x22>
 800c512:	2300      	movs	r3, #0
 800c514:	602b      	str	r3, [r5, #0]
 800c516:	89b3      	ldrh	r3, [r6, #12]
 800c518:	061a      	lsls	r2, r3, #24
 800c51a:	d410      	bmi.n	800c53e <__swhatbuf_r+0x3e>
 800c51c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c520:	e00e      	b.n	800c540 <__swhatbuf_r+0x40>
 800c522:	466a      	mov	r2, sp
 800c524:	f000 f862 	bl	800c5ec <_fstat_r>
 800c528:	2800      	cmp	r0, #0
 800c52a:	dbf2      	blt.n	800c512 <__swhatbuf_r+0x12>
 800c52c:	9a01      	ldr	r2, [sp, #4]
 800c52e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c532:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c536:	425a      	negs	r2, r3
 800c538:	415a      	adcs	r2, r3
 800c53a:	602a      	str	r2, [r5, #0]
 800c53c:	e7ee      	b.n	800c51c <__swhatbuf_r+0x1c>
 800c53e:	2340      	movs	r3, #64	; 0x40
 800c540:	2000      	movs	r0, #0
 800c542:	6023      	str	r3, [r4, #0]
 800c544:	b016      	add	sp, #88	; 0x58
 800c546:	bd70      	pop	{r4, r5, r6, pc}

0800c548 <__smakebuf_r>:
 800c548:	898b      	ldrh	r3, [r1, #12]
 800c54a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c54c:	079d      	lsls	r5, r3, #30
 800c54e:	4606      	mov	r6, r0
 800c550:	460c      	mov	r4, r1
 800c552:	d507      	bpl.n	800c564 <__smakebuf_r+0x1c>
 800c554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	6123      	str	r3, [r4, #16]
 800c55c:	2301      	movs	r3, #1
 800c55e:	6163      	str	r3, [r4, #20]
 800c560:	b002      	add	sp, #8
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	ab01      	add	r3, sp, #4
 800c566:	466a      	mov	r2, sp
 800c568:	f7ff ffca 	bl	800c500 <__swhatbuf_r>
 800c56c:	9900      	ldr	r1, [sp, #0]
 800c56e:	4605      	mov	r5, r0
 800c570:	4630      	mov	r0, r6
 800c572:	f7ff fc71 	bl	800be58 <_malloc_r>
 800c576:	b948      	cbnz	r0, 800c58c <__smakebuf_r+0x44>
 800c578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c57c:	059a      	lsls	r2, r3, #22
 800c57e:	d4ef      	bmi.n	800c560 <__smakebuf_r+0x18>
 800c580:	f023 0303 	bic.w	r3, r3, #3
 800c584:	f043 0302 	orr.w	r3, r3, #2
 800c588:	81a3      	strh	r3, [r4, #12]
 800c58a:	e7e3      	b.n	800c554 <__smakebuf_r+0xc>
 800c58c:	4b0d      	ldr	r3, [pc, #52]	; (800c5c4 <__smakebuf_r+0x7c>)
 800c58e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c590:	89a3      	ldrh	r3, [r4, #12]
 800c592:	6020      	str	r0, [r4, #0]
 800c594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c598:	81a3      	strh	r3, [r4, #12]
 800c59a:	9b00      	ldr	r3, [sp, #0]
 800c59c:	6163      	str	r3, [r4, #20]
 800c59e:	9b01      	ldr	r3, [sp, #4]
 800c5a0:	6120      	str	r0, [r4, #16]
 800c5a2:	b15b      	cbz	r3, 800c5bc <__smakebuf_r+0x74>
 800c5a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f000 f831 	bl	800c610 <_isatty_r>
 800c5ae:	b128      	cbz	r0, 800c5bc <__smakebuf_r+0x74>
 800c5b0:	89a3      	ldrh	r3, [r4, #12]
 800c5b2:	f023 0303 	bic.w	r3, r3, #3
 800c5b6:	f043 0301 	orr.w	r3, r3, #1
 800c5ba:	81a3      	strh	r3, [r4, #12]
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	431d      	orrs	r5, r3
 800c5c0:	81a5      	strh	r5, [r4, #12]
 800c5c2:	e7cd      	b.n	800c560 <__smakebuf_r+0x18>
 800c5c4:	0800bbb1 	.word	0x0800bbb1

0800c5c8 <_read_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4c07      	ldr	r4, [pc, #28]	; (800c5e8 <_read_r+0x20>)
 800c5cc:	4605      	mov	r5, r0
 800c5ce:	4608      	mov	r0, r1
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	6022      	str	r2, [r4, #0]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	f7f6 f91c 	bl	8002814 <_read>
 800c5dc:	1c43      	adds	r3, r0, #1
 800c5de:	d102      	bne.n	800c5e6 <_read_r+0x1e>
 800c5e0:	6823      	ldr	r3, [r4, #0]
 800c5e2:	b103      	cbz	r3, 800c5e6 <_read_r+0x1e>
 800c5e4:	602b      	str	r3, [r5, #0]
 800c5e6:	bd38      	pop	{r3, r4, r5, pc}
 800c5e8:	20001444 	.word	0x20001444

0800c5ec <_fstat_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4c07      	ldr	r4, [pc, #28]	; (800c60c <_fstat_r+0x20>)
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	4608      	mov	r0, r1
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	f7f6 f950 	bl	800289e <_fstat>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	d102      	bne.n	800c608 <_fstat_r+0x1c>
 800c602:	6823      	ldr	r3, [r4, #0]
 800c604:	b103      	cbz	r3, 800c608 <_fstat_r+0x1c>
 800c606:	602b      	str	r3, [r5, #0]
 800c608:	bd38      	pop	{r3, r4, r5, pc}
 800c60a:	bf00      	nop
 800c60c:	20001444 	.word	0x20001444

0800c610 <_isatty_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	4c06      	ldr	r4, [pc, #24]	; (800c62c <_isatty_r+0x1c>)
 800c614:	2300      	movs	r3, #0
 800c616:	4605      	mov	r5, r0
 800c618:	4608      	mov	r0, r1
 800c61a:	6023      	str	r3, [r4, #0]
 800c61c:	f7f6 f94f 	bl	80028be <_isatty>
 800c620:	1c43      	adds	r3, r0, #1
 800c622:	d102      	bne.n	800c62a <_isatty_r+0x1a>
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	b103      	cbz	r3, 800c62a <_isatty_r+0x1a>
 800c628:	602b      	str	r3, [r5, #0]
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	20001444 	.word	0x20001444

0800c630 <_init>:
 800c630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c632:	bf00      	nop
 800c634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c636:	bc08      	pop	{r3}
 800c638:	469e      	mov	lr, r3
 800c63a:	4770      	bx	lr

0800c63c <_fini>:
 800c63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63e:	bf00      	nop
 800c640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c642:	bc08      	pop	{r3}
 800c644:	469e      	mov	lr, r3
 800c646:	4770      	bx	lr
