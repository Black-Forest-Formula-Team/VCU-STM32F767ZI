
BFFT_Architecture_STM32_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800ada8  0800ada8  0001ada8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000002c4  0800b35c  0800b35c  0001b35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000338  0800b620  0800b620  0001b620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b958  0800b958  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800b958  0800b958  0001b958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b964  0800b964  0001b964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b96c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001450  20000080  0800b9ec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014d0  0800b9ec  000214d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030114  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000526d  00000000  00000000  000501c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e68  00000000  00000000  00055430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ca0  00000000  00000000  00057298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000165be  00000000  00000000  00058f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00010ced  00000000  00000000  0006f4f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000801e3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009a80  00000000  00000000  00080238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ad90 	.word	0x0800ad90

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800ad90 	.word	0x0800ad90

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <__aeabi_uldivmod>:
 8000254:	b953      	cbnz	r3, 800026c <__aeabi_uldivmod+0x18>
 8000256:	b94a      	cbnz	r2, 800026c <__aeabi_uldivmod+0x18>
 8000258:	2900      	cmp	r1, #0
 800025a:	bf08      	it	eq
 800025c:	2800      	cmpeq	r0, #0
 800025e:	bf1c      	itt	ne
 8000260:	f04f 31ff 	movne.w	r1, #4294967295
 8000264:	f04f 30ff 	movne.w	r0, #4294967295
 8000268:	f001 b8c0 	b.w	80013ec <__aeabi_idiv0>
 800026c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000280:	b004      	add	sp, #16
 8000282:	4770      	bx	lr

08000284 <__udivmoddi4>:
 8000284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000288:	9d08      	ldr	r5, [sp, #32]
 800028a:	4604      	mov	r4, r0
 800028c:	468c      	mov	ip, r1
 800028e:	2b00      	cmp	r3, #0
 8000290:	f040 8083 	bne.w	800039a <__udivmoddi4+0x116>
 8000294:	428a      	cmp	r2, r1
 8000296:	4617      	mov	r7, r2
 8000298:	d947      	bls.n	800032a <__udivmoddi4+0xa6>
 800029a:	fab2 f282 	clz	r2, r2
 800029e:	b142      	cbz	r2, 80002b2 <__udivmoddi4+0x2e>
 80002a0:	f1c2 0020 	rsb	r0, r2, #32
 80002a4:	fa24 f000 	lsr.w	r0, r4, r0
 80002a8:	4091      	lsls	r1, r2
 80002aa:	4097      	lsls	r7, r2
 80002ac:	ea40 0c01 	orr.w	ip, r0, r1
 80002b0:	4094      	lsls	r4, r2
 80002b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	fbbc f6f8 	udiv	r6, ip, r8
 80002bc:	fa1f fe87 	uxth.w	lr, r7
 80002c0:	fb08 c116 	mls	r1, r8, r6, ip
 80002c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c8:	fb06 f10e 	mul.w	r1, r6, lr
 80002cc:	4299      	cmp	r1, r3
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x60>
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 8119 	bcs.w	800050c <__udivmoddi4+0x288>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 8116 	bls.w	800050c <__udivmoddi4+0x288>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	443b      	add	r3, r7
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002f8:	45a6      	cmp	lr, r4
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x8c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	f080 8105 	bcs.w	8000510 <__udivmoddi4+0x28c>
 8000306:	45a6      	cmp	lr, r4
 8000308:	f240 8102 	bls.w	8000510 <__udivmoddi4+0x28c>
 800030c:	3802      	subs	r0, #2
 800030e:	443c      	add	r4, r7
 8000310:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000314:	eba4 040e 	sub.w	r4, r4, lr
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa0>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xaa>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	2a00      	cmp	r2, #0
 8000334:	d150      	bne.n	80003d8 <__udivmoddi4+0x154>
 8000336:	1bcb      	subs	r3, r1, r7
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f f887 	uxth.w	r8, r7
 8000340:	2601      	movs	r6, #1
 8000342:	fbb3 fcfe 	udiv	ip, r3, lr
 8000346:	0c21      	lsrs	r1, r4, #16
 8000348:	fb0e 331c 	mls	r3, lr, ip, r3
 800034c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000350:	fb08 f30c 	mul.w	r3, r8, ip
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xe4>
 8000358:	1879      	adds	r1, r7, r1
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0xe2>
 8000360:	428b      	cmp	r3, r1
 8000362:	f200 80e9 	bhi.w	8000538 <__udivmoddi4+0x2b4>
 8000366:	4684      	mov	ip, r0
 8000368:	1ac9      	subs	r1, r1, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1110 	mls	r1, lr, r0, r1
 8000374:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x10c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x10a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80d9 	bhi.w	8000540 <__udivmoddi4+0x2bc>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e7bf      	b.n	800031a <__udivmoddi4+0x96>
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0x12e>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80b1 	beq.w	8000506 <__udivmoddi4+0x282>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x1cc>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0x140>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80b8 	bhi.w	8000534 <__udivmoddi4+0x2b0>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	468c      	mov	ip, r1
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0a8      	beq.n	8000324 <__udivmoddi4+0xa0>
 80003d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003d6:	e7a5      	b.n	8000324 <__udivmoddi4+0xa0>
 80003d8:	f1c2 0320 	rsb	r3, r2, #32
 80003dc:	fa20 f603 	lsr.w	r6, r0, r3
 80003e0:	4097      	lsls	r7, r2
 80003e2:	fa01 f002 	lsl.w	r0, r1, r2
 80003e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ea:	40d9      	lsrs	r1, r3
 80003ec:	4330      	orrs	r0, r6
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000400:	fb06 f108 	mul.w	r1, r6, r8
 8000404:	4299      	cmp	r1, r3
 8000406:	fa04 f402 	lsl.w	r4, r4, r2
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x19c>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000412:	f080 808d 	bcs.w	8000530 <__udivmoddi4+0x2ac>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 808a 	bls.w	8000530 <__udivmoddi4+0x2ac>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b281      	uxth	r1, r0
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000430:	fb00 f308 	mul.w	r3, r0, r8
 8000434:	428b      	cmp	r3, r1
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x1c4>
 8000438:	1879      	adds	r1, r7, r1
 800043a:	f100 3cff 	add.w	ip, r0, #4294967295
 800043e:	d273      	bcs.n	8000528 <__udivmoddi4+0x2a4>
 8000440:	428b      	cmp	r3, r1
 8000442:	d971      	bls.n	8000528 <__udivmoddi4+0x2a4>
 8000444:	3802      	subs	r0, #2
 8000446:	4439      	add	r1, r7
 8000448:	1acb      	subs	r3, r1, r3
 800044a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800044e:	e778      	b.n	8000342 <__udivmoddi4+0xbe>
 8000450:	f1c6 0c20 	rsb	ip, r6, #32
 8000454:	fa03 f406 	lsl.w	r4, r3, r6
 8000458:	fa22 f30c 	lsr.w	r3, r2, ip
 800045c:	431c      	orrs	r4, r3
 800045e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800046a:	fa21 f10c 	lsr.w	r1, r1, ip
 800046e:	431f      	orrs	r7, r3
 8000470:	0c3b      	lsrs	r3, r7, #16
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fa1f f884 	uxth.w	r8, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000482:	fb09 fa08 	mul.w	sl, r9, r8
 8000486:	458a      	cmp	sl, r1
 8000488:	fa02 f206 	lsl.w	r2, r2, r6
 800048c:	fa00 f306 	lsl.w	r3, r0, r6
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x220>
 8000492:	1861      	adds	r1, r4, r1
 8000494:	f109 30ff 	add.w	r0, r9, #4294967295
 8000498:	d248      	bcs.n	800052c <__udivmoddi4+0x2a8>
 800049a:	458a      	cmp	sl, r1
 800049c:	d946      	bls.n	800052c <__udivmoddi4+0x2a8>
 800049e:	f1a9 0902 	sub.w	r9, r9, #2
 80004a2:	4421      	add	r1, r4
 80004a4:	eba1 010a 	sub.w	r1, r1, sl
 80004a8:	b2bf      	uxth	r7, r7
 80004aa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ae:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004b6:	fb00 f808 	mul.w	r8, r0, r8
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x24a>
 80004be:	19e7      	adds	r7, r4, r7
 80004c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004c4:	d22e      	bcs.n	8000524 <__udivmoddi4+0x2a0>
 80004c6:	45b8      	cmp	r8, r7
 80004c8:	d92c      	bls.n	8000524 <__udivmoddi4+0x2a0>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4427      	add	r7, r4
 80004ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004d2:	eba7 0708 	sub.w	r7, r7, r8
 80004d6:	fba0 8902 	umull	r8, r9, r0, r2
 80004da:	454f      	cmp	r7, r9
 80004dc:	46c6      	mov	lr, r8
 80004de:	4649      	mov	r1, r9
 80004e0:	d31a      	bcc.n	8000518 <__udivmoddi4+0x294>
 80004e2:	d017      	beq.n	8000514 <__udivmoddi4+0x290>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x27a>
 80004e6:	ebb3 020e 	subs.w	r2, r3, lr
 80004ea:	eb67 0701 	sbc.w	r7, r7, r1
 80004ee:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004f2:	40f2      	lsrs	r2, r6
 80004f4:	ea4c 0202 	orr.w	r2, ip, r2
 80004f8:	40f7      	lsrs	r7, r6
 80004fa:	e9c5 2700 	strd	r2, r7, [r5]
 80004fe:	2600      	movs	r6, #0
 8000500:	4631      	mov	r1, r6
 8000502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000506:	462e      	mov	r6, r5
 8000508:	4628      	mov	r0, r5
 800050a:	e70b      	b.n	8000324 <__udivmoddi4+0xa0>
 800050c:	4606      	mov	r6, r0
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0x60>
 8000510:	4618      	mov	r0, r3
 8000512:	e6fd      	b.n	8000310 <__udivmoddi4+0x8c>
 8000514:	4543      	cmp	r3, r8
 8000516:	d2e5      	bcs.n	80004e4 <__udivmoddi4+0x260>
 8000518:	ebb8 0e02 	subs.w	lr, r8, r2
 800051c:	eb69 0104 	sbc.w	r1, r9, r4
 8000520:	3801      	subs	r0, #1
 8000522:	e7df      	b.n	80004e4 <__udivmoddi4+0x260>
 8000524:	4608      	mov	r0, r1
 8000526:	e7d2      	b.n	80004ce <__udivmoddi4+0x24a>
 8000528:	4660      	mov	r0, ip
 800052a:	e78d      	b.n	8000448 <__udivmoddi4+0x1c4>
 800052c:	4681      	mov	r9, r0
 800052e:	e7b9      	b.n	80004a4 <__udivmoddi4+0x220>
 8000530:	4666      	mov	r6, ip
 8000532:	e775      	b.n	8000420 <__udivmoddi4+0x19c>
 8000534:	4630      	mov	r0, r6
 8000536:	e74a      	b.n	80003ce <__udivmoddi4+0x14a>
 8000538:	f1ac 0c02 	sub.w	ip, ip, #2
 800053c:	4439      	add	r1, r7
 800053e:	e713      	b.n	8000368 <__udivmoddi4+0xe4>
 8000540:	3802      	subs	r0, #2
 8000542:	443c      	add	r4, r7
 8000544:	e724      	b.n	8000390 <__udivmoddi4+0x10c>
 8000546:	bf00      	nop

08000548 <selfrel_offset31>:
 8000548:	6803      	ldr	r3, [r0, #0]
 800054a:	005a      	lsls	r2, r3, #1
 800054c:	bf4c      	ite	mi
 800054e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000552:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000556:	4418      	add	r0, r3
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <search_EIT_table>:
 800055c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000560:	b329      	cbz	r1, 80005ae <search_EIT_table+0x52>
 8000562:	1e4f      	subs	r7, r1, #1
 8000564:	4604      	mov	r4, r0
 8000566:	4615      	mov	r5, r2
 8000568:	463e      	mov	r6, r7
 800056a:	f04f 0800 	mov.w	r8, #0
 800056e:	eb08 0106 	add.w	r1, r8, r6
 8000572:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000576:	1049      	asrs	r1, r1, #1
 8000578:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 800057c:	4648      	mov	r0, r9
 800057e:	f7ff ffe3 	bl	8000548 <selfrel_offset31>
 8000582:	4603      	mov	r3, r0
 8000584:	00c8      	lsls	r0, r1, #3
 8000586:	3008      	adds	r0, #8
 8000588:	428f      	cmp	r7, r1
 800058a:	4420      	add	r0, r4
 800058c:	d009      	beq.n	80005a2 <search_EIT_table+0x46>
 800058e:	42ab      	cmp	r3, r5
 8000590:	d809      	bhi.n	80005a6 <search_EIT_table+0x4a>
 8000592:	f7ff ffd9 	bl	8000548 <selfrel_offset31>
 8000596:	3801      	subs	r0, #1
 8000598:	42a8      	cmp	r0, r5
 800059a:	d20a      	bcs.n	80005b2 <search_EIT_table+0x56>
 800059c:	f101 0801 	add.w	r8, r1, #1
 80005a0:	e7e5      	b.n	800056e <search_EIT_table+0x12>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d905      	bls.n	80005b2 <search_EIT_table+0x56>
 80005a6:	4588      	cmp	r8, r1
 80005a8:	d001      	beq.n	80005ae <search_EIT_table+0x52>
 80005aa:	1e4e      	subs	r6, r1, #1
 80005ac:	e7df      	b.n	800056e <search_EIT_table+0x12>
 80005ae:	f04f 0900 	mov.w	r9, #0
 80005b2:	4648      	mov	r0, r9
 80005b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080005b8 <__gnu_unwind_get_pr_addr>:
 80005b8:	2801      	cmp	r0, #1
 80005ba:	d007      	beq.n	80005cc <__gnu_unwind_get_pr_addr+0x14>
 80005bc:	2802      	cmp	r0, #2
 80005be:	d007      	beq.n	80005d0 <__gnu_unwind_get_pr_addr+0x18>
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <__gnu_unwind_get_pr_addr+0x1c>)
 80005c2:	2800      	cmp	r0, #0
 80005c4:	bf0c      	ite	eq
 80005c6:	4618      	moveq	r0, r3
 80005c8:	2000      	movne	r0, #0
 80005ca:	4770      	bx	lr
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <__gnu_unwind_get_pr_addr+0x20>)
 80005ce:	4770      	bx	lr
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <__gnu_unwind_get_pr_addr+0x24>)
 80005d2:	4770      	bx	lr
 80005d4:	08000c7d 	.word	0x08000c7d
 80005d8:	08000c81 	.word	0x08000c81
 80005dc:	08000c85 	.word	0x08000c85

080005e0 <get_eit_entry>:
 80005e0:	b530      	push	{r4, r5, lr}
 80005e2:	4b23      	ldr	r3, [pc, #140]	; (8000670 <get_eit_entry+0x90>)
 80005e4:	b083      	sub	sp, #12
 80005e6:	4604      	mov	r4, r0
 80005e8:	1e8d      	subs	r5, r1, #2
 80005ea:	b33b      	cbz	r3, 800063c <get_eit_entry+0x5c>
 80005ec:	a901      	add	r1, sp, #4
 80005ee:	4628      	mov	r0, r5
 80005f0:	f3af 8000 	nop.w
 80005f4:	b1e8      	cbz	r0, 8000632 <get_eit_entry+0x52>
 80005f6:	9901      	ldr	r1, [sp, #4]
 80005f8:	462a      	mov	r2, r5
 80005fa:	f7ff ffaf 	bl	800055c <search_EIT_table>
 80005fe:	4601      	mov	r1, r0
 8000600:	b1b8      	cbz	r0, 8000632 <get_eit_entry+0x52>
 8000602:	f7ff ffa1 	bl	8000548 <selfrel_offset31>
 8000606:	684b      	ldr	r3, [r1, #4]
 8000608:	64a0      	str	r0, [r4, #72]	; 0x48
 800060a:	2b01      	cmp	r3, #1
 800060c:	d02b      	beq.n	8000666 <get_eit_entry+0x86>
 800060e:	2b00      	cmp	r3, #0
 8000610:	f101 0004 	add.w	r0, r1, #4
 8000614:	db23      	blt.n	800065e <get_eit_entry+0x7e>
 8000616:	f7ff ff97 	bl	8000548 <selfrel_offset31>
 800061a:	2300      	movs	r3, #0
 800061c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000620:	6803      	ldr	r3, [r0, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db10      	blt.n	8000648 <get_eit_entry+0x68>
 8000626:	f7ff ff8f 	bl	8000548 <selfrel_offset31>
 800062a:	6120      	str	r0, [r4, #16]
 800062c:	2000      	movs	r0, #0
 800062e:	b003      	add	sp, #12
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	2300      	movs	r3, #0
 8000634:	2009      	movs	r0, #9
 8000636:	6123      	str	r3, [r4, #16]
 8000638:	b003      	add	sp, #12
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	490d      	ldr	r1, [pc, #52]	; (8000674 <get_eit_entry+0x94>)
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <get_eit_entry+0x98>)
 8000640:	1a09      	subs	r1, r1, r0
 8000642:	10c9      	asrs	r1, r1, #3
 8000644:	9101      	str	r1, [sp, #4]
 8000646:	e7d7      	b.n	80005f8 <get_eit_entry+0x18>
 8000648:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800064c:	f7ff ffb4 	bl	80005b8 <__gnu_unwind_get_pr_addr>
 8000650:	2800      	cmp	r0, #0
 8000652:	6120      	str	r0, [r4, #16]
 8000654:	bf14      	ite	ne
 8000656:	2000      	movne	r0, #0
 8000658:	2009      	moveq	r0, #9
 800065a:	b003      	add	sp, #12
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	2301      	movs	r3, #1
 8000660:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000664:	e7dc      	b.n	8000620 <get_eit_entry+0x40>
 8000666:	2300      	movs	r3, #0
 8000668:	6123      	str	r3, [r4, #16]
 800066a:	2005      	movs	r0, #5
 800066c:	e7df      	b.n	800062e <get_eit_entry+0x4e>
 800066e:	bf00      	nop
 8000670:	00000000 	.word	0x00000000
 8000674:	0800b958 	.word	0x0800b958
 8000678:	0800b620 	.word	0x0800b620

0800067c <restore_non_core_regs>:
 800067c:	6803      	ldr	r3, [r0, #0]
 800067e:	07da      	lsls	r2, r3, #31
 8000680:	b510      	push	{r4, lr}
 8000682:	4604      	mov	r4, r0
 8000684:	d406      	bmi.n	8000694 <restore_non_core_regs+0x18>
 8000686:	079b      	lsls	r3, r3, #30
 8000688:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800068c:	d509      	bpl.n	80006a2 <restore_non_core_regs+0x26>
 800068e:	f000 fc4b 	bl	8000f28 <__gnu_Unwind_Restore_VFP_D>
 8000692:	6823      	ldr	r3, [r4, #0]
 8000694:	0759      	lsls	r1, r3, #29
 8000696:	d509      	bpl.n	80006ac <restore_non_core_regs+0x30>
 8000698:	071a      	lsls	r2, r3, #28
 800069a:	d50e      	bpl.n	80006ba <restore_non_core_regs+0x3e>
 800069c:	06db      	lsls	r3, r3, #27
 800069e:	d513      	bpl.n	80006c8 <restore_non_core_regs+0x4c>
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	f000 fc39 	bl	8000f18 <__gnu_Unwind_Restore_VFP>
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	0759      	lsls	r1, r3, #29
 80006aa:	d4f5      	bmi.n	8000698 <restore_non_core_regs+0x1c>
 80006ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006b0:	f000 fc42 	bl	8000f38 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	071a      	lsls	r2, r3, #28
 80006b8:	d4f0      	bmi.n	800069c <restore_non_core_regs+0x20>
 80006ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006be:	f000 fc43 	bl	8000f48 <__gnu_Unwind_Restore_WMMXD>
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	06db      	lsls	r3, r3, #27
 80006c6:	d4eb      	bmi.n	80006a0 <restore_non_core_regs+0x24>
 80006c8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80006cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d0:	f000 bc7e 	b.w	8000fd0 <__gnu_Unwind_Restore_WMMXC>

080006d4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006d4:	4603      	mov	r3, r0
 80006d6:	6800      	ldr	r0, [r0, #0]
 80006d8:	b100      	cbz	r0, 80006dc <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 80006da:	4418      	add	r0, r3
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop

080006e0 <__gnu_unwind_24bit.isra.0>:
 80006e0:	2009      	movs	r0, #9
 80006e2:	4770      	bx	lr

080006e4 <_Unwind_DebugHook>:
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <unwind_phase2>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4604      	mov	r4, r0
 80006ec:	460e      	mov	r6, r1
 80006ee:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80006f0:	4620      	mov	r0, r4
 80006f2:	f7ff ff75 	bl	80005e0 <get_eit_entry>
 80006f6:	4605      	mov	r5, r0
 80006f8:	b988      	cbnz	r0, 800071e <unwind_phase2+0x36>
 80006fa:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80006fc:	6163      	str	r3, [r4, #20]
 80006fe:	4632      	mov	r2, r6
 8000700:	6923      	ldr	r3, [r4, #16]
 8000702:	4621      	mov	r1, r4
 8000704:	2001      	movs	r0, #1
 8000706:	4798      	blx	r3
 8000708:	2808      	cmp	r0, #8
 800070a:	d0f0      	beq.n	80006ee <unwind_phase2+0x6>
 800070c:	2807      	cmp	r0, #7
 800070e:	d106      	bne.n	800071e <unwind_phase2+0x36>
 8000710:	4628      	mov	r0, r5
 8000712:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000714:	f7ff ffe6 	bl	80006e4 <_Unwind_DebugHook>
 8000718:	1d30      	adds	r0, r6, #4
 800071a:	f000 fbf1 	bl	8000f00 <__restore_core_regs>
 800071e:	f009 fd66 	bl	800a1ee <abort>
 8000722:	bf00      	nop

08000724 <unwind_phase2_forced>:
 8000724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000728:	1d0d      	adds	r5, r1, #4
 800072a:	4606      	mov	r6, r0
 800072c:	4614      	mov	r4, r2
 800072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000730:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000734:	f10d 0c0c 	add.w	ip, sp, #12
 8000738:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800073c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000748:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800074c:	ad02      	add	r5, sp, #8
 800074e:	68f7      	ldr	r7, [r6, #12]
 8000750:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8000754:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000758:	2300      	movs	r3, #0
 800075a:	602b      	str	r3, [r5, #0]
 800075c:	e021      	b.n	80007a2 <unwind_phase2_forced+0x7e>
 800075e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000760:	6173      	str	r3, [r6, #20]
 8000762:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000766:	4629      	mov	r1, r5
 8000768:	a87a      	add	r0, sp, #488	; 0x1e8
 800076a:	f009 fe7b 	bl	800a464 <memcpy>
 800076e:	6933      	ldr	r3, [r6, #16]
 8000770:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000772:	4631      	mov	r1, r6
 8000774:	4650      	mov	r0, sl
 8000776:	4798      	blx	r3
 8000778:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800077a:	e9cd 5800 	strd	r5, r8, [sp]
 800077e:	4621      	mov	r1, r4
 8000780:	646b      	str	r3, [r5, #68]	; 0x44
 8000782:	4681      	mov	r9, r0
 8000784:	4633      	mov	r3, r6
 8000786:	4632      	mov	r2, r6
 8000788:	2001      	movs	r0, #1
 800078a:	47b8      	blx	r7
 800078c:	4604      	mov	r4, r0
 800078e:	b9e8      	cbnz	r0, 80007cc <unwind_phase2_forced+0xa8>
 8000790:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000794:	a97a      	add	r1, sp, #488	; 0x1e8
 8000796:	4628      	mov	r0, r5
 8000798:	f009 fe64 	bl	800a464 <memcpy>
 800079c:	f1b9 0f08 	cmp.w	r9, #8
 80007a0:	d11b      	bne.n	80007da <unwind_phase2_forced+0xb6>
 80007a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007a4:	4630      	mov	r0, r6
 80007a6:	f7ff ff1b 	bl	80005e0 <get_eit_entry>
 80007aa:	3409      	adds	r4, #9
 80007ac:	fa5f fa84 	uxtb.w	sl, r4
 80007b0:	4681      	mov	r9, r0
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d0d3      	beq.n	800075e <unwind_phase2_forced+0x3a>
 80007b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80007b8:	f04a 0110 	orr.w	r1, sl, #16
 80007bc:	e9cd 5800 	strd	r5, r8, [sp]
 80007c0:	4632      	mov	r2, r6
 80007c2:	646b      	str	r3, [r5, #68]	; 0x44
 80007c4:	2001      	movs	r0, #1
 80007c6:	4633      	mov	r3, r6
 80007c8:	47b8      	blx	r7
 80007ca:	b108      	cbz	r0, 80007d0 <unwind_phase2_forced+0xac>
 80007cc:	f04f 0909 	mov.w	r9, #9
 80007d0:	4648      	mov	r0, r9
 80007d2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007da:	f1b9 0f07 	cmp.w	r9, #7
 80007de:	d1f5      	bne.n	80007cc <unwind_phase2_forced+0xa8>
 80007e0:	4620      	mov	r0, r4
 80007e2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007e4:	f7ff ff7e 	bl	80006e4 <_Unwind_DebugHook>
 80007e8:	a803      	add	r0, sp, #12
 80007ea:	f000 fb89 	bl	8000f00 <__restore_core_regs>
 80007ee:	bf00      	nop

080007f0 <_Unwind_GetCFA>:
 80007f0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007f2:	4770      	bx	lr

080007f4 <__gnu_Unwind_RaiseException>:
 80007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007f8:	640b      	str	r3, [r1, #64]	; 0x40
 80007fa:	1d0e      	adds	r6, r1, #4
 80007fc:	460f      	mov	r7, r1
 80007fe:	4605      	mov	r5, r0
 8000800:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000802:	b0f9      	sub	sp, #484	; 0x1e4
 8000804:	ac01      	add	r4, sp, #4
 8000806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000808:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800080e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000810:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000814:	f04f 36ff 	mov.w	r6, #4294967295
 8000818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800081c:	9600      	str	r6, [sp, #0]
 800081e:	e006      	b.n	800082e <__gnu_Unwind_RaiseException+0x3a>
 8000820:	692b      	ldr	r3, [r5, #16]
 8000822:	466a      	mov	r2, sp
 8000824:	4629      	mov	r1, r5
 8000826:	4798      	blx	r3
 8000828:	2808      	cmp	r0, #8
 800082a:	4604      	mov	r4, r0
 800082c:	d108      	bne.n	8000840 <__gnu_Unwind_RaiseException+0x4c>
 800082e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000830:	4628      	mov	r0, r5
 8000832:	f7ff fed5 	bl	80005e0 <get_eit_entry>
 8000836:	2800      	cmp	r0, #0
 8000838:	d0f2      	beq.n	8000820 <__gnu_Unwind_RaiseException+0x2c>
 800083a:	2009      	movs	r0, #9
 800083c:	b079      	add	sp, #484	; 0x1e4
 800083e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000840:	4668      	mov	r0, sp
 8000842:	f7ff ff1b 	bl	800067c <restore_non_core_regs>
 8000846:	2c06      	cmp	r4, #6
 8000848:	d1f7      	bne.n	800083a <__gnu_Unwind_RaiseException+0x46>
 800084a:	4639      	mov	r1, r7
 800084c:	4628      	mov	r0, r5
 800084e:	f7ff ff4b 	bl	80006e8 <unwind_phase2>
 8000852:	bf00      	nop

08000854 <__gnu_Unwind_ForcedUnwind>:
 8000854:	b430      	push	{r4, r5}
 8000856:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000858:	60c1      	str	r1, [r0, #12]
 800085a:	6182      	str	r2, [r0, #24]
 800085c:	4619      	mov	r1, r3
 800085e:	641d      	str	r5, [r3, #64]	; 0x40
 8000860:	2200      	movs	r2, #0
 8000862:	bc30      	pop	{r4, r5}
 8000864:	e75e      	b.n	8000724 <unwind_phase2_forced>
 8000866:	bf00      	nop

08000868 <__gnu_Unwind_Resume>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	68c6      	ldr	r6, [r0, #12]
 800086c:	6943      	ldr	r3, [r0, #20]
 800086e:	640b      	str	r3, [r1, #64]	; 0x40
 8000870:	b9ae      	cbnz	r6, 800089e <__gnu_Unwind_Resume+0x36>
 8000872:	6903      	ldr	r3, [r0, #16]
 8000874:	460a      	mov	r2, r1
 8000876:	4604      	mov	r4, r0
 8000878:	460d      	mov	r5, r1
 800087a:	4601      	mov	r1, r0
 800087c:	2002      	movs	r0, #2
 800087e:	4798      	blx	r3
 8000880:	2807      	cmp	r0, #7
 8000882:	d005      	beq.n	8000890 <__gnu_Unwind_Resume+0x28>
 8000884:	2808      	cmp	r0, #8
 8000886:	d10f      	bne.n	80008a8 <__gnu_Unwind_Resume+0x40>
 8000888:	4629      	mov	r1, r5
 800088a:	4620      	mov	r0, r4
 800088c:	f7ff ff2c 	bl	80006e8 <unwind_phase2>
 8000890:	4630      	mov	r0, r6
 8000892:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000894:	f7ff ff26 	bl	80006e4 <_Unwind_DebugHook>
 8000898:	1d28      	adds	r0, r5, #4
 800089a:	f000 fb31 	bl	8000f00 <__restore_core_regs>
 800089e:	2201      	movs	r2, #1
 80008a0:	f7ff ff40 	bl	8000724 <unwind_phase2_forced>
 80008a4:	f009 fca3 	bl	800a1ee <abort>
 80008a8:	f009 fca1 	bl	800a1ee <abort>

080008ac <__gnu_Unwind_Resume_or_Rethrow>:
 80008ac:	68c2      	ldr	r2, [r0, #12]
 80008ae:	b11a      	cbz	r2, 80008b8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008b0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008b2:	640a      	str	r2, [r1, #64]	; 0x40
 80008b4:	2200      	movs	r2, #0
 80008b6:	e735      	b.n	8000724 <unwind_phase2_forced>
 80008b8:	e79c      	b.n	80007f4 <__gnu_Unwind_RaiseException>
 80008ba:	bf00      	nop

080008bc <_Unwind_Complete>:
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop

080008c0 <_Unwind_DeleteException>:
 80008c0:	6883      	ldr	r3, [r0, #8]
 80008c2:	4601      	mov	r1, r0
 80008c4:	b10b      	cbz	r3, 80008ca <_Unwind_DeleteException+0xa>
 80008c6:	2001      	movs	r0, #1
 80008c8:	4718      	bx	r3
 80008ca:	4770      	bx	lr

080008cc <_Unwind_VRS_Get>:
 80008cc:	2901      	cmp	r1, #1
 80008ce:	d012      	beq.n	80008f6 <_Unwind_VRS_Get+0x2a>
 80008d0:	d809      	bhi.n	80008e6 <_Unwind_VRS_Get+0x1a>
 80008d2:	b973      	cbnz	r3, 80008f2 <_Unwind_VRS_Get+0x26>
 80008d4:	2a0f      	cmp	r2, #15
 80008d6:	d80c      	bhi.n	80008f2 <_Unwind_VRS_Get+0x26>
 80008d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008dc:	4618      	mov	r0, r3
 80008de:	6853      	ldr	r3, [r2, #4]
 80008e0:	9a00      	ldr	r2, [sp, #0]
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4770      	bx	lr
 80008e6:	3903      	subs	r1, #3
 80008e8:	2901      	cmp	r1, #1
 80008ea:	bf94      	ite	ls
 80008ec:	2001      	movls	r0, #1
 80008ee:	2002      	movhi	r0, #2
 80008f0:	4770      	bx	lr
 80008f2:	2002      	movs	r0, #2
 80008f4:	4770      	bx	lr
 80008f6:	4608      	mov	r0, r1
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <_Unwind_GetGR>:
 80008fc:	b510      	push	{r4, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	2300      	movs	r3, #0
 8000902:	ac03      	add	r4, sp, #12
 8000904:	460a      	mov	r2, r1
 8000906:	9400      	str	r4, [sp, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f7ff ffdf 	bl	80008cc <_Unwind_VRS_Get>
 800090e:	9803      	ldr	r0, [sp, #12]
 8000910:	b004      	add	sp, #16
 8000912:	bd10      	pop	{r4, pc}

08000914 <_Unwind_VRS_Set>:
 8000914:	2901      	cmp	r1, #1
 8000916:	d012      	beq.n	800093e <_Unwind_VRS_Set+0x2a>
 8000918:	d809      	bhi.n	800092e <_Unwind_VRS_Set+0x1a>
 800091a:	b973      	cbnz	r3, 800093a <_Unwind_VRS_Set+0x26>
 800091c:	2a0f      	cmp	r2, #15
 800091e:	d80c      	bhi.n	800093a <_Unwind_VRS_Set+0x26>
 8000920:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000924:	9a00      	ldr	r2, [sp, #0]
 8000926:	6812      	ldr	r2, [r2, #0]
 8000928:	6042      	str	r2, [r0, #4]
 800092a:	4618      	mov	r0, r3
 800092c:	4770      	bx	lr
 800092e:	3903      	subs	r1, #3
 8000930:	2901      	cmp	r1, #1
 8000932:	bf94      	ite	ls
 8000934:	2001      	movls	r0, #1
 8000936:	2002      	movhi	r0, #2
 8000938:	4770      	bx	lr
 800093a:	2002      	movs	r0, #2
 800093c:	4770      	bx	lr
 800093e:	4608      	mov	r0, r1
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <_Unwind_SetGR>:
 8000944:	b510      	push	{r4, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	2300      	movs	r3, #0
 800094a:	ac03      	add	r4, sp, #12
 800094c:	9203      	str	r2, [sp, #12]
 800094e:	9400      	str	r4, [sp, #0]
 8000950:	460a      	mov	r2, r1
 8000952:	4619      	mov	r1, r3
 8000954:	f7ff ffde 	bl	8000914 <_Unwind_VRS_Set>
 8000958:	b004      	add	sp, #16
 800095a:	bd10      	pop	{r4, pc}

0800095c <__gnu_Unwind_Backtrace>:
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	1d15      	adds	r5, r2, #4
 8000964:	468c      	mov	ip, r1
 8000966:	4606      	mov	r6, r0
 8000968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800096e:	ac17      	add	r4, sp, #92	; 0x5c
 8000970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800097e:	f04f 37ff 	mov.w	r7, #4294967295
 8000982:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000986:	4665      	mov	r5, ip
 8000988:	9716      	str	r7, [sp, #88]	; 0x58
 800098a:	e010      	b.n	80009ae <__gnu_Unwind_Backtrace+0x52>
 800098c:	f7ff ffda 	bl	8000944 <_Unwind_SetGR>
 8000990:	4629      	mov	r1, r5
 8000992:	a816      	add	r0, sp, #88	; 0x58
 8000994:	47b0      	blx	r6
 8000996:	4603      	mov	r3, r0
 8000998:	aa16      	add	r2, sp, #88	; 0x58
 800099a:	4669      	mov	r1, sp
 800099c:	2008      	movs	r0, #8
 800099e:	b983      	cbnz	r3, 80009c2 <__gnu_Unwind_Backtrace+0x66>
 80009a0:	9b04      	ldr	r3, [sp, #16]
 80009a2:	4798      	blx	r3
 80009a4:	2805      	cmp	r0, #5
 80009a6:	4604      	mov	r4, r0
 80009a8:	d00c      	beq.n	80009c4 <__gnu_Unwind_Backtrace+0x68>
 80009aa:	2809      	cmp	r0, #9
 80009ac:	d009      	beq.n	80009c2 <__gnu_Unwind_Backtrace+0x66>
 80009ae:	9926      	ldr	r1, [sp, #152]	; 0x98
 80009b0:	4668      	mov	r0, sp
 80009b2:	f7ff fe15 	bl	80005e0 <get_eit_entry>
 80009b6:	4603      	mov	r3, r0
 80009b8:	466a      	mov	r2, sp
 80009ba:	210c      	movs	r1, #12
 80009bc:	a816      	add	r0, sp, #88	; 0x58
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0e4      	beq.n	800098c <__gnu_Unwind_Backtrace+0x30>
 80009c2:	2409      	movs	r4, #9
 80009c4:	a816      	add	r0, sp, #88	; 0x58
 80009c6:	f7ff fe59 	bl	800067c <restore_non_core_regs>
 80009ca:	4620      	mov	r0, r4
 80009cc:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d2:	bf00      	nop

080009d4 <__gnu_unwind_pr_common>:
 80009d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009d8:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	460d      	mov	r5, r1
 80009de:	f854 1b04 	ldr.w	r1, [r4], #4
 80009e2:	9406      	str	r4, [sp, #24]
 80009e4:	4617      	mov	r7, r2
 80009e6:	f000 0803 	and.w	r8, r0, #3
 80009ea:	461e      	mov	r6, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d079      	beq.n	8000ae4 <__gnu_unwind_pr_common+0x110>
 80009f0:	0c0b      	lsrs	r3, r1, #16
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	0409      	lsls	r1, r1, #16
 80009f6:	f88d 301d 	strb.w	r3, [sp, #29]
 80009fa:	2302      	movs	r3, #2
 80009fc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000a00:	9105      	str	r1, [sp, #20]
 8000a02:	f88d 301c 	strb.w	r3, [sp, #28]
 8000a06:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a08:	f1b8 0f02 	cmp.w	r8, #2
 8000a0c:	bf08      	it	eq
 8000a0e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a10:	f013 0301 	ands.w	r3, r3, #1
 8000a14:	d00c      	beq.n	8000a30 <__gnu_unwind_pr_common+0x5c>
 8000a16:	4638      	mov	r0, r7
 8000a18:	a905      	add	r1, sp, #20
 8000a1a:	f000 fb73 	bl	8001104 <__gnu_unwind_execute>
 8000a1e:	b918      	cbnz	r0, 8000a28 <__gnu_unwind_pr_common+0x54>
 8000a20:	2008      	movs	r0, #8
 8000a22:	b009      	add	sp, #36	; 0x24
 8000a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a28:	2009      	movs	r0, #9
 8000a2a:	b009      	add	sp, #36	; 0x24
 8000a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a30:	f8d4 a000 	ldr.w	sl, [r4]
 8000a34:	f1ba 0f00 	cmp.w	sl, #0
 8000a38:	d0ed      	beq.n	8000a16 <__gnu_unwind_pr_common+0x42>
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	f000 0308 	and.w	r3, r0, #8
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	2e02      	cmp	r6, #2
 8000a44:	d04a      	beq.n	8000adc <__gnu_unwind_pr_common+0x108>
 8000a46:	f8b4 a000 	ldrh.w	sl, [r4]
 8000a4a:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000a4e:	3404      	adds	r4, #4
 8000a50:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000a52:	f029 0b01 	bic.w	fp, r9, #1
 8000a56:	210f      	movs	r1, #15
 8000a58:	4638      	mov	r0, r7
 8000a5a:	4493      	add	fp, r2
 8000a5c:	f7ff ff4e 	bl	80008fc <_Unwind_GetGR>
 8000a60:	4583      	cmp	fp, r0
 8000a62:	d839      	bhi.n	8000ad8 <__gnu_unwind_pr_common+0x104>
 8000a64:	f02a 0201 	bic.w	r2, sl, #1
 8000a68:	445a      	add	r2, fp
 8000a6a:	4282      	cmp	r2, r0
 8000a6c:	bf94      	ite	ls
 8000a6e:	2000      	movls	r0, #0
 8000a70:	2001      	movhi	r0, #1
 8000a72:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	f00a 0a01 	and.w	sl, sl, #1
 8000a7e:	ea43 030a 	orr.w	r3, r3, sl
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d049      	beq.n	8000b1a <__gnu_unwind_pr_common+0x146>
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d032      	beq.n	8000af0 <__gnu_unwind_pr_common+0x11c>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1cc      	bne.n	8000a28 <__gnu_unwind_pr_common+0x54>
 8000a8e:	f1b8 0f00 	cmp.w	r8, #0
 8000a92:	d002      	beq.n	8000a9a <__gnu_unwind_pr_common+0xc6>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	f040 80cd 	bne.w	8000c34 <__gnu_unwind_pr_common+0x260>
 8000a9a:	3404      	adds	r4, #4
 8000a9c:	f8d4 a000 	ldr.w	sl, [r4]
 8000aa0:	f1ba 0f00 	cmp.w	sl, #0
 8000aa4:	d1cd      	bne.n	8000a42 <__gnu_unwind_pr_common+0x6e>
 8000aa6:	a905      	add	r1, sp, #20
 8000aa8:	4638      	mov	r0, r7
 8000aaa:	f000 fb2b 	bl	8001104 <__gnu_unwind_execute>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d1ba      	bne.n	8000a28 <__gnu_unwind_pr_common+0x54>
 8000ab2:	9b01      	ldr	r3, [sp, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0b3      	beq.n	8000a20 <__gnu_unwind_pr_common+0x4c>
 8000ab8:	210f      	movs	r1, #15
 8000aba:	4638      	mov	r0, r7
 8000abc:	f7ff ff1e 	bl	80008fc <_Unwind_GetGR>
 8000ac0:	210e      	movs	r1, #14
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	4638      	mov	r0, r7
 8000ac6:	f7ff ff3d 	bl	8000944 <_Unwind_SetGR>
 8000aca:	4638      	mov	r0, r7
 8000acc:	4a6a      	ldr	r2, [pc, #424]	; (8000c78 <__gnu_unwind_pr_common+0x2a4>)
 8000ace:	210f      	movs	r1, #15
 8000ad0:	f7ff ff38 	bl	8000944 <_Unwind_SetGR>
 8000ad4:	2007      	movs	r0, #7
 8000ad6:	e7a8      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	e7ca      	b.n	8000a72 <__gnu_unwind_pr_common+0x9e>
 8000adc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000ae0:	3408      	adds	r4, #8
 8000ae2:	e7b5      	b.n	8000a50 <__gnu_unwind_pr_common+0x7c>
 8000ae4:	0209      	lsls	r1, r1, #8
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	9105      	str	r1, [sp, #20]
 8000aea:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000aee:	e78a      	b.n	8000a06 <__gnu_unwind_pr_common+0x32>
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000af6:	f1b8 0f00 	cmp.w	r8, #0
 8000afa:	d145      	bne.n	8000b88 <__gnu_unwind_pr_common+0x1b4>
 8000afc:	b128      	cbz	r0, 8000b0a <__gnu_unwind_pr_common+0x136>
 8000afe:	9a02      	ldr	r2, [sp, #8]
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	d05c      	beq.n	8000bbe <__gnu_unwind_pr_common+0x1ea>
 8000b04:	f1bb 0f00 	cmp.w	fp, #0
 8000b08:	d074      	beq.n	8000bf4 <__gnu_unwind_pr_common+0x220>
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da00      	bge.n	8000b10 <__gnu_unwind_pr_common+0x13c>
 8000b0e:	3404      	adds	r4, #4
 8000b10:	f10b 0b01 	add.w	fp, fp, #1
 8000b14:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000b18:	e7c0      	b.n	8000a9c <__gnu_unwind_pr_common+0xc8>
 8000b1a:	f1b8 0f00 	cmp.w	r8, #0
 8000b1e:	d119      	bne.n	8000b54 <__gnu_unwind_pr_common+0x180>
 8000b20:	b1b0      	cbz	r0, 8000b50 <__gnu_unwind_pr_common+0x17c>
 8000b22:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000b26:	1c99      	adds	r1, r3, #2
 8000b28:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b2c:	f43f af7c 	beq.w	8000a28 <__gnu_unwind_pr_common+0x54>
 8000b30:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b34:	3301      	adds	r3, #1
 8000b36:	9104      	str	r1, [sp, #16]
 8000b38:	f000 8090 	beq.w	8000c5c <__gnu_unwind_pr_common+0x288>
 8000b3c:	1d20      	adds	r0, r4, #4
 8000b3e:	f7ff fdc9 	bl	80006d4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b42:	ab04      	add	r3, sp, #16
 8000b44:	4601      	mov	r1, r0
 8000b46:	4628      	mov	r0, r5
 8000b48:	f008 fcba 	bl	80094c0 <__cxa_type_match>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d15b      	bne.n	8000c08 <__gnu_unwind_pr_common+0x234>
 8000b50:	3408      	adds	r4, #8
 8000b52:	e7a3      	b.n	8000a9c <__gnu_unwind_pr_common+0xc8>
 8000b54:	210d      	movs	r1, #13
 8000b56:	4638      	mov	r0, r7
 8000b58:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000b5c:	f7ff fece 	bl	80008fc <_Unwind_GetGR>
 8000b60:	4581      	cmp	r9, r0
 8000b62:	d1f5      	bne.n	8000b50 <__gnu_unwind_pr_common+0x17c>
 8000b64:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b66:	429c      	cmp	r4, r3
 8000b68:	d1f2      	bne.n	8000b50 <__gnu_unwind_pr_common+0x17c>
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f7ff fcec 	bl	8000548 <selfrel_offset31>
 8000b70:	210f      	movs	r1, #15
 8000b72:	4602      	mov	r2, r0
 8000b74:	4638      	mov	r0, r7
 8000b76:	f7ff fee5 	bl	8000944 <_Unwind_SetGR>
 8000b7a:	4638      	mov	r0, r7
 8000b7c:	462a      	mov	r2, r5
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f7ff fee0 	bl	8000944 <_Unwind_SetGR>
 8000b84:	2007      	movs	r0, #7
 8000b86:	e750      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000b88:	210d      	movs	r1, #13
 8000b8a:	4638      	mov	r0, r7
 8000b8c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000b90:	f7ff feb4 	bl	80008fc <_Unwind_GetGR>
 8000b94:	4581      	cmp	r9, r0
 8000b96:	d001      	beq.n	8000b9c <__gnu_unwind_pr_common+0x1c8>
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	e7b6      	b.n	8000b0a <__gnu_unwind_pr_common+0x136>
 8000b9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b9e:	429c      	cmp	r4, r3
 8000ba0:	d1fa      	bne.n	8000b98 <__gnu_unwind_pr_common+0x1c4>
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 8000baa:	18a3      	adds	r3, r4, r2
 8000bac:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000bb0:	636b      	str	r3, [r5, #52]	; 0x34
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	db59      	blt.n	8000c6c <__gnu_unwind_pr_common+0x298>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	e7a8      	b.n	8000b10 <__gnu_unwind_pr_common+0x13c>
 8000bbe:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bc6:	f104 0a04 	add.w	sl, r4, #4
 8000bca:	46b0      	mov	r8, r6
 8000bcc:	4691      	mov	r9, r2
 8000bce:	461e      	mov	r6, r3
 8000bd0:	e00d      	b.n	8000bee <__gnu_unwind_pr_common+0x21a>
 8000bd2:	9604      	str	r6, [sp, #16]
 8000bd4:	f7ff fd7e 	bl	80006d4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bd8:	ab04      	add	r3, sp, #16
 8000bda:	4601      	mov	r1, r0
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4628      	mov	r0, r5
 8000be0:	f008 fc6e 	bl	80094c0 <__cxa_type_match>
 8000be4:	f109 0901 	add.w	r9, r9, #1
 8000be8:	f10a 0a04 	add.w	sl, sl, #4
 8000bec:	b9e8      	cbnz	r0, 8000c2a <__gnu_unwind_pr_common+0x256>
 8000bee:	45d9      	cmp	r9, fp
 8000bf0:	4650      	mov	r0, sl
 8000bf2:	d1ee      	bne.n	8000bd2 <__gnu_unwind_pr_common+0x1fe>
 8000bf4:	4638      	mov	r0, r7
 8000bf6:	210d      	movs	r1, #13
 8000bf8:	f7ff fe80 	bl	80008fc <_Unwind_GetGR>
 8000bfc:	9b04      	ldr	r3, [sp, #16]
 8000bfe:	6228      	str	r0, [r5, #32]
 8000c00:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000c04:	2006      	movs	r0, #6
 8000c06:	e710      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000c08:	4681      	mov	r9, r0
 8000c0a:	210d      	movs	r1, #13
 8000c0c:	4638      	mov	r0, r7
 8000c0e:	f7ff fe75 	bl	80008fc <_Unwind_GetGR>
 8000c12:	f1b9 0f02 	cmp.w	r9, #2
 8000c16:	6228      	str	r0, [r5, #32]
 8000c18:	d125      	bne.n	8000c66 <__gnu_unwind_pr_common+0x292>
 8000c1a:	462b      	mov	r3, r5
 8000c1c:	9a04      	ldr	r2, [sp, #16]
 8000c1e:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c22:	626b      	str	r3, [r5, #36]	; 0x24
 8000c24:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c26:	2006      	movs	r0, #6
 8000c28:	e6ff      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000c2a:	4646      	mov	r6, r8
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000c32:	e76a      	b.n	8000b0a <__gnu_unwind_pr_common+0x136>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f7ff fc87 	bl	8000548 <selfrel_offset31>
 8000c3a:	3404      	adds	r4, #4
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c40:	4628      	mov	r0, r5
 8000c42:	4614      	mov	r4, r2
 8000c44:	f008 fc9a 	bl	800957c <__cxa_begin_cleanup>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	f43f aeed 	beq.w	8000a28 <__gnu_unwind_pr_common+0x54>
 8000c4e:	4638      	mov	r0, r7
 8000c50:	4622      	mov	r2, r4
 8000c52:	210f      	movs	r1, #15
 8000c54:	f7ff fe76 	bl	8000944 <_Unwind_SetGR>
 8000c58:	2007      	movs	r0, #7
 8000c5a:	e6e6      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000c5c:	4638      	mov	r0, r7
 8000c5e:	210d      	movs	r1, #13
 8000c60:	f7ff fe4c 	bl	80008fc <_Unwind_GetGR>
 8000c64:	6228      	str	r0, [r5, #32]
 8000c66:	9b04      	ldr	r3, [sp, #16]
 8000c68:	626b      	str	r3, [r5, #36]	; 0x24
 8000c6a:	e7db      	b.n	8000c24 <__gnu_unwind_pr_common+0x250>
 8000c6c:	f10b 0001 	add.w	r0, fp, #1
 8000c70:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c74:	e77a      	b.n	8000b6c <__gnu_unwind_pr_common+0x198>
 8000c76:	bf00      	nop
 8000c78:	0800a0a5 	.word	0x0800a0a5

08000c7c <__aeabi_unwind_cpp_pr0>:
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e6a9      	b.n	80009d4 <__gnu_unwind_pr_common>

08000c80 <__aeabi_unwind_cpp_pr1>:
 8000c80:	2301      	movs	r3, #1
 8000c82:	e6a7      	b.n	80009d4 <__gnu_unwind_pr_common>

08000c84 <__aeabi_unwind_cpp_pr2>:
 8000c84:	2302      	movs	r3, #2
 8000c86:	e6a5      	b.n	80009d4 <__gnu_unwind_pr_common>

08000c88 <_Unwind_VRS_Pop>:
 8000c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	b0c3      	sub	sp, #268	; 0x10c
 8000c90:	4615      	mov	r5, r2
 8000c92:	461c      	mov	r4, r3
 8000c94:	2904      	cmp	r1, #4
 8000c96:	f200 80b9 	bhi.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000c9a:	e8df f001 	tbb	[pc, r1]
 8000c9e:	539a      	.short	0x539a
 8000ca0:	29b7      	.short	0x29b7
 8000ca2:	03          	.byte	0x03
 8000ca3:	00          	.byte	0x00
 8000ca4:	2c00      	cmp	r4, #0
 8000ca6:	f040 80b1 	bne.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000caa:	2a10      	cmp	r2, #16
 8000cac:	f200 80ae 	bhi.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000cb0:	6803      	ldr	r3, [r0, #0]
 8000cb2:	06d8      	lsls	r0, r3, #27
 8000cb4:	f100 80f3 	bmi.w	8000e9e <_Unwind_VRS_Pop+0x216>
 8000cb8:	af20      	add	r7, sp, #128	; 0x80
 8000cba:	4638      	mov	r0, r7
 8000cbc:	f000 f992 	bl	8000fe4 <__gnu_Unwind_Save_WMMXC>
 8000cc0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2401      	movs	r4, #1
 8000cc6:	fa04 f203 	lsl.w	r2, r4, r3
 8000cca:	422a      	tst	r2, r5
 8000ccc:	4601      	mov	r1, r0
 8000cce:	d004      	beq.n	8000cda <_Unwind_VRS_Pop+0x52>
 8000cd0:	f851 2b04 	ldr.w	r2, [r1], #4
 8000cd4:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000cd8:	4608      	mov	r0, r1
 8000cda:	3301      	adds	r3, #1
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d1f2      	bne.n	8000cc6 <_Unwind_VRS_Pop+0x3e>
 8000ce0:	63b0      	str	r0, [r6, #56]	; 0x38
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	f000 f974 	bl	8000fd0 <__gnu_Unwind_Restore_WMMXC>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	b043      	add	sp, #268	; 0x10c
 8000cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cf0:	2c03      	cmp	r4, #3
 8000cf2:	f040 808b 	bne.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000cf6:	b294      	uxth	r4, r2
 8000cf8:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000cfc:	2b10      	cmp	r3, #16
 8000cfe:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000d02:	f200 8083 	bhi.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000d06:	6803      	ldr	r3, [r0, #0]
 8000d08:	071f      	lsls	r7, r3, #28
 8000d0a:	f100 80d0 	bmi.w	8000eae <_Unwind_VRS_Pop+0x226>
 8000d0e:	af20      	add	r7, sp, #128	; 0x80
 8000d10:	4638      	mov	r0, r7
 8000d12:	f000 f93b 	bl	8000f8c <__gnu_Unwind_Save_WMMXD>
 8000d16:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000d1a:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8000d1c:	b154      	cbz	r4, 8000d34 <_Unwind_VRS_Pop+0xac>
 8000d1e:	460b      	mov	r3, r1
 8000d20:	1ae8      	subs	r0, r5, r3
 8000d22:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000d26:	00e4      	lsls	r4, r4, #3
 8000d28:	581a      	ldr	r2, [r3, r0]
 8000d2a:	f843 2b04 	str.w	r2, [r3], #4
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d1fa      	bne.n	8000d28 <_Unwind_VRS_Pop+0xa0>
 8000d32:	4425      	add	r5, r4
 8000d34:	4638      	mov	r0, r7
 8000d36:	63b5      	str	r5, [r6, #56]	; 0x38
 8000d38:	f000 f906 	bl	8000f48 <__gnu_Unwind_Restore_WMMXD>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	b043      	add	sp, #268	; 0x10c
 8000d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d44:	2c01      	cmp	r4, #1
 8000d46:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000d4a:	b295      	uxth	r5, r2
 8000d4c:	d05a      	beq.n	8000e04 <_Unwind_VRS_Pop+0x17c>
 8000d4e:	2c05      	cmp	r4, #5
 8000d50:	d15c      	bne.n	8000e0c <_Unwind_VRS_Pop+0x184>
 8000d52:	eb08 0905 	add.w	r9, r8, r5
 8000d56:	f1b9 0f20 	cmp.w	r9, #32
 8000d5a:	d857      	bhi.n	8000e0c <_Unwind_VRS_Pop+0x184>
 8000d5c:	f1b8 0f0f 	cmp.w	r8, #15
 8000d60:	d977      	bls.n	8000e52 <_Unwind_VRS_Pop+0x1ca>
 8000d62:	46a9      	mov	r9, r5
 8000d64:	2d00      	cmp	r5, #0
 8000d66:	f040 8088 	bne.w	8000e7a <_Unwind_VRS_Pop+0x1f2>
 8000d6a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000d6c:	b36d      	cbz	r5, 8000dca <_Unwind_VRS_Pop+0x142>
 8000d6e:	af20      	add	r7, sp, #128	; 0x80
 8000d70:	f04f 0900 	mov.w	r9, #0
 8000d74:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000d78:	3f04      	subs	r7, #4
 8000d7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000d7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8000d82:	f847 1f04 	str.w	r1, [r7, #4]!
 8000d86:	42ab      	cmp	r3, r5
 8000d88:	d1f9      	bne.n	8000d7e <_Unwind_VRS_Pop+0xf6>
 8000d8a:	f1b9 0f00 	cmp.w	r9, #0
 8000d8e:	d00f      	beq.n	8000db0 <_Unwind_VRS_Pop+0x128>
 8000d90:	466f      	mov	r7, sp
 8000d92:	4641      	mov	r1, r8
 8000d94:	2910      	cmp	r1, #16
 8000d96:	bf38      	it	cc
 8000d98:	2110      	movcc	r1, #16
 8000d9a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000d9e:	3984      	subs	r1, #132	; 0x84
 8000da0:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000da4:	f853 0b04 	ldr.w	r0, [r3], #4
 8000da8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d1f9      	bne.n	8000da4 <_Unwind_VRS_Pop+0x11c>
 8000db0:	2c01      	cmp	r4, #1
 8000db2:	f000 8084 	beq.w	8000ebe <_Unwind_VRS_Pop+0x236>
 8000db6:	f1b8 0f0f 	cmp.w	r8, #15
 8000dba:	63b5      	str	r5, [r6, #56]	; 0x38
 8000dbc:	d945      	bls.n	8000e4a <_Unwind_VRS_Pop+0x1c2>
 8000dbe:	f1b9 0f00 	cmp.w	r9, #0
 8000dc2:	d002      	beq.n	8000dca <_Unwind_VRS_Pop+0x142>
 8000dc4:	4668      	mov	r0, sp
 8000dc6:	f000 f8b7 	bl	8000f38 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000dca:	2000      	movs	r0, #0
 8000dcc:	b043      	add	sp, #268	; 0x10c
 8000dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dd2:	b9dc      	cbnz	r4, 8000e0c <_Unwind_VRS_Pop+0x184>
 8000dd4:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8000dd6:	4623      	mov	r3, r4
 8000dd8:	2001      	movs	r0, #1
 8000dda:	b294      	uxth	r4, r2
 8000ddc:	f106 0c04 	add.w	ip, r6, #4
 8000de0:	fa00 f203 	lsl.w	r2, r0, r3
 8000de4:	4222      	tst	r2, r4
 8000de6:	4639      	mov	r1, r7
 8000de8:	d004      	beq.n	8000df4 <_Unwind_VRS_Pop+0x16c>
 8000dea:	f851 2b04 	ldr.w	r2, [r1], #4
 8000dee:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 8000df2:	460f      	mov	r7, r1
 8000df4:	3301      	adds	r3, #1
 8000df6:	2b10      	cmp	r3, #16
 8000df8:	d1f2      	bne.n	8000de0 <_Unwind_VRS_Pop+0x158>
 8000dfa:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000dfe:	d1e4      	bne.n	8000dca <_Unwind_VRS_Pop+0x142>
 8000e00:	63b7      	str	r7, [r6, #56]	; 0x38
 8000e02:	e004      	b.n	8000e0e <_Unwind_VRS_Pop+0x186>
 8000e04:	eb08 0305 	add.w	r3, r8, r5
 8000e08:	2b10      	cmp	r3, #16
 8000e0a:	d903      	bls.n	8000e14 <_Unwind_VRS_Pop+0x18c>
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	b043      	add	sp, #268	; 0x10c
 8000e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e14:	f1b8 0f0f 	cmp.w	r8, #15
 8000e18:	d8f8      	bhi.n	8000e0c <_Unwind_VRS_Pop+0x184>
 8000e1a:	6833      	ldr	r3, [r6, #0]
 8000e1c:	07da      	lsls	r2, r3, #31
 8000e1e:	d506      	bpl.n	8000e2e <_Unwind_VRS_Pop+0x1a6>
 8000e20:	4630      	mov	r0, r6
 8000e22:	f023 0303 	bic.w	r3, r3, #3
 8000e26:	f840 3b48 	str.w	r3, [r0], #72
 8000e2a:	f000 f879 	bl	8000f20 <__gnu_Unwind_Save_VFP>
 8000e2e:	af20      	add	r7, sp, #128	; 0x80
 8000e30:	4638      	mov	r0, r7
 8000e32:	f000 f875 	bl	8000f20 <__gnu_Unwind_Save_VFP>
 8000e36:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d199      	bne.n	8000d70 <_Unwind_VRS_Pop+0xe8>
 8000e3c:	461d      	mov	r5, r3
 8000e3e:	3504      	adds	r5, #4
 8000e40:	63b5      	str	r5, [r6, #56]	; 0x38
 8000e42:	4638      	mov	r0, r7
 8000e44:	f000 f868 	bl	8000f18 <__gnu_Unwind_Restore_VFP>
 8000e48:	e7bf      	b.n	8000dca <_Unwind_VRS_Pop+0x142>
 8000e4a:	a820      	add	r0, sp, #128	; 0x80
 8000e4c:	f000 f86c 	bl	8000f28 <__gnu_Unwind_Restore_VFP_D>
 8000e50:	e7b5      	b.n	8000dbe <_Unwind_VRS_Pop+0x136>
 8000e52:	f1b9 0f10 	cmp.w	r9, #16
 8000e56:	d940      	bls.n	8000eda <_Unwind_VRS_Pop+0x252>
 8000e58:	f1a9 0910 	sub.w	r9, r9, #16
 8000e5c:	6833      	ldr	r3, [r6, #0]
 8000e5e:	07d9      	lsls	r1, r3, #31
 8000e60:	d508      	bpl.n	8000e74 <_Unwind_VRS_Pop+0x1ec>
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	4630      	mov	r0, r6
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	f840 3b48 	str.w	r3, [r0], #72
 8000e70:	f000 f85e 	bl	8000f30 <__gnu_Unwind_Save_VFP_D>
 8000e74:	f1b9 0f00 	cmp.w	r9, #0
 8000e78:	d032      	beq.n	8000ee0 <_Unwind_VRS_Pop+0x258>
 8000e7a:	6833      	ldr	r3, [r6, #0]
 8000e7c:	075a      	lsls	r2, r3, #29
 8000e7e:	d420      	bmi.n	8000ec2 <_Unwind_VRS_Pop+0x23a>
 8000e80:	f1b8 0f0f 	cmp.w	r8, #15
 8000e84:	d925      	bls.n	8000ed2 <_Unwind_VRS_Pop+0x24a>
 8000e86:	466f      	mov	r7, sp
 8000e88:	4638      	mov	r0, r7
 8000e8a:	f1c8 0510 	rsb	r5, r8, #16
 8000e8e:	f000 f857 	bl	8000f40 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e96:	f77f af7c 	ble.w	8000d92 <_Unwind_VRS_Pop+0x10a>
 8000e9a:	af20      	add	r7, sp, #128	; 0x80
 8000e9c:	e76a      	b.n	8000d74 <_Unwind_VRS_Pop+0xec>
 8000e9e:	f023 0310 	bic.w	r3, r3, #16
 8000ea2:	6033      	str	r3, [r6, #0]
 8000ea4:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000ea8:	f000 f89c 	bl	8000fe4 <__gnu_Unwind_Save_WMMXC>
 8000eac:	e704      	b.n	8000cb8 <_Unwind_VRS_Pop+0x30>
 8000eae:	f023 0308 	bic.w	r3, r3, #8
 8000eb2:	6003      	str	r3, [r0, #0]
 8000eb4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000eb8:	f000 f868 	bl	8000f8c <__gnu_Unwind_Save_WMMXD>
 8000ebc:	e727      	b.n	8000d0e <_Unwind_VRS_Pop+0x86>
 8000ebe:	af20      	add	r7, sp, #128	; 0x80
 8000ec0:	e7bd      	b.n	8000e3e <_Unwind_VRS_Pop+0x1b6>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	f023 0304 	bic.w	r3, r3, #4
 8000ec8:	f840 3bd0 	str.w	r3, [r0], #208
 8000ecc:	f000 f838 	bl	8000f40 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ed0:	e7d6      	b.n	8000e80 <_Unwind_VRS_Pop+0x1f8>
 8000ed2:	a820      	add	r0, sp, #128	; 0x80
 8000ed4:	f000 f82c 	bl	8000f30 <__gnu_Unwind_Save_VFP_D>
 8000ed8:	e7d5      	b.n	8000e86 <_Unwind_VRS_Pop+0x1fe>
 8000eda:	f04f 0900 	mov.w	r9, #0
 8000ede:	e7bd      	b.n	8000e5c <_Unwind_VRS_Pop+0x1d4>
 8000ee0:	f1b8 0f0f 	cmp.w	r8, #15
 8000ee4:	f63f af41 	bhi.w	8000d6a <_Unwind_VRS_Pop+0xe2>
 8000ee8:	af20      	add	r7, sp, #128	; 0x80
 8000eea:	4638      	mov	r0, r7
 8000eec:	f000 f820 	bl	8000f30 <__gnu_Unwind_Save_VFP_D>
 8000ef0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	f47f af3c 	bne.w	8000d70 <_Unwind_VRS_Pop+0xe8>
 8000ef8:	4638      	mov	r0, r7
 8000efa:	f000 f815 	bl	8000f28 <__gnu_Unwind_Restore_VFP_D>
 8000efe:	e764      	b.n	8000dca <_Unwind_VRS_Pop+0x142>

08000f00 <__restore_core_regs>:
 8000f00:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f04:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f08:	469c      	mov	ip, r3
 8000f0a:	46a6      	mov	lr, r4
 8000f0c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f10:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f14:	46e5      	mov	sp, ip
 8000f16:	bd00      	pop	{pc}

08000f18 <__gnu_Unwind_Restore_VFP>:
 8000f18:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__gnu_Unwind_Save_VFP>:
 8000f20:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__gnu_Unwind_Restore_VFP_D>:
 8000f28:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__gnu_Unwind_Save_VFP_D>:
 8000f30:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f38:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f40:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <__gnu_Unwind_Restore_WMMXD>:
 8000f48:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f4c:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f50:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f54:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f58:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f5c:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f60:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f64:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f68:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f6c:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f70:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f74:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f78:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f7c:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f80:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f84:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__gnu_Unwind_Save_WMMXD>:
 8000f8c:	ece0 0102 	stfe	f0, [r0], #8
 8000f90:	ece0 1102 	stfe	f1, [r0], #8
 8000f94:	ece0 2102 	stfe	f2, [r0], #8
 8000f98:	ece0 3102 	stfe	f3, [r0], #8
 8000f9c:	ece0 4102 	stfe	f4, [r0], #8
 8000fa0:	ece0 5102 	stfe	f5, [r0], #8
 8000fa4:	ece0 6102 	stfe	f6, [r0], #8
 8000fa8:	ece0 7102 	stfe	f7, [r0], #8
 8000fac:	ece0 8102 	stfp	f0, [r0], #8
 8000fb0:	ece0 9102 	stfp	f1, [r0], #8
 8000fb4:	ece0 a102 	stfp	f2, [r0], #8
 8000fb8:	ece0 b102 	stfp	f3, [r0], #8
 8000fbc:	ece0 c102 	stfp	f4, [r0], #8
 8000fc0:	ece0 d102 	stfp	f5, [r0], #8
 8000fc4:	ece0 e102 	stfp	f6, [r0], #8
 8000fc8:	ece0 f102 	stfp	f7, [r0], #8
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__gnu_Unwind_Restore_WMMXC>:
 8000fd0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fd4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fd8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fdc:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__gnu_Unwind_Save_WMMXC>:
 8000fe4:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fe8:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fec:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000ff0:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_Unwind_RaiseException>:
 8000ff8:	46ec      	mov	ip, sp
 8000ffa:	b500      	push	{lr}
 8000ffc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001000:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e92d 000c 	stmdb	sp!, {r2, r3}
 800100c:	a901      	add	r1, sp, #4
 800100e:	f7ff fbf1 	bl	80007f4 <__gnu_Unwind_RaiseException>
 8001012:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001016:	b012      	add	sp, #72	; 0x48
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <_Unwind_Resume>:
 800101c:	46ec      	mov	ip, sp
 800101e:	b500      	push	{lr}
 8001020:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001024:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001030:	a901      	add	r1, sp, #4
 8001032:	f7ff fc19 	bl	8000868 <__gnu_Unwind_Resume>
 8001036:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800103a:	b012      	add	sp, #72	; 0x48
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_Unwind_Resume_or_Rethrow>:
 8001040:	46ec      	mov	ip, sp
 8001042:	b500      	push	{lr}
 8001044:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001048:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001054:	a901      	add	r1, sp, #4
 8001056:	f7ff fc29 	bl	80008ac <__gnu_Unwind_Resume_or_Rethrow>
 800105a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800105e:	b012      	add	sp, #72	; 0x48
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <_Unwind_ForcedUnwind>:
 8001064:	46ec      	mov	ip, sp
 8001066:	b500      	push	{lr}
 8001068:	e92d 5000 	stmdb	sp!, {ip, lr}
 800106c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001078:	ab01      	add	r3, sp, #4
 800107a:	f7ff fbeb 	bl	8000854 <__gnu_Unwind_ForcedUnwind>
 800107e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001082:	b012      	add	sp, #72	; 0x48
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <_Unwind_Backtrace>:
 8001088:	46ec      	mov	ip, sp
 800108a:	b500      	push	{lr}
 800108c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001090:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	e92d 000c 	stmdb	sp!, {r2, r3}
 800109c:	aa01      	add	r2, sp, #4
 800109e:	f7ff fc5d 	bl	800095c <__gnu_Unwind_Backtrace>
 80010a2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010a6:	b012      	add	sp, #72	; 0x48
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <next_unwind_byte>:
 80010ac:	7a02      	ldrb	r2, [r0, #8]
 80010ae:	b97a      	cbnz	r2, 80010d0 <next_unwind_byte+0x24>
 80010b0:	7a43      	ldrb	r3, [r0, #9]
 80010b2:	b1a3      	cbz	r3, 80010de <next_unwind_byte+0x32>
 80010b4:	6842      	ldr	r2, [r0, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	b410      	push	{r4}
 80010ba:	7243      	strb	r3, [r0, #9]
 80010bc:	6813      	ldr	r3, [r2, #0]
 80010be:	2103      	movs	r1, #3
 80010c0:	1d14      	adds	r4, r2, #4
 80010c2:	7201      	strb	r1, [r0, #8]
 80010c4:	021a      	lsls	r2, r3, #8
 80010c6:	6044      	str	r4, [r0, #4]
 80010c8:	6002      	str	r2, [r0, #0]
 80010ca:	bc10      	pop	{r4}
 80010cc:	0e18      	lsrs	r0, r3, #24
 80010ce:	4770      	bx	lr
 80010d0:	6803      	ldr	r3, [r0, #0]
 80010d2:	3a01      	subs	r2, #1
 80010d4:	7202      	strb	r2, [r0, #8]
 80010d6:	021a      	lsls	r2, r3, #8
 80010d8:	6002      	str	r2, [r0, #0]
 80010da:	0e18      	lsrs	r0, r3, #24
 80010dc:	4770      	bx	lr
 80010de:	20b0      	movs	r0, #176	; 0xb0
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <_Unwind_GetGR.constprop.0>:
 80010e4:	b500      	push	{lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	aa03      	add	r2, sp, #12
 80010ea:	2300      	movs	r3, #0
 80010ec:	9200      	str	r2, [sp, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	220c      	movs	r2, #12
 80010f2:	f7ff fbeb 	bl	80008cc <_Unwind_VRS_Get>
 80010f6:	9803      	ldr	r0, [sp, #12]
 80010f8:	b005      	add	sp, #20
 80010fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80010fe:	bf00      	nop

08001100 <unwind_UCB_from_context>:
 8001100:	e7f0      	b.n	80010e4 <_Unwind_GetGR.constprop.0>
 8001102:	bf00      	nop

08001104 <__gnu_unwind_execute>:
 8001104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001108:	4605      	mov	r5, r0
 800110a:	b085      	sub	sp, #20
 800110c:	460e      	mov	r6, r1
 800110e:	f04f 0800 	mov.w	r8, #0
 8001112:	4630      	mov	r0, r6
 8001114:	f7ff ffca 	bl	80010ac <next_unwind_byte>
 8001118:	28b0      	cmp	r0, #176	; 0xb0
 800111a:	4604      	mov	r4, r0
 800111c:	f000 80b2 	beq.w	8001284 <__gnu_unwind_execute+0x180>
 8001120:	0607      	lsls	r7, r0, #24
 8001122:	d520      	bpl.n	8001166 <__gnu_unwind_execute+0x62>
 8001124:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001128:	2b80      	cmp	r3, #128	; 0x80
 800112a:	d04d      	beq.n	80011c8 <__gnu_unwind_execute+0xc4>
 800112c:	2b90      	cmp	r3, #144	; 0x90
 800112e:	d036      	beq.n	800119e <__gnu_unwind_execute+0x9a>
 8001130:	2ba0      	cmp	r3, #160	; 0xa0
 8001132:	d060      	beq.n	80011f6 <__gnu_unwind_execute+0xf2>
 8001134:	2bb0      	cmp	r3, #176	; 0xb0
 8001136:	d074      	beq.n	8001222 <__gnu_unwind_execute+0x11e>
 8001138:	2bc0      	cmp	r3, #192	; 0xc0
 800113a:	f000 808b 	beq.w	8001254 <__gnu_unwind_execute+0x150>
 800113e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001142:	2bd0      	cmp	r3, #208	; 0xd0
 8001144:	d10b      	bne.n	800115e <__gnu_unwind_execute+0x5a>
 8001146:	f000 0207 	and.w	r2, r0, #7
 800114a:	3201      	adds	r2, #1
 800114c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001150:	2305      	movs	r3, #5
 8001152:	2101      	movs	r1, #1
 8001154:	4628      	mov	r0, r5
 8001156:	f7ff fd97 	bl	8000c88 <_Unwind_VRS_Pop>
 800115a:	2800      	cmp	r0, #0
 800115c:	d0d9      	beq.n	8001112 <__gnu_unwind_execute+0xe>
 800115e:	2009      	movs	r0, #9
 8001160:	b005      	add	sp, #20
 8001162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001166:	f10d 090c 	add.w	r9, sp, #12
 800116a:	2300      	movs	r3, #0
 800116c:	4619      	mov	r1, r3
 800116e:	0087      	lsls	r7, r0, #2
 8001170:	f8cd 9000 	str.w	r9, [sp]
 8001174:	220d      	movs	r2, #13
 8001176:	4628      	mov	r0, r5
 8001178:	f7ff fba8 	bl	80008cc <_Unwind_VRS_Get>
 800117c:	b2ff      	uxtb	r7, r7
 800117e:	9b03      	ldr	r3, [sp, #12]
 8001180:	f8cd 9000 	str.w	r9, [sp]
 8001184:	3704      	adds	r7, #4
 8001186:	0660      	lsls	r0, r4, #25
 8001188:	bf4c      	ite	mi
 800118a:	1bdf      	submi	r7, r3, r7
 800118c:	18ff      	addpl	r7, r7, r3
 800118e:	2300      	movs	r3, #0
 8001190:	4619      	mov	r1, r3
 8001192:	220d      	movs	r2, #13
 8001194:	4628      	mov	r0, r5
 8001196:	9703      	str	r7, [sp, #12]
 8001198:	f7ff fbbc 	bl	8000914 <_Unwind_VRS_Set>
 800119c:	e7b9      	b.n	8001112 <__gnu_unwind_execute+0xe>
 800119e:	f000 030d 	and.w	r3, r0, #13
 80011a2:	2b0d      	cmp	r3, #13
 80011a4:	d0db      	beq.n	800115e <__gnu_unwind_execute+0x5a>
 80011a6:	af03      	add	r7, sp, #12
 80011a8:	2300      	movs	r3, #0
 80011aa:	f000 020f 	and.w	r2, r0, #15
 80011ae:	4619      	mov	r1, r3
 80011b0:	9700      	str	r7, [sp, #0]
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff fb8a 	bl	80008cc <_Unwind_VRS_Get>
 80011b8:	2300      	movs	r3, #0
 80011ba:	9700      	str	r7, [sp, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	220d      	movs	r2, #13
 80011c0:	4628      	mov	r0, r5
 80011c2:	f7ff fba7 	bl	8000914 <_Unwind_VRS_Set>
 80011c6:	e7a4      	b.n	8001112 <__gnu_unwind_execute+0xe>
 80011c8:	4630      	mov	r0, r6
 80011ca:	f7ff ff6f 	bl	80010ac <next_unwind_byte>
 80011ce:	0224      	lsls	r4, r4, #8
 80011d0:	4320      	orrs	r0, r4
 80011d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80011d6:	d0c2      	beq.n	800115e <__gnu_unwind_execute+0x5a>
 80011d8:	0104      	lsls	r4, r0, #4
 80011da:	2300      	movs	r3, #0
 80011dc:	b2a2      	uxth	r2, r4
 80011de:	4619      	mov	r1, r3
 80011e0:	4628      	mov	r0, r5
 80011e2:	f7ff fd51 	bl	8000c88 <_Unwind_VRS_Pop>
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d1b9      	bne.n	800115e <__gnu_unwind_execute+0x5a>
 80011ea:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80011ee:	bf18      	it	ne
 80011f0:	f04f 0801 	movne.w	r8, #1
 80011f4:	e78d      	b.n	8001112 <__gnu_unwind_execute+0xe>
 80011f6:	43c2      	mvns	r2, r0
 80011f8:	f002 0307 	and.w	r3, r2, #7
 80011fc:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001200:	411a      	asrs	r2, r3
 8001202:	0701      	lsls	r1, r0, #28
 8001204:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	bf48      	it	mi
 800120e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001212:	4619      	mov	r1, r3
 8001214:	4628      	mov	r0, r5
 8001216:	f7ff fd37 	bl	8000c88 <_Unwind_VRS_Pop>
 800121a:	2800      	cmp	r0, #0
 800121c:	f43f af79 	beq.w	8001112 <__gnu_unwind_execute+0xe>
 8001220:	e79d      	b.n	800115e <__gnu_unwind_execute+0x5a>
 8001222:	28b1      	cmp	r0, #177	; 0xb1
 8001224:	d033      	beq.n	800128e <__gnu_unwind_execute+0x18a>
 8001226:	28b2      	cmp	r0, #178	; 0xb2
 8001228:	f000 808b 	beq.w	8001342 <__gnu_unwind_execute+0x23e>
 800122c:	28b3      	cmp	r0, #179	; 0xb3
 800122e:	d039      	beq.n	80012a4 <__gnu_unwind_execute+0x1a0>
 8001230:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001234:	2bb4      	cmp	r3, #180	; 0xb4
 8001236:	d092      	beq.n	800115e <__gnu_unwind_execute+0x5a>
 8001238:	f000 0207 	and.w	r2, r0, #7
 800123c:	3201      	adds	r2, #1
 800123e:	2301      	movs	r3, #1
 8001240:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001244:	4619      	mov	r1, r3
 8001246:	4628      	mov	r0, r5
 8001248:	f7ff fd1e 	bl	8000c88 <_Unwind_VRS_Pop>
 800124c:	2800      	cmp	r0, #0
 800124e:	f43f af60 	beq.w	8001112 <__gnu_unwind_execute+0xe>
 8001252:	e784      	b.n	800115e <__gnu_unwind_execute+0x5a>
 8001254:	28c6      	cmp	r0, #198	; 0xc6
 8001256:	d042      	beq.n	80012de <__gnu_unwind_execute+0x1da>
 8001258:	28c7      	cmp	r0, #199	; 0xc7
 800125a:	d04c      	beq.n	80012f6 <__gnu_unwind_execute+0x1f2>
 800125c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001260:	2bc0      	cmp	r3, #192	; 0xc0
 8001262:	d05b      	beq.n	800131c <__gnu_unwind_execute+0x218>
 8001264:	28c8      	cmp	r0, #200	; 0xc8
 8001266:	d060      	beq.n	800132a <__gnu_unwind_execute+0x226>
 8001268:	28c9      	cmp	r0, #201	; 0xc9
 800126a:	f47f af78 	bne.w	800115e <__gnu_unwind_execute+0x5a>
 800126e:	4630      	mov	r0, r6
 8001270:	f7ff ff1c 	bl	80010ac <next_unwind_byte>
 8001274:	0302      	lsls	r2, r0, #12
 8001276:	f000 000f 	and.w	r0, r0, #15
 800127a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800127e:	3001      	adds	r0, #1
 8001280:	4302      	orrs	r2, r0
 8001282:	e765      	b.n	8001150 <__gnu_unwind_execute+0x4c>
 8001284:	f1b8 0f00 	cmp.w	r8, #0
 8001288:	d018      	beq.n	80012bc <__gnu_unwind_execute+0x1b8>
 800128a:	2000      	movs	r0, #0
 800128c:	e768      	b.n	8001160 <__gnu_unwind_execute+0x5c>
 800128e:	4630      	mov	r0, r6
 8001290:	f7ff ff0c 	bl	80010ac <next_unwind_byte>
 8001294:	4602      	mov	r2, r0
 8001296:	2800      	cmp	r0, #0
 8001298:	f43f af61 	beq.w	800115e <__gnu_unwind_execute+0x5a>
 800129c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012a0:	d0d0      	beq.n	8001244 <__gnu_unwind_execute+0x140>
 80012a2:	e75c      	b.n	800115e <__gnu_unwind_execute+0x5a>
 80012a4:	4630      	mov	r0, r6
 80012a6:	f7ff ff01 	bl	80010ac <next_unwind_byte>
 80012aa:	0301      	lsls	r1, r0, #12
 80012ac:	f000 000f 	and.w	r0, r0, #15
 80012b0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80012b4:	1c42      	adds	r2, r0, #1
 80012b6:	2301      	movs	r3, #1
 80012b8:	430a      	orrs	r2, r1
 80012ba:	e7c3      	b.n	8001244 <__gnu_unwind_execute+0x140>
 80012bc:	ac03      	add	r4, sp, #12
 80012be:	4643      	mov	r3, r8
 80012c0:	220e      	movs	r2, #14
 80012c2:	4641      	mov	r1, r8
 80012c4:	9400      	str	r4, [sp, #0]
 80012c6:	4628      	mov	r0, r5
 80012c8:	f7ff fb00 	bl	80008cc <_Unwind_VRS_Get>
 80012cc:	9400      	str	r4, [sp, #0]
 80012ce:	4628      	mov	r0, r5
 80012d0:	4643      	mov	r3, r8
 80012d2:	220f      	movs	r2, #15
 80012d4:	4641      	mov	r1, r8
 80012d6:	f7ff fb1d 	bl	8000914 <_Unwind_VRS_Set>
 80012da:	4640      	mov	r0, r8
 80012dc:	e740      	b.n	8001160 <__gnu_unwind_execute+0x5c>
 80012de:	4630      	mov	r0, r6
 80012e0:	f7ff fee4 	bl	80010ac <next_unwind_byte>
 80012e4:	0301      	lsls	r1, r0, #12
 80012e6:	f000 000f 	and.w	r0, r0, #15
 80012ea:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80012ee:	1c42      	adds	r2, r0, #1
 80012f0:	2303      	movs	r3, #3
 80012f2:	430a      	orrs	r2, r1
 80012f4:	e7a6      	b.n	8001244 <__gnu_unwind_execute+0x140>
 80012f6:	4630      	mov	r0, r6
 80012f8:	f7ff fed8 	bl	80010ac <next_unwind_byte>
 80012fc:	4602      	mov	r2, r0
 80012fe:	2800      	cmp	r0, #0
 8001300:	f43f af2d 	beq.w	800115e <__gnu_unwind_execute+0x5a>
 8001304:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001308:	f47f af29 	bne.w	800115e <__gnu_unwind_execute+0x5a>
 800130c:	2104      	movs	r1, #4
 800130e:	4628      	mov	r0, r5
 8001310:	f7ff fcba 	bl	8000c88 <_Unwind_VRS_Pop>
 8001314:	2800      	cmp	r0, #0
 8001316:	f43f aefc 	beq.w	8001112 <__gnu_unwind_execute+0xe>
 800131a:	e720      	b.n	800115e <__gnu_unwind_execute+0x5a>
 800131c:	f000 020f 	and.w	r2, r0, #15
 8001320:	3201      	adds	r2, #1
 8001322:	2303      	movs	r3, #3
 8001324:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001328:	e78c      	b.n	8001244 <__gnu_unwind_execute+0x140>
 800132a:	4630      	mov	r0, r6
 800132c:	f7ff febe 	bl	80010ac <next_unwind_byte>
 8001330:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001334:	f000 030f 	and.w	r3, r0, #15
 8001338:	3210      	adds	r2, #16
 800133a:	3301      	adds	r3, #1
 800133c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001340:	e706      	b.n	8001150 <__gnu_unwind_execute+0x4c>
 8001342:	2300      	movs	r3, #0
 8001344:	f10d 090c 	add.w	r9, sp, #12
 8001348:	220d      	movs	r2, #13
 800134a:	4619      	mov	r1, r3
 800134c:	f8cd 9000 	str.w	r9, [sp]
 8001350:	4628      	mov	r0, r5
 8001352:	f7ff fabb 	bl	80008cc <_Unwind_VRS_Get>
 8001356:	4630      	mov	r0, r6
 8001358:	f7ff fea8 	bl	80010ac <next_unwind_byte>
 800135c:	0602      	lsls	r2, r0, #24
 800135e:	f04f 0702 	mov.w	r7, #2
 8001362:	d50c      	bpl.n	800137e <__gnu_unwind_execute+0x27a>
 8001364:	9b03      	ldr	r3, [sp, #12]
 8001366:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800136a:	40b8      	lsls	r0, r7
 800136c:	4403      	add	r3, r0
 800136e:	4630      	mov	r0, r6
 8001370:	9303      	str	r3, [sp, #12]
 8001372:	f7ff fe9b 	bl	80010ac <next_unwind_byte>
 8001376:	0603      	lsls	r3, r0, #24
 8001378:	f107 0707 	add.w	r7, r7, #7
 800137c:	d4f2      	bmi.n	8001364 <__gnu_unwind_execute+0x260>
 800137e:	9b03      	ldr	r3, [sp, #12]
 8001380:	f8cd 9000 	str.w	r9, [sp]
 8001384:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001388:	f503 7201 	add.w	r2, r3, #516	; 0x204
 800138c:	40bc      	lsls	r4, r7
 800138e:	2300      	movs	r3, #0
 8001390:	4414      	add	r4, r2
 8001392:	4619      	mov	r1, r3
 8001394:	220d      	movs	r2, #13
 8001396:	4628      	mov	r0, r5
 8001398:	9403      	str	r4, [sp, #12]
 800139a:	f7ff fabb 	bl	8000914 <_Unwind_VRS_Set>
 800139e:	e6b8      	b.n	8001112 <__gnu_unwind_execute+0xe>

080013a0 <__gnu_unwind_frame>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80013a4:	b084      	sub	sp, #16
 80013a6:	6853      	ldr	r3, [r2, #4]
 80013a8:	2403      	movs	r4, #3
 80013aa:	f88d 400c 	strb.w	r4, [sp, #12]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	f102 0408 	add.w	r4, r2, #8
 80013b4:	4608      	mov	r0, r1
 80013b6:	79d2      	ldrb	r2, [r2, #7]
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	a901      	add	r1, sp, #4
 80013bc:	9402      	str	r4, [sp, #8]
 80013be:	f88d 200d 	strb.w	r2, [sp, #13]
 80013c2:	f7ff fe9f 	bl	8001104 <__gnu_unwind_execute>
 80013c6:	b004      	add	sp, #16
 80013c8:	bd10      	pop	{r4, pc}
 80013ca:	bf00      	nop

080013cc <_Unwind_GetRegionStart>:
 80013cc:	b508      	push	{r3, lr}
 80013ce:	f7ff fe97 	bl	8001100 <unwind_UCB_from_context>
 80013d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013d4:	bd08      	pop	{r3, pc}
 80013d6:	bf00      	nop

080013d8 <_Unwind_GetLanguageSpecificData>:
 80013d8:	b508      	push	{r3, lr}
 80013da:	f7ff fe91 	bl	8001100 <unwind_UCB_from_context>
 80013de:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013e0:	79c3      	ldrb	r3, [r0, #7]
 80013e2:	3302      	adds	r3, #2
 80013e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013e8:	bd08      	pop	{r3, pc}
 80013ea:	bf00      	nop

080013ec <__aeabi_idiv0>:
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <_sbrk_r>:
static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit; // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void* _sbrk_r(struct _reent *pReent, int incr) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
	static char *currentHeapEnd = &__HeapBase;
#ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
	if (TotalHeapSize == 0) {
 80013fa:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <_sbrk_r+0xc8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10e      	bne.n	8001420 <_sbrk_r+0x30>
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 8001402:	4a2e      	ldr	r2, [pc, #184]	; (80014bc <_sbrk_r+0xcc>)
 8001404:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <_sbrk_r+0xd0>)
 8001406:	1ad3      	subs	r3, r2, r3
				- (&__HeapBase)) - ISR_STACK_LENGTH_BYTES;
 8001408:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 800140c:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <_sbrk_r+0xd4>)
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4a2a      	ldr	r2, [pc, #168]	; (80014bc <_sbrk_r+0xcc>)
 8001412:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <_sbrk_r+0xd0>)
 8001414:	1ad3      	subs	r3, r2, r3
				- (&__HeapBase)) - ISR_STACK_LENGTH_BYTES;
 8001416:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 800141a:	461a      	mov	r2, r3
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <_sbrk_r+0xc8>)
 800141e:	601a      	str	r2, [r3, #0]
	char* my_heap_limit = &__HeapLimit;
	char* my_heap_isr_stack_limit = &__HeapLimit - ISR_STACK_LENGTH_BYTES;
	*/

	char *limit =
			(xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) ?
 8001420:	f007 f916 	bl	8008650 <xTaskGetSchedulerState>
 8001424:	4603      	mov	r3, r0
					stack_ptr : // Before scheduler is started, limit is stack pointer (risky!)
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <_sbrk_r+0x3e>
 800142a:	466b      	mov	r3, sp
 800142c:	e000      	b.n	8001430 <_sbrk_r+0x40>
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <_sbrk_r+0xd8>)
	char *limit =
 8001430:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001432:	f3ef 8211 	mrs	r2, BASEPRI
 8001436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800143a:	b672      	cpsid	i
 800143c:	f383 8811 	msr	BASEPRI, r3
 8001440:	f3bf 8f6f 	isb	sy
 8001444:	f3bf 8f4f 	dsb	sy
 8001448:	b662      	cpsie	i
 800144a:	61ba      	str	r2, [r7, #24]
 800144c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800144e:	69bb      	ldr	r3, [r7, #24]
					&__HeapLimit - ISR_STACK_LENGTH_BYTES; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
	DRN_ENTER_CRITICAL_SECTION(usis);
 8001450:	623b      	str	r3, [r7, #32]
	char *previousHeapEnd = currentHeapEnd;
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <_sbrk_r+0xdc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	61fb      	str	r3, [r7, #28]
	if (currentHeapEnd + incr > limit) {
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <_sbrk_r+0xdc>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	4413      	add	r3, r2
 8001460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001462:	429a      	cmp	r2, r3
 8001464:	d20a      	bcs.n	800147c <_sbrk_r+0x8c>
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001470:	bf00      	nop
		// Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
		{
			extern void vApplicationMallocFailedHook(void);
			DRN_EXIT_CRITICAL_SECTION(usis);
			vApplicationMallocFailedHook();
 8001472:	f002 f95d 	bl	8003730 <vApplicationMallocFailedHook>
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
            DRN_EXIT_CRITICAL_SECTION(usis);
        #endif
		return (char*) -1; // the malloc-family routine that called sbrk will return 0
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e018      	b.n	80014ae <_sbrk_r+0xbe>
	}
	// 'incr' of memory is available: update accounting and return it.
	currentHeapEnd += incr;
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <_sbrk_r+0xdc>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a11      	ldr	r2, [pc, #68]	; (80014cc <_sbrk_r+0xdc>)
 8001486:	6013      	str	r3, [r2, #0]
	heapBytesRemaining -= incr;
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <_sbrk_r+0xd4>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <_sbrk_r+0xd4>)
 8001492:	6013      	str	r3, [r2, #0]
#ifndef NDEBUG
	totalBytesProvidedBySBRK += incr;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <_sbrk_r+0xe0>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <_sbrk_r+0xe0>)
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f383 8811 	msr	BASEPRI, r3
}
 80014aa:	bf00      	nop
#endif
	DRN_EXIT_CRITICAL_SECTION(usis);
	return (char*) previousHeapEnd;
 80014ac:	69fb      	ldr	r3, [r7, #28]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000f2c 	.word	0x20000f2c
 80014bc:	20080000 	.word	0x20080000
 80014c0:	200014d0 	.word	0x200014d0
 80014c4:	2000009c 	.word	0x2000009c
 80014c8:	2007fe00 	.word	0x2007fe00
 80014cc:	20000000 	.word	0x20000000
 80014d0:	200000a0 	.word	0x200000a0

080014d4 <__malloc_lock>:
;

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r) {
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	__asm volatile
 80014dc:	f3ef 8211 	mrs	r2, BASEPRI
 80014e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e4:	b672      	cpsid	i
 80014e6:	f383 8811 	msr	BASEPRI, r3
 80014ea:	f3bf 8f6f 	isb	sy
 80014ee:	f3bf 8f4f 	dsb	sy
 80014f2:	b662      	cpsie	i
 80014f4:	60fa      	str	r2, [r7, #12]
 80014f6:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 80014f8:	68fb      	ldr	r3, [r7, #12]
#if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <__malloc_lock+0x38>)
 80014fc:	6013      	str	r3, [r2, #0]
		taskDISABLE_INTERRUPTS();
		for( ;; );
	}
	vTaskSuspendAll();
#endif
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	200000a4 	.word	0x200000a4

08001510 <__malloc_unlock>:
;
void __malloc_unlock(struct _reent *r) {
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
#if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <__malloc_unlock+0x24>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f383 8811 	msr	BASEPRI, r3
}
 8001524:	bf00      	nop
  #else
	(void) xTaskResumeAll();
#endif
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	200000a4 	.word	0x200000a4

08001538 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void* pvPortMalloc(size_t xSize) PRIVILEGED_FUNCTION {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	void *p = malloc(xSize);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f008 ff7f 	bl	800a444 <malloc>
 8001546:	4603      	mov	r3, r0
 8001548:	60fb      	str	r3, [r7, #12]
	return p;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <vPortFree>:
void vPortFree(void *pv) PRIVILEGED_FUNCTION {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	free(pv);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f008 ff79 	bl	800a454 <free>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_ZN17CANControllerBase13addSubscriberE10CANFrameIdR14ICANSubscriber>:
{
	std::vector<CANFrameId> _canFrameIds;
	std::vector<ICANSubscriber*> _canSubscribers;

public:
	void addSubscriber(CANFrameId id, ICANSubscriber &subscriber) override
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	4638      	mov	r0, r7
 800158c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		_canFrameIds.push_back(id);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3304      	adds	r3, #4
 8001594:	463a      	mov	r2, r7
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fa79 	bl	8001a90 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_>
		_canSubscribers.push_back(&subscriber);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f103 0210 	add.w	r2, r3, #16
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f000 fa94 	bl	8001adc <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE9push_backEOS1_>
	}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_ZN17CANControllerBase7receiveE8CANFrame>:

	void receive(CANFrame frame) override
 80015bc:	b084      	sub	sp, #16
 80015be:	b5b0      	push	{r4, r5, r7, lr}
 80015c0:	b08c      	sub	sp, #48	; 0x30
 80015c2:	af04      	add	r7, sp, #16
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80015ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		// update each subscriber that listens to the same frame id as the id of the given frame
		for (auto it = _canFrameIds.begin(); it != _canFrameIds.end(); ++it)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3304      	adds	r3, #4
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fa93 	bl	8001afe <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 80015d8:	4603      	mov	r3, r0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3304      	adds	r3, #4
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fa9c 	bl	8001b1e <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>
 80015e6:	4603      	mov	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	f107 0210 	add.w	r2, r7, #16
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 faa3 	bl	8001b40 <_ZN9__gnu_cxxneIP10CANFrameIdSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d03e      	beq.n	800167e <_ZN17CANControllerBase7receiveE8CANFrame+0xc2>
		{
			if (frame.id == *it)
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fac4 	bl	8001b92 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEdeEv>
 800160a:	4602      	mov	r2, r0
 800160c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f002 f81a 	bl	800364c <_ZNK10CANFrameIdeqERKS_>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d029      	beq.n	8001672 <_ZN17CANControllerBase7receiveE8CANFrame+0xb6>
			{
				const int index = it - _canFrameIds.begin();
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3304      	adds	r3, #4
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fa6b 	bl	8001afe <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 8001628:	4603      	mov	r3, r0
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	f107 0214 	add.w	r2, r7, #20
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fab8 	bl	8001bac <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800163c:	61f8      	str	r0, [r7, #28]
				ICANSubscriber *subscriber = _canSubscribers[index];
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3310      	adds	r3, #16
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f000 faca 	bl	8001be0 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEixEj>
 800164c:	4603      	mov	r3, r0
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	61bb      	str	r3, [r7, #24]
				subscriber->receive(frame);
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3308      	adds	r3, #8
 8001658:	681d      	ldr	r5, [r3, #0]
 800165a:	466c      	mov	r4, sp
 800165c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001660:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001668:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800166c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800166e:	69b8      	ldr	r0, [r7, #24]
 8001670:	47a8      	blx	r5
		for (auto it = _canFrameIds.begin(); it != _canFrameIds.end(); ++it)
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fa7a 	bl	8001b70 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEppEv>
 800167c:	e7ae      	b.n	80015dc <_ZN17CANControllerBase7receiveE8CANFrame+0x20>
			}
		}
	}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001688:	b004      	add	sp, #16
 800168a:	4770      	bx	lr

0800168c <_ZN14ICANSubscriberC1Ev>:
#ifndef ICANSUBSCRIBER_HPP_
#define ICANSUBSCRIBER_HPP_

#include <middleware_layer/can/CANFrame.hpp>

class ICANSubscriber
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <_ZN14ICANSubscriberC1Ev+0x1c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	0800afe8 	.word	0x0800afe8

080016ac <_ZN14ICANSubscriberD1Ev>:
{
public:
	virtual ~ICANSubscriber() = default;
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <_ZN14ICANSubscriberD1Ev+0x1c>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	0800afe8 	.word	0x0800afe8

080016cc <_ZN14ICANSubscriberD0Ev>:
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ffe9 	bl	80016ac <_ZN14ICANSubscriberD1Ev>
 80016da:	2104      	movs	r1, #4
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f007 fe33 	bl	8009348 <_ZdlPvj>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_ZN8InverterC1ER13CANController10CANFrameId>:
private:
	CANController& _canController;
	CANFrameId _setTargetRevolutionSpeedId;

public:
	Inverter(CANController &canController, CANFrameId setTargetRevolutionSpeedId) :
 80016ec:	b082      	sub	sp, #8
 80016ee:	b590      	push	{r4, r7, lr}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af02      	add	r7, sp, #8
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
 80016f8:	f107 0118 	add.w	r1, r7, #24
 80016fc:	e881 000c 	stmia.w	r1, {r2, r3}
		_canController(canController),
		_setTargetRevolutionSpeedId(setTargetRevolutionSpeedId)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ffc2 	bl	800168c <_ZN14ICANSubscriberC1Ev>
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_ZN8InverterC1ER13CANController10CANFrameId+0x70>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3308      	adds	r3, #8
 8001718:	f107 0218 	add.w	r2, r7, #24
 800171c:	ca07      	ldmia	r2, {r0, r1, r2}
 800171e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		_canController.addSubscriber(_setTargetRevolutionSpeedId, *this);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681c      	ldr	r4, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	9200      	str	r2, [sp, #0]
 8001736:	3308      	adds	r3, #8
 8001738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800173a:	47a0      	blx	r4
	}
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	e005      	b.n	800174c <_ZN8InverterC1ER13CANController10CANFrameId+0x60>
		_setTargetRevolutionSpeedId(setTargetRevolutionSpeedId)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ffb2 	bl	80016ac <_ZN14ICANSubscriberD1Ev>
 8001748:	f007 fe96 	bl	8009478 <__cxa_end_cleanup>
	}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001756:	b002      	add	sp, #8
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	0800afc0 	.word	0x0800afc0

08001760 <_ZN8InverterD1Ev>:
	virtual ~Inverter() = default;
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	4a05      	ldr	r2, [pc, #20]	; (8001780 <_ZN8InverterD1Ev+0x20>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff9b 	bl	80016ac <_ZN14ICANSubscriberD1Ev>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	0800afc0 	.word	0x0800afc0

08001784 <_ZN8InverterD0Ev>:
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffe7 	bl	8001760 <_ZN8InverterD1Ev>
 8001792:	2114      	movs	r1, #20
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f007 fdd7 	bl	8009348 <_ZdlPvj>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_ZN12InverterLeftC1ER13CANController>:


class InverterLeft : Inverter
{
public:
	InverterLeft(CANController &canController) : Inverter(canController, CANFrameId(0xAA))
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	687c      	ldr	r4, [r7, #4]
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	21aa      	movs	r1, #170	; 0xaa
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 ff38 	bl	800362c <_ZN10CANFrameIdC1Em>
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	cb0c      	ldmia	r3, {r2, r3}
 80017c6:	6839      	ldr	r1, [r7, #0]
 80017c8:	4620      	mov	r0, r4
 80017ca:	f7ff ff8f 	bl	80016ec <_ZN8InverterC1ER13CANController10CANFrameId>
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <_ZN12InverterLeftC1ER13CANController+0x3c>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	601a      	str	r2, [r3, #0]
	{
	}
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	bf00      	nop
 80017e0:	0800afac 	.word	0x0800afac

080017e4 <_ZN12InverterLeft7receiveE8CANFrame>:

	void receive(CANFrame frame) override
 80017e4:	b084      	sub	sp, #16
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	f107 0014 	add.w	r0, r7, #20
 80017f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		puts("InverterLeft: frame received");
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <_ZN12InverterLeft7receiveE8CANFrame+0x28>)
 80017f8:	f008 ff7c 	bl	800a6f4 <puts>
	}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001806:	b004      	add	sp, #16
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	0800ada8 	.word	0x0800ada8

08001810 <_ZN13InverterRightC1ER13CANController>:


class InverterRight : Inverter
{
public:
	InverterRight(CANController &canController) : Inverter(canController, CANFrameId(0xBB))
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af02      	add	r7, sp, #8
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	687c      	ldr	r4, [r7, #4]
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	21bb      	movs	r1, #187	; 0xbb
 8001822:	4618      	mov	r0, r3
 8001824:	f001 ff02 	bl	800362c <_ZN10CANFrameIdC1Em>
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	cb0c      	ldmia	r3, {r2, r3}
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff ff59 	bl	80016ec <_ZN8InverterC1ER13CANController10CANFrameId>
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <_ZN13InverterRightC1ER13CANController+0x3c>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	601a      	str	r2, [r3, #0]
	{
	}
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4618      	mov	r0, r3
 8001844:	371c      	adds	r7, #28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	0800af98 	.word	0x0800af98

08001850 <_ZN13InverterRight7receiveE8CANFrame>:

	void receive(CANFrame frame) override
 8001850:	b084      	sub	sp, #16
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	f107 0014 	add.w	r0, r7, #20
 800185e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		puts("InverterRight: frame received");
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <_ZN13InverterRight7receiveE8CANFrame+0x28>)
 8001864:	f008 ff46 	bl	800a6f4 <puts>
	}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001872:	b004      	add	sp, #16
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	0800adc8 	.word	0x0800adc8

0800187c <_ZN17CANControllerBaseD1Ev>:
class CANControllerBase : public ICANController
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <_ZN17CANControllerBaseD1Ev+0x2c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3310      	adds	r3, #16
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f9d1 	bl	8001c36 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EED1Ev>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3304      	adds	r3, #4
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f9b1 	bl	8001c00 <_ZNSt6vectorI10CANFrameIdSaIS0_EED1Ev>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	0800afd4 	.word	0x0800afd4

080018ac <_ZN13CANControllerD1Ev>:

#include <middleware_layer/can/CANControllerBase.hpp>
#include <middleware_layer/can/CANHandle.hpp>


class CANController : public CANControllerBase
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	4a05      	ldr	r2, [pc, #20]	; (80018cc <_ZN13CANControllerD1Ev+0x20>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ffdd 	bl	800187c <_ZN17CANControllerBaseD1Ev>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	0800affc 	.word	0x0800affc

080018d0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f9c7 	bl	8001c6c <_ZNSaI10CANFrameIdED1Ev>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implD1Ev>:
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 f9e5 	bl	8001cc0 <_ZNSaIP14ICANSubscriberED1Ev>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <vtestCAN>:

Notes:-
1) Error state is not yet defined or implemented.s
*******************************************************************************************************************/
void vtestCAN (void)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b085      	sub	sp, #20
 8001904:	af04      	add	r7, sp, #16

	switch(eMachineState)
 8001906:	4b5b      	ldr	r3, [pc, #364]	; (8001a74 <vtestCAN+0x174>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b03      	cmp	r3, #3
 800190c:	f200 80ac 	bhi.w	8001a68 <vtestCAN+0x168>
 8001910:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <vtestCAN+0x18>)
 8001912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001916:	bf00      	nop
 8001918:	08001929 	.word	0x08001929
 800191c:	08001a01 	.word	0x08001a01
 8001920:	08001979 	.word	0x08001979
 8001924:	080019d7 	.word	0x080019d7
	{
		case TEST_INIT:
			/*start the can controller*/
			canController1.start();
 8001928:	4853      	ldr	r0, [pc, #332]	; (8001a78 <vtestCAN+0x178>)
 800192a:	f001 fd1b 	bl	8003364 <_ZN13CANController5startEv>
			/*start the Interrupts*/
			canController1.activateInterrupt();
 800192e:	4852      	ldr	r0, [pc, #328]	; (8001a78 <vtestCAN+0x178>)
 8001930:	f001 fd3c 	bl	80033ac <_ZN13CANController17activateInterruptEv>
			/*Initializing the payload to be transmitted*/
			payload.bitLength     = 64u;
 8001934:	4b51      	ldr	r3, [pc, #324]	; (8001a7c <vtestCAN+0x17c>)
 8001936:	2240      	movs	r2, #64	; 0x40
 8001938:	721a      	strb	r2, [r3, #8]
			payload.isRemoteFrame = false;
 800193a:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <vtestCAN+0x17c>)
 800193c:	2200      	movs	r2, #0
 800193e:	725a      	strb	r2, [r3, #9]
			payload.data.uint8[0] = 0x11u ;
 8001940:	4b4e      	ldr	r3, [pc, #312]	; (8001a7c <vtestCAN+0x17c>)
 8001942:	2211      	movs	r2, #17
 8001944:	701a      	strb	r2, [r3, #0]
			 payload.data.uint8[1] = 0x22u;
 8001946:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <vtestCAN+0x17c>)
 8001948:	2222      	movs	r2, #34	; 0x22
 800194a:	705a      	strb	r2, [r3, #1]
			 payload.data.uint8[2] = 0x33u;
 800194c:	4b4b      	ldr	r3, [pc, #300]	; (8001a7c <vtestCAN+0x17c>)
 800194e:	2233      	movs	r2, #51	; 0x33
 8001950:	709a      	strb	r2, [r3, #2]
			 payload.data.uint8[3] = 0x44u;
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <vtestCAN+0x17c>)
 8001954:	2244      	movs	r2, #68	; 0x44
 8001956:	70da      	strb	r2, [r3, #3]
			 payload.data.uint8[4] = 0x55u;
 8001958:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <vtestCAN+0x17c>)
 800195a:	2255      	movs	r2, #85	; 0x55
 800195c:	711a      	strb	r2, [r3, #4]
			 payload.data.uint8[5] = 0x66u;
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <vtestCAN+0x17c>)
 8001960:	2266      	movs	r2, #102	; 0x66
 8001962:	715a      	strb	r2, [r3, #5]
			 payload.data.uint8[6] = 0x77u;
 8001964:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <vtestCAN+0x17c>)
 8001966:	2277      	movs	r2, #119	; 0x77
 8001968:	719a      	strb	r2, [r3, #6]
			 payload.data.uint8[7] = 0x88u;
 800196a:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <vtestCAN+0x17c>)
 800196c:	2288      	movs	r2, #136	; 0x88
 800196e:	71da      	strb	r2, [r3, #7]

			eMachineState=TEST_IF_BUTTON_PRESSED;
 8001970:	4b40      	ldr	r3, [pc, #256]	; (8001a74 <vtestCAN+0x174>)
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
			break;
 8001976:	e078      	b.n	8001a6a <vtestCAN+0x16a>

		case TEST_IF_BUTTON_PRESSED:
		   if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8001978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800197c:	4840      	ldr	r0, [pc, #256]	; (8001a80 <vtestCAN+0x180>)
 800197e:	f003 fc61 	bl	8005244 <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01d      	beq.n	80019ce <vtestCAN+0xce>
		   {
		      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001992:	2101      	movs	r1, #1
 8001994:	483b      	ldr	r0, [pc, #236]	; (8001a84 <vtestCAN+0x184>)
 8001996:	f003 fc86 	bl	80052a6 <HAL_GPIO_TogglePin>
            /*CAN send*/
            canController1.send(leftInverterFrame);
 800199a:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <vtestCAN+0x188>)
 800199c:	466c      	mov	r4, sp
 800199e:	f103 020c 	add.w	r2, r3, #12
 80019a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80019a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019aa:	4833      	ldr	r0, [pc, #204]	; (8001a78 <vtestCAN+0x178>)
 80019ac:	f001 fc46 	bl	800323c <_ZN13CANController4sendE8CANFrame>
            canController1.send(rightInverterFrame);
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <vtestCAN+0x18c>)
 80019b2:	466c      	mov	r4, sp
 80019b4:	f103 020c 	add.w	r2, r3, #12
 80019b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80019be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c0:	482d      	ldr	r0, [pc, #180]	; (8001a78 <vtestCAN+0x178>)
 80019c2:	f001 fc3b 	bl	800323c <_ZN13CANController4sendE8CANFrame>
            eMachineState=TEST_IF_BUTTON_RELEASED;
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <vtestCAN+0x174>)
 80019c8:	2203      	movs	r2, #3
 80019ca:	701a      	strb	r2, [r3, #0]
		   }
		   else
		   {
		      eMachineState = TEST_IF_BUTTON_PRESSED;
		   }
		   break;
 80019cc:	e04d      	b.n	8001a6a <vtestCAN+0x16a>
		      eMachineState = TEST_IF_BUTTON_PRESSED;
 80019ce:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <vtestCAN+0x174>)
 80019d0:	2202      	movs	r2, #2
 80019d2:	701a      	strb	r2, [r3, #0]
		   break;
 80019d4:	e049      	b.n	8001a6a <vtestCAN+0x16a>

		case TEST_IF_BUTTON_RELEASED:
		   if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 80019d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019da:	4829      	ldr	r0, [pc, #164]	; (8001a80 <vtestCAN+0x180>)
 80019dc:	f003 fc32 	bl	8005244 <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf14      	ite	ne
 80019e6:	2301      	movne	r3, #1
 80019e8:	2300      	moveq	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <vtestCAN+0xf8>
		   {
		      eMachineState = TEST_IF_BUTTON_RELEASED;
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <vtestCAN+0x174>)
 80019f2:	2203      	movs	r2, #3
 80019f4:	701a      	strb	r2, [r3, #0]
		   }
		   else
		   {
		      eMachineState = TEST_CHANGE_DATA;
		   }
		   break;
 80019f6:	e038      	b.n	8001a6a <vtestCAN+0x16a>
		      eMachineState = TEST_CHANGE_DATA;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <vtestCAN+0x174>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
		   break;
 80019fe:	e034      	b.n	8001a6a <vtestCAN+0x16a>

		case TEST_CHANGE_DATA:
		   payload.data.uint8[0]++;
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <vtestCAN+0x17c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <vtestCAN+0x17c>)
 8001a0a:	701a      	strb	r2, [r3, #0]
		   payload.data.uint8[1]++;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <vtestCAN+0x17c>)
 8001a0e:	785b      	ldrb	r3, [r3, #1]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <vtestCAN+0x17c>)
 8001a16:	705a      	strb	r2, [r3, #1]
		   payload.data.uint8[2]++;
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <vtestCAN+0x17c>)
 8001a1a:	789b      	ldrb	r3, [r3, #2]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <vtestCAN+0x17c>)
 8001a22:	709a      	strb	r2, [r3, #2]
		   payload.data.uint8[3]++;
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <vtestCAN+0x17c>)
 8001a26:	78db      	ldrb	r3, [r3, #3]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <vtestCAN+0x17c>)
 8001a2e:	70da      	strb	r2, [r3, #3]
		   payload.data.uint8[4]++;
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <vtestCAN+0x17c>)
 8001a32:	791b      	ldrb	r3, [r3, #4]
 8001a34:	3301      	adds	r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <vtestCAN+0x17c>)
 8001a3a:	711a      	strb	r2, [r3, #4]
		   payload.data.uint8[5]++;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <vtestCAN+0x17c>)
 8001a3e:	795b      	ldrb	r3, [r3, #5]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <vtestCAN+0x17c>)
 8001a46:	715a      	strb	r2, [r3, #5]
		   payload.data.uint8[6]++;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <vtestCAN+0x17c>)
 8001a4a:	799b      	ldrb	r3, [r3, #6]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <vtestCAN+0x17c>)
 8001a52:	719a      	strb	r2, [r3, #6]
		   payload.data.uint8[7]++;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <vtestCAN+0x17c>)
 8001a56:	79db      	ldrb	r3, [r3, #7]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <vtestCAN+0x17c>)
 8001a5e:	71da      	strb	r2, [r3, #7]
		   eMachineState = TEST_IF_BUTTON_PRESSED;
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <vtestCAN+0x174>)
 8001a62:	2202      	movs	r2, #2
 8001a64:	701a      	strb	r2, [r3, #0]
		   break;
 8001a66:	e000      	b.n	8001a6a <vtestCAN+0x16a>

		case TEST_ERROR:
		default:
			while(1)
 8001a68:	e7fe      	b.n	8001a68 <vtestCAN+0x168>
			break;

	}


}
 8001a6a:	bf00      	nop
 8001a6c:	3704      	adds	r7, #4
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000144 	.word	0x20000144
 8001a78:	200000a8 	.word	0x200000a8
 8001a7c:	20000108 	.word	0x20000108
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020400 	.word	0x40020400
 8001a88:	20000114 	.word	0x20000114
 8001a8c:	2000012c 	.word	0x2000012c

08001a90 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d00d      	beq.n	8001ac2 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f000 f92b 	bl	8001d0a <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f103 020c 	add.w	r2, r3, #12
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8001ac0:	e008      	b.n	8001ad4 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f82b 	bl	8001b1e <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f944 	bl	8001d5c <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE9push_backEOS1_>:

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8001ae6:	6838      	ldr	r0, [r7, #0]
 8001ae8:	f000 fa2e 	bl	8001f48 <_ZSt4moveIRP14ICANSubscriberEONSt16remove_referenceIT_E4typeEOS4_>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4619      	mov	r1, r3
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 fa34 	bl	8001f5e <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fa53 	bl	8001fba <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	1d1a      	adds	r2, r3, #4
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fa42 	bl	8001fba <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZN9__gnu_cxxneIP10CANFrameIdSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fa45 	bl	8001fda <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001b50:	4603      	mov	r3, r0
 8001b52:	681c      	ldr	r4, [r3, #0]
 8001b54:	6838      	ldr	r0, [r7, #0]
 8001b56:	f000 fa40 	bl	8001fda <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	429c      	cmp	r4, r3
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd90      	pop	{r4, r7, pc}

08001b70 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f103 020c 	add.w	r2, r3, #12
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	601a      	str	r2, [r3, #0]
	return *this;
 8001b84:	687b      	ldr	r3, [r7, #4]
      }
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fa0f 	bl	8001fda <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	681c      	ldr	r4, [r3, #0]
 8001bc0:	6838      	ldr	r0, [r7, #0]
 8001bc2:	f000 fa0a 	bl	8001fda <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	1ae3      	subs	r3, r4, r3
 8001bcc:	109b      	asrs	r3, r3, #2
 8001bce:	4a03      	ldr	r2, [pc, #12]	; (8001bdc <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd90      	pop	{r4, r7, pc}
 8001bdc:	aaaaaaab 	.word	0xaaaaaaab

08001be0 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
      }
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_ZNSt6vectorI10CANFrameIdSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681c      	ldr	r4, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f9ec 	bl	8001ff0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001c18:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f000 f9f1 	bl	8002006 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
      }
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f82c 	bl	8001c84 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bdb0      	pop	{r4, r5, r7, pc}

08001c36 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001c36:	b5b0      	push	{r4, r5, r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681c      	ldr	r4, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f9ea 	bl	8002022 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8001c4e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c50:	461a      	mov	r2, r3
 8001c52:	4629      	mov	r1, r5
 8001c54:	4620      	mov	r0, r4
 8001c56:	f000 f9ef 	bl	8002038 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
      }
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 f83b 	bl	8001cd8 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EED1Ev>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bdb0      	pop	{r4, r5, r7, pc}

08001c6c <_ZNSaI10CANFrameIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f9ed 	bl	8002054 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdED1Ev>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	109b      	asrs	r3, r3, #2
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev+0x38>)
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f9e0 	bl	800206a <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fe0f 	bl	80018d0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implD1Ev>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	aaaaaaab 	.word	0xaaaaaaab

08001cc0 <_ZNSaIP14ICANSubscriberED1Ev>:
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 f9e1 	bl	8002090 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberED1Ev>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f9d7 	bl	80020a6 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
      }
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fdf4 	bl	80018e8 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implD1Ev>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f9d8 	bl	80020cc <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f9dd 	bl	80020e2 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZNSt6vectorI10CANFrameIdSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001d36:	4618      	mov	r0, r3
 8001d38:	f000 f805 	bl	8001d46 <_ZNSt6vectorI10CANFrameIdSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8001d3c:	4603      	mov	r3, r0
      }
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZNSt6vectorI10CANFrameIdSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001d4e:	2301      	movs	r3, #1
      }
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b08c      	sub	sp, #48	; 0x30
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8001d68:	4a75      	ldr	r2, [pc, #468]	; (8001f40 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1e4>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f9d0 	bl	8002112 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc>
 8001d72:	4603      	mov	r3, r0
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff febb 	bl	8001afe <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	f107 0214 	add.w	r2, r7, #20
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff08 	bl	8001bac <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 f9fb 	bl	80021a0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj>
 8001daa:	4603      	mov	r3, r0
 8001dac:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001db2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	189d      	adds	r5, r3, r2
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f981 	bl	80020cc <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4629      	mov	r1, r5
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f7ff ff9a 	bl	8001d0a <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8001dda:	f7ff ffa9 	bl	8001d30 <_ZNSt6vectorI10CANFrameIdSaIS0_EE15_S_use_relocateEv>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d027      	beq.n	8001e34 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f8f6 	bl	8001fda <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001dee:	4603      	mov	r3, r0
 8001df0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f8fb 	bl	8001ff0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001dfa:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4621      	mov	r1, r4
 8001e00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e02:	f000 f9e1 	bl	80021c8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8001e06:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0a:	330c      	adds	r3, #12
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f8e1 	bl	8001fda <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 f8e6 	bl	8001ff0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001e24:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e28:	6a39      	ldr	r1, [r7, #32]
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f000 f9cc 	bl	80021c8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8001e30:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001e32:	e028      	b.n	8001e86 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f8ce 	bl	8001fda <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f8d3 	bl	8001ff0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001e4a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4621      	mov	r1, r4
 8001e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e52:	f000 f9cd 	bl	80021f0 <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001e56:	4603      	mov	r3, r0
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8001e60:	f107 0308 	add.w	r3, r7, #8
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f8b8 	bl	8001fda <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f8bd 	bl	8001ff0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001e76:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8001e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e7a:	6a39      	ldr	r1, [r7, #32]
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f000 f9b7 	bl	80021f0 <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001e82:	4603      	mov	r3, r0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8001e86:	f7ff ff53 	bl	8001d30 <_ZNSt6vectorI10CANFrameIdSaIS0_EE15_S_use_relocateEv>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f083 0301 	eor.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x14e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 f8a9 	bl	8001ff0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6a39      	ldr	r1, [r7, #32]
 8001ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ea6:	f000 f8ae 	bl	8002006 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001eaa:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	109b      	asrs	r3, r3, #2
 8001eb6:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1e8>)
 8001eb8:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec0:	f000 f8d3 	bl	800206a <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ece:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	461a      	mov	r2, r3
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	441a      	add	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	609a      	str	r2, [r3, #8]
    }
 8001ee4:	e029      	b.n	8001f3a <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1de>
 8001ee6:	4603      	mov	r3, r0
      __catch(...)
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f007 fb9a 	bl	8009622 <__cxa_begin_catch>
	  if (!__new_finish)
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10c      	bne.n	8001f0e <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1b2>
	    _Alloc_traits::destroy(this->_M_impl,
 8001ef4:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	461a      	mov	r2, r3
	    _Alloc_traits::destroy(this->_M_impl,
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	4413      	add	r3, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f000 f98b 	bl	8002222 <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>
 8001f0c:	e009      	b.n	8001f22 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1c6>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 f86d 	bl	8001ff0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f1c:	69b8      	ldr	r0, [r7, #24]
 8001f1e:	f000 f872 	bl	8002006 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f89e 	bl	800206a <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
	  __throw_exception_again;
 8001f2e:	f007 fedd 	bl	8009cec <__cxa_rethrow>
      __catch(...)
 8001f32:	f007 fb9f 	bl	8009674 <__cxa_end_catch>
 8001f36:	f007 fa9f 	bl	8009478 <__cxa_end_cleanup>
    }
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f40:	0800ade8 	.word	0x0800ade8
 8001f44:	aaaaaaab 	.word	0xaaaaaaab

08001f48 <_ZSt4moveIRP14ICANSubscriberEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8001f5e:	b5b0      	push	{r4, r5, r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d011      	beq.n	8001f98 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001f74:	687c      	ldr	r4, [r7, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685d      	ldr	r5, [r3, #4]
 8001f7a:	6838      	ldr	r0, [r7, #0]
 8001f7c:	f000 f95e 	bl	800223c <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461a      	mov	r2, r3
 8001f84:	4629      	mov	r1, r5
 8001f86:	4620      	mov	r0, r4
 8001f88:	f000 f963 	bl	8002252 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	1d1a      	adds	r2, r3, #4
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	605a      	str	r2, [r3, #4]
      }
 8001f96:	e00c      	b.n	8001fb2 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f96d 	bl	8002278 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE3endEv>
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	6838      	ldr	r0, [r7, #0]
 8001fa2:	f000 f94b 	bl	800223c <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4621      	mov	r1, r4
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f98b 	bl	80022c8 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}

08001fba <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 fa3d 	bl	8002494 <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>
    }
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 fa31 	bl	80024ae <_ZSt8_DestroyIPP14ICANSubscriberEvT_S3_>
    }
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
	if (__p)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fa20 	bl	80024c8 <_ZNSt16allocator_traitsISaI10CANFrameIdEE10deallocateERS1_PS0_j>
      }
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberED1Ev>:
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
	if (__p)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fa11 	bl	80024e6 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE10deallocateERS2_PS1_j>
      }
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80020e2:	b590      	push	{r4, r7, lr}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffec 	bl	80020cc <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 80020f4:	4604      	mov	r4, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4619      	mov	r1, r3
 80020fa:	200c      	movs	r0, #12
 80020fc:	f7ff fa35 	bl	800156a <_ZnwjPv>
 8002100:	4603      	mov	r3, r0
 8002102:	4622      	mov	r2, r4
 8002104:	ca07      	ldmia	r2, {r0, r1, r2}
 8002106:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}

08002112 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8002112:	b590      	push	{r4, r7, lr}
 8002114:	b087      	sub	sp, #28
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f9f0 	bl	8002504 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 8002124:	4604      	mov	r4, r0
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f9fe 	bl	8002528 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 800212c:	4603      	mov	r3, r0
 800212e:	1ae2      	subs	r2, r4, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	429a      	cmp	r2, r3
 8002134:	bf34      	ite	cc
 8002136:	2301      	movcc	r3, #1
 8002138:	2300      	movcs	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f007 ff0c 	bl	8009f5e <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f9ee 	bl	8002528 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 800214c:	4604      	mov	r4, r0
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f9ea 	bl	8002528 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 8002154:	4603      	mov	r3, r0
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	f107 0208 	add.w	r2, r7, #8
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f9f6 	bl	8002554 <_ZSt3maxIjERKT_S2_S2_>
 8002168:	4603      	mov	r3, r0
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4423      	add	r3, r4
 800216e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f9d9 	bl	8002528 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 8002176:	4602      	mov	r2, r0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	4293      	cmp	r3, r2
 800217c:	d306      	bcc.n	800218c <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x7a>
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 f9c0 	bl	8002504 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 8002184:	4602      	mov	r2, r0
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	4293      	cmp	r3, r2
 800218a:	d904      	bls.n	8002196 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x84>
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f9b9 	bl	8002504 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 8002192:	4603      	mov	r3, r0
 8002194:	e000      	b.n	8002198 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x86>
 8002196:	697b      	ldr	r3, [r7, #20]
      }
 8002198:	4618      	mov	r0, r3
 800219a:	371c      	adds	r7, #28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}

080021a0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj+0x1e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6839      	ldr	r1, [r7, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 f9e1 	bl	800257c <_ZNSt16allocator_traitsISaI10CANFrameIdEE8allocateERS1_j>
 80021ba:	4603      	mov	r3, r0
 80021bc:	e000      	b.n	80021c0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj+0x20>
 80021be:	2300      	movs	r3, #0
      }
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80021c8:	b590      	push	{r4, r7, lr}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80021d6:	f88d 4000 	strb.w	r4, [sp]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f9da 	bl	800259a <_ZNSt6vectorI10CANFrameIdSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80021e6:	4603      	mov	r3, r0
      }
 80021e8:	4618      	mov	r0, r3
 80021ea:	371c      	adds	r7, #28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd90      	pop	{r4, r7, pc}

080021f0 <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f9dd 	bl	80025be <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>
 8002204:	4604      	mov	r4, r0
 8002206:	68b8      	ldr	r0, [r7, #8]
 8002208:	f000 f9d9 	bl	80025be <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>
 800220c:	4601      	mov	r1, r0
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	4620      	mov	r0, r4
 8002214:	f000 f9e2 	bl	80025dc <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CANFrameIdES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8002218:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}

08002222 <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f9e5 	bl	80025fe <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE7destroyIS1_EEvPT_>
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ffec 	bl	800223c <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8002264:	4603      	mov	r3, r0
 8002266:	461a      	mov	r2, r3
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f9d2 	bl	8002614 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_>
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1d1a      	adds	r2, r3, #4
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f9d8 	bl	8002640 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 f805 	bl	80022b0 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80022a6:	4603      	mov	r3, r0
      }
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80022b8:	2301      	movs	r3, #1
      }
 80022ba:	4618      	mov	r0, r3
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80022c8:	b5b0      	push	{r4, r5, r7, lr}
 80022ca:	b08c      	sub	sp, #48	; 0x30
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80022d4:	4a6e      	ldr	r2, [pc, #440]	; (8002490 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1c8>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f9c1 	bl	8002660 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc>
 80022de:	4603      	mov	r3, r0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f9fd 	bl	80026ee <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE5beginEv>
 80022f4:	4603      	mov	r3, r0
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	f107 0214 	add.w	r2, r7, #20
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fa03 	bl	800270e <_ZN9__gnu_cxxmiIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002308:	4603      	mov	r3, r0
 800230a:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fa11 	bl	8002738 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj>
 8002316:	4603      	mov	r3, r0
 8002318:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800231e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	18d5      	adds	r5, r2, r3
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff87 	bl	800223c <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	4629      	mov	r1, r5
 8002334:	4620      	mov	r0, r4
 8002336:	f7ff ff8c 	bl	8002252 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800233e:	f7ff ffac 	bl	800229a <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE15_S_use_relocateEv>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d027      	beq.n	8002398 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd0>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002348:	f107 0308 	add.w	r3, r7, #8
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fa1b 	bl	8002788 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 8002352:	4603      	mov	r3, r0
 8002354:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fe62 	bl	8002022 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 800235e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4621      	mov	r1, r4
 8002364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002366:	f000 f9fb 	bl	8002760 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800236a:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 800236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236e:	3304      	adds	r3, #4
 8002370:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002372:	f107 0308 	add.w	r3, r7, #8
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fa06 	bl	8002788 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 800237c:	4603      	mov	r3, r0
 800237e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fe4d 	bl	8002022 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8002388:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800238a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800238c:	6a39      	ldr	r1, [r7, #32]
 800238e:	4620      	mov	r0, r4
 8002390:	f000 f9e6 	bl	8002760 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8002394:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002396:	e028      	b.n	80023ea <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x122>
		(__old_start, __position.base(),
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f9f3 	bl	8002788 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 80023a2:	4603      	mov	r3, r0
 80023a4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fe3a 	bl	8002022 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 80023ae:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4621      	mov	r1, r4
 80023b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023b6:	f000 f9f2 	bl	800279e <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 80023ba:	4603      	mov	r3, r0
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	      ++__new_finish;
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	3304      	adds	r3, #4
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f9dd 	bl	8002788 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 80023ce:	4603      	mov	r3, r0
 80023d0:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe24 	bl	8002022 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 80023da:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80023dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023de:	6a39      	ldr	r1, [r7, #32]
 80023e0:	4620      	mov	r0, r4
 80023e2:	f000 f9dc 	bl	800279e <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 80023e6:	4603      	mov	r3, r0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80023ea:	f7ff ff56 	bl	800229a <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE15_S_use_relocateEv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x146>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fe10 	bl	8002022 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	6a39      	ldr	r1, [r7, #32]
 8002408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800240a:	f7ff fe15 	bl	8002038 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800240e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800241a:	461a      	mov	r2, r3
 800241c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800241e:	f7ff fe42 	bl	80020a6 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800242c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	441a      	add	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	609a      	str	r2, [r3, #8]
    }
 800243a:	e025      	b.n	8002488 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1c0>
 800243c:	4603      	mov	r3, r0
      __catch(...)
 800243e:	4618      	mov	r0, r3
 8002440:	f007 f8ef 	bl	8009622 <__cxa_begin_catch>
	  if (!__new_finish)
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x194>
	    _Alloc_traits::destroy(this->_M_impl,
 800244a:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	009b      	lsls	r3, r3, #2
	    _Alloc_traits::destroy(this->_M_impl,
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f000 f9bb 	bl	80027d0 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE7destroyIS1_EEvRS2_PT_>
 800245a:	e009      	b.n	8002470 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1a8>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fddf 	bl	8002022 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800246a:	69b8      	ldr	r0, [r7, #24]
 800246c:	f7ff fde4 	bl	8002038 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002474:	69b9      	ldr	r1, [r7, #24]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fe15 	bl	80020a6 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
	  __throw_exception_again;
 800247c:	f007 fc36 	bl	8009cec <__cxa_rethrow>
      __catch(...)
 8002480:	f007 f8f8 	bl	8009674 <__cxa_end_catch>
 8002484:	f006 fff8 	bl	8009478 <__cxa_end_cleanup>
    }
 8002488:	3730      	adds	r7, #48	; 0x30
 800248a:	46bd      	mov	sp, r7
 800248c:	bdb0      	pop	{r4, r5, r7, pc}
 800248e:	bf00      	nop
 8002490:	0800ade8 	.word	0x0800ade8

08002494 <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800249e:	6839      	ldr	r1, [r7, #0]
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f9a2 	bl	80027ea <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CANFrameIdEEvT_S4_>
    }
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <_ZSt8_DestroyIPP14ICANSubscriberEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80024b8:	6839      	ldr	r1, [r7, #0]
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f9a0 	bl	8002800 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14ICANSubscriberEEvT_S5_>
    }
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <_ZNSt16allocator_traitsISaI10CANFrameIdEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f99c 	bl	8002816 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE10deallocateEPS1_j>
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f99a 	bl	8002830 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE10deallocateEPS2_j>
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f9b8 	bl	8002884 <_ZNKSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8002514:	4603      	mov	r3, r0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f998 	bl	800284c <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_max_sizeERKS1_>
 800251c:	4603      	mov	r3, r0
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	109b      	asrs	r3, r3, #2
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv+0x28>)
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	aaaaaaab 	.word	0xaaaaaaab

08002554 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d201      	bcs.n	800256e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	e000      	b.n	8002570 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800256e:	687b      	ldr	r3, [r7, #4]
    }
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <_ZNSt16allocator_traitsISaI10CANFrameIdEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002586:	2200      	movs	r2, #0
 8002588:	6839      	ldr	r1, [r7, #0]
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f985 	bl	800289a <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv>
 8002590:	4603      	mov	r3, r0
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <_ZNSt6vectorI10CANFrameIdSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f994 	bl	80028dc <_ZSt12__relocate_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 80025b4:	4603      	mov	r3, r0
      }
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f9a2 	bl	8002916 <_ZNSt13move_iteratorIP10CANFrameIdEC1ES1_>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CANFrameIdES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f9a0 	bl	8002934 <_ZSt18uninitialized_copyISt13move_iteratorIP10CANFrameIdES2_ET0_T_S5_S4_>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff fe0b 	bl	800223c <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8002626:	4603      	mov	r3, r0
 8002628:	681c      	ldr	r4, [r3, #0]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4619      	mov	r1, r3
 800262e:	2004      	movs	r0, #4
 8002630:	f7fe ff9b 	bl	800156a <_ZnwjPv>
 8002634:	4603      	mov	r3, r0
 8002636:	601c      	str	r4, [r3, #0]
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bd90      	pop	{r4, r7, pc}

08002640 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f973 	bl	8002958 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 8002672:	4604      	mov	r4, r0
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f980 	bl	800297a <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 800267a:	4603      	mov	r3, r0
 800267c:	1ae2      	subs	r2, r4, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	429a      	cmp	r2, r3
 8002682:	bf34      	ite	cc
 8002684:	2301      	movcc	r3, #1
 8002686:	2300      	movcs	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f007 fc65 	bl	8009f5e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f970 	bl	800297a <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 800269a:	4604      	mov	r4, r0
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f96c 	bl	800297a <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 80026a2:	4603      	mov	r3, r0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	f107 0208 	add.w	r2, r7, #8
 80026aa:	f107 0310 	add.w	r3, r7, #16
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff4f 	bl	8002554 <_ZSt3maxIjERKT_S2_S2_>
 80026b6:	4603      	mov	r3, r0
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4423      	add	r3, r4
 80026bc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f95b 	bl	800297a <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 80026c4:	4602      	mov	r2, r0
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d306      	bcc.n	80026da <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f943 	bl	8002958 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 80026d2:	4602      	mov	r2, r0
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d904      	bls.n	80026e4 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x84>
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f93c 	bl	8002958 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 80026e0:	4603      	mov	r3, r0
 80026e2:	e000      	b.n	80026e6 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x86>
 80026e4:	697b      	ldr	r3, [r7, #20]
      }
 80026e6:	4618      	mov	r0, r3
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}

080026ee <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ff9e 	bl	8002640 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_ZN9__gnu_cxxmiIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800270e:	b590      	push	{r4, r7, lr}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f835 	bl	8002788 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 800271e:	4603      	mov	r3, r0
 8002720:	681c      	ldr	r4, [r3, #0]
 8002722:	6838      	ldr	r0, [r7, #0]
 8002724:	f000 f830 	bl	8002788 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 8002728:	4603      	mov	r3, r0
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	1ae3      	subs	r3, r4, r3
 800272e:	109b      	asrs	r3, r3, #2
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bd90      	pop	{r4, r7, pc}

08002738 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj+0x1e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6839      	ldr	r1, [r7, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f924 	bl	800299a <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8allocateERS2_j>
 8002752:	4603      	mov	r3, r0
 8002754:	e000      	b.n	8002758 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj+0x20>
 8002756:	2300      	movs	r3, #0
      }
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800276e:	f88d 4000 	strb.w	r4, [sp]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f91d 	bl	80029b8 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800277e:	4603      	mov	r3, r0
      }
 8002780:	4618      	mov	r0, r3
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd90      	pop	{r4, r7, pc}

08002788 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800279e:	b590      	push	{r4, r7, lr}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 f915 	bl	80029dc <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>
 80027b2:	4604      	mov	r4, r0
 80027b4:	68b8      	ldr	r0, [r7, #8]
 80027b6:	f000 f911 	bl	80029dc <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>
 80027ba:	4601      	mov	r1, r0
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4620      	mov	r0, r4
 80027c2:	f000 f91a 	bl	80029fa <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14ICANSubscriberES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80027c6:	4603      	mov	r3, r0
    }
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd90      	pop	{r4, r7, pc}

080027d0 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80027da:	6839      	ldr	r1, [r7, #0]
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f91d 	bl	8002a1c <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE7destroyIS2_EEvPT_>
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CANFrameIdEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14ICANSubscriberEEvT_S5_>:
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002822:	68b8      	ldr	r0, [r7, #8]
 8002824:	f006 fd8e 	bl	8009344 <_ZdlPv>
      }
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800283c:	68b8      	ldr	r0, [r7, #8]
 800283e:	f006 fd81 	bl	8009344 <_ZdlPv>
      }
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002854:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8002856:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f8ea 	bl	8002a32 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8max_sizeERKS1_>
 800285e:	4603      	mov	r3, r0
 8002860:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002862:	f107 0208 	add.w	r2, r7, #8
 8002866:	f107 030c 	add.w	r3, r7, #12
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f000 f8ec 	bl	8002a4a <_ZSt3minIjERKT_S2_S2_>
 8002872:	4603      	mov	r3, r0
 8002874:	681b      	ldr	r3, [r3, #0]
      }
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	0aaaaaaa 	.word	0x0aaaaaaa

08002884 <_ZNKSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f8e4 	bl	8002a74 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4293      	cmp	r3, r2
 80028b2:	bf8c      	ite	hi
 80028b4:	2301      	movhi	r3, #1
 80028b6:	2300      	movls	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80028be:	f007 fb4b 	bl	8009f58 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f007 fa59 	bl	8009d84 <_Znwj>
 80028d2:	4603      	mov	r3, r0
      }
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_ZSt12__relocate_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f8d0 	bl	8002a90 <_ZSt12__niter_baseIP10CANFrameIdET_S2_>
 80028f0:	4604      	mov	r4, r0
 80028f2:	68b8      	ldr	r0, [r7, #8]
 80028f4:	f000 f8cc 	bl	8002a90 <_ZSt12__niter_baseIP10CANFrameIdET_S2_>
 80028f8:	4605      	mov	r5, r0
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f8c8 	bl	8002a90 <_ZSt12__niter_baseIP10CANFrameIdET_S2_>
 8002900:	4602      	mov	r2, r0
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	4629      	mov	r1, r5
 8002906:	4620      	mov	r0, r4
 8002908:	f000 f8cd 	bl	8002aa6 <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 800290c:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bdb0      	pop	{r4, r5, r7, pc}

08002916 <_ZNSt13move_iteratorIP10CANFrameIdEC1ES1_>:
      move_iterator(iterator_type __i)
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_ZSt18uninitialized_copyISt13move_iteratorIP10CANFrameIdES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002940:	2300      	movs	r3, #0
 8002942:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f8d2 	bl	8002af2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_>
 800294e:	4603      	mov	r3, r0
    }
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f91d 	bl	8002ba2 <_ZNKSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8002968:	4603      	mov	r3, r0
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f8ff 	bl	8002b6e <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_max_sizeERKS2_>
 8002970:	4603      	mov	r3, r0
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	109b      	asrs	r3, r3, #2
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80029a4:	2200      	movs	r2, #0
 80029a6:	6839      	ldr	r1, [r7, #0]
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f905 	bl	8002bb8 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f911 	bl	8002bf4 <_ZSt12__relocate_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 80029d2:	4603      	mov	r3, r0
      }
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f91f 	bl	8002c2e <_ZNSt13move_iteratorIPP14ICANSubscriberEC1ES2_>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14ICANSubscriberES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f91d 	bl	8002c4c <_ZSt18uninitialized_copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f81a 	bl	8002a74 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d201      	bcs.n	8002a64 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	e000      	b.n	8002a66 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002a64:	687b      	ldr	r3, [r7, #4]
    }
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv+0x18>)
      }
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	0aaaaaaa 	.word	0x0aaaaaaa

08002a90 <_ZSt12__niter_baseIP10CANFrameIdET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8002aa6:	b590      	push	{r4, r7, lr}
 8002aa8:	b087      	sub	sp, #28
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d013      	beq.n	8002ae8 <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8002ac0:	6978      	ldr	r0, [r7, #20]
 8002ac2:	f000 f8d5 	bl	8002c70 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f8d1 	bl	8002c70 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f000 f8d6 	bl	8002c86 <_ZSt19__relocate_object_aI10CANFrameIdS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	330c      	adds	r3, #12
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	330c      	adds	r3, #12
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e7e7      	b.n	8002ab8 <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 8002ae8:	697b      	ldr	r3, [r7, #20]
    }
 8002aea:	4618      	mov	r0, r3
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd90      	pop	{r4, r7, pc}

08002af2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002af2:	b590      	push	{r4, r7, lr}
 8002af4:	b087      	sub	sp, #28
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8002b02:	f107 0208 	add.w	r2, r7, #8
 8002b06:	f107 030c 	add.w	r3, r7, #12
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 f8d5 	bl	8002cbc <_ZStneIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d016      	beq.n	8002b46 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8002b18:	6978      	ldr	r0, [r7, #20]
 8002b1a:	f000 f8a9 	bl	8002c70 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002b1e:	4604      	mov	r4, r0
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f8eb 	bl	8002d00 <_ZNKSt13move_iteratorIP10CANFrameIdEdeEv>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f000 f8f2 	bl	8002d18 <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8002b34:	f107 030c 	add.w	r3, r7, #12
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f8d0 	bl	8002cde <_ZNSt13move_iteratorIP10CANFrameIdEppEv>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	330c      	adds	r3, #12
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	e7dd      	b.n	8002b02 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	e00d      	b.n	8002b66 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x74>
 8002b4a:	4603      	mov	r3, r0
	  __catch(...)
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f006 fd68 	bl	8009622 <__cxa_begin_catch>
	      std::_Destroy(__result, __cur);
 8002b52:	6979      	ldr	r1, [r7, #20]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fc9d 	bl	8002494 <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>
	      __throw_exception_again;
 8002b5a:	f007 f8c7 	bl	8009cec <__cxa_rethrow>
	  __catch(...)
 8002b5e:	f006 fd89 	bl	8009674 <__cxa_end_catch>
 8002b62:	f006 fc89 	bl	8009478 <__cxa_end_cleanup>
	}
 8002b66:	4618      	mov	r0, r3
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}

08002b6e <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002b76:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002b7a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f8e2 	bl	8002d46 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8max_sizeERKS2_>
 8002b82:	4603      	mov	r3, r0
 8002b84:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002b86:	f107 0208 	add.w	r2, r7, #8
 8002b8a:	f107 030c 	add.w	r3, r7, #12
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff5a 	bl	8002a4a <_ZSt3minIjERKT_S2_S2_>
 8002b96:	4603      	mov	r3, r0
 8002b98:	681b      	ldr	r3, [r3, #0]
      }
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <_ZNKSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f8ca 	bl	8002d5e <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	bf8c      	ite	hi
 8002bd2:	2301      	movhi	r3, #1
 8002bd4:	2300      	movls	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002bdc:	f007 f9bc 	bl	8009f58 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f007 f8cd 	bl	8009d84 <_Znwj>
 8002bea:	4603      	mov	r3, r0
      }
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_ZSt12__relocate_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002bf4:	b5b0      	push	{r4, r5, r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f8b7 	bl	8002d76 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002c08:	4604      	mov	r4, r0
 8002c0a:	68b8      	ldr	r0, [r7, #8]
 8002c0c:	f000 f8b3 	bl	8002d76 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002c10:	4605      	mov	r5, r0
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f8af 	bl	8002d76 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f000 f8b4 	bl	8002d8c <_ZSt14__relocate_a_1IP14ICANSubscriberS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002c24:	4603      	mov	r3, r0
    }
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bdb0      	pop	{r4, r5, r7, pc}

08002c2e <_ZNSt13move_iteratorIPP14ICANSubscriberEC1ES2_>:
      move_iterator(iterator_type __i)
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_ZSt18uninitialized_copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 f8b1 	bl	8002dc8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14ICANSubscriberES5_EET0_T_S8_S7_>
 8002c66:	4603      	mov	r3, r0
    }
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <_ZSt19__relocate_object_aI10CANFrameIdS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8002c92:	68b8      	ldr	r0, [r7, #8]
 8002c94:	f000 f8a8 	bl	8002de8 <_ZSt4moveIR10CANFrameIdEONSt16remove_referenceIT_E4typeEOS3_>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8ad 	bl	8002dfe <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8002ca4:	68b8      	ldr	r0, [r7, #8]
 8002ca6:	f7ff ffe3 	bl	8002c70 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff fab7 	bl	8002222 <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>
    }
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZStneIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8002cc6:	6839      	ldr	r1, [r7, #0]
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f8ab 	bl	8002e24 <_ZSteqIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f083 0301 	eor.w	r3, r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <_ZNSt13move_iteratorIP10CANFrameIdEppEv>:
      operator++()
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f103 020c 	add.w	r2, r3, #12
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
	return *this;
 8002cf2:	687b      	ldr	r3, [r7, #4]
      }
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <_ZNKSt13move_iteratorIP10CANFrameIdEdeEv>:
      operator*() const
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8002d22:	6838      	ldr	r0, [r7, #0]
 8002d24:	f000 f894 	bl	8002e50 <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>
 8002d28:	4604      	mov	r4, r0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	200c      	movs	r0, #12
 8002d30:	f7fe fc1b 	bl	800156a <_ZnwjPv>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4622      	mov	r2, r4
 8002d38:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}

08002d46 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f805 	bl	8002d5e <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002d66:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>:
    __niter_base(_Iterator __it)
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <_ZSt14__relocate_a_1IP14ICANSubscriberS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	109b      	asrs	r3, r3, #2
 8002da2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	dd06      	ble.n	8002db8 <_ZSt14__relocate_a_1IP14ICANSubscriberS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	461a      	mov	r2, r3
 8002db0:	68f9      	ldr	r1, [r7, #12]
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f007 fb64 	bl	800a480 <memmove>
      return __result + __count;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4413      	add	r3, r2
    }
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14ICANSubscriberES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f844 	bl	8002e66 <_ZSt4copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_ZSt4moveIR10CANFrameIdEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4618      	mov	r0, r3
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f820 	bl	8002e50 <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f83d 	bl	8002e96 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JS1_EEEvPT_DpOT0_>
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_ZSteqIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f849 	bl	8002ec6 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>
 8002e34:	4604      	mov	r4, r0
 8002e36:	6838      	ldr	r0, [r7, #0]
 8002e38:	f000 f845 	bl	8002ec6 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	429c      	cmp	r4, r3
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd90      	pop	{r4, r7, pc}

08002e50 <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <_ZSt4copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002e66:	b590      	push	{r4, r7, lr}
 8002e68:	b085      	sub	sp, #20
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f833 	bl	8002ede <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002e78:	4604      	mov	r4, r0
 8002e7a:	68b8      	ldr	r0, [r7, #8]
 8002e7c:	f000 f82f 	bl	8002ede <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002e80:	4603      	mov	r3, r0
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4619      	mov	r1, r3
 8002e86:	4620      	mov	r0, r4
 8002e88:	f000 f83a 	bl	8002f00 <_ZSt14__copy_move_a2ILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>
 8002e8c:	4603      	mov	r3, r0
    }
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd90      	pop	{r4, r7, pc}

08002e96 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002e96:	b590      	push	{r4, r7, lr}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffd4 	bl	8002e50 <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4619      	mov	r1, r3
 8002eae:	200c      	movs	r0, #12
 8002eb0:	f7fe fb5b 	bl	800156a <_ZnwjPv>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd90      	pop	{r4, r7, pc}

08002ec6 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>:
      base() const
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002ee6:	1d3b      	adds	r3, r7, #4
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f82c 	bl	8002f46 <_ZNKSt13move_iteratorIPP14ICANSubscriberE4baseEv>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f834 	bl	8002f5e <_ZSt12__miter_baseIPP14ICANSubscriberET_S3_>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <_ZSt14__copy_move_a2ILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002f00:	b5b0      	push	{r4, r5, r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff ff32 	bl	8002d76 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002f12:	4604      	mov	r4, r0
 8002f14:	68b8      	ldr	r0, [r7, #8]
 8002f16:	f7ff ff2e 	bl	8002d76 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff29 	bl	8002d76 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002f24:	4603      	mov	r3, r0
 8002f26:	461a      	mov	r2, r3
 8002f28:	4629      	mov	r1, r5
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f000 f822 	bl	8002f74 <_ZSt13__copy_move_aILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>
 8002f30:	4602      	mov	r2, r0
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f82e 	bl	8002f98 <_ZSt12__niter_wrapIPP14ICANSubscriberET_RKS3_S3_>
 8002f3c:	4603      	mov	r3, r0
    }
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bdb0      	pop	{r4, r5, r7, pc}

08002f46 <_ZNKSt13move_iteratorIPP14ICANSubscriberE4baseEv>:
      base() const
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <_ZSt12__miter_baseIPP14ICANSubscriberET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_ZSt13__copy_move_aILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8002f80:	2301      	movs	r3, #1
 8002f82:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f811 	bl	8002fb0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_>
 8002f8e:	4603      	mov	r3, r0
    }
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <_ZSt12__niter_wrapIPP14ICANSubscriberET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	109b      	asrs	r3, r3, #2
 8002fc4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d006      	beq.n	8002fda <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68f9      	ldr	r1, [r7, #12]
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f007 fa53 	bl	800a480 <memmove>
	  return __result + _Num;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
	}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <_ZN13InverterRightD1Ev>:
class InverterRight : Inverter
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	4a05      	ldr	r2, [pc, #20]	; (800300c <_ZN13InverterRightD1Ev+0x20>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe fbaf 	bl	8001760 <_ZN8InverterD1Ev>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	0800af98 	.word	0x0800af98

08003010 <_ZN13InverterRightD0Ev>:
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ffe7 	bl	8002fec <_ZN13InverterRightD1Ev>
 800301e:	2114      	movs	r1, #20
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f006 f991 	bl	8009348 <_ZdlPvj>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <_ZN12InverterLeftD1Ev>:
class InverterLeft : Inverter
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	4a05      	ldr	r2, [pc, #20]	; (8003050 <_ZN12InverterLeftD1Ev+0x20>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe fb8d 	bl	8001760 <_ZN8InverterD1Ev>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	0800afac 	.word	0x0800afac

08003054 <_ZN12InverterLeftD0Ev>:
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ffe7 	bl	8003030 <_ZN12InverterLeftD1Ev>
 8003062:	2114      	movs	r1, #20
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f006 f96f 	bl	8009348 <_ZdlPvj>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <_Z41__static_initialization_and_destruction_0ii>:
Called by		: Not used yet (checked call graph)
*******************************************************************************************************************/
void CAN1_irq_receive()
{
	canController1.receiveFromISR();
}
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b087      	sub	sp, #28
 8003078:	af04      	add	r7, sp, #16
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d12e      	bne.n	80030e2 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800308a:	4293      	cmp	r3, r2
 800308c:	d129      	bne.n	80030e2 <_Z41__static_initialization_and_destruction_0ii+0x6e>
CANController canController1       = CANController(hcan1);
 800308e:	491f      	ldr	r1, [pc, #124]	; (800310c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003090:	481f      	ldr	r0, [pc, #124]	; (8003110 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003092:	f000 f8bd 	bl	8003210 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef>
InverterLeft  inverterLeft         = InverterLeft(canController1);
 8003096:	491e      	ldr	r1, [pc, #120]	; (8003110 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003098:	481e      	ldr	r0, [pc, #120]	; (8003114 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800309a:	f7fe fb83 	bl	80017a4 <_ZN12InverterLeftC1ER13CANController>
InverterRight inverterRight        = InverterRight(canController1);
 800309e:	491c      	ldr	r1, [pc, #112]	; (8003110 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80030a0:	481d      	ldr	r0, [pc, #116]	; (8003118 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80030a2:	f7fe fbb5 	bl	8001810 <_ZN13InverterRightC1ER13CANController>
CANFrameId canFrameIdLeftInverter  = CANFrameId(0xAA);
 80030a6:	21aa      	movs	r1, #170	; 0xaa
 80030a8:	481c      	ldr	r0, [pc, #112]	; (800311c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80030aa:	f000 fabf 	bl	800362c <_ZN10CANFrameIdC1Em>
CANFrameId canFrameIdRightInverter = CANFrameId(0xBB);
 80030ae:	21bb      	movs	r1, #187	; 0xbb
 80030b0:	481b      	ldr	r0, [pc, #108]	; (8003120 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80030b2:	f000 fabb 	bl	800362c <_ZN10CANFrameIdC1Em>
CANFrame leftInverterFrame  = CANFrame(canFrameIdLeftInverter, payload);
 80030b6:	4c19      	ldr	r4, [pc, #100]	; (800311c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80030b8:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80030ba:	466b      	mov	r3, sp
 80030bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80030be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030c2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80030c6:	4818      	ldr	r0, [pc, #96]	; (8003128 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80030c8:	f000 fa24 	bl	8003514 <_ZN8CANFrameC1E10CANFrameId10CANPayload>
CANFrame rightInverterFrame = CANFrame(canFrameIdRightInverter, payload);
 80030cc:	4c14      	ldr	r4, [pc, #80]	; (8003120 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80030ce:	4a15      	ldr	r2, [pc, #84]	; (8003124 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80030d0:	466b      	mov	r3, sp
 80030d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80030d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80030d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80030dc:	4813      	ldr	r0, [pc, #76]	; (800312c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80030de:	f000 fa19 	bl	8003514 <_ZN8CANFrameC1E10CANFrameId10CANPayload>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10d      	bne.n	8003104 <_Z41__static_initialization_and_destruction_0ii+0x90>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d108      	bne.n	8003104 <_Z41__static_initialization_and_destruction_0ii+0x90>
InverterRight inverterRight        = InverterRight(canController1);
 80030f2:	4809      	ldr	r0, [pc, #36]	; (8003118 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80030f4:	f7ff ff7a 	bl	8002fec <_ZN13InverterRightD1Ev>
InverterLeft  inverterLeft         = InverterLeft(canController1);
 80030f8:	4806      	ldr	r0, [pc, #24]	; (8003114 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80030fa:	f7ff ff99 	bl	8003030 <_ZN12InverterLeftD1Ev>
CANController canController1       = CANController(hcan1);
 80030fe:	4804      	ldr	r0, [pc, #16]	; (8003110 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003100:	f7fe fbd4 	bl	80018ac <_ZN13CANControllerD1Ev>
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	200013c0 	.word	0x200013c0
 8003110:	200000a8 	.word	0x200000a8
 8003114:	200000c8 	.word	0x200000c8
 8003118:	200000dc 	.word	0x200000dc
 800311c:	200000f0 	.word	0x200000f0
 8003120:	200000fc 	.word	0x200000fc
 8003124:	20000108 	.word	0x20000108
 8003128:	20000114 	.word	0x20000114
 800312c:	2000012c 	.word	0x2000012c

08003130 <_GLOBAL__sub_I_canController1>:
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
 8003134:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003138:	2001      	movs	r0, #1
 800313a:	f7ff ff9b 	bl	8003074 <_Z41__static_initialization_and_destruction_0ii>
 800313e:	bd80      	pop	{r7, pc}

08003140 <_GLOBAL__sub_D_canController1>:
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
 8003144:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003148:	2000      	movs	r0, #0
 800314a:	f7ff ff93 	bl	8003074 <_Z41__static_initialization_and_destruction_0ii>
 800314e:	bd80      	pop	{r7, pc}

08003150 <_ZN14ICANControllerC1Ev>:
#include <middleware_layer/can/CANFrame.hpp>
#include <middleware_layer/can/CANFrameId.hpp>
#include <middleware_layer/can/ICANSubscriber.hpp>


class ICANController
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <_ZN14ICANControllerC1Ev+0x1c>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	0800b010 	.word	0x0800b010

08003170 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EEC1Ev>:
      _Vector_base() = default;
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f954 	bl	8003428 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implC1Ev>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <_ZNSt6vectorI10CANFrameIdSaIS0_EEC1Ev>:
      vector() = default;
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ffeb 	bl	8003170 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EEC1Ev>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f94a 	bl	8003448 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implC1Ev>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEC1Ev>:
      vector() = default;
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ffeb 	bl	80031a4 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EEC1Ev>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <_ZN17CANControllerBaseC1Ev>:
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ffb4 	bl	8003150 <_ZN14ICANControllerC1Ev>
 80031e8:	4a08      	ldr	r2, [pc, #32]	; (800320c <_ZN17CANControllerBaseC1Ev+0x34>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3304      	adds	r3, #4
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ffc9 	bl	800318a <_ZNSt6vectorI10CANFrameIdSaIS0_EEC1Ev>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3310      	adds	r3, #16
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ffde 	bl	80031be <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEC1Ev>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	0800afd4 	.word	0x0800afd4

08003210 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef>:

#include <middleware_layer/can/CANController.hpp>



CANController::CANController(CANHandle &canHandle) : _canHandle(canHandle)
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ffdb 	bl	80031d8 <_ZN17CANControllerBaseC1Ev>
 8003222:	4a05      	ldr	r2, [pc, #20]	; (8003238 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef+0x28>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	61da      	str	r2, [r3, #28]
{
	// do nothing here
}
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	0800affc 	.word	0x0800affc

0800323c <_ZN13CANController4sendE8CANFrame>:
	receive(RxFrame);
}


void CANController::send(CANFrame frame)
{
 800323c:	b084      	sub	sp, #16
 800323e:	b590      	push	{r4, r7, lr}
 8003240:	b08b      	sub	sp, #44	; 0x2c
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800324a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/*Local values*/
	uint32_t u32canTxMailbox = 0;			// Param for the Tx mailbox
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef canTxHeader;		// Tx Header set all information for the transmission

/*mailbox handling*/

	/*check if ther are any empty mailboxes*/
	if (HAL_CAN_GetTxMailboxesFreeLevel(&_canHandle))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4618      	mov	r0, r3
 8003258:	f001 f99b 	bl	8004592 <HAL_CAN_GetTxMailboxesFreeLevel>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	bf14      	ite	ne
 8003262:	2301      	movne	r3, #1
 8003264:	2300      	moveq	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d024      	beq.n	80032b6 <_ZN13CANController4sendE8CANFrame+0x7a>
	{/*find the empty mailbox*/
		/*check mailbox 0*/
		if (!HAL_CAN_IsTxMessagePending(&_canHandle, CAN_TX_MAILBOX0))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2101      	movs	r1, #1
 8003272:	4618      	mov	r0, r3
 8003274:	f001 f9c2 	bl	80045fc <HAL_CAN_IsTxMessagePending>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <_ZN13CANController4sendE8CANFrame+0x52>
		{/*mailbox0 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX0;
 8003288:	2301      	movs	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
 800328c:	e01e      	b.n	80032cc <_ZN13CANController4sendE8CANFrame+0x90>
		}
		else if (!HAL_CAN_IsTxMessagePending(&_canHandle, CAN_TX_MAILBOX1))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	2102      	movs	r1, #2
 8003294:	4618      	mov	r0, r3
 8003296:	f001 f9b1 	bl	80045fc <HAL_CAN_IsTxMessagePending>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	bf0c      	ite	eq
 80032a0:	2301      	moveq	r3, #1
 80032a2:	2300      	movne	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <_ZN13CANController4sendE8CANFrame+0x74>
		{/*mailbox1 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX1;
 80032aa:	2302      	movs	r3, #2
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
 80032ae:	e00d      	b.n	80032cc <_ZN13CANController4sendE8CANFrame+0x90>
		}
		else
		{/*mailbox2 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX2;
 80032b0:	2304      	movs	r3, #4
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
 80032b4:	e00a      	b.n	80032cc <_ZN13CANController4sendE8CANFrame+0x90>
		}
	}
	/*no empty mailbox, throw error-handling*/
	else throw "no empty mailbox";
 80032b6:	2004      	movs	r0, #4
 80032b8:	f006 f8a4 	bl	8009404 <__cxa_allocate_exception>
 80032bc:	4603      	mov	r3, r0
 80032be:	4a26      	ldr	r2, [pc, #152]	; (8003358 <_ZN13CANController4sendE8CANFrame+0x11c>)
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	2200      	movs	r2, #0
 80032c4:	4925      	ldr	r1, [pc, #148]	; (800335c <_ZN13CANController4sendE8CANFrame+0x120>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	f006 fcf6 	bl	8009cb8 <__cxa_throw>


	/*set the Tx Header with the CAN information*/
	/*set standard and extended Id for transmission*/
	canTxHeader.StdId = frame.id.standardId;
 80032cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ce:	60fb      	str	r3, [r7, #12]
	canTxHeader.ExtId = frame.id.extendedId;
 80032d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d2:	613b      	str	r3, [r7, #16]
	/*specify if standard or extended Id is use*/
	if(frame.id.isExtendedFrame)
 80032d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <_ZN13CANController4sendE8CANFrame+0xa6>
		/*use extended Id*/
		canTxHeader.IDE = CAN_ID_EXT;
 80032dc:	2304      	movs	r3, #4
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e001      	b.n	80032e6 <_ZN13CANController4sendE8CANFrame+0xaa>
	else
		/*use standard Id*/
		canTxHeader.IDE = CAN_ID_STD;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]

	/*specify the type of frame to transmission*/
	if ( frame.payload.isRemoteFrame)
 80032e6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <_ZN13CANController4sendE8CANFrame+0xb8>
		/*send remote frame*/
		canTxHeader.RTR = CAN_RTR_REMOTE;
 80032ee:	2302      	movs	r3, #2
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	e001      	b.n	80032f8 <_ZN13CANController4sendE8CANFrame+0xbc>
	else
		/*send a Data frame*/
		canTxHeader.RTR = CAN_RTR_DATA;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61bb      	str	r3, [r7, #24]

	/*set length of dataframe*/
	canTxHeader.DLC = frame.payload.bitLength/8;
 80032f8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80032fc:	08db      	lsrs	r3, r3, #3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	61fb      	str	r3, [r7, #28]
	/*diesable TransmitglobalTime*/
	canTxHeader.TransmitGlobalTime = DISABLE;
 8003302:	2300      	movs	r3, #0
 8003304:	f887 3020 	strb.w	r3, [r7, #32]


	/*start transmission*/
	if(HAL_CAN_AddTxMessage(&_canHandle, &canTxHeader, frame.payload.data.uint8, &u32canTxMailbox))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69d8      	ldr	r0, [r3, #28]
 800330c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8003310:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003314:	f103 020c 	add.w	r2, r3, #12
 8003318:	f107 010c 	add.w	r1, r7, #12
 800331c:	4623      	mov	r3, r4
 800331e:	f001 f85d 	bl	80043dc <HAL_CAN_AddTxMessage>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <_ZN13CANController4sendE8CANFrame+0x10c>
		/*transmission failed*/
		throw "send TX is not possible";
 8003332:	2004      	movs	r0, #4
 8003334:	f006 f866 	bl	8009404 <__cxa_allocate_exception>
 8003338:	4603      	mov	r3, r0
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <_ZN13CANController4sendE8CANFrame+0x124>)
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	4906      	ldr	r1, [pc, #24]	; (800335c <_ZN13CANController4sendE8CANFrame+0x120>)
 8003342:	4618      	mov	r0, r3
 8003344:	f006 fcb8 	bl	8009cb8 <__cxa_throw>

}
 8003348:	bf00      	nop
 800334a:	372c      	adds	r7, #44	; 0x2c
 800334c:	46bd      	mov	sp, r7
 800334e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003352:	b004      	add	sp, #16
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	0800ae40 	.word	0x0800ae40
 800335c:	0800b0c0 	.word	0x0800b0c0
 8003360:	0800ae54 	.word	0x0800ae54

08003364 <_ZN13CANController5startEv>:
/** function to start the CAN communication*/
void CANController::start(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_Start(&_canHandle)) throw "Can can't start";
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 ffef 	bl	8004354 <HAL_CAN_Start>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <_ZN13CANController5startEv+0x38>
 8003386:	2004      	movs	r0, #4
 8003388:	f006 f83c 	bl	8009404 <__cxa_allocate_exception>
 800338c:	4603      	mov	r3, r0
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <_ZN13CANController5startEv+0x40>)
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	4904      	ldr	r1, [pc, #16]	; (80033a8 <_ZN13CANController5startEv+0x44>)
 8003396:	4618      	mov	r0, r3
 8003398:	f006 fc8e 	bl	8009cb8 <__cxa_throw>
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	0800ae6c 	.word	0x0800ae6c
 80033a8:	0800b0c0 	.word	0x0800b0c0

080033ac <_ZN13CANController17activateInterruptEv>:
/**function to activate the Interrupt for CAN*/
void CANController::activateInterrupt (void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO0_MSG_PENDING)) throw "Interrupt can't activate";
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2102      	movs	r1, #2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f001 fa54 	bl	8004868 <HAL_CAN_ActivateNotification>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf14      	ite	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	2300      	moveq	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <_ZN13CANController17activateInterruptEv+0x3a>
 80033d0:	2004      	movs	r0, #4
 80033d2:	f006 f817 	bl	8009404 <__cxa_allocate_exception>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4a11      	ldr	r2, [pc, #68]	; (8003420 <_ZN13CANController17activateInterruptEv+0x74>)
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	2200      	movs	r2, #0
 80033de:	4911      	ldr	r1, [pc, #68]	; (8003424 <_ZN13CANController17activateInterruptEv+0x78>)
 80033e0:	4618      	mov	r0, r3
 80033e2:	f006 fc69 	bl	8009cb8 <__cxa_throw>
	if(HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO1_MSG_PENDING)) throw "Interrupt can't activate";
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	2110      	movs	r1, #16
 80033ec:	4618      	mov	r0, r3
 80033ee:	f001 fa3b 	bl	8004868 <HAL_CAN_ActivateNotification>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <_ZN13CANController17activateInterruptEv+0x6c>
 8003402:	2004      	movs	r0, #4
 8003404:	f005 fffe 	bl	8009404 <__cxa_allocate_exception>
 8003408:	4603      	mov	r3, r0
 800340a:	4a05      	ldr	r2, [pc, #20]	; (8003420 <_ZN13CANController17activateInterruptEv+0x74>)
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	2200      	movs	r2, #0
 8003410:	4904      	ldr	r1, [pc, #16]	; (8003424 <_ZN13CANController17activateInterruptEv+0x78>)
 8003412:	4618      	mov	r0, r3
 8003414:	f006 fc50 	bl	8009cb8 <__cxa_throw>
	//HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO0_FULL);
	//HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO1_FULL);
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	0800ae7c 	.word	0x0800ae7c
 8003424:	0800b0c0 	.word	0x0800b0c0

08003428 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f819 	bl	8003468 <_ZNSaI10CANFrameIdEC1Ev>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	f000 f821 	bl	8003480 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f829 	bl	80034a8 <_ZNSaIP14ICANSubscriberEC1Ev>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f831 	bl	80034c0 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_ZNSaI10CANFrameIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f839 	bl	80034e8 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdEC1Ev>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
	{ }
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <_ZNSaIP14ICANSubscriberEC1Ev>:
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f824 	bl	80034fe <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberEC1Ev>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
	{ }
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberEC1Ev>:
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <_ZN8CANFrameC1E10CANFrameId10CANPayload>:

#include <middleware_layer/can/CANFrame.hpp>



CANFrame::CANFrame(CANFrameId id, CANPayload payload) : id(id), payload(payload)
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	4638      	mov	r0, r7
 800351e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	461c      	mov	r4, r3
 8003526:	463b      	mov	r3, r7
 8003528:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800352c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	330c      	adds	r3, #12
 8003534:	f107 0220 	add.w	r2, r7, #32
 8003538:	ca07      	ldmia	r2, {r0, r1, r2}
 800353a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
{
	if (!payload.isValid()) throw "Invalid CAN frame payload.";
 800353e:	f107 0020 	add.w	r0, r7, #32
 8003542:	f000 f8a3 	bl	800368c <_ZNK10CANPayload7isValidEv>
 8003546:	4603      	mov	r3, r0
 8003548:	f083 0301 	eor.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x54>
 8003552:	2004      	movs	r0, #4
 8003554:	f005 ff56 	bl	8009404 <__cxa_allocate_exception>
 8003558:	4603      	mov	r3, r0
 800355a:	4a06      	ldr	r2, [pc, #24]	; (8003574 <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x60>)
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	4905      	ldr	r1, [pc, #20]	; (8003578 <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x64>)
 8003562:	4618      	mov	r0, r3
 8003564:	f006 fba8 	bl	8009cb8 <__cxa_throw>
}
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bd90      	pop	{r4, r7, pc}
 8003572:	bf00      	nop
 8003574:	0800aed0 	.word	0x0800aed0
 8003578:	0800b0c0 	.word	0x0800b0c0

0800357c <_ZN10CANFrameIdC1Emmb>:
*
*
*/
#include <middleware_layer/can/CANFrameId.hpp>

CANFrameId::CANFrameId(uint32_t standardId, uint32_t extendedId, bool isExtendedFrame) :
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	70fb      	strb	r3, [r7, #3]
	standardId(standardId), extendedId(extendedId), isExtendedFrame(isExtendedFrame)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	721a      	strb	r2, [r3, #8]
{
	// check standard id
	if (standardId & ~0x7FF) throw "Not an 11 bit CAN standard id.";
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <_ZN10CANFrameIdC1Emmb+0x98>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <_ZN10CANFrameIdC1Emmb+0x40>
 80035a6:	2004      	movs	r0, #4
 80035a8:	f005 ff2c 	bl	8009404 <__cxa_allocate_exception>
 80035ac:	4603      	mov	r3, r0
 80035ae:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <_ZN10CANFrameIdC1Emmb+0x9c>)
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	2200      	movs	r2, #0
 80035b4:	4919      	ldr	r1, [pc, #100]	; (800361c <_ZN10CANFrameIdC1Emmb+0xa0>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f006 fb7e 	bl	8009cb8 <__cxa_throw>
	// check extended id
	if (!isExtendedFrame && extendedId) throw "CAN extended id is not used but is not zero.";
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	f083 0301 	eor.w	r3, r3, #1
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00d      	beq.n	80035e4 <_ZN10CANFrameIdC1Emmb+0x68>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <_ZN10CANFrameIdC1Emmb+0x68>
 80035ce:	2004      	movs	r0, #4
 80035d0:	f005 ff18 	bl	8009404 <__cxa_allocate_exception>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4a12      	ldr	r2, [pc, #72]	; (8003620 <_ZN10CANFrameIdC1Emmb+0xa4>)
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	2200      	movs	r2, #0
 80035dc:	490f      	ldr	r1, [pc, #60]	; (800361c <_ZN10CANFrameIdC1Emmb+0xa0>)
 80035de:	4618      	mov	r0, r3
 80035e0:	f006 fb6a 	bl	8009cb8 <__cxa_throw>
	if (isExtendedFrame && (extendedId & ~0x3FF)) throw "Not an 18 bit CAN extended id.";
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00f      	beq.n	800360a <_ZN10CANFrameIdC1Emmb+0x8e>
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <_ZN10CANFrameIdC1Emmb+0xa8>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <_ZN10CANFrameIdC1Emmb+0x8e>
 80035f4:	2004      	movs	r0, #4
 80035f6:	f005 ff05 	bl	8009404 <__cxa_allocate_exception>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <_ZN10CANFrameIdC1Emmb+0xac>)
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	2200      	movs	r2, #0
 8003602:	4906      	ldr	r1, [pc, #24]	; (800361c <_ZN10CANFrameIdC1Emmb+0xa0>)
 8003604:	4618      	mov	r0, r3
 8003606:	f006 fb57 	bl	8009cb8 <__cxa_throw>
}
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	fffff800 	.word	0xfffff800
 8003618:	0800aeec 	.word	0x0800aeec
 800361c:	0800b0c0 	.word	0x0800b0c0
 8003620:	0800af0c 	.word	0x0800af0c
 8003624:	fffffc00 	.word	0xfffffc00
 8003628:	0800af3c 	.word	0x0800af3c

0800362c <_ZN10CANFrameIdC1Em>:


CANFrameId::CANFrameId(uint32_t standardId) : CANFrameId(standardId, 0, false)
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
 8003636:	2300      	movs	r3, #0
 8003638:	2200      	movs	r2, #0
 800363a:	6839      	ldr	r1, [r7, #0]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff9d 	bl	800357c <_ZN10CANFrameIdC1Emmb>
{
	// do nothing here
}
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <_ZNK10CANFrameIdeqERKS_>:
	// do nothing here
}


bool CANFrameId::operator== (const CANFrameId& other) const
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
	return (standardId == other.standardId &&
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
			extendedId == other.extendedId &&
 800365e:	429a      	cmp	r2, r3
 8003660:	d10d      	bne.n	800367e <_ZNK10CANFrameIdeqERKS_+0x32>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
	return (standardId == other.standardId &&
 800366a:	429a      	cmp	r2, r3
 800366c:	d107      	bne.n	800367e <_ZNK10CANFrameIdeqERKS_+0x32>
			isExtendedFrame == other.isExtendedFrame);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7a1a      	ldrb	r2, [r3, #8]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	7a1b      	ldrb	r3, [r3, #8]
			extendedId == other.extendedId &&
 8003676:	429a      	cmp	r2, r3
 8003678:	d101      	bne.n	800367e <_ZNK10CANFrameIdeqERKS_+0x32>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <_ZNK10CANFrameIdeqERKS_+0x34>
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <_ZNK10CANPayload7isValidEv>:
*/

#include <middleware_layer/can/CANPayload.hpp>

bool CANPayload::isValid() const
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	if (isRemoteFrame && bitLength) return false;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7a5b      	ldrb	r3, [r3, #9]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <_ZNK10CANPayload7isValidEv+0x1c>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7a1b      	ldrb	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <_ZNK10CANPayload7isValidEv+0x1c>
 80036a4:	2300      	movs	r3, #0
 80036a6:	e024      	b.n	80036f2 <_ZNK10CANPayload7isValidEv+0x66>
	if (bitLength > 64) return false;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7a1b      	ldrb	r3, [r3, #8]
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d901      	bls.n	80036b4 <_ZNK10CANPayload7isValidEv+0x28>
 80036b0:	2300      	movs	r3, #0
 80036b2:	e01e      	b.n	80036f2 <_ZNK10CANPayload7isValidEv+0x66>
	if (bitLength <= 32)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7a1b      	ldrb	r3, [r3, #8]
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d80e      	bhi.n	80036da <_ZNK10CANPayload7isValidEv+0x4e>
	{
		if (data.uint32[1]) return false;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <_ZNK10CANPayload7isValidEv+0x3c>
 80036c4:	2300      	movs	r3, #0
 80036c6:	e014      	b.n	80036f2 <_ZNK10CANPayload7isValidEv+0x66>
		if (data.uint32[0] >> bitLength) return false;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	7a12      	ldrb	r2, [r2, #8]
 80036d0:	40d3      	lsrs	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <_ZNK10CANPayload7isValidEv+0x64>
 80036d6:	2300      	movs	r3, #0
 80036d8:	e00b      	b.n	80036f2 <_ZNK10CANPayload7isValidEv+0x66>
	}
	else if (data.uint32[1] >> (bitLength - 32)) return false;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	7a1b      	ldrb	r3, [r3, #8]
 80036e2:	3b20      	subs	r3, #32
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <_ZNK10CANPayload7isValidEv+0x64>
 80036ec:	2300      	movs	r3, #0
 80036ee:	e000      	b.n	80036f2 <_ZNK10CANPayload7isValidEv+0x66>
	return true;
 80036f0:	2301      	movs	r3, #1
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80036fe:	b480      	push	{r7}
 8003700:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003744:	f000 fbf1 	bl	8003f2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003748:	f000 f818 	bl	800377c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800374c:	f000 f8f8 	bl	8003940 <MX_GPIO_Init>
//  MX_ETH_Init();
//  MX_USART3_UART_Init();
//  MX_USB_OTG_FS_PCD_Init();
  MX_CAN1_Init();
 8003750:	f000 f8a4 	bl	800389c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003754:	f003 f9b0 	bl	8006ab8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003758:	4a05      	ldr	r2, [pc, #20]	; (8003770 <main+0x30>)
 800375a:	2100      	movs	r1, #0
 800375c:	4805      	ldr	r0, [pc, #20]	; (8003774 <main+0x34>)
 800375e:	f003 fa15 	bl	8006b8c <osThreadNew>
 8003762:	4603      	mov	r3, r0
 8003764:	4a04      	ldr	r2, [pc, #16]	; (8003778 <main+0x38>)
 8003766:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003768:	f003 f9da 	bl	8006b20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800376c:	e7fe      	b.n	800376c <main+0x2c>
 800376e:	bf00      	nop
 8003770:	0800b01c 	.word	0x0800b01c
 8003774:	08003a85 	.word	0x08003a85
 8003778:	20000f34 	.word	0x20000f34

0800377c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b0b8      	sub	sp, #224	; 0xe0
 8003780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003782:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003786:	2234      	movs	r2, #52	; 0x34
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f006 fe92 	bl	800a4b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003790:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037a0:	f107 0308 	add.w	r3, r7, #8
 80037a4:	2290      	movs	r2, #144	; 0x90
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f006 fe83 	bl	800a4b4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80037ae:	f001 fd95 	bl	80052dc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b2:	4b37      	ldr	r3, [pc, #220]	; (8003890 <SystemClock_Config+0x114>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a36      	ldr	r2, [pc, #216]	; (8003890 <SystemClock_Config+0x114>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <SystemClock_Config+0x114>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80037ca:	4b32      	ldr	r3, [pc, #200]	; (8003894 <SystemClock_Config+0x118>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037d2:	4a30      	ldr	r2, [pc, #192]	; (8003894 <SystemClock_Config+0x118>)
 80037d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <SystemClock_Config+0x118>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80037ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80037f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037f4:	2302      	movs	r3, #2
 80037f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003802:	2304      	movs	r3, #4
 8003804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8003808:	2390      	movs	r3, #144	; 0x90
 800380a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800380e:	2302      	movs	r3, #2
 8003810:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8003814:	2306      	movs	r3, #6
 8003816:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800381a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fd6c 	bl	80052fc <HAL_RCC_OscConfig>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800382a:	f000 f947 	bl	8003abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800382e:	230f      	movs	r3, #15
 8003830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003834:	2302      	movs	r3, #2
 8003836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003840:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800384c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003850:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003854:	2104      	movs	r1, #4
 8003856:	4618      	mov	r0, r3
 8003858:	f001 fffe 	bl	8005858 <HAL_RCC_ClockConfig>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003862:	f000 f92b 	bl	8003abc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8003866:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <SystemClock_Config+0x11c>)
 8003868:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800386a:	2300      	movs	r3, #0
 800386c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800386e:	2300      	movs	r3, #0
 8003870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003874:	f107 0308 	add.w	r3, r7, #8
 8003878:	4618      	mov	r0, r3
 800387a:	f002 fa0d 	bl	8005c98 <HAL_RCCEx_PeriphCLKConfig>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003884:	f000 f91a 	bl	8003abc <Error_Handler>
  }
}
 8003888:	bf00      	nop
 800388a:	37e0      	adds	r7, #224	; 0xe0
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40023800 	.word	0x40023800
 8003894:	40007000 	.word	0x40007000
 8003898:	00200100 	.word	0x00200100

0800389c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08a      	sub	sp, #40	; 0x28
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80038a2:	4b25      	ldr	r3, [pc, #148]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038a4:	4a25      	ldr	r2, [pc, #148]	; (800393c <MX_CAN1_Init+0xa0>)
 80038a6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80038a8:	4b23      	ldr	r3, [pc, #140]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038aa:	2202      	movs	r2, #2
 80038ac:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80038ae:	4b22      	ldr	r3, [pc, #136]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80038b6:	4b20      	ldr	r3, [pc, #128]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80038bc:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038be:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80038c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80038c4:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038c6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80038ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80038cc:	4b1a      	ldr	r3, [pc, #104]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80038de:	4b16      	ldr	r3, [pc, #88]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80038e4:	4b14      	ldr	r3, [pc, #80]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80038f0:	4811      	ldr	r0, [pc, #68]	; (8003938 <MX_CAN1_Init+0x9c>)
 80038f2:	f000 fb47 	bl	8003f84 <HAL_CAN_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 80038fc:	f000 f8de 	bl	8003abc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef s_filter_can;

  	  s_filter_can.FilterMaskIdHigh = 0x0000;
 8003900:	2300      	movs	r3, #0
 8003902:	60bb      	str	r3, [r7, #8]
  	  s_filter_can.FilterIdLow = 0x0000;
 8003904:	2300      	movs	r3, #0
 8003906:	607b      	str	r3, [r7, #4]
  	  s_filter_can.FilterMaskIdHigh = 0x0000;
 8003908:	2300      	movs	r3, #0
 800390a:	60bb      	str	r3, [r7, #8]
  	  s_filter_can.FilterMaskIdLow = 0x0000;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
  	  s_filter_can.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003910:	2300      	movs	r3, #0
 8003912:	613b      	str	r3, [r7, #16]
  	  s_filter_can.FilterBank = 13;
 8003914:	230d      	movs	r3, #13
 8003916:	617b      	str	r3, [r7, #20]
  	  s_filter_can.FilterMode = CAN_FILTERMODE_IDMASK;
 8003918:	2300      	movs	r3, #0
 800391a:	61bb      	str	r3, [r7, #24]
  	  s_filter_can.FilterScale = CAN_FILTERSCALE_16BIT;
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
  	  s_filter_can.FilterActivation = CAN_FILTER_ENABLE;
 8003920:	2301      	movs	r3, #1
 8003922:	623b      	str	r3, [r7, #32]

  	  HAL_CAN_ConfigFilter(&hcan1, &s_filter_can);
 8003924:	463b      	mov	r3, r7
 8003926:	4619      	mov	r1, r3
 8003928:	4803      	ldr	r0, [pc, #12]	; (8003938 <MX_CAN1_Init+0x9c>)
 800392a:	f000 fc27 	bl	800417c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800392e:	bf00      	nop
 8003930:	3728      	adds	r7, #40	; 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200013c0 	.word	0x200013c0
 800393c:	40006400 	.word	0x40006400

08003940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08c      	sub	sp, #48	; 0x30
 8003944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003946:	f107 031c 	add.w	r3, r7, #28
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003956:	4b46      	ldr	r3, [pc, #280]	; (8003a70 <MX_GPIO_Init+0x130>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a45      	ldr	r2, [pc, #276]	; (8003a70 <MX_GPIO_Init+0x130>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <MX_GPIO_Init+0x130>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800396e:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <MX_GPIO_Init+0x130>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	4a3f      	ldr	r2, [pc, #252]	; (8003a70 <MX_GPIO_Init+0x130>)
 8003974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003978:	6313      	str	r3, [r2, #48]	; 0x30
 800397a:	4b3d      	ldr	r3, [pc, #244]	; (8003a70 <MX_GPIO_Init+0x130>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003986:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <MX_GPIO_Init+0x130>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	4a39      	ldr	r2, [pc, #228]	; (8003a70 <MX_GPIO_Init+0x130>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6313      	str	r3, [r2, #48]	; 0x30
 8003992:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <MX_GPIO_Init+0x130>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800399e:	4b34      	ldr	r3, [pc, #208]	; (8003a70 <MX_GPIO_Init+0x130>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	4a33      	ldr	r2, [pc, #204]	; (8003a70 <MX_GPIO_Init+0x130>)
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	6313      	str	r3, [r2, #48]	; 0x30
 80039aa:	4b31      	ldr	r3, [pc, #196]	; (8003a70 <MX_GPIO_Init+0x130>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039b6:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <MX_GPIO_Init+0x130>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	4a2d      	ldr	r2, [pc, #180]	; (8003a70 <MX_GPIO_Init+0x130>)
 80039bc:	f043 0308 	orr.w	r3, r3, #8
 80039c0:	6313      	str	r3, [r2, #48]	; 0x30
 80039c2:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <MX_GPIO_Init+0x130>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039ce:	4b28      	ldr	r3, [pc, #160]	; (8003a70 <MX_GPIO_Init+0x130>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <MX_GPIO_Init+0x130>)
 80039d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d8:	6313      	str	r3, [r2, #48]	; 0x30
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <MX_GPIO_Init+0x130>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80039e6:	2200      	movs	r2, #0
 80039e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80039ec:	4821      	ldr	r0, [pc, #132]	; (8003a74 <MX_GPIO_Init+0x134>)
 80039ee:	f001 fc41 	bl	8005274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80039f2:	2200      	movs	r2, #0
 80039f4:	2140      	movs	r1, #64	; 0x40
 80039f6:	4820      	ldr	r0, [pc, #128]	; (8003a78 <MX_GPIO_Init+0x138>)
 80039f8:	f001 fc3c 	bl	8005274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80039fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a02:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <MX_GPIO_Init+0x13c>)
 8003a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003a0a:	f107 031c 	add.w	r3, r7, #28
 8003a0e:	4619      	mov	r1, r3
 8003a10:	481b      	ldr	r0, [pc, #108]	; (8003a80 <MX_GPIO_Init+0x140>)
 8003a12:	f001 fa6b 	bl	8004eec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003a16:	f244 0381 	movw	r3, #16513	; 0x4081
 8003a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a24:	2300      	movs	r3, #0
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a28:	f107 031c 	add.w	r3, r7, #28
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4811      	ldr	r0, [pc, #68]	; (8003a74 <MX_GPIO_Init+0x134>)
 8003a30:	f001 fa5c 	bl	8004eec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003a34:	2340      	movs	r3, #64	; 0x40
 8003a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a40:	2300      	movs	r3, #0
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003a44:	f107 031c 	add.w	r3, r7, #28
 8003a48:	4619      	mov	r1, r3
 8003a4a:	480b      	ldr	r0, [pc, #44]	; (8003a78 <MX_GPIO_Init+0x138>)
 8003a4c:	f001 fa4e 	bl	8004eec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a54:	2300      	movs	r3, #0
 8003a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	4619      	mov	r1, r3
 8003a62:	4805      	ldr	r0, [pc, #20]	; (8003a78 <MX_GPIO_Init+0x138>)
 8003a64:	f001 fa42 	bl	8004eec <HAL_GPIO_Init>

}
 8003a68:	bf00      	nop
 8003a6a:	3730      	adds	r7, #48	; 0x30
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40020400 	.word	0x40020400
 8003a78:	40021800 	.word	0x40021800
 8003a7c:	10110000 	.word	0x10110000
 8003a80:	40020800 	.word	0x40020800

08003a84 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	vtestCAN();
 8003a8c:	f7fd ff38 	bl	8001900 <vtestCAN>
    osDelay(1);
 8003a90:	2001      	movs	r0, #1
 8003a92:	f003 f921 	bl	8006cd8 <osDelay>
	vtestCAN();
 8003a96:	e7f9      	b.n	8003a8c <StartDefaultTask+0x8>

08003a98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003aaa:	f000 fa4b 	bl	8003f44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40010000 	.word	0x40010000

08003abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1)
	{
		puts("error");
 8003ac0:	4801      	ldr	r0, [pc, #4]	; (8003ac8 <Error_Handler+0xc>)
 8003ac2:	f006 fe17 	bl	800a6f4 <puts>
	{
 8003ac6:	e7fb      	b.n	8003ac0 <Error_Handler+0x4>
 8003ac8:	0800af68 	.word	0x0800af68

08003acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ad2:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <HAL_MspInit+0x4c>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <HAL_MspInit+0x4c>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ade:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <HAL_MspInit+0x4c>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_MspInit+0x4c>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_MspInit+0x4c>)
 8003af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af4:	6453      	str	r3, [r2, #68]	; 0x44
 8003af6:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <HAL_MspInit+0x4c>)
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b02:	2200      	movs	r2, #0
 8003b04:	210f      	movs	r1, #15
 8003b06:	f06f 0001 	mvn.w	r0, #1
 8003b0a:	f001 f9c5 	bl	8004e98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800

08003b1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	; 0x28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b24:	f107 0314 	add.w	r3, r7, #20
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2f      	ldr	r2, [pc, #188]	; (8003bf8 <HAL_CAN_MspInit+0xdc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d157      	bne.n	8003bee <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003b3e:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <HAL_CAN_MspInit+0xe0>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	4a2e      	ldr	r2, [pc, #184]	; (8003bfc <HAL_CAN_MspInit+0xe0>)
 8003b44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b48:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4a:	4b2c      	ldr	r3, [pc, #176]	; (8003bfc <HAL_CAN_MspInit+0xe0>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b56:	4b29      	ldr	r3, [pc, #164]	; (8003bfc <HAL_CAN_MspInit+0xe0>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	4a28      	ldr	r2, [pc, #160]	; (8003bfc <HAL_CAN_MspInit+0xe0>)
 8003b5c:	f043 0308 	orr.w	r3, r3, #8
 8003b60:	6313      	str	r3, [r2, #48]	; 0x30
 8003b62:	4b26      	ldr	r3, [pc, #152]	; (8003bfc <HAL_CAN_MspInit+0xe0>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b76:	2301      	movs	r3, #1
 8003b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003b7e:	2309      	movs	r3, #9
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b82:	f107 0314 	add.w	r3, r7, #20
 8003b86:	4619      	mov	r1, r3
 8003b88:	481d      	ldr	r0, [pc, #116]	; (8003c00 <HAL_CAN_MspInit+0xe4>)
 8003b8a:	f001 f9af 	bl	8004eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b92:	2302      	movs	r3, #2
 8003b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003b9e:	2309      	movs	r3, #9
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ba2:	f107 0314 	add.w	r3, r7, #20
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4815      	ldr	r0, [pc, #84]	; (8003c00 <HAL_CAN_MspInit+0xe4>)
 8003baa:	f001 f99f 	bl	8004eec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	2013      	movs	r0, #19
 8003bb4:	f001 f970 	bl	8004e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003bb8:	2013      	movs	r0, #19
 8003bba:	f001 f989 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	2014      	movs	r0, #20
 8003bc4:	f001 f968 	bl	8004e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003bc8:	2014      	movs	r0, #20
 8003bca:	f001 f981 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2015      	movs	r0, #21
 8003bd4:	f001 f960 	bl	8004e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003bd8:	2015      	movs	r0, #21
 8003bda:	f001 f979 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	2016      	movs	r0, #22
 8003be4:	f001 f958 	bl	8004e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003be8:	2016      	movs	r0, #22
 8003bea:	f001 f971 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003bee:	bf00      	nop
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40006400 	.word	0x40006400
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40020c00 	.word	0x40020c00

08003c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08c      	sub	sp, #48	; 0x30
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003c14:	2200      	movs	r2, #0
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	2019      	movs	r0, #25
 8003c1a:	f001 f93d 	bl	8004e98 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c1e:	2019      	movs	r0, #25
 8003c20:	f001 f956 	bl	8004ed0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003c24:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <HAL_InitTick+0xa0>)
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <HAL_InitTick+0xa0>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8003c30:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <HAL_InitTick+0xa0>)
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c3c:	f107 0210 	add.w	r2, r7, #16
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 fff4 	bl	8005c34 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003c4c:	f001 ffde 	bl	8005c0c <HAL_RCC_GetPCLK2Freq>
 8003c50:	4603      	mov	r3, r0
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	4a13      	ldr	r2, [pc, #76]	; (8003ca8 <HAL_InitTick+0xa4>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	0c9b      	lsrs	r3, r3, #18
 8003c60:	3b01      	subs	r3, #1
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003c64:	4b11      	ldr	r3, [pc, #68]	; (8003cac <HAL_InitTick+0xa8>)
 8003c66:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <HAL_InitTick+0xac>)
 8003c68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003c6a:	4b10      	ldr	r3, [pc, #64]	; (8003cac <HAL_InitTick+0xa8>)
 8003c6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003c72:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <HAL_InitTick+0xa8>)
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <HAL_InitTick+0xa8>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_InitTick+0xa8>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003c84:	4809      	ldr	r0, [pc, #36]	; (8003cac <HAL_InitTick+0xa8>)
 8003c86:	f002 fc2f 	bl	80064e8 <HAL_TIM_Base_Init>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d104      	bne.n	8003c9a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003c90:	4806      	ldr	r0, [pc, #24]	; (8003cac <HAL_InitTick+0xa8>)
 8003c92:	f002 fc8b 	bl	80065ac <HAL_TIM_Base_Start_IT>
 8003c96:	4603      	mov	r3, r0
 8003c98:	e000      	b.n	8003c9c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3730      	adds	r7, #48	; 0x30
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	431bde83 	.word	0x431bde83
 8003cac:	20001430 	.word	0x20001430
 8003cb0:	40010000 	.word	0x40010000

08003cb4 <halt>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN TD */
void halt(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	puts("....");
 8003cb8:	4802      	ldr	r0, [pc, #8]	; (8003cc4 <halt+0x10>)
 8003cba:	f006 fd1b 	bl	800a6f4 <puts>
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	0800af70 	.word	0x0800af70

08003cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cda:	e7fe      	b.n	8003cda <HardFault_Handler+0x4>

08003cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ce0:	e7fe      	b.n	8003ce0 <MemManage_Handler+0x4>

08003ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ce6:	e7fe      	b.n	8003ce6 <BusFault_Handler+0x4>

08003ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cec:	e7fe      	b.n	8003cec <UsageFault_Handler+0x4>

08003cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
	halt();
 8003d00:	f7ff ffd8 	bl	8003cb4 <halt>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003d04:	4802      	ldr	r0, [pc, #8]	; (8003d10 <CAN1_TX_IRQHandler+0x14>)
 8003d06:	f000 fdd5 	bl	80048b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200013c0 	.word	0x200013c0

08003d14 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	; 0x28
 8003d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	halt();
 8003d1a:	f7ff ffcb 	bl	8003cb4 <halt>
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003d1e:	4809      	ldr	r0, [pc, #36]	; (8003d44 <CAN1_RX0_IRQHandler+0x30>)
 8003d20:	f000 fdc8 	bl	80048b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  //CAN1_irq_receive();
  CAN_RxHeaderTypeDef header;
  uint8_t data[8];
  if (HAL_CAN_GetRxMessage(&hcan1, 0, &header, data) != HAL_OK)
 8003d24:	1d3b      	adds	r3, r7, #4
 8003d26:	f107 020c 	add.w	r2, r7, #12
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4805      	ldr	r0, [pc, #20]	; (8003d44 <CAN1_RX0_IRQHandler+0x30>)
 8003d2e:	f000 fc89 	bl	8004644 <HAL_CAN_GetRxMessage>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <CAN1_RX0_IRQHandler+0x28>
  {
	  halt();
 8003d38:	f7ff ffbc 	bl	8003cb4 <halt>
  }
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003d3c:	bf00      	nop
 8003d3e:	3728      	adds	r7, #40	; 0x28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	200013c0 	.word	0x200013c0

08003d48 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	halt();
 8003d4c:	f7ff ffb2 	bl	8003cb4 <halt>
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003d50:	4802      	ldr	r0, [pc, #8]	; (8003d5c <CAN1_RX1_IRQHandler+0x14>)
 8003d52:	f000 fdaf 	bl	80048b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
  //CAN1_irq_receive();
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	200013c0 	.word	0x200013c0

08003d60 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */
	halt();
 8003d64:	f7ff ffa6 	bl	8003cb4 <halt>
  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <CAN1_SCE_IRQHandler+0x14>)
 8003d6a:	f000 fda3 	bl	80048b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200013c0 	.word	0x200013c0

08003d78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d7c:	4802      	ldr	r0, [pc, #8]	; (8003d88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003d7e:	f002 fc8d 	bl	800669c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20001430 	.word	0x20001430

08003d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
	return 1;
 8003d90:	2301      	movs	r3, #1
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <_kill>:

int _kill(int pid, int sig)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003da6:	f006 fa29 	bl	800a1fc <__errno>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2216      	movs	r2, #22
 8003dae:	601a      	str	r2, [r3, #0]
	return -1;
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <_exit>:

void _exit (int status)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ffe7 	bl	8003d9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dce:	e7fe      	b.n	8003dce <_exit+0x12>

08003dd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e00a      	b.n	8003df8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003de2:	f3af 8000 	nop.w
 8003de6:	4601      	mov	r1, r0
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	60ba      	str	r2, [r7, #8]
 8003dee:	b2ca      	uxtb	r2, r1
 8003df0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3301      	adds	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	dbf0      	blt.n	8003de2 <_read+0x12>
	}

return len;
 8003e00:	687b      	ldr	r3, [r7, #4]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	e009      	b.n	8003e30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	60ba      	str	r2, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	dbf1      	blt.n	8003e1c <_write+0x12>
	}
	return len;
 8003e38:	687b      	ldr	r3, [r7, #4]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_close>:

int _close(int file)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
	return -1;
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e6a:	605a      	str	r2, [r3, #4]
	return 0;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <_isatty>:

int _isatty(int file)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
	return 1;
 8003e82:	2301      	movs	r3, #1
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
	return 0;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eb0:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <SystemInit+0x28>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <SystemInit+0x28>)
 8003eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <SystemInit+0x28>)
 8003ec2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ec6:	609a      	str	r2, [r3, #8]
#endif
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003edc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003ede:	e003      	b.n	8003ee8 <LoopCopyDataInit>

08003ee0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ee2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ee4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ee6:	3104      	adds	r1, #4

08003ee8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ee8:	480b      	ldr	r0, [pc, #44]	; (8003f18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003eec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003eee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ef0:	d3f6      	bcc.n	8003ee0 <CopyDataInit>
  ldr  r2, =_sbss
 8003ef2:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ef4:	e002      	b.n	8003efc <LoopFillZerobss>

08003ef6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ef6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ef8:	f842 3b04 	str.w	r3, [r2], #4

08003efc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003efe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f00:	d3f9      	bcc.n	8003ef6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f02:	f7ff ffd3 	bl	8003eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f06:	f006 fa75 	bl	800a3f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f0a:	f7ff fc19 	bl	8003740 <main>
  bx  lr    
 8003f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f10:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003f14:	0800b96c 	.word	0x0800b96c
  ldr  r0, =_sdata
 8003f18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f1c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8003f20:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003f24:	200014d0 	.word	0x200014d0

08003f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f28:	e7fe      	b.n	8003f28 <ADC_IRQHandler>

08003f2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f2e:	2003      	movs	r0, #3
 8003f30:	f000 ffa7 	bl	8004e82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f34:	2000      	movs	r0, #0
 8003f36:	f7ff fe65 	bl	8003c04 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003f3a:	f7ff fdc7 	bl	8003acc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_IncTick+0x20>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_IncTick+0x24>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4413      	add	r3, r2
 8003f54:	4a04      	ldr	r2, [pc, #16]	; (8003f68 <HAL_IncTick+0x24>)
 8003f56:	6013      	str	r3, [r2, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	2000000c 	.word	0x2000000c
 8003f68:	2000147c 	.word	0x2000147c

08003f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f70:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <HAL_GetTick+0x14>)
 8003f72:	681b      	ldr	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	2000147c 	.word	0x2000147c

08003f84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0ed      	b.n	8004172 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fdba 	bl	8003b1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0202 	bic.w	r2, r2, #2
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb8:	f7ff ffd8 	bl	8003f6c <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fbe:	e012      	b.n	8003fe6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fc0:	f7ff ffd4 	bl	8003f6c <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b0a      	cmp	r3, #10
 8003fcc:	d90b      	bls.n	8003fe6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2205      	movs	r2, #5
 8003fde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0c5      	b.n	8004172 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e5      	bne.n	8003fc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004004:	f7ff ffb2 	bl	8003f6c <HAL_GetTick>
 8004008:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800400a:	e012      	b.n	8004032 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800400c:	f7ff ffae 	bl	8003f6c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b0a      	cmp	r3, #10
 8004018:	d90b      	bls.n	8004032 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2205      	movs	r2, #5
 800402a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e09f      	b.n	8004172 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0e5      	beq.n	800400c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	7e1b      	ldrb	r3, [r3, #24]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d108      	bne.n	800405a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e007      	b.n	800406a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004068:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7e5b      	ldrb	r3, [r3, #25]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d108      	bne.n	8004084 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e007      	b.n	8004094 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004092:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	7e9b      	ldrb	r3, [r3, #26]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d108      	bne.n	80040ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0220 	orr.w	r2, r2, #32
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e007      	b.n	80040be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0220 	bic.w	r2, r2, #32
 80040bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	7edb      	ldrb	r3, [r3, #27]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d108      	bne.n	80040d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0210 	bic.w	r2, r2, #16
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e007      	b.n	80040e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0210 	orr.w	r2, r2, #16
 80040e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7f1b      	ldrb	r3, [r3, #28]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d108      	bne.n	8004102 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0208 	orr.w	r2, r2, #8
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	e007      	b.n	8004112 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0208 	bic.w	r2, r2, #8
 8004110:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	7f5b      	ldrb	r3, [r3, #29]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d108      	bne.n	800412c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0204 	orr.w	r2, r2, #4
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e007      	b.n	800413c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0204 	bic.w	r2, r2, #4
 800413a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	ea42 0103 	orr.w	r1, r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	1e5a      	subs	r2, r3, #1
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004192:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004194:	7cfb      	ldrb	r3, [r7, #19]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d003      	beq.n	80041a2 <HAL_CAN_ConfigFilter+0x26>
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b02      	cmp	r3, #2
 800419e:	f040 80c7 	bne.w	8004330 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a69      	ldr	r2, [pc, #420]	; (800434c <HAL_CAN_ConfigFilter+0x1d0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d001      	beq.n	80041b0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80041ac:	4b68      	ldr	r3, [pc, #416]	; (8004350 <HAL_CAN_ConfigFilter+0x1d4>)
 80041ae:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	4a63      	ldr	r2, [pc, #396]	; (8004350 <HAL_CAN_ConfigFilter+0x1d4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d111      	bne.n	80041ec <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041ce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	021b      	lsls	r3, r3, #8
 80041e4:	431a      	orrs	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f003 031f 	and.w	r3, r3, #31
 80041f4:	2201      	movs	r2, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	43db      	mvns	r3, r3
 8004206:	401a      	ands	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d123      	bne.n	800425e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	43db      	mvns	r3, r3
 8004220:	401a      	ands	r2, r3
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004238:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	3248      	adds	r2, #72	; 0x48
 800423e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004252:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004254:	6979      	ldr	r1, [r7, #20]
 8004256:	3348      	adds	r3, #72	; 0x48
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d122      	bne.n	80042ac <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	431a      	orrs	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004286:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	3248      	adds	r2, #72	; 0x48
 800428c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80042a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80042a2:	6979      	ldr	r1, [r7, #20]
 80042a4:	3348      	adds	r3, #72	; 0x48
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	440b      	add	r3, r1
 80042aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	43db      	mvns	r3, r3
 80042be:	401a      	ands	r2, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80042c6:	e007      	b.n	80042d8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	401a      	ands	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80042f2:	e007      	b.n	8004304 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d107      	bne.n	800431c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	431a      	orrs	r2, r3
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004322:	f023 0201 	bic.w	r2, r3, #1
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e006      	b.n	800433e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
  }
}
 800433e:	4618      	mov	r0, r3
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40003400 	.word	0x40003400
 8004350:	40006400 	.word	0x40006400

08004354 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d12e      	bne.n	80043c6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004380:	f7ff fdf4 	bl	8003f6c <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004386:	e012      	b.n	80043ae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004388:	f7ff fdf0 	bl	8003f6c <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b0a      	cmp	r3, #10
 8004394:	d90b      	bls.n	80043ae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2205      	movs	r2, #5
 80043a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e012      	b.n	80043d4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e006      	b.n	80043d4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80043dc:	b480      	push	{r7}
 80043de:	b089      	sub	sp, #36	; 0x24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80043fa:	7ffb      	ldrb	r3, [r7, #31]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d003      	beq.n	8004408 <HAL_CAN_AddTxMessage+0x2c>
 8004400:	7ffb      	ldrb	r3, [r7, #31]
 8004402:	2b02      	cmp	r3, #2
 8004404:	f040 80b8 	bne.w	8004578 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004418:	2b00      	cmp	r3, #0
 800441a:	d105      	bne.n	8004428 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80a0 	beq.w	8004568 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	0e1b      	lsrs	r3, r3, #24
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d907      	bls.n	8004448 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e09e      	b.n	8004586 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004448:	2201      	movs	r2, #1
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	409a      	lsls	r2, r3
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10d      	bne.n	8004476 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	6809      	ldr	r1, [r1, #0]
 8004468:	431a      	orrs	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	3318      	adds	r3, #24
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	440b      	add	r3, r1
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	e00f      	b.n	8004496 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004480:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800448a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	3318      	adds	r3, #24
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	440b      	add	r3, r1
 8004494:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	3318      	adds	r3, #24
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	440b      	add	r3, r1
 80044a6:	3304      	adds	r3, #4
 80044a8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	7d1b      	ldrb	r3, [r3, #20]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d111      	bne.n	80044d6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	3318      	adds	r3, #24
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	4413      	add	r3, r2
 80044be:	3304      	adds	r3, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	6811      	ldr	r1, [r2, #0]
 80044c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	3318      	adds	r3, #24
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	440b      	add	r3, r1
 80044d2:	3304      	adds	r3, #4
 80044d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3307      	adds	r3, #7
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	061a      	lsls	r2, r3, #24
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3306      	adds	r3, #6
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	041b      	lsls	r3, r3, #16
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3305      	adds	r3, #5
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	4313      	orrs	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	3204      	adds	r2, #4
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	4610      	mov	r0, r2
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	6811      	ldr	r1, [r2, #0]
 80044fe:	ea43 0200 	orr.w	r2, r3, r0
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	440b      	add	r3, r1
 8004508:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800450c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3303      	adds	r3, #3
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	061a      	lsls	r2, r3, #24
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3302      	adds	r3, #2
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3301      	adds	r3, #1
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	4313      	orrs	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	7812      	ldrb	r2, [r2, #0]
 800452e:	4610      	mov	r0, r2
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	6811      	ldr	r1, [r2, #0]
 8004534:	ea43 0200 	orr.w	r2, r3, r0
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	440b      	add	r3, r1
 800453e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004542:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3318      	adds	r3, #24
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	4413      	add	r3, r2
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	6811      	ldr	r1, [r2, #0]
 8004556:	f043 0201 	orr.w	r2, r3, #1
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	3318      	adds	r3, #24
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	440b      	add	r3, r1
 8004562:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	e00e      	b.n	8004586 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e006      	b.n	8004586 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	3724      	adds	r7, #36	; 0x24
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045a4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80045a6:	7afb      	ldrb	r3, [r7, #11]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d002      	beq.n	80045b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80045ac:	7afb      	ldrb	r3, [r7, #11]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d11d      	bne.n	80045ee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3301      	adds	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004610:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004612:	7afb      	ldrb	r3, [r7, #11]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d002      	beq.n	800461e <HAL_CAN_IsTxMessagePending+0x22>
 8004618:	7afb      	ldrb	r3, [r7, #11]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d10b      	bne.n	8004636 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	069b      	lsls	r3, r3, #26
 8004628:	401a      	ands	r2, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	069b      	lsls	r3, r3, #26
 800462e:	429a      	cmp	r2, r3
 8004630:	d001      	beq.n	8004636 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8004632:	2301      	movs	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8004636:	68fb      	ldr	r3, [r7, #12]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004658:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d003      	beq.n	8004668 <HAL_CAN_GetRxMessage+0x24>
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	2b02      	cmp	r3, #2
 8004664:	f040 80f3 	bne.w	800484e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10e      	bne.n	800468c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d116      	bne.n	80046aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0e7      	b.n	800485c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d107      	bne.n	80046aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0d8      	b.n	800485c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	331b      	adds	r3, #27
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	4413      	add	r3, r2
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0204 	and.w	r2, r3, #4
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10c      	bne.n	80046e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	331b      	adds	r3, #27
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	4413      	add	r3, r2
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	0d5b      	lsrs	r3, r3, #21
 80046d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	e00b      	b.n	80046fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	331b      	adds	r3, #27
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	4413      	add	r3, r2
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	331b      	adds	r3, #27
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	4413      	add	r3, r2
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0202 	and.w	r2, r3, #2
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	331b      	adds	r3, #27
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	4413      	add	r3, r2
 800471c:	3304      	adds	r3, #4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 020f 	and.w	r2, r3, #15
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	331b      	adds	r3, #27
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	4413      	add	r3, r2
 8004734:	3304      	adds	r3, #4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	0a1b      	lsrs	r3, r3, #8
 800473a:	b2da      	uxtb	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	331b      	adds	r3, #27
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	4413      	add	r3, r2
 800474c:	3304      	adds	r3, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	b29a      	uxth	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	4413      	add	r3, r2
 8004762:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	b2da      	uxtb	r2, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	4413      	add	r3, r2
 8004778:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	0a1a      	lsrs	r2, r3, #8
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	3301      	adds	r3, #1
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	4413      	add	r3, r2
 8004792:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	0c1a      	lsrs	r2, r3, #16
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	3302      	adds	r3, #2
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	0e1a      	lsrs	r2, r3, #24
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	3303      	adds	r3, #3
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	3304      	adds	r3, #4
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	4413      	add	r3, r2
 80047de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	0a1a      	lsrs	r2, r3, #8
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	3305      	adds	r3, #5
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	0c1a      	lsrs	r2, r3, #16
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	3306      	adds	r3, #6
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	4413      	add	r3, r2
 8004812:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0e1a      	lsrs	r2, r3, #24
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	3307      	adds	r3, #7
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d108      	bne.n	800483a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0220 	orr.w	r2, r2, #32
 8004836:	60da      	str	r2, [r3, #12]
 8004838:	e007      	b.n	800484a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0220 	orr.w	r2, r2, #32
 8004848:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e006      	b.n	800485c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004878:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d002      	beq.n	8004886 <HAL_CAN_ActivateNotification+0x1e>
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d109      	bne.n	800489a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6959      	ldr	r1, [r3, #20]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e006      	b.n	80048a8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
  }
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	; 0x28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80048bc:	2300      	movs	r3, #0
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d07c      	beq.n	80049f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d023      	beq.n	800494c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2201      	movs	r2, #1
 800490a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f983 	bl	8004c22 <HAL_CAN_TxMailbox0CompleteCallback>
 800491c:	e016      	b.n	800494c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d004      	beq.n	8004932 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
 8004930:	e00c      	b.n	800494c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d004      	beq.n	8004946 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
 8004944:	e002      	b.n	800494c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f989 	bl	8004c5e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d024      	beq.n	80049a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800495e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f963 	bl	8004c36 <HAL_CAN_TxMailbox1CompleteCallback>
 8004970:	e016      	b.n	80049a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
 8004984:	e00c      	b.n	80049a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498c:	2b00      	cmp	r3, #0
 800498e:	d004      	beq.n	800499a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
 8004998:	e002      	b.n	80049a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f969 	bl	8004c72 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d024      	beq.n	80049f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f943 	bl	8004c4a <HAL_CAN_TxMailbox2CompleteCallback>
 80049c4:	e016      	b.n	80049f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
 80049d8:	e00c      	b.n	80049f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
 80049ec:	e002      	b.n	80049f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f949 	bl	8004c86 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2210      	movs	r2, #16
 8004a16:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00b      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d006      	beq.n	8004a3a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2208      	movs	r2, #8
 8004a32:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f93a 	bl	8004cae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f921 	bl	8004c9a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00c      	beq.n	8004a7c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2210      	movs	r2, #16
 8004a7a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d006      	beq.n	8004a9e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2208      	movs	r2, #8
 8004a96:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f91c 	bl	8004cd6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d009      	beq.n	8004abc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f903 	bl	8004cc2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00b      	beq.n	8004ade <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d006      	beq.n	8004ade <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2210      	movs	r2, #16
 8004ad6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f906 	bl	8004cea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00b      	beq.n	8004b00 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d006      	beq.n	8004b00 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2208      	movs	r2, #8
 8004af8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f8ff 	bl	8004cfe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d07b      	beq.n	8004c02 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d072      	beq.n	8004bfa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	f043 0302 	orr.w	r3, r3, #2
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	f043 0304 	orr.w	r3, r3, #4
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d043      	beq.n	8004bfa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d03e      	beq.n	8004bfa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b82:	2b60      	cmp	r3, #96	; 0x60
 8004b84:	d02b      	beq.n	8004bde <HAL_CAN_IRQHandler+0x32a>
 8004b86:	2b60      	cmp	r3, #96	; 0x60
 8004b88:	d82e      	bhi.n	8004be8 <HAL_CAN_IRQHandler+0x334>
 8004b8a:	2b50      	cmp	r3, #80	; 0x50
 8004b8c:	d022      	beq.n	8004bd4 <HAL_CAN_IRQHandler+0x320>
 8004b8e:	2b50      	cmp	r3, #80	; 0x50
 8004b90:	d82a      	bhi.n	8004be8 <HAL_CAN_IRQHandler+0x334>
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d019      	beq.n	8004bca <HAL_CAN_IRQHandler+0x316>
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d826      	bhi.n	8004be8 <HAL_CAN_IRQHandler+0x334>
 8004b9a:	2b30      	cmp	r3, #48	; 0x30
 8004b9c:	d010      	beq.n	8004bc0 <HAL_CAN_IRQHandler+0x30c>
 8004b9e:	2b30      	cmp	r3, #48	; 0x30
 8004ba0:	d822      	bhi.n	8004be8 <HAL_CAN_IRQHandler+0x334>
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d002      	beq.n	8004bac <HAL_CAN_IRQHandler+0x2f8>
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d005      	beq.n	8004bb6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004baa:	e01d      	b.n	8004be8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	f043 0308 	orr.w	r3, r3, #8
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bb4:	e019      	b.n	8004bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	f043 0310 	orr.w	r3, r3, #16
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bbe:	e014      	b.n	8004bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	f043 0320 	orr.w	r3, r3, #32
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bc8:	e00f      	b.n	8004bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bd2:	e00a      	b.n	8004bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004bdc:	e005      	b.n	8004bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004be6:	e000      	b.n	8004bea <HAL_CAN_IRQHandler+0x336>
            break;
 8004be8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699a      	ldr	r2, [r3, #24]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004bf8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f87c 	bl	8004d12 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	3728      	adds	r7, #40	; 0x28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <__NVIC_SetPriorityGrouping+0x40>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d44:	4013      	ands	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d50:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <__NVIC_SetPriorityGrouping+0x44>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d56:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <__NVIC_SetPriorityGrouping+0x40>)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	60d3      	str	r3, [r2, #12]
}
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	e000ed00 	.word	0xe000ed00
 8004d6c:	05fa0000 	.word	0x05fa0000

08004d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <__NVIC_GetPriorityGrouping+0x18>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	0a1b      	lsrs	r3, r3, #8
 8004d7a:	f003 0307 	and.w	r3, r3, #7
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	db0b      	blt.n	8004db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	f003 021f 	and.w	r2, r3, #31
 8004da4:	4907      	ldr	r1, [pc, #28]	; (8004dc4 <__NVIC_EnableIRQ+0x38>)
 8004da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	2001      	movs	r0, #1
 8004dae:	fa00 f202 	lsl.w	r2, r0, r2
 8004db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	e000e100 	.word	0xe000e100

08004dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	6039      	str	r1, [r7, #0]
 8004dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	db0a      	blt.n	8004df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	490c      	ldr	r1, [pc, #48]	; (8004e14 <__NVIC_SetPriority+0x4c>)
 8004de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de6:	0112      	lsls	r2, r2, #4
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	440b      	add	r3, r1
 8004dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004df0:	e00a      	b.n	8004e08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	4908      	ldr	r1, [pc, #32]	; (8004e18 <__NVIC_SetPriority+0x50>)
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	3b04      	subs	r3, #4
 8004e00:	0112      	lsls	r2, r2, #4
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	440b      	add	r3, r1
 8004e06:	761a      	strb	r2, [r3, #24]
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	e000e100 	.word	0xe000e100
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b089      	sub	sp, #36	; 0x24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f1c3 0307 	rsb	r3, r3, #7
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	bf28      	it	cs
 8004e3a:	2304      	movcs	r3, #4
 8004e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d902      	bls.n	8004e4c <NVIC_EncodePriority+0x30>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3b03      	subs	r3, #3
 8004e4a:	e000      	b.n	8004e4e <NVIC_EncodePriority+0x32>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e50:	f04f 32ff 	mov.w	r2, #4294967295
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43da      	mvns	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	401a      	ands	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e64:	f04f 31ff 	mov.w	r1, #4294967295
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	43d9      	mvns	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e74:	4313      	orrs	r3, r2
         );
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3724      	adds	r7, #36	; 0x24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ff4c 	bl	8004d28 <__NVIC_SetPriorityGrouping>
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
 8004ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004eaa:	f7ff ff61 	bl	8004d70 <__NVIC_GetPriorityGrouping>
 8004eae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	6978      	ldr	r0, [r7, #20]
 8004eb6:	f7ff ffb1 	bl	8004e1c <NVIC_EncodePriority>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff ff80 	bl	8004dc8 <__NVIC_SetPriority>
}
 8004ec8:	bf00      	nop
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff ff54 	bl	8004d8c <__NVIC_EnableIRQ>
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b089      	sub	sp, #36	; 0x24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
 8004f0a:	e175      	b.n	80051f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	f040 8164 	bne.w	80051f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d00b      	beq.n	8004f4a <HAL_GPIO_Init+0x5e>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d007      	beq.n	8004f4a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f3e:	2b11      	cmp	r3, #17
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b12      	cmp	r3, #18
 8004f48:	d130      	bne.n	8004fac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	2203      	movs	r2, #3
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f80:	2201      	movs	r2, #1
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	091b      	lsrs	r3, r3, #4
 8004f96:	f003 0201 	and.w	r2, r3, #1
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d003      	beq.n	8004fec <HAL_GPIO_Init+0x100>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b12      	cmp	r3, #18
 8004fea:	d123      	bne.n	8005034 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	08da      	lsrs	r2, r3, #3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3208      	adds	r2, #8
 8004ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	220f      	movs	r2, #15
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4313      	orrs	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	08da      	lsrs	r2, r3, #3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3208      	adds	r2, #8
 800502e:	69b9      	ldr	r1, [r7, #24]
 8005030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	2203      	movs	r2, #3
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4013      	ands	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f003 0203 	and.w	r2, r3, #3
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4313      	orrs	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80be 	beq.w	80051f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005076:	4b66      	ldr	r3, [pc, #408]	; (8005210 <HAL_GPIO_Init+0x324>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	4a65      	ldr	r2, [pc, #404]	; (8005210 <HAL_GPIO_Init+0x324>)
 800507c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005080:	6453      	str	r3, [r2, #68]	; 0x44
 8005082:	4b63      	ldr	r3, [pc, #396]	; (8005210 <HAL_GPIO_Init+0x324>)
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800508e:	4a61      	ldr	r2, [pc, #388]	; (8005214 <HAL_GPIO_Init+0x328>)
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	3302      	adds	r3, #2
 8005096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	220f      	movs	r2, #15
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43db      	mvns	r3, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4013      	ands	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a58      	ldr	r2, [pc, #352]	; (8005218 <HAL_GPIO_Init+0x32c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d037      	beq.n	800512a <HAL_GPIO_Init+0x23e>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a57      	ldr	r2, [pc, #348]	; (800521c <HAL_GPIO_Init+0x330>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d031      	beq.n	8005126 <HAL_GPIO_Init+0x23a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a56      	ldr	r2, [pc, #344]	; (8005220 <HAL_GPIO_Init+0x334>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d02b      	beq.n	8005122 <HAL_GPIO_Init+0x236>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a55      	ldr	r2, [pc, #340]	; (8005224 <HAL_GPIO_Init+0x338>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d025      	beq.n	800511e <HAL_GPIO_Init+0x232>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a54      	ldr	r2, [pc, #336]	; (8005228 <HAL_GPIO_Init+0x33c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d01f      	beq.n	800511a <HAL_GPIO_Init+0x22e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a53      	ldr	r2, [pc, #332]	; (800522c <HAL_GPIO_Init+0x340>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d019      	beq.n	8005116 <HAL_GPIO_Init+0x22a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a52      	ldr	r2, [pc, #328]	; (8005230 <HAL_GPIO_Init+0x344>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_GPIO_Init+0x226>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a51      	ldr	r2, [pc, #324]	; (8005234 <HAL_GPIO_Init+0x348>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00d      	beq.n	800510e <HAL_GPIO_Init+0x222>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a50      	ldr	r2, [pc, #320]	; (8005238 <HAL_GPIO_Init+0x34c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <HAL_GPIO_Init+0x21e>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a4f      	ldr	r2, [pc, #316]	; (800523c <HAL_GPIO_Init+0x350>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d101      	bne.n	8005106 <HAL_GPIO_Init+0x21a>
 8005102:	2309      	movs	r3, #9
 8005104:	e012      	b.n	800512c <HAL_GPIO_Init+0x240>
 8005106:	230a      	movs	r3, #10
 8005108:	e010      	b.n	800512c <HAL_GPIO_Init+0x240>
 800510a:	2308      	movs	r3, #8
 800510c:	e00e      	b.n	800512c <HAL_GPIO_Init+0x240>
 800510e:	2307      	movs	r3, #7
 8005110:	e00c      	b.n	800512c <HAL_GPIO_Init+0x240>
 8005112:	2306      	movs	r3, #6
 8005114:	e00a      	b.n	800512c <HAL_GPIO_Init+0x240>
 8005116:	2305      	movs	r3, #5
 8005118:	e008      	b.n	800512c <HAL_GPIO_Init+0x240>
 800511a:	2304      	movs	r3, #4
 800511c:	e006      	b.n	800512c <HAL_GPIO_Init+0x240>
 800511e:	2303      	movs	r3, #3
 8005120:	e004      	b.n	800512c <HAL_GPIO_Init+0x240>
 8005122:	2302      	movs	r3, #2
 8005124:	e002      	b.n	800512c <HAL_GPIO_Init+0x240>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <HAL_GPIO_Init+0x240>
 800512a:	2300      	movs	r3, #0
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	f002 0203 	and.w	r2, r2, #3
 8005132:	0092      	lsls	r2, r2, #2
 8005134:	4093      	lsls	r3, r2
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4313      	orrs	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800513c:	4935      	ldr	r1, [pc, #212]	; (8005214 <HAL_GPIO_Init+0x328>)
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	3302      	adds	r3, #2
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800514a:	4b3d      	ldr	r3, [pc, #244]	; (8005240 <HAL_GPIO_Init+0x354>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800516e:	4a34      	ldr	r2, [pc, #208]	; (8005240 <HAL_GPIO_Init+0x354>)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005174:	4b32      	ldr	r3, [pc, #200]	; (8005240 <HAL_GPIO_Init+0x354>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005198:	4a29      	ldr	r2, [pc, #164]	; (8005240 <HAL_GPIO_Init+0x354>)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800519e:	4b28      	ldr	r3, [pc, #160]	; (8005240 <HAL_GPIO_Init+0x354>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	43db      	mvns	r3, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051c2:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <HAL_GPIO_Init+0x354>)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <HAL_GPIO_Init+0x354>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051ec:	4a14      	ldr	r2, [pc, #80]	; (8005240 <HAL_GPIO_Init+0x354>)
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3301      	adds	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	2b0f      	cmp	r3, #15
 80051fc:	f67f ae86 	bls.w	8004f0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	3724      	adds	r7, #36	; 0x24
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40023800 	.word	0x40023800
 8005214:	40013800 	.word	0x40013800
 8005218:	40020000 	.word	0x40020000
 800521c:	40020400 	.word	0x40020400
 8005220:	40020800 	.word	0x40020800
 8005224:	40020c00 	.word	0x40020c00
 8005228:	40021000 	.word	0x40021000
 800522c:	40021400 	.word	0x40021400
 8005230:	40021800 	.word	0x40021800
 8005234:	40021c00 	.word	0x40021c00
 8005238:	40022000 	.word	0x40022000
 800523c:	40022400 	.word	0x40022400
 8005240:	40013c00 	.word	0x40013c00

08005244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	887b      	ldrh	r3, [r7, #2]
 8005256:	4013      	ands	r3, r2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800525c:	2301      	movs	r3, #1
 800525e:	73fb      	strb	r3, [r7, #15]
 8005260:	e001      	b.n	8005266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
 8005280:	4613      	mov	r3, r2
 8005282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005284:	787b      	ldrb	r3, [r7, #1]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800528a:	887a      	ldrh	r2, [r7, #2]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005290:	e003      	b.n	800529a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005292:	887b      	ldrh	r3, [r7, #2]
 8005294:	041a      	lsls	r2, r3, #16
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	619a      	str	r2, [r3, #24]
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b085      	sub	sp, #20
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052b8:	887a      	ldrh	r2, [r7, #2]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4013      	ands	r3, r2
 80052be:	041a      	lsls	r2, r3, #16
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	43d9      	mvns	r1, r3
 80052c4:	887b      	ldrh	r3, [r7, #2]
 80052c6:	400b      	ands	r3, r1
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	619a      	str	r2, [r3, #24]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a04      	ldr	r2, [pc, #16]	; (80052f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80052e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ea:	6013      	str	r3, [r2, #0]
}
 80052ec:	bf00      	nop
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40007000 	.word	0x40007000

080052fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005304:	2300      	movs	r3, #0
 8005306:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e29b      	b.n	800584a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8087 	beq.w	800542e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005320:	4b96      	ldr	r3, [pc, #600]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 030c 	and.w	r3, r3, #12
 8005328:	2b04      	cmp	r3, #4
 800532a:	d00c      	beq.n	8005346 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800532c:	4b93      	ldr	r3, [pc, #588]	; (800557c <HAL_RCC_OscConfig+0x280>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 030c 	and.w	r3, r3, #12
 8005334:	2b08      	cmp	r3, #8
 8005336:	d112      	bne.n	800535e <HAL_RCC_OscConfig+0x62>
 8005338:	4b90      	ldr	r3, [pc, #576]	; (800557c <HAL_RCC_OscConfig+0x280>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005344:	d10b      	bne.n	800535e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005346:	4b8d      	ldr	r3, [pc, #564]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d06c      	beq.n	800542c <HAL_RCC_OscConfig+0x130>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d168      	bne.n	800542c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e275      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005366:	d106      	bne.n	8005376 <HAL_RCC_OscConfig+0x7a>
 8005368:	4b84      	ldr	r3, [pc, #528]	; (800557c <HAL_RCC_OscConfig+0x280>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a83      	ldr	r2, [pc, #524]	; (800557c <HAL_RCC_OscConfig+0x280>)
 800536e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e02e      	b.n	80053d4 <HAL_RCC_OscConfig+0xd8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10c      	bne.n	8005398 <HAL_RCC_OscConfig+0x9c>
 800537e:	4b7f      	ldr	r3, [pc, #508]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a7e      	ldr	r2, [pc, #504]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4b7c      	ldr	r3, [pc, #496]	; (800557c <HAL_RCC_OscConfig+0x280>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a7b      	ldr	r2, [pc, #492]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e01d      	b.n	80053d4 <HAL_RCC_OscConfig+0xd8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053a0:	d10c      	bne.n	80053bc <HAL_RCC_OscConfig+0xc0>
 80053a2:	4b76      	ldr	r3, [pc, #472]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a75      	ldr	r2, [pc, #468]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80053a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b73      	ldr	r3, [pc, #460]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a72      	ldr	r2, [pc, #456]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80053b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e00b      	b.n	80053d4 <HAL_RCC_OscConfig+0xd8>
 80053bc:	4b6f      	ldr	r3, [pc, #444]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a6e      	ldr	r2, [pc, #440]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80053c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	4b6c      	ldr	r3, [pc, #432]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a6b      	ldr	r2, [pc, #428]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80053ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d013      	beq.n	8005404 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7fe fdc6 	bl	8003f6c <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e4:	f7fe fdc2 	bl	8003f6c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	; 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e229      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f6:	4b61      	ldr	r3, [pc, #388]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0xe8>
 8005402:	e014      	b.n	800542e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fe fdb2 	bl	8003f6c <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800540c:	f7fe fdae 	bl	8003f6c <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	; 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e215      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541e:	4b57      	ldr	r3, [pc, #348]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0x110>
 800542a:	e000      	b.n	800542e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800542c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d069      	beq.n	800550e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800543a:	4b50      	ldr	r3, [pc, #320]	; (800557c <HAL_RCC_OscConfig+0x280>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 030c 	and.w	r3, r3, #12
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005446:	4b4d      	ldr	r3, [pc, #308]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 030c 	and.w	r3, r3, #12
 800544e:	2b08      	cmp	r3, #8
 8005450:	d11c      	bne.n	800548c <HAL_RCC_OscConfig+0x190>
 8005452:	4b4a      	ldr	r3, [pc, #296]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d116      	bne.n	800548c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545e:	4b47      	ldr	r3, [pc, #284]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <HAL_RCC_OscConfig+0x17a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d001      	beq.n	8005476 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e1e9      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005476:	4b41      	ldr	r3, [pc, #260]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	493d      	ldr	r1, [pc, #244]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548a:	e040      	b.n	800550e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d023      	beq.n	80054dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005494:	4b39      	ldr	r3, [pc, #228]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a38      	ldr	r2, [pc, #224]	; (800557c <HAL_RCC_OscConfig+0x280>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fe fd64 	bl	8003f6c <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a8:	f7fe fd60 	bl	8003f6c <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e1c7      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ba:	4b30      	ldr	r3, [pc, #192]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c6:	4b2d      	ldr	r3, [pc, #180]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	4929      	ldr	r1, [pc, #164]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]
 80054da:	e018      	b.n	800550e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054dc:	4b27      	ldr	r3, [pc, #156]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a26      	ldr	r2, [pc, #152]	; (800557c <HAL_RCC_OscConfig+0x280>)
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fe fd40 	bl	8003f6c <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f0:	f7fe fd3c 	bl	8003f6c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e1a3      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005502:	4b1e      	ldr	r3, [pc, #120]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d038      	beq.n	800558c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d019      	beq.n	8005556 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005522:	4b16      	ldr	r3, [pc, #88]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005526:	4a15      	ldr	r2, [pc, #84]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552e:	f7fe fd1d 	bl	8003f6c <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005536:	f7fe fd19 	bl	8003f6c <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e180      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <HAL_RCC_OscConfig+0x280>)
 800554a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x23a>
 8005554:	e01a      	b.n	800558c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005556:	4b09      	ldr	r3, [pc, #36]	; (800557c <HAL_RCC_OscConfig+0x280>)
 8005558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555a:	4a08      	ldr	r2, [pc, #32]	; (800557c <HAL_RCC_OscConfig+0x280>)
 800555c:	f023 0301 	bic.w	r3, r3, #1
 8005560:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005562:	f7fe fd03 	bl	8003f6c <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005568:	e00a      	b.n	8005580 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800556a:	f7fe fcff 	bl	8003f6c <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d903      	bls.n	8005580 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e166      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
 800557c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005580:	4b92      	ldr	r3, [pc, #584]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1ee      	bne.n	800556a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80a4 	beq.w	80056e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800559a:	4b8c      	ldr	r3, [pc, #560]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10d      	bne.n	80055c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a6:	4b89      	ldr	r3, [pc, #548]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	4a88      	ldr	r2, [pc, #544]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 80055ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b0:	6413      	str	r3, [r2, #64]	; 0x40
 80055b2:	4b86      	ldr	r3, [pc, #536]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ba:	60bb      	str	r3, [r7, #8]
 80055bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055c2:	4b83      	ldr	r3, [pc, #524]	; (80057d0 <HAL_RCC_OscConfig+0x4d4>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d118      	bne.n	8005600 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80055ce:	4b80      	ldr	r3, [pc, #512]	; (80057d0 <HAL_RCC_OscConfig+0x4d4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a7f      	ldr	r2, [pc, #508]	; (80057d0 <HAL_RCC_OscConfig+0x4d4>)
 80055d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055da:	f7fe fcc7 	bl	8003f6c <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e2:	f7fe fcc3 	bl	8003f6c <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b64      	cmp	r3, #100	; 0x64
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e12a      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055f4:	4b76      	ldr	r3, [pc, #472]	; (80057d0 <HAL_RCC_OscConfig+0x4d4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0f0      	beq.n	80055e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d106      	bne.n	8005616 <HAL_RCC_OscConfig+0x31a>
 8005608:	4b70      	ldr	r3, [pc, #448]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800560a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560c:	4a6f      	ldr	r2, [pc, #444]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800560e:	f043 0301 	orr.w	r3, r3, #1
 8005612:	6713      	str	r3, [r2, #112]	; 0x70
 8005614:	e02d      	b.n	8005672 <HAL_RCC_OscConfig+0x376>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10c      	bne.n	8005638 <HAL_RCC_OscConfig+0x33c>
 800561e:	4b6b      	ldr	r3, [pc, #428]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005622:	4a6a      	ldr	r2, [pc, #424]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	6713      	str	r3, [r2, #112]	; 0x70
 800562a:	4b68      	ldr	r3, [pc, #416]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	4a67      	ldr	r2, [pc, #412]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005630:	f023 0304 	bic.w	r3, r3, #4
 8005634:	6713      	str	r3, [r2, #112]	; 0x70
 8005636:	e01c      	b.n	8005672 <HAL_RCC_OscConfig+0x376>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2b05      	cmp	r3, #5
 800563e:	d10c      	bne.n	800565a <HAL_RCC_OscConfig+0x35e>
 8005640:	4b62      	ldr	r3, [pc, #392]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005644:	4a61      	ldr	r2, [pc, #388]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005646:	f043 0304 	orr.w	r3, r3, #4
 800564a:	6713      	str	r3, [r2, #112]	; 0x70
 800564c:	4b5f      	ldr	r3, [pc, #380]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800564e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005650:	4a5e      	ldr	r2, [pc, #376]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6713      	str	r3, [r2, #112]	; 0x70
 8005658:	e00b      	b.n	8005672 <HAL_RCC_OscConfig+0x376>
 800565a:	4b5c      	ldr	r3, [pc, #368]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565e:	4a5b      	ldr	r2, [pc, #364]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005660:	f023 0301 	bic.w	r3, r3, #1
 8005664:	6713      	str	r3, [r2, #112]	; 0x70
 8005666:	4b59      	ldr	r3, [pc, #356]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	4a58      	ldr	r2, [pc, #352]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800566c:	f023 0304 	bic.w	r3, r3, #4
 8005670:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d015      	beq.n	80056a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567a:	f7fe fc77 	bl	8003f6c <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005680:	e00a      	b.n	8005698 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fe fc73 	bl	8003f6c <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e0d8      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005698:	4b4c      	ldr	r3, [pc, #304]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0ee      	beq.n	8005682 <HAL_RCC_OscConfig+0x386>
 80056a4:	e014      	b.n	80056d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a6:	f7fe fc61 	bl	8003f6c <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ac:	e00a      	b.n	80056c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ae:	f7fe fc5d 	bl	8003f6c <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e0c2      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c4:	4b41      	ldr	r3, [pc, #260]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1ee      	bne.n	80056ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d105      	bne.n	80056e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d6:	4b3d      	ldr	r3, [pc, #244]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	4a3c      	ldr	r2, [pc, #240]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 80056dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 80ae 	beq.w	8005848 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056ec:	4b37      	ldr	r3, [pc, #220]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 030c 	and.w	r3, r3, #12
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d06d      	beq.n	80057d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d14b      	bne.n	8005798 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005700:	4b32      	ldr	r3, [pc, #200]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a31      	ldr	r2, [pc, #196]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800570a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570c:	f7fe fc2e 	bl	8003f6c <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005714:	f7fe fc2a 	bl	8003f6c <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e091      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005726:	4b29      	ldr	r3, [pc, #164]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69da      	ldr	r2, [r3, #28]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	019b      	lsls	r3, r3, #6
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	3b01      	subs	r3, #1
 800574c:	041b      	lsls	r3, r3, #16
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	071b      	lsls	r3, r3, #28
 800575e:	491b      	ldr	r1, [pc, #108]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005760:	4313      	orrs	r3, r2
 8005762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005764:	4b19      	ldr	r3, [pc, #100]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a18      	ldr	r2, [pc, #96]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800576a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800576e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fe fbfc 	bl	8003f6c <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005778:	f7fe fbf8 	bl	8003f6c <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e05f      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578a:	4b10      	ldr	r3, [pc, #64]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0x47c>
 8005796:	e057      	b.n	8005848 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a0b      	ldr	r2, [pc, #44]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 800579e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fe fbe2 	bl	8003f6c <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ac:	f7fe fbde 	bl	8003f6c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e045      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057be:	4b03      	ldr	r3, [pc, #12]	; (80057cc <HAL_RCC_OscConfig+0x4d0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x4b0>
 80057ca:	e03d      	b.n	8005848 <HAL_RCC_OscConfig+0x54c>
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80057d4:	4b1f      	ldr	r3, [pc, #124]	; (8005854 <HAL_RCC_OscConfig+0x558>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d030      	beq.n	8005844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d129      	bne.n	8005844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d122      	bne.n	8005844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005804:	4013      	ands	r3, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800580a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800580c:	4293      	cmp	r3, r2
 800580e:	d119      	bne.n	8005844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	085b      	lsrs	r3, r3, #1
 800581c:	3b01      	subs	r3, #1
 800581e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005820:	429a      	cmp	r2, r3
 8005822:	d10f      	bne.n	8005844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005830:	429a      	cmp	r2, r3
 8005832:	d107      	bne.n	8005844 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40023800 	.word	0x40023800

08005858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e0d0      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005870:	4b6a      	ldr	r3, [pc, #424]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d910      	bls.n	80058a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587e:	4b67      	ldr	r3, [pc, #412]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 020f 	bic.w	r2, r3, #15
 8005886:	4965      	ldr	r1, [pc, #404]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800588e:	4b63      	ldr	r3, [pc, #396]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0b8      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d020      	beq.n	80058ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b8:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	4a58      	ldr	r2, [pc, #352]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058d0:	4b53      	ldr	r3, [pc, #332]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4a52      	ldr	r2, [pc, #328]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058dc:	4b50      	ldr	r3, [pc, #320]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	494d      	ldr	r1, [pc, #308]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d040      	beq.n	800597c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005902:	4b47      	ldr	r3, [pc, #284]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d115      	bne.n	800593a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e07f      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d107      	bne.n	800592a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800591a:	4b41      	ldr	r3, [pc, #260]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e073      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800592a:	4b3d      	ldr	r3, [pc, #244]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e06b      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800593a:	4b39      	ldr	r3, [pc, #228]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f023 0203 	bic.w	r2, r3, #3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4936      	ldr	r1, [pc, #216]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 8005948:	4313      	orrs	r3, r2
 800594a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594c:	f7fe fb0e 	bl	8003f6c <HAL_GetTick>
 8005950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005952:	e00a      	b.n	800596a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005954:	f7fe fb0a 	bl	8003f6c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e053      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596a:	4b2d      	ldr	r3, [pc, #180]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 020c 	and.w	r2, r3, #12
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	429a      	cmp	r2, r3
 800597a:	d1eb      	bne.n	8005954 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800597c:	4b27      	ldr	r3, [pc, #156]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 030f 	and.w	r3, r3, #15
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d210      	bcs.n	80059ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598a:	4b24      	ldr	r3, [pc, #144]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 020f 	bic.w	r2, r3, #15
 8005992:	4922      	ldr	r1, [pc, #136]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	4313      	orrs	r3, r2
 8005998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <HAL_RCC_ClockConfig+0x1c4>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e032      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b8:	4b19      	ldr	r3, [pc, #100]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4916      	ldr	r1, [pc, #88]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059d6:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	490e      	ldr	r1, [pc, #56]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059ea:	f000 f821 	bl	8005a30 <HAL_RCC_GetSysClockFreq>
 80059ee:	4602      	mov	r2, r0
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <HAL_RCC_ClockConfig+0x1c8>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	091b      	lsrs	r3, r3, #4
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	490a      	ldr	r1, [pc, #40]	; (8005a24 <HAL_RCC_ClockConfig+0x1cc>)
 80059fc:	5ccb      	ldrb	r3, [r1, r3]
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <HAL_RCC_ClockConfig+0x1d0>)
 8005a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCC_ClockConfig+0x1d4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe f8fa 	bl	8003c04 <HAL_InitTick>

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40023c00 	.word	0x40023c00
 8005a20:	40023800 	.word	0x40023800
 8005a24:	0800b040 	.word	0x0800b040
 8005a28:	20000004 	.word	0x20000004
 8005a2c:	20000008 	.word	0x20000008

08005a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	2300      	movs	r3, #0
 8005a42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a48:	4b67      	ldr	r3, [pc, #412]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 030c 	and.w	r3, r3, #12
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d00d      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x40>
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	f200 80bd 	bhi.w	8005bd4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <HAL_RCC_GetSysClockFreq+0x34>
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d003      	beq.n	8005a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a62:	e0b7      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a64:	4b61      	ldr	r3, [pc, #388]	; (8005bec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a66:	60bb      	str	r3, [r7, #8]
      break;
 8005a68:	e0b7      	b.n	8005bda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a6a:	4b61      	ldr	r3, [pc, #388]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005a6c:	60bb      	str	r3, [r7, #8]
      break;
 8005a6e:	e0b4      	b.n	8005bda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a70:	4b5d      	ldr	r3, [pc, #372]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a78:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005a7a:	4b5b      	ldr	r3, [pc, #364]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d04d      	beq.n	8005b22 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a86:	4b58      	ldr	r3, [pc, #352]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	099b      	lsrs	r3, r3, #6
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a96:	f04f 0100 	mov.w	r1, #0
 8005a9a:	ea02 0800 	and.w	r8, r2, r0
 8005a9e:	ea03 0901 	and.w	r9, r3, r1
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	014b      	lsls	r3, r1, #5
 8005ab0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ab4:	0142      	lsls	r2, r0, #5
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4619      	mov	r1, r3
 8005aba:	ebb0 0008 	subs.w	r0, r0, r8
 8005abe:	eb61 0109 	sbc.w	r1, r1, r9
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	018b      	lsls	r3, r1, #6
 8005acc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ad0:	0182      	lsls	r2, r0, #6
 8005ad2:	1a12      	subs	r2, r2, r0
 8005ad4:	eb63 0301 	sbc.w	r3, r3, r1
 8005ad8:	f04f 0000 	mov.w	r0, #0
 8005adc:	f04f 0100 	mov.w	r1, #0
 8005ae0:	00d9      	lsls	r1, r3, #3
 8005ae2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ae6:	00d0      	lsls	r0, r2, #3
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	eb12 0208 	adds.w	r2, r2, r8
 8005af0:	eb43 0309 	adc.w	r3, r3, r9
 8005af4:	f04f 0000 	mov.w	r0, #0
 8005af8:	f04f 0100 	mov.w	r1, #0
 8005afc:	0259      	lsls	r1, r3, #9
 8005afe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b02:	0250      	lsls	r0, r2, #9
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	f7fa fb9e 	bl	8000254 <__aeabi_uldivmod>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e04a      	b.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b22:	4b31      	ldr	r3, [pc, #196]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	099b      	lsrs	r3, r3, #6
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f04f 0300 	mov.w	r3, #0
 8005b2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b32:	f04f 0100 	mov.w	r1, #0
 8005b36:	ea02 0400 	and.w	r4, r2, r0
 8005b3a:	ea03 0501 	and.w	r5, r3, r1
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	014b      	lsls	r3, r1, #5
 8005b4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b50:	0142      	lsls	r2, r0, #5
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	1b00      	subs	r0, r0, r4
 8005b58:	eb61 0105 	sbc.w	r1, r1, r5
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	018b      	lsls	r3, r1, #6
 8005b66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b6a:	0182      	lsls	r2, r0, #6
 8005b6c:	1a12      	subs	r2, r2, r0
 8005b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f04f 0100 	mov.w	r1, #0
 8005b7a:	00d9      	lsls	r1, r3, #3
 8005b7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b80:	00d0      	lsls	r0, r2, #3
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	1912      	adds	r2, r2, r4
 8005b88:	eb45 0303 	adc.w	r3, r5, r3
 8005b8c:	f04f 0000 	mov.w	r0, #0
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	0299      	lsls	r1, r3, #10
 8005b96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b9a:	0290      	lsls	r0, r2, #10
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	f7fa fb52 	bl	8000254 <__aeabi_uldivmod>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	0c1b      	lsrs	r3, r3, #16
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	60bb      	str	r3, [r7, #8]
      break;
 8005bd2:	e002      	b.n	8005bda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bd4:	4b05      	ldr	r3, [pc, #20]	; (8005bec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bd6:	60bb      	str	r3, [r7, #8]
      break;
 8005bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bda:	68bb      	ldr	r3, [r7, #8]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005be6:	bf00      	nop
 8005be8:	40023800 	.word	0x40023800
 8005bec:	00f42400 	.word	0x00f42400
 8005bf0:	007a1200 	.word	0x007a1200

08005bf4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf8:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20000004 	.word	0x20000004

08005c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c10:	f7ff fff0 	bl	8005bf4 <HAL_RCC_GetHCLKFreq>
 8005c14:	4602      	mov	r2, r0
 8005c16:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	0b5b      	lsrs	r3, r3, #13
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	4903      	ldr	r1, [pc, #12]	; (8005c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c22:	5ccb      	ldrb	r3, [r1, r3]
 8005c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	0800b050 	.word	0x0800b050

08005c34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	220f      	movs	r2, #15
 8005c42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c44:	4b12      	ldr	r3, [pc, #72]	; (8005c90 <HAL_RCC_GetClockConfig+0x5c>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 0203 	and.w	r2, r3, #3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c50:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <HAL_RCC_GetClockConfig+0x5c>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <HAL_RCC_GetClockConfig+0x5c>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005c68:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <HAL_RCC_GetClockConfig+0x5c>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	08db      	lsrs	r3, r3, #3
 8005c6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c76:	4b07      	ldr	r3, [pc, #28]	; (8005c94 <HAL_RCC_GetClockConfig+0x60>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 020f 	and.w	r2, r3, #15
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	601a      	str	r2, [r3, #0]
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40023800 	.word	0x40023800
 8005c94:	40023c00 	.word	0x40023c00

08005c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d012      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005cc0:	4b69      	ldr	r3, [pc, #420]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4a68      	ldr	r2, [pc, #416]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005cca:	6093      	str	r3, [r2, #8]
 8005ccc:	4b66      	ldr	r3, [pc, #408]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	4964      	ldr	r1, [pc, #400]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d017      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cf2:	4b5d      	ldr	r3, [pc, #372]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d00:	4959      	ldr	r1, [pc, #356]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d10:	d101      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005d12:	2301      	movs	r3, #1
 8005d14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d017      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d2e:	4b4e      	ldr	r3, [pc, #312]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	494a      	ldr	r1, [pc, #296]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4c:	d101      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 808b 	beq.w	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d7c:	4b3a      	ldr	r3, [pc, #232]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	4a39      	ldr	r2, [pc, #228]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d86:	6413      	str	r3, [r2, #64]	; 0x40
 8005d88:	4b37      	ldr	r3, [pc, #220]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d90:	60bb      	str	r3, [r7, #8]
 8005d92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d94:	4b35      	ldr	r3, [pc, #212]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a34      	ldr	r2, [pc, #208]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005da0:	f7fe f8e4 	bl	8003f6c <HAL_GetTick>
 8005da4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da8:	f7fe f8e0 	bl	8003f6c <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b64      	cmp	r3, #100	; 0x64
 8005db4:	d901      	bls.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e38f      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dba:	4b2c      	ldr	r3, [pc, #176]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dc6:	4b28      	ldr	r3, [pc, #160]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d035      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d02e      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005de4:	4b20      	ldr	r3, [pc, #128]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dee:	4b1e      	ldr	r3, [pc, #120]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	4a1d      	ldr	r2, [pc, #116]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfe:	4a1a      	ldr	r2, [pc, #104]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005e06:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e0c:	4b16      	ldr	r3, [pc, #88]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d114      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e18:	f7fe f8a8 	bl	8003f6c <HAL_GetTick>
 8005e1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e1e:	e00a      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e20:	f7fe f8a4 	bl	8003f6c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e351      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e36:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0ee      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e4e:	d111      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005e50:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e5c:	4b04      	ldr	r3, [pc, #16]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e5e:	400b      	ands	r3, r1
 8005e60:	4901      	ldr	r1, [pc, #4]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
 8005e66:	e00b      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005e68:	40023800 	.word	0x40023800
 8005e6c:	40007000 	.word	0x40007000
 8005e70:	0ffffcff 	.word	0x0ffffcff
 8005e74:	4bb3      	ldr	r3, [pc, #716]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4ab2      	ldr	r2, [pc, #712]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e7e:	6093      	str	r3, [r2, #8]
 8005e80:	4bb0      	ldr	r3, [pc, #704]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e8c:	49ad      	ldr	r1, [pc, #692]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d010      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e9e:	4ba9      	ldr	r3, [pc, #676]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea4:	4aa7      	ldr	r2, [pc, #668]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005eae:	4ba5      	ldr	r3, [pc, #660]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005eb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb8:	49a2      	ldr	r1, [pc, #648]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ecc:	4b9d      	ldr	r3, [pc, #628]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eda:	499a      	ldr	r1, [pc, #616]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005eee:	4b95      	ldr	r3, [pc, #596]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efc:	4991      	ldr	r1, [pc, #580]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f10:	4b8c      	ldr	r3, [pc, #560]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1e:	4989      	ldr	r1, [pc, #548]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f32:	4b84      	ldr	r3, [pc, #528]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	4980      	ldr	r1, [pc, #512]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f54:	4b7b      	ldr	r3, [pc, #492]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5a:	f023 0203 	bic.w	r2, r3, #3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f62:	4978      	ldr	r1, [pc, #480]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f76:	4b73      	ldr	r3, [pc, #460]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	f023 020c 	bic.w	r2, r3, #12
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f84:	496f      	ldr	r1, [pc, #444]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f98:	4b6a      	ldr	r3, [pc, #424]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa6:	4967      	ldr	r1, [pc, #412]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fba:	4b62      	ldr	r3, [pc, #392]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc8:	495e      	ldr	r1, [pc, #376]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005fdc:	4b59      	ldr	r3, [pc, #356]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fea:	4956      	ldr	r1, [pc, #344]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005ffe:	4b51      	ldr	r3, [pc, #324]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006004:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600c:	494d      	ldr	r1, [pc, #308]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006020:	4b48      	ldr	r3, [pc, #288]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006026:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602e:	4945      	ldr	r1, [pc, #276]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006030:	4313      	orrs	r3, r2
 8006032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006042:	4b40      	ldr	r3, [pc, #256]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006048:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006050:	493c      	ldr	r1, [pc, #240]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006052:	4313      	orrs	r3, r2
 8006054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006064:	4b37      	ldr	r3, [pc, #220]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006072:	4934      	ldr	r1, [pc, #208]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006074:	4313      	orrs	r3, r2
 8006076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d011      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006086:	4b2f      	ldr	r3, [pc, #188]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006094:	492b      	ldr	r1, [pc, #172]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060a4:	d101      	bne.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80060a6:	2301      	movs	r3, #1
 80060a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80060b6:	2301      	movs	r3, #1
 80060b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060c6:	4b1f      	ldr	r3, [pc, #124]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d4:	491b      	ldr	r1, [pc, #108]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00b      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060e8:	4b16      	ldr	r3, [pc, #88]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060f8:	4912      	ldr	r1, [pc, #72]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800610c:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006112:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800611c:	4909      	ldr	r1, [pc, #36]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00f      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006130:	4b04      	ldr	r3, [pc, #16]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006136:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006140:	e002      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800
 8006148:	4986      	ldr	r1, [pc, #536]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800615c:	4b81      	ldr	r3, [pc, #516]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800615e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006162:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616c:	497d      	ldr	r1, [pc, #500]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800616e:	4313      	orrs	r3, r2
 8006170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d006      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80d6 	beq.w	8006334 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006188:	4b76      	ldr	r3, [pc, #472]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a75      	ldr	r2, [pc, #468]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800618e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006194:	f7fd feea 	bl	8003f6c <HAL_GetTick>
 8006198:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800619c:	f7fd fee6 	bl	8003f6c <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b64      	cmp	r3, #100	; 0x64
 80061a8:	d901      	bls.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e195      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061ae:	4b6d      	ldr	r3, [pc, #436]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f0      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d021      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d11d      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80061ce:	4b65      	ldr	r3, [pc, #404]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80061dc:	4b61      	ldr	r3, [pc, #388]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061e2:	0e1b      	lsrs	r3, r3, #24
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	019a      	lsls	r2, r3, #6
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	041b      	lsls	r3, r3, #16
 80061f4:	431a      	orrs	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	061b      	lsls	r3, r3, #24
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	071b      	lsls	r3, r3, #28
 8006202:	4958      	ldr	r1, [pc, #352]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006204:	4313      	orrs	r3, r2
 8006206:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800621e:	d00a      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006228:	2b00      	cmp	r3, #0
 800622a:	d02e      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006234:	d129      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006236:	4b4b      	ldr	r3, [pc, #300]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006244:	4b47      	ldr	r3, [pc, #284]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624a:	0f1b      	lsrs	r3, r3, #28
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	019a      	lsls	r2, r3, #6
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	061b      	lsls	r3, r3, #24
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	071b      	lsls	r3, r3, #28
 800626a:	493e      	ldr	r1, [pc, #248]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006272:	4b3c      	ldr	r3, [pc, #240]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006278:	f023 021f 	bic.w	r2, r3, #31
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	3b01      	subs	r3, #1
 8006282:	4938      	ldr	r1, [pc, #224]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01d      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006296:	4b33      	ldr	r3, [pc, #204]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629c:	0e1b      	lsrs	r3, r3, #24
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062a4:	4b2f      	ldr	r3, [pc, #188]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062aa:	0f1b      	lsrs	r3, r3, #28
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	019a      	lsls	r2, r3, #6
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	041b      	lsls	r3, r3, #16
 80062be:	431a      	orrs	r2, r3
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	061b      	lsls	r3, r3, #24
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	071b      	lsls	r3, r3, #28
 80062ca:	4926      	ldr	r1, [pc, #152]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d011      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	019a      	lsls	r2, r3, #6
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	041b      	lsls	r3, r3, #16
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	061b      	lsls	r3, r3, #24
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	071b      	lsls	r3, r3, #28
 80062fa:	491a      	ldr	r1, [pc, #104]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006302:	4b18      	ldr	r3, [pc, #96]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a17      	ldr	r2, [pc, #92]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800630c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800630e:	f7fd fe2d 	bl	8003f6c <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006314:	e008      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006316:	f7fd fe29 	bl	8003f6c <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b64      	cmp	r3, #100	; 0x64
 8006322:	d901      	bls.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e0d8      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006328:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0f0      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	2b01      	cmp	r3, #1
 8006338:	f040 80ce 	bne.w	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a08      	ldr	r2, [pc, #32]	; (8006364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006348:	f7fd fe10 	bl	8003f6c <HAL_GetTick>
 800634c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800634e:	e00b      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006350:	f7fd fe0c 	bl	8003f6c <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b64      	cmp	r3, #100	; 0x64
 800635c:	d904      	bls.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e0bb      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006362:	bf00      	nop
 8006364:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006368:	4b5e      	ldr	r3, [pc, #376]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006374:	d0ec      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d009      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006392:	2b00      	cmp	r3, #0
 8006394:	d02e      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d12a      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800639e:	4b51      	ldr	r3, [pc, #324]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063ac:	4b4d      	ldr	r3, [pc, #308]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b2:	0f1b      	lsrs	r3, r3, #28
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	019a      	lsls	r2, r3, #6
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	061b      	lsls	r3, r3, #24
 80063cc:	431a      	orrs	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	071b      	lsls	r3, r3, #28
 80063d2:	4944      	ldr	r1, [pc, #272]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063da:	4b42      	ldr	r3, [pc, #264]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e8:	3b01      	subs	r3, #1
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	493d      	ldr	r1, [pc, #244]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d022      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006408:	d11d      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800640a:	4b36      	ldr	r3, [pc, #216]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800640c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006410:	0e1b      	lsrs	r3, r3, #24
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006418:	4b32      	ldr	r3, [pc, #200]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641e:	0f1b      	lsrs	r3, r3, #28
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	019a      	lsls	r2, r3, #6
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	041b      	lsls	r3, r3, #16
 8006432:	431a      	orrs	r2, r3
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	061b      	lsls	r3, r3, #24
 8006438:	431a      	orrs	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	071b      	lsls	r3, r3, #28
 800643e:	4929      	ldr	r1, [pc, #164]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d028      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006452:	4b24      	ldr	r3, [pc, #144]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006458:	0e1b      	lsrs	r3, r3, #24
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006460:	4b20      	ldr	r3, [pc, #128]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006466:	0c1b      	lsrs	r3, r3, #16
 8006468:	f003 0303 	and.w	r3, r3, #3
 800646c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	019a      	lsls	r2, r3, #6
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	431a      	orrs	r2, r3
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	061b      	lsls	r3, r3, #24
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	071b      	lsls	r3, r3, #28
 8006486:	4917      	ldr	r1, [pc, #92]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006488:	4313      	orrs	r3, r2
 800648a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800648e:	4b15      	ldr	r3, [pc, #84]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	4911      	ldr	r1, [pc, #68]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a0e      	ldr	r2, [pc, #56]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b0:	f7fd fd5c 	bl	8003f6c <HAL_GetTick>
 80064b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064b8:	f7fd fd58 	bl	8003f6c <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b64      	cmp	r3, #100	; 0x64
 80064c4:	d901      	bls.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e007      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064ca:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064d6:	d1ef      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800

080064e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e049      	b.n	800658e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f841 	bl	8006596 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f000 fa00 	bl	800692c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d001      	beq.n	80065c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e054      	b.n	800666e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a26      	ldr	r2, [pc, #152]	; (800667c <HAL_TIM_Base_Start_IT+0xd0>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d022      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ee:	d01d      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a22      	ldr	r2, [pc, #136]	; (8006680 <HAL_TIM_Base_Start_IT+0xd4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d018      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a21      	ldr	r2, [pc, #132]	; (8006684 <HAL_TIM_Base_Start_IT+0xd8>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d013      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <HAL_TIM_Base_Start_IT+0xdc>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00e      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a1e      	ldr	r2, [pc, #120]	; (800668c <HAL_TIM_Base_Start_IT+0xe0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <HAL_TIM_Base_Start_IT+0xe4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <HAL_TIM_Base_Start_IT+0x80>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a1b      	ldr	r2, [pc, #108]	; (8006694 <HAL_TIM_Base_Start_IT+0xe8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d115      	bne.n	8006658 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	4b19      	ldr	r3, [pc, #100]	; (8006698 <HAL_TIM_Base_Start_IT+0xec>)
 8006634:	4013      	ands	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b06      	cmp	r3, #6
 800663c:	d015      	beq.n	800666a <HAL_TIM_Base_Start_IT+0xbe>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006644:	d011      	beq.n	800666a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f042 0201 	orr.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006656:	e008      	b.n	800666a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	e000      	b.n	800666c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40010400 	.word	0x40010400
 8006690:	40014000 	.word	0x40014000
 8006694:	40001800 	.word	0x40001800
 8006698:	00010007 	.word	0x00010007

0800669c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d122      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d11b      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0202 	mvn.w	r2, #2
 80066c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f905 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 80066e4:	e005      	b.n	80066f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8f7 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f908 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b04      	cmp	r3, #4
 8006704:	d122      	bne.n	800674c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b04      	cmp	r3, #4
 8006712:	d11b      	bne.n	800674c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0204 	mvn.w	r2, #4
 800671c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2202      	movs	r2, #2
 8006722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f8db 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 8006738:	e005      	b.n	8006746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f8cd 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f8de 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b08      	cmp	r3, #8
 8006758:	d122      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b08      	cmp	r3, #8
 8006766:	d11b      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0208 	mvn.w	r2, #8
 8006770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2204      	movs	r2, #4
 8006776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f8b1 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 800678c:	e005      	b.n	800679a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f8a3 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f8b4 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d122      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	d11b      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f06f 0210 	mvn.w	r2, #16
 80067c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2208      	movs	r2, #8
 80067ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f887 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 80067e0:	e005      	b.n	80067ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f879 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f88a 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d10e      	bne.n	8006820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b01      	cmp	r3, #1
 800680e:	d107      	bne.n	8006820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0201 	mvn.w	r2, #1
 8006818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fd f93c 	bl	8003a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682a:	2b80      	cmp	r3, #128	; 0x80
 800682c:	d10e      	bne.n	800684c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006838:	2b80      	cmp	r3, #128	; 0x80
 800683a:	d107      	bne.n	800684c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f91a 	bl	8006a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685a:	d10e      	bne.n	800687a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006866:	2b80      	cmp	r3, #128	; 0x80
 8006868:	d107      	bne.n	800687a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f90d 	bl	8006a94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	d10e      	bne.n	80068a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d107      	bne.n	80068a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800689e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f838 	bl	8006916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d10e      	bne.n	80068d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d107      	bne.n	80068d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f06f 0220 	mvn.w	r2, #32
 80068ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f8cd 	bl	8006a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a40      	ldr	r2, [pc, #256]	; (8006a40 <TIM_Base_SetConfig+0x114>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d013      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694a:	d00f      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a3d      	ldr	r2, [pc, #244]	; (8006a44 <TIM_Base_SetConfig+0x118>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00b      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a3c      	ldr	r2, [pc, #240]	; (8006a48 <TIM_Base_SetConfig+0x11c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d007      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a3b      	ldr	r2, [pc, #236]	; (8006a4c <TIM_Base_SetConfig+0x120>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a3a      	ldr	r2, [pc, #232]	; (8006a50 <TIM_Base_SetConfig+0x124>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d108      	bne.n	800697e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a2f      	ldr	r2, [pc, #188]	; (8006a40 <TIM_Base_SetConfig+0x114>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d02b      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698c:	d027      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a2c      	ldr	r2, [pc, #176]	; (8006a44 <TIM_Base_SetConfig+0x118>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d023      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a2b      	ldr	r2, [pc, #172]	; (8006a48 <TIM_Base_SetConfig+0x11c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d01f      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a2a      	ldr	r2, [pc, #168]	; (8006a4c <TIM_Base_SetConfig+0x120>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01b      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a29      	ldr	r2, [pc, #164]	; (8006a50 <TIM_Base_SetConfig+0x124>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d017      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a28      	ldr	r2, [pc, #160]	; (8006a54 <TIM_Base_SetConfig+0x128>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a27      	ldr	r2, [pc, #156]	; (8006a58 <TIM_Base_SetConfig+0x12c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00f      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a26      	ldr	r2, [pc, #152]	; (8006a5c <TIM_Base_SetConfig+0x130>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00b      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a25      	ldr	r2, [pc, #148]	; (8006a60 <TIM_Base_SetConfig+0x134>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d007      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a24      	ldr	r2, [pc, #144]	; (8006a64 <TIM_Base_SetConfig+0x138>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d003      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a23      	ldr	r2, [pc, #140]	; (8006a68 <TIM_Base_SetConfig+0x13c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d108      	bne.n	80069f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a0a      	ldr	r2, [pc, #40]	; (8006a40 <TIM_Base_SetConfig+0x114>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <TIM_Base_SetConfig+0xf8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a0c      	ldr	r2, [pc, #48]	; (8006a50 <TIM_Base_SetConfig+0x124>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d103      	bne.n	8006a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	615a      	str	r2, [r3, #20]
}
 8006a32:	bf00      	nop
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40010000 	.word	0x40010000
 8006a44:	40000400 	.word	0x40000400
 8006a48:	40000800 	.word	0x40000800
 8006a4c:	40000c00 	.word	0x40000c00
 8006a50:	40010400 	.word	0x40010400
 8006a54:	40014000 	.word	0x40014000
 8006a58:	40014400 	.word	0x40014400
 8006a5c:	40014800 	.word	0x40014800
 8006a60:	40001800 	.word	0x40001800
 8006a64:	40001c00 	.word	0x40001c00
 8006a68:	40002000 	.word	0x40002000

08006a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006aac:	bf00      	nop
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
	...

08006ab8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006abe:	f3ef 8305 	mrs	r3, IPSR
 8006ac2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10f      	bne.n	8006aea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aca:	f3ef 8310 	mrs	r3, PRIMASK
 8006ace:	607b      	str	r3, [r7, #4]
  return(result);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ad6:	f3ef 8311 	mrs	r3, BASEPRI
 8006ada:	603b      	str	r3, [r7, #0]
  return(result);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <osKernelInitialize+0x3a>
 8006ae2:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <osKernelInitialize+0x64>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d103      	bne.n	8006af2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006aea:	f06f 0305 	mvn.w	r3, #5
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	e00c      	b.n	8006b0c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006af2:	4b0a      	ldr	r3, [pc, #40]	; (8006b1c <osKernelInitialize+0x64>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d105      	bne.n	8006b06 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006afa:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <osKernelInitialize+0x64>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	e002      	b.n	8006b0c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006b06:	f04f 33ff 	mov.w	r3, #4294967295
 8006b0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	20000148 	.word	0x20000148

08006b20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b26:	f3ef 8305 	mrs	r3, IPSR
 8006b2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10f      	bne.n	8006b52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b32:	f3ef 8310 	mrs	r3, PRIMASK
 8006b36:	607b      	str	r3, [r7, #4]
  return(result);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d105      	bne.n	8006b4a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b42:	603b      	str	r3, [r7, #0]
  return(result);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <osKernelStart+0x3a>
 8006b4a:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <osKernelStart+0x68>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d103      	bne.n	8006b5a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006b52:	f06f 0305 	mvn.w	r3, #5
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	e010      	b.n	8006b7c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <osKernelStart+0x68>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d109      	bne.n	8006b76 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b62:	f7ff ffa1 	bl	8006aa8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b66:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <osKernelStart+0x68>)
 8006b68:	2202      	movs	r2, #2
 8006b6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b6c:	f001 f8ce 	bl	8007d0c <vTaskStartScheduler>
      stat = osOK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	e002      	b.n	8006b7c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006b76:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000148 	.word	0x20000148

08006b8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b090      	sub	sp, #64	; 0x40
 8006b90:	af04      	add	r7, sp, #16
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b9c:	f3ef 8305 	mrs	r3, IPSR
 8006ba0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006ba2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f040 808f 	bne.w	8006cc8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006baa:	f3ef 8310 	mrs	r3, PRIMASK
 8006bae:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d105      	bne.n	8006bc2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bba:	617b      	str	r3, [r7, #20]
  return(result);
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <osThreadNew+0x3e>
 8006bc2:	4b44      	ldr	r3, [pc, #272]	; (8006cd4 <osThreadNew+0x148>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d07e      	beq.n	8006cc8 <osThreadNew+0x13c>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d07b      	beq.n	8006cc8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006bd0:	2380      	movs	r3, #128	; 0x80
 8006bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006bd4:	2318      	movs	r3, #24
 8006bd6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006be0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d045      	beq.n	8006c74 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <osThreadNew+0x6a>
        name = attr->name;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d008      	beq.n	8006c1c <osThreadNew+0x90>
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	2b38      	cmp	r3, #56	; 0x38
 8006c0e:	d805      	bhi.n	8006c1c <osThreadNew+0x90>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <osThreadNew+0x94>
        return (NULL);
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	e054      	b.n	8006cca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	089b      	lsrs	r3, r3, #2
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00e      	beq.n	8006c56 <osThreadNew+0xca>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2bbf      	cmp	r3, #191	; 0xbf
 8006c3e:	d90a      	bls.n	8006c56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d006      	beq.n	8006c56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <osThreadNew+0xca>
        mem = 1;
 8006c50:	2301      	movs	r3, #1
 8006c52:	623b      	str	r3, [r7, #32]
 8006c54:	e010      	b.n	8006c78 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10c      	bne.n	8006c78 <osThreadNew+0xec>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d108      	bne.n	8006c78 <osThreadNew+0xec>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <osThreadNew+0xec>
          mem = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	623b      	str	r3, [r7, #32]
 8006c72:	e001      	b.n	8006c78 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d110      	bne.n	8006ca0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c86:	9202      	str	r2, [sp, #8]
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 fe3f 	bl	8007918 <xTaskCreateStatic>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	613b      	str	r3, [r7, #16]
 8006c9e:	e013      	b.n	8006cc8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d110      	bne.n	8006cc8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	f107 0310 	add.w	r3, r7, #16
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fe90 	bl	80079de <xTaskCreate>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d001      	beq.n	8006cc8 <osThreadNew+0x13c>
          hTask = NULL;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006cc8:	693b      	ldr	r3, [r7, #16]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3730      	adds	r7, #48	; 0x30
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000148 	.word	0x20000148

08006cd8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ce0:	f3ef 8305 	mrs	r3, IPSR
 8006ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ce6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10f      	bne.n	8006d0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cec:	f3ef 8310 	mrs	r3, PRIMASK
 8006cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d105      	bne.n	8006d04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cf8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d007      	beq.n	8006d14 <osDelay+0x3c>
 8006d04:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <osDelay+0x58>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d103      	bne.n	8006d14 <osDelay+0x3c>
    stat = osErrorISR;
 8006d0c:	f06f 0305 	mvn.w	r3, #5
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	e007      	b.n	8006d24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d002      	beq.n	8006d24 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 ffbe 	bl	8007ca0 <vTaskDelay>
    }
  }

  return (stat);
 8006d24:	697b      	ldr	r3, [r7, #20]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000148 	.word	0x20000148

08006d34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a07      	ldr	r2, [pc, #28]	; (8006d60 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4a06      	ldr	r2, [pc, #24]	; (8006d64 <vApplicationGetIdleTaskMemory+0x30>)
 8006d4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2280      	movs	r2, #128	; 0x80
 8006d50:	601a      	str	r2, [r3, #0]
}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	2000014c 	.word	0x2000014c
 8006d64:	2000020c 	.word	0x2000020c

08006d68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4a07      	ldr	r2, [pc, #28]	; (8006d94 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4a06      	ldr	r2, [pc, #24]	; (8006d98 <vApplicationGetTimerTaskMemory+0x30>)
 8006d7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d86:	601a      	str	r2, [r3, #0]
}
 8006d88:	bf00      	nop
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	2000040c 	.word	0x2000040c
 8006d98:	200004cc 	.word	0x200004cc

08006d9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f103 0208 	add.w	r2, r3, #8
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f04f 32ff 	mov.w	r2, #4294967295
 8006db4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f103 0208 	add.w	r2, r3, #8
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f103 0208 	add.w	r2, r3, #8
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	601a      	str	r2, [r3, #0]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d103      	bne.n	8006e5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	e00c      	b.n	8006e78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3308      	adds	r3, #8
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	e002      	b.n	8006e6c <vListInsert+0x2e>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d2f6      	bcs.n	8006e66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6892      	ldr	r2, [r2, #8]
 8006ec6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6852      	ldr	r2, [r2, #4]
 8006ed0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d103      	bne.n	8006ee4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	1e5a      	subs	r2, r3, #1
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10c      	bne.n	8006f32 <xQueueGenericReset+0x2e>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	b672      	cpsid	i
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	b662      	cpsie	i
 8006f2c:	60bb      	str	r3, [r7, #8]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006f32:	f002 f8db 	bl	80090ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f42:	fb01 f303 	mul.w	r3, r1, r3
 8006f46:	441a      	add	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f62:	3b01      	subs	r3, #1
 8006f64:	68f9      	ldr	r1, [r7, #12]
 8006f66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	441a      	add	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	22ff      	movs	r2, #255	; 0xff
 8006f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	22ff      	movs	r2, #255	; 0xff
 8006f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d114      	bne.n	8006fb2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d01a      	beq.n	8006fc6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3310      	adds	r3, #16
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 f98f 	bl	80082b8 <xTaskRemoveFromEventList>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d012      	beq.n	8006fc6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <xQueueGenericReset+0xd0>)
 8006fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	e009      	b.n	8006fc6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3310      	adds	r3, #16
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff fef0 	bl	8006d9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3324      	adds	r3, #36	; 0x24
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff feeb 	bl	8006d9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006fc6:	f002 f8c5 	bl	8009154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006fca:	2301      	movs	r3, #1
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	e000ed04 	.word	0xe000ed04

08006fd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08e      	sub	sp, #56	; 0x38
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10c      	bne.n	8007006 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	b672      	cpsid	i
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	b662      	cpsie	i
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10c      	bne.n	8007026 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800700c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007010:	b672      	cpsid	i
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	b662      	cpsie	i
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <xQueueGenericCreateStatic+0x5a>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <xQueueGenericCreateStatic+0x5e>
 8007032:	2301      	movs	r3, #1
 8007034:	e000      	b.n	8007038 <xQueueGenericCreateStatic+0x60>
 8007036:	2300      	movs	r3, #0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10c      	bne.n	8007056 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	b672      	cpsid	i
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	b662      	cpsie	i
 8007050:	623b      	str	r3, [r7, #32]
}
 8007052:	bf00      	nop
 8007054:	e7fe      	b.n	8007054 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <xQueueGenericCreateStatic+0x8a>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <xQueueGenericCreateStatic+0x8e>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <xQueueGenericCreateStatic+0x90>
 8007066:	2300      	movs	r3, #0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10c      	bne.n	8007086 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	b672      	cpsid	i
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	b662      	cpsie	i
 8007080:	61fb      	str	r3, [r7, #28]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007086:	2350      	movs	r3, #80	; 0x50
 8007088:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b50      	cmp	r3, #80	; 0x50
 800708e:	d00c      	beq.n	80070aa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	b672      	cpsid	i
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	b662      	cpsie	i
 80070a4:	61bb      	str	r3, [r7, #24]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00d      	beq.n	80070d2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	4613      	mov	r3, r2
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	68b9      	ldr	r1, [r7, #8]
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f805 	bl	80070dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3730      	adds	r7, #48	; 0x30
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d103      	bne.n	80070f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	e002      	b.n	80070fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800710a:	2101      	movs	r1, #1
 800710c:	69b8      	ldr	r0, [r7, #24]
 800710e:	f7ff fef9 	bl	8006f04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	78fa      	ldrb	r2, [r7, #3]
 8007116:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08e      	sub	sp, #56	; 0x38
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007132:	2300      	movs	r3, #0
 8007134:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10c      	bne.n	800715a <xQueueGenericSend+0x36>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	b672      	cpsid	i
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	b662      	cpsie	i
 8007154:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d103      	bne.n	8007168 <xQueueGenericSend+0x44>
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <xQueueGenericSend+0x48>
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <xQueueGenericSend+0x4a>
 800716c:	2300      	movs	r3, #0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10c      	bne.n	800718c <xQueueGenericSend+0x68>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	b672      	cpsid	i
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	b662      	cpsie	i
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007188:	bf00      	nop
 800718a:	e7fe      	b.n	800718a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b02      	cmp	r3, #2
 8007190:	d103      	bne.n	800719a <xQueueGenericSend+0x76>
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <xQueueGenericSend+0x7a>
 800719a:	2301      	movs	r3, #1
 800719c:	e000      	b.n	80071a0 <xQueueGenericSend+0x7c>
 800719e:	2300      	movs	r3, #0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10c      	bne.n	80071be <xQueueGenericSend+0x9a>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	b672      	cpsid	i
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	b662      	cpsie	i
 80071b8:	623b      	str	r3, [r7, #32]
}
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071be:	f001 fa47 	bl	8008650 <xTaskGetSchedulerState>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <xQueueGenericSend+0xaa>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <xQueueGenericSend+0xae>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <xQueueGenericSend+0xb0>
 80071d2:	2300      	movs	r3, #0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10c      	bne.n	80071f2 <xQueueGenericSend+0xce>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	b672      	cpsid	i
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	b662      	cpsie	i
 80071ec:	61fb      	str	r3, [r7, #28]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071f2:	f001 ff7b 	bl	80090ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fe:	429a      	cmp	r2, r3
 8007200:	d302      	bcc.n	8007208 <xQueueGenericSend+0xe4>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b02      	cmp	r3, #2
 8007206:	d129      	bne.n	800725c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800720e:	f000 fa15 	bl	800763c <prvCopyDataToQueue>
 8007212:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	2b00      	cmp	r3, #0
 800721a:	d010      	beq.n	800723e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	3324      	adds	r3, #36	; 0x24
 8007220:	4618      	mov	r0, r3
 8007222:	f001 f849 	bl	80082b8 <xTaskRemoveFromEventList>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d013      	beq.n	8007254 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800722c:	4b3f      	ldr	r3, [pc, #252]	; (800732c <xQueueGenericSend+0x208>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	e00a      	b.n	8007254 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007244:	4b39      	ldr	r3, [pc, #228]	; (800732c <xQueueGenericSend+0x208>)
 8007246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007254:	f001 ff7e 	bl	8009154 <vPortExitCritical>
				return pdPASS;
 8007258:	2301      	movs	r3, #1
 800725a:	e063      	b.n	8007324 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d103      	bne.n	800726a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007262:	f001 ff77 	bl	8009154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007266:	2300      	movs	r3, #0
 8007268:	e05c      	b.n	8007324 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800726a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726c:	2b00      	cmp	r3, #0
 800726e:	d106      	bne.n	800727e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007270:	f107 0314 	add.w	r3, r7, #20
 8007274:	4618      	mov	r0, r3
 8007276:	f001 f885 	bl	8008384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800727a:	2301      	movs	r3, #1
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800727e:	f001 ff69 	bl	8009154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007282:	f000 fdb7 	bl	8007df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007286:	f001 ff31 	bl	80090ec <vPortEnterCritical>
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007290:	b25b      	sxtb	r3, r3
 8007292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007296:	d103      	bne.n	80072a0 <xQueueGenericSend+0x17c>
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072a6:	b25b      	sxtb	r3, r3
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d103      	bne.n	80072b6 <xQueueGenericSend+0x192>
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072b6:	f001 ff4d 	bl	8009154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072ba:	1d3a      	adds	r2, r7, #4
 80072bc:	f107 0314 	add.w	r3, r7, #20
 80072c0:	4611      	mov	r1, r2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 f874 	bl	80083b0 <xTaskCheckForTimeOut>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d124      	bne.n	8007318 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072d0:	f000 faac 	bl	800782c <prvIsQueueFull>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d018      	beq.n	800730c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	3310      	adds	r3, #16
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	4611      	mov	r1, r2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 ff94 	bl	8008210 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072ea:	f000 fa37 	bl	800775c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072ee:	f000 fd8f 	bl	8007e10 <xTaskResumeAll>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f47f af7c 	bne.w	80071f2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80072fa:	4b0c      	ldr	r3, [pc, #48]	; (800732c <xQueueGenericSend+0x208>)
 80072fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	e772      	b.n	80071f2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800730c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800730e:	f000 fa25 	bl	800775c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007312:	f000 fd7d 	bl	8007e10 <xTaskResumeAll>
 8007316:	e76c      	b.n	80071f2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800731a:	f000 fa1f 	bl	800775c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800731e:	f000 fd77 	bl	8007e10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007322:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007324:	4618      	mov	r0, r3
 8007326:	3738      	adds	r7, #56	; 0x38
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	e000ed04 	.word	0xe000ed04

08007330 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08e      	sub	sp, #56	; 0x38
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10c      	bne.n	8007362 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	b672      	cpsid	i
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	b662      	cpsie	i
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d103      	bne.n	8007370 <xQueueGenericSendFromISR+0x40>
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <xQueueGenericSendFromISR+0x44>
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <xQueueGenericSendFromISR+0x46>
 8007374:	2300      	movs	r3, #0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10c      	bne.n	8007394 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	b672      	cpsid	i
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	b662      	cpsie	i
 800738e:	623b      	str	r3, [r7, #32]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d103      	bne.n	80073a2 <xQueueGenericSendFromISR+0x72>
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <xQueueGenericSendFromISR+0x76>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e000      	b.n	80073a8 <xQueueGenericSendFromISR+0x78>
 80073a6:	2300      	movs	r3, #0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10c      	bne.n	80073c6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	b672      	cpsid	i
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	b662      	cpsie	i
 80073c0:	61fb      	str	r3, [r7, #28]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073c6:	f001 ff79 	bl	80092bc <vPortValidateInterruptPriority>
	__asm volatile
 80073ca:	f3ef 8211 	mrs	r2, BASEPRI
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	b672      	cpsid	i
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	b662      	cpsie	i
 80073e2:	61ba      	str	r2, [r7, #24]
 80073e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80073e6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d302      	bcc.n	80073fc <xQueueGenericSendFromISR+0xcc>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d12c      	bne.n	8007456 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800740c:	f000 f916 	bl	800763c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007410:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d112      	bne.n	8007440 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	2b00      	cmp	r3, #0
 8007420:	d016      	beq.n	8007450 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	3324      	adds	r3, #36	; 0x24
 8007426:	4618      	mov	r0, r3
 8007428:	f000 ff46 	bl	80082b8 <xTaskRemoveFromEventList>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00e      	beq.n	8007450 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e007      	b.n	8007450 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007440:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007444:	3301      	adds	r3, #1
 8007446:	b2db      	uxtb	r3, r3
 8007448:	b25a      	sxtb	r2, r3
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007450:	2301      	movs	r3, #1
 8007452:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007454:	e001      	b.n	800745a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007456:	2300      	movs	r3, #0
 8007458:	637b      	str	r3, [r7, #52]	; 0x34
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f383 8811 	msr	BASEPRI, r3
}
 8007464:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007468:	4618      	mov	r0, r3
 800746a:	3738      	adds	r7, #56	; 0x38
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08c      	sub	sp, #48	; 0x30
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800747c:	2300      	movs	r3, #0
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10c      	bne.n	80074a4 <xQueueReceive+0x34>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	b672      	cpsid	i
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	b662      	cpsie	i
 800749e:	623b      	str	r3, [r7, #32]
}
 80074a0:	bf00      	nop
 80074a2:	e7fe      	b.n	80074a2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d103      	bne.n	80074b2 <xQueueReceive+0x42>
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <xQueueReceive+0x46>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <xQueueReceive+0x48>
 80074b6:	2300      	movs	r3, #0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10c      	bne.n	80074d6 <xQueueReceive+0x66>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	b672      	cpsid	i
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	b662      	cpsie	i
 80074d0:	61fb      	str	r3, [r7, #28]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074d6:	f001 f8bb 	bl	8008650 <xTaskGetSchedulerState>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <xQueueReceive+0x76>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <xQueueReceive+0x7a>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e000      	b.n	80074ec <xQueueReceive+0x7c>
 80074ea:	2300      	movs	r3, #0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10c      	bne.n	800750a <xQueueReceive+0x9a>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	b672      	cpsid	i
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	b662      	cpsie	i
 8007504:	61bb      	str	r3, [r7, #24]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800750a:	f001 fdef 	bl	80090ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01f      	beq.n	800755a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800751a:	68b9      	ldr	r1, [r7, #8]
 800751c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800751e:	f000 f8f7 	bl	8007710 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	1e5a      	subs	r2, r3, #1
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00f      	beq.n	8007552 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	3310      	adds	r3, #16
 8007536:	4618      	mov	r0, r3
 8007538:	f000 febe 	bl	80082b8 <xTaskRemoveFromEventList>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007542:	4b3d      	ldr	r3, [pc, #244]	; (8007638 <xQueueReceive+0x1c8>)
 8007544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007552:	f001 fdff 	bl	8009154 <vPortExitCritical>
				return pdPASS;
 8007556:	2301      	movs	r3, #1
 8007558:	e069      	b.n	800762e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007560:	f001 fdf8 	bl	8009154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007564:	2300      	movs	r3, #0
 8007566:	e062      	b.n	800762e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d106      	bne.n	800757c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800756e:	f107 0310 	add.w	r3, r7, #16
 8007572:	4618      	mov	r0, r3
 8007574:	f000 ff06 	bl	8008384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007578:	2301      	movs	r3, #1
 800757a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800757c:	f001 fdea 	bl	8009154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007580:	f000 fc38 	bl	8007df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007584:	f001 fdb2 	bl	80090ec <vPortEnterCritical>
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800758e:	b25b      	sxtb	r3, r3
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d103      	bne.n	800759e <xQueueReceive+0x12e>
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075a4:	b25b      	sxtb	r3, r3
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075aa:	d103      	bne.n	80075b4 <xQueueReceive+0x144>
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075b4:	f001 fdce 	bl	8009154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075b8:	1d3a      	adds	r2, r7, #4
 80075ba:	f107 0310 	add.w	r3, r7, #16
 80075be:	4611      	mov	r1, r2
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fef5 	bl	80083b0 <xTaskCheckForTimeOut>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d123      	bne.n	8007614 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ce:	f000 f917 	bl	8007800 <prvIsQueueEmpty>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d017      	beq.n	8007608 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075da:	3324      	adds	r3, #36	; 0x24
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4611      	mov	r1, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fe15 	bl	8008210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075e8:	f000 f8b8 	bl	800775c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075ec:	f000 fc10 	bl	8007e10 <xTaskResumeAll>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d189      	bne.n	800750a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80075f6:	4b10      	ldr	r3, [pc, #64]	; (8007638 <xQueueReceive+0x1c8>)
 80075f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	e780      	b.n	800750a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800760a:	f000 f8a7 	bl	800775c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800760e:	f000 fbff 	bl	8007e10 <xTaskResumeAll>
 8007612:	e77a      	b.n	800750a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007616:	f000 f8a1 	bl	800775c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800761a:	f000 fbf9 	bl	8007e10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800761e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007620:	f000 f8ee 	bl	8007800 <prvIsQueueEmpty>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	f43f af6f 	beq.w	800750a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800762c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800762e:	4618      	mov	r0, r3
 8007630:	3730      	adds	r7, #48	; 0x30
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	e000ed04 	.word	0xe000ed04

0800763c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b086      	sub	sp, #24
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10d      	bne.n	8007676 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d14d      	bne.n	80076fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	4618      	mov	r0, r3
 8007668:	f001 f810 	bl	800868c <xTaskPriorityDisinherit>
 800766c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	609a      	str	r2, [r3, #8]
 8007674:	e043      	b.n	80076fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d119      	bne.n	80076b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6858      	ldr	r0, [r3, #4]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	461a      	mov	r2, r3
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	f002 feec 	bl	800a464 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	441a      	add	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d32b      	bcc.n	80076fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	605a      	str	r2, [r3, #4]
 80076ae:	e026      	b.n	80076fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	68d8      	ldr	r0, [r3, #12]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	461a      	mov	r2, r3
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	f002 fed2 	bl	800a464 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c8:	425b      	negs	r3, r3
 80076ca:	441a      	add	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d207      	bcs.n	80076ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	425b      	negs	r3, r3
 80076e6:	441a      	add	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d105      	bne.n	80076fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007706:	697b      	ldr	r3, [r7, #20]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	2b00      	cmp	r3, #0
 8007720:	d018      	beq.n	8007754 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	441a      	add	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	429a      	cmp	r2, r3
 800773a:	d303      	bcc.n	8007744 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68d9      	ldr	r1, [r3, #12]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774c:	461a      	mov	r2, r3
 800774e:	6838      	ldr	r0, [r7, #0]
 8007750:	f002 fe88 	bl	800a464 <memcpy>
	}
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007764:	f001 fcc2 	bl	80090ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800776e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007770:	e011      	b.n	8007796 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	2b00      	cmp	r3, #0
 8007778:	d012      	beq.n	80077a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3324      	adds	r3, #36	; 0x24
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fd9a 	bl	80082b8 <xTaskRemoveFromEventList>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800778a:	f000 fe77 	bl	800847c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	3b01      	subs	r3, #1
 8007792:	b2db      	uxtb	r3, r3
 8007794:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800779a:	2b00      	cmp	r3, #0
 800779c:	dce9      	bgt.n	8007772 <prvUnlockQueue+0x16>
 800779e:	e000      	b.n	80077a2 <prvUnlockQueue+0x46>
					break;
 80077a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	22ff      	movs	r2, #255	; 0xff
 80077a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80077aa:	f001 fcd3 	bl	8009154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80077ae:	f001 fc9d 	bl	80090ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077ba:	e011      	b.n	80077e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d012      	beq.n	80077ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	3310      	adds	r3, #16
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fd75 	bl	80082b8 <xTaskRemoveFromEventList>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077d4:	f000 fe52 	bl	800847c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	3b01      	subs	r3, #1
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	dce9      	bgt.n	80077bc <prvUnlockQueue+0x60>
 80077e8:	e000      	b.n	80077ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	22ff      	movs	r2, #255	; 0xff
 80077f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80077f4:	f001 fcae 	bl	8009154 <vPortExitCritical>
}
 80077f8:	bf00      	nop
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007808:	f001 fc70 	bl	80090ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	2b00      	cmp	r3, #0
 8007812:	d102      	bne.n	800781a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007814:	2301      	movs	r3, #1
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	e001      	b.n	800781e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800781e:	f001 fc99 	bl	8009154 <vPortExitCritical>

	return xReturn;
 8007822:	68fb      	ldr	r3, [r7, #12]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007834:	f001 fc5a 	bl	80090ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007840:	429a      	cmp	r2, r3
 8007842:	d102      	bne.n	800784a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007844:	2301      	movs	r3, #1
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	e001      	b.n	800784e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800784e:	f001 fc81 	bl	8009154 <vPortExitCritical>

	return xReturn;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007866:	2300      	movs	r3, #0
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	e014      	b.n	8007896 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800786c:	4a0f      	ldr	r2, [pc, #60]	; (80078ac <vQueueAddToRegistry+0x50>)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10b      	bne.n	8007890 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007878:	490c      	ldr	r1, [pc, #48]	; (80078ac <vQueueAddToRegistry+0x50>)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007882:	4a0a      	ldr	r2, [pc, #40]	; (80078ac <vQueueAddToRegistry+0x50>)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4413      	add	r3, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800788e:	e006      	b.n	800789e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3301      	adds	r3, #1
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b07      	cmp	r3, #7
 800789a:	d9e7      	bls.n	800786c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800789c:	bf00      	nop
 800789e:	bf00      	nop
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	20001480 	.word	0x20001480

080078b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078c0:	f001 fc14 	bl	80090ec <vPortEnterCritical>
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078ca:	b25b      	sxtb	r3, r3
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d103      	bne.n	80078da <vQueueWaitForMessageRestricted+0x2a>
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078e0:	b25b      	sxtb	r3, r3
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d103      	bne.n	80078f0 <vQueueWaitForMessageRestricted+0x40>
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078f0:	f001 fc30 	bl	8009154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d106      	bne.n	800790a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	3324      	adds	r3, #36	; 0x24
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	68b9      	ldr	r1, [r7, #8]
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fca9 	bl	800825c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800790a:	6978      	ldr	r0, [r7, #20]
 800790c:	f7ff ff26 	bl	800775c <prvUnlockQueue>
	}
 8007910:	bf00      	nop
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08e      	sub	sp, #56	; 0x38
 800791c:	af04      	add	r7, sp, #16
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10c      	bne.n	8007946 <xTaskCreateStatic+0x2e>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	b672      	cpsid	i
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	b662      	cpsie	i
 8007940:	623b      	str	r3, [r7, #32]
}
 8007942:	bf00      	nop
 8007944:	e7fe      	b.n	8007944 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10c      	bne.n	8007966 <xTaskCreateStatic+0x4e>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	b672      	cpsid	i
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	b662      	cpsie	i
 8007960:	61fb      	str	r3, [r7, #28]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007966:	23c0      	movs	r3, #192	; 0xc0
 8007968:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2bc0      	cmp	r3, #192	; 0xc0
 800796e:	d00c      	beq.n	800798a <xTaskCreateStatic+0x72>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	b672      	cpsid	i
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	b662      	cpsie	i
 8007984:	61bb      	str	r3, [r7, #24]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800798a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01e      	beq.n	80079d0 <xTaskCreateStatic+0xb8>
 8007992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01b      	beq.n	80079d0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	2202      	movs	r2, #2
 80079a6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079aa:	2300      	movs	r3, #0
 80079ac:	9303      	str	r3, [sp, #12]
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	9302      	str	r3, [sp, #8]
 80079b2:	f107 0314 	add.w	r3, r7, #20
 80079b6:	9301      	str	r3, [sp, #4]
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 f850 	bl	8007a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079ca:	f000 f8f9 	bl	8007bc0 <prvAddNewTaskToReadyList>
 80079ce:	e001      	b.n	80079d4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079d4:	697b      	ldr	r3, [r7, #20]
	}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3728      	adds	r7, #40	; 0x28
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b08c      	sub	sp, #48	; 0x30
 80079e2:	af04      	add	r7, sp, #16
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	603b      	str	r3, [r7, #0]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7f9 fda0 	bl	8001538 <pvPortMalloc>
 80079f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00e      	beq.n	8007a1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a00:	20c0      	movs	r0, #192	; 0xc0
 8007a02:	f7f9 fd99 	bl	8001538 <pvPortMalloc>
 8007a06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	631a      	str	r2, [r3, #48]	; 0x30
 8007a14:	e005      	b.n	8007a22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a16:	6978      	ldr	r0, [r7, #20]
 8007a18:	f7f9 fd9c 	bl	8001554 <vPortFree>
 8007a1c:	e001      	b.n	8007a22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d017      	beq.n	8007a58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a30:	88fa      	ldrh	r2, [r7, #6]
 8007a32:	2300      	movs	r3, #0
 8007a34:	9303      	str	r3, [sp, #12]
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	9302      	str	r3, [sp, #8]
 8007a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 f80e 	bl	8007a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a4c:	69f8      	ldr	r0, [r7, #28]
 8007a4e:	f000 f8b7 	bl	8007bc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a52:	2301      	movs	r3, #1
 8007a54:	61bb      	str	r3, [r7, #24]
 8007a56:	e002      	b.n	8007a5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a58:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
	}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3720      	adds	r7, #32
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	461a      	mov	r2, r3
 8007a80:	21a5      	movs	r1, #165	; 0xa5
 8007a82:	f002 fd17 	bl	800a4b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007a90:	440b      	add	r3, r1
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	f023 0307 	bic.w	r3, r3, #7
 8007a9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00c      	beq.n	8007ac4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	b672      	cpsid	i
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	b662      	cpsie	i
 8007abe:	617b      	str	r3, [r7, #20]
}
 8007ac0:	bf00      	nop
 8007ac2:	e7fe      	b.n	8007ac2 <prvInitialiseNewTask+0x5a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01f      	beq.n	8007b10 <prvInitialiseNewTask+0xa8>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61fb      	str	r3, [r7, #28]
 8007ad4:	e012      	b.n	8007afc <prvInitialiseNewTask+0x94>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	4413      	add	r3, r2
 8007adc:	7819      	ldrb	r1, [r3, #0]
 8007ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	3334      	adds	r3, #52	; 0x34
 8007ae6:	460a      	mov	r2, r1
 8007ae8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d006      	beq.n	8007b04 <prvInitialiseNewTask+0x9c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	3301      	adds	r3, #1
 8007afa:	61fb      	str	r3, [r7, #28]
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	d9e9      	bls.n	8007ad6 <prvInitialiseNewTask+0x6e>
 8007b02:	e000      	b.n	8007b06 <prvInitialiseNewTask+0x9e>
			{
				break;
 8007b04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b0e:	e003      	b.n	8007b18 <prvInitialiseNewTask+0xb0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	2b37      	cmp	r3, #55	; 0x37
 8007b1c:	d901      	bls.n	8007b22 <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b1e:	2337      	movs	r3, #55	; 0x37
 8007b20:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b2c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	2200      	movs	r2, #0
 8007b32:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	3304      	adds	r3, #4
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff f94f 	bl	8006ddc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	3318      	adds	r3, #24
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff f94a 	bl	8006ddc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	3358      	adds	r3, #88	; 0x58
 8007b72:	2260      	movs	r2, #96	; 0x60
 8007b74:	2100      	movs	r1, #0
 8007b76:	4618      	mov	r0, r3
 8007b78:	f002 fc9c 	bl	800a4b4 <memset>
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	4a0d      	ldr	r2, [pc, #52]	; (8007bb4 <prvInitialiseNewTask+0x14c>)
 8007b80:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	4a0c      	ldr	r2, [pc, #48]	; (8007bb8 <prvInitialiseNewTask+0x150>)
 8007b86:	661a      	str	r2, [r3, #96]	; 0x60
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	4a0c      	ldr	r2, [pc, #48]	; (8007bbc <prvInitialiseNewTask+0x154>)
 8007b8c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	68f9      	ldr	r1, [r7, #12]
 8007b92:	69b8      	ldr	r0, [r7, #24]
 8007b94:	f001 f99c 	bl	8008ed0 <pxPortInitialiseStack>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007baa:	bf00      	nop
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	0800b318 	.word	0x0800b318
 8007bb8:	0800b338 	.word	0x0800b338
 8007bbc:	0800b2f8 	.word	0x0800b2f8

08007bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007bc8:	f001 fa90 	bl	80090ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007bcc:	4b2d      	ldr	r3, [pc, #180]	; (8007c84 <prvAddNewTaskToReadyList+0xc4>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	4a2c      	ldr	r2, [pc, #176]	; (8007c84 <prvAddNewTaskToReadyList+0xc4>)
 8007bd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007bd6:	4b2c      	ldr	r3, [pc, #176]	; (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d109      	bne.n	8007bf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007bde:	4a2a      	ldr	r2, [pc, #168]	; (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007be4:	4b27      	ldr	r3, [pc, #156]	; (8007c84 <prvAddNewTaskToReadyList+0xc4>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d110      	bne.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bec:	f000 fc6c 	bl	80084c8 <prvInitialiseTaskLists>
 8007bf0:	e00d      	b.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bf2:	4b26      	ldr	r3, [pc, #152]	; (8007c8c <prvAddNewTaskToReadyList+0xcc>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bfa:	4b23      	ldr	r3, [pc, #140]	; (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d802      	bhi.n	8007c0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c08:	4a1f      	ldr	r2, [pc, #124]	; (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c0e:	4b20      	ldr	r3, [pc, #128]	; (8007c90 <prvAddNewTaskToReadyList+0xd0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3301      	adds	r3, #1
 8007c14:	4a1e      	ldr	r2, [pc, #120]	; (8007c90 <prvAddNewTaskToReadyList+0xd0>)
 8007c16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c18:	4b1d      	ldr	r3, [pc, #116]	; (8007c90 <prvAddNewTaskToReadyList+0xd0>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c24:	4b1b      	ldr	r3, [pc, #108]	; (8007c94 <prvAddNewTaskToReadyList+0xd4>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d903      	bls.n	8007c34 <prvAddNewTaskToReadyList+0x74>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	4a18      	ldr	r2, [pc, #96]	; (8007c94 <prvAddNewTaskToReadyList+0xd4>)
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4a15      	ldr	r2, [pc, #84]	; (8007c98 <prvAddNewTaskToReadyList+0xd8>)
 8007c42:	441a      	add	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f7ff f8d3 	bl	8006df6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c50:	f001 fa80 	bl	8009154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c54:	4b0d      	ldr	r3, [pc, #52]	; (8007c8c <prvAddNewTaskToReadyList+0xcc>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00e      	beq.n	8007c7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <prvAddNewTaskToReadyList+0xc8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d207      	bcs.n	8007c7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c6a:	4b0c      	ldr	r3, [pc, #48]	; (8007c9c <prvAddNewTaskToReadyList+0xdc>)
 8007c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c7a:	bf00      	nop
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000da0 	.word	0x20000da0
 8007c88:	200008cc 	.word	0x200008cc
 8007c8c:	20000dac 	.word	0x20000dac
 8007c90:	20000dbc 	.word	0x20000dbc
 8007c94:	20000da8 	.word	0x20000da8
 8007c98:	200008d0 	.word	0x200008d0
 8007c9c:	e000ed04 	.word	0xe000ed04

08007ca0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d019      	beq.n	8007ce6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cb2:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <vTaskDelay+0x64>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00c      	beq.n	8007cd4 <vTaskDelay+0x34>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbe:	b672      	cpsid	i
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	b662      	cpsie	i
 8007cce:	60bb      	str	r3, [r7, #8]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007cd4:	f000 f88e 	bl	8007df4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cd8:	2100      	movs	r1, #0
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fd48 	bl	8008770 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ce0:	f000 f896 	bl	8007e10 <xTaskResumeAll>
 8007ce4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d107      	bne.n	8007cfc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007cec:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <vTaskDelay+0x68>)
 8007cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	20000dc8 	.word	0x20000dc8
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08a      	sub	sp, #40	; 0x28
 8007d10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d1a:	463a      	mov	r2, r7
 8007d1c:	1d39      	adds	r1, r7, #4
 8007d1e:	f107 0308 	add.w	r3, r7, #8
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff f806 	bl	8006d34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	9202      	str	r2, [sp, #8]
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	2300      	movs	r3, #0
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	2300      	movs	r3, #0
 8007d38:	460a      	mov	r2, r1
 8007d3a:	4926      	ldr	r1, [pc, #152]	; (8007dd4 <vTaskStartScheduler+0xc8>)
 8007d3c:	4826      	ldr	r0, [pc, #152]	; (8007dd8 <vTaskStartScheduler+0xcc>)
 8007d3e:	f7ff fdeb 	bl	8007918 <xTaskCreateStatic>
 8007d42:	4603      	mov	r3, r0
 8007d44:	4a25      	ldr	r2, [pc, #148]	; (8007ddc <vTaskStartScheduler+0xd0>)
 8007d46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d48:	4b24      	ldr	r3, [pc, #144]	; (8007ddc <vTaskStartScheduler+0xd0>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d50:	2301      	movs	r3, #1
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	e001      	b.n	8007d5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d102      	bne.n	8007d66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d60:	f000 fd5a 	bl	8008818 <xTimerCreateTimerTask>
 8007d64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d11d      	bne.n	8007da8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	b672      	cpsid	i
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	b662      	cpsie	i
 8007d80:	613b      	str	r3, [r7, #16]
}
 8007d82:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d84:	4b16      	ldr	r3, [pc, #88]	; (8007de0 <vTaskStartScheduler+0xd4>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3358      	adds	r3, #88	; 0x58
 8007d8a:	4a16      	ldr	r2, [pc, #88]	; (8007de4 <vTaskStartScheduler+0xd8>)
 8007d8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d8e:	4b16      	ldr	r3, [pc, #88]	; (8007de8 <vTaskStartScheduler+0xdc>)
 8007d90:	f04f 32ff 	mov.w	r2, #4294967295
 8007d94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d96:	4b15      	ldr	r3, [pc, #84]	; (8007dec <vTaskStartScheduler+0xe0>)
 8007d98:	2201      	movs	r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d9c:	4b14      	ldr	r3, [pc, #80]	; (8007df0 <vTaskStartScheduler+0xe4>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007da2:	f001 f925 	bl	8008ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007da6:	e010      	b.n	8007dca <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dae:	d10c      	bne.n	8007dca <vTaskStartScheduler+0xbe>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	b672      	cpsid	i
 8007db6:	f383 8811 	msr	BASEPRI, r3
 8007dba:	f3bf 8f6f 	isb	sy
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	b662      	cpsie	i
 8007dc4:	60fb      	str	r3, [r7, #12]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <vTaskStartScheduler+0xbc>
}
 8007dca:	bf00      	nop
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	0800af78 	.word	0x0800af78
 8007dd8:	08008495 	.word	0x08008495
 8007ddc:	20000dc4 	.word	0x20000dc4
 8007de0:	200008cc 	.word	0x200008cc
 8007de4:	2000001c 	.word	0x2000001c
 8007de8:	20000dc0 	.word	0x20000dc0
 8007dec:	20000dac 	.word	0x20000dac
 8007df0:	20000da4 	.word	0x20000da4

08007df4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007df8:	4b04      	ldr	r3, [pc, #16]	; (8007e0c <vTaskSuspendAll+0x18>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	4a03      	ldr	r2, [pc, #12]	; (8007e0c <vTaskSuspendAll+0x18>)
 8007e00:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007e02:	bf00      	nop
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	20000dc8 	.word	0x20000dc8

08007e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e1e:	4b43      	ldr	r3, [pc, #268]	; (8007f2c <xTaskResumeAll+0x11c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10c      	bne.n	8007e40 <xTaskResumeAll+0x30>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	b672      	cpsid	i
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	b662      	cpsie	i
 8007e3a:	603b      	str	r3, [r7, #0]
}
 8007e3c:	bf00      	nop
 8007e3e:	e7fe      	b.n	8007e3e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e40:	f001 f954 	bl	80090ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e44:	4b39      	ldr	r3, [pc, #228]	; (8007f2c <xTaskResumeAll+0x11c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	4a38      	ldr	r2, [pc, #224]	; (8007f2c <xTaskResumeAll+0x11c>)
 8007e4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e4e:	4b37      	ldr	r3, [pc, #220]	; (8007f2c <xTaskResumeAll+0x11c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d162      	bne.n	8007f1c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e56:	4b36      	ldr	r3, [pc, #216]	; (8007f30 <xTaskResumeAll+0x120>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d05e      	beq.n	8007f1c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e5e:	e02f      	b.n	8007ec0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e60:	4b34      	ldr	r3, [pc, #208]	; (8007f34 <xTaskResumeAll+0x124>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3318      	adds	r3, #24
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7ff f81f 	bl	8006eb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3304      	adds	r3, #4
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff f81a 	bl	8006eb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e80:	4b2d      	ldr	r3, [pc, #180]	; (8007f38 <xTaskResumeAll+0x128>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d903      	bls.n	8007e90 <xTaskResumeAll+0x80>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	4a2a      	ldr	r2, [pc, #168]	; (8007f38 <xTaskResumeAll+0x128>)
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4a27      	ldr	r2, [pc, #156]	; (8007f3c <xTaskResumeAll+0x12c>)
 8007e9e:	441a      	add	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	f7fe ffa5 	bl	8006df6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb0:	4b23      	ldr	r3, [pc, #140]	; (8007f40 <xTaskResumeAll+0x130>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d302      	bcc.n	8007ec0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8007eba:	4b22      	ldr	r3, [pc, #136]	; (8007f44 <xTaskResumeAll+0x134>)
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ec0:	4b1c      	ldr	r3, [pc, #112]	; (8007f34 <xTaskResumeAll+0x124>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1cb      	bne.n	8007e60 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ece:	f000 fb9f 	bl	8008610 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007ed2:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <xTaskResumeAll+0x138>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d010      	beq.n	8007f00 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ede:	f000 f847 	bl	8007f70 <xTaskIncrementTick>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007ee8:	4b16      	ldr	r3, [pc, #88]	; (8007f44 <xTaskResumeAll+0x134>)
 8007eea:	2201      	movs	r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1f1      	bne.n	8007ede <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8007efa:	4b13      	ldr	r3, [pc, #76]	; (8007f48 <xTaskResumeAll+0x138>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f00:	4b10      	ldr	r3, [pc, #64]	; (8007f44 <xTaskResumeAll+0x134>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d009      	beq.n	8007f1c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f0c:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <xTaskResumeAll+0x13c>)
 8007f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f1c:	f001 f91a 	bl	8009154 <vPortExitCritical>

	return xAlreadyYielded;
 8007f20:	68bb      	ldr	r3, [r7, #8]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000dc8 	.word	0x20000dc8
 8007f30:	20000da0 	.word	0x20000da0
 8007f34:	20000d60 	.word	0x20000d60
 8007f38:	20000da8 	.word	0x20000da8
 8007f3c:	200008d0 	.word	0x200008d0
 8007f40:	200008cc 	.word	0x200008cc
 8007f44:	20000db4 	.word	0x20000db4
 8007f48:	20000db0 	.word	0x20000db0
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f56:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <xTaskGetTickCount+0x1c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f5c:	687b      	ldr	r3, [r7, #4]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	20000da4 	.word	0x20000da4

08007f70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f7a:	4b54      	ldr	r3, [pc, #336]	; (80080cc <xTaskIncrementTick+0x15c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 8091 	bne.w	80080a6 <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f84:	4b52      	ldr	r3, [pc, #328]	; (80080d0 <xTaskIncrementTick+0x160>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f8c:	4a50      	ldr	r2, [pc, #320]	; (80080d0 <xTaskIncrementTick+0x160>)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d122      	bne.n	8007fde <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f98:	4b4e      	ldr	r3, [pc, #312]	; (80080d4 <xTaskIncrementTick+0x164>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00c      	beq.n	8007fbc <xTaskIncrementTick+0x4c>
	__asm volatile
 8007fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa6:	b672      	cpsid	i
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	b662      	cpsie	i
 8007fb6:	603b      	str	r3, [r7, #0]
}
 8007fb8:	bf00      	nop
 8007fba:	e7fe      	b.n	8007fba <xTaskIncrementTick+0x4a>
 8007fbc:	4b45      	ldr	r3, [pc, #276]	; (80080d4 <xTaskIncrementTick+0x164>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	4b45      	ldr	r3, [pc, #276]	; (80080d8 <xTaskIncrementTick+0x168>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a43      	ldr	r2, [pc, #268]	; (80080d4 <xTaskIncrementTick+0x164>)
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	4a43      	ldr	r2, [pc, #268]	; (80080d8 <xTaskIncrementTick+0x168>)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	4b42      	ldr	r3, [pc, #264]	; (80080dc <xTaskIncrementTick+0x16c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	4a41      	ldr	r2, [pc, #260]	; (80080dc <xTaskIncrementTick+0x16c>)
 8007fd8:	6013      	str	r3, [r2, #0]
 8007fda:	f000 fb19 	bl	8008610 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fde:	4b40      	ldr	r3, [pc, #256]	; (80080e0 <xTaskIncrementTick+0x170>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d349      	bcc.n	800807c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fe8:	4b3a      	ldr	r3, [pc, #232]	; (80080d4 <xTaskIncrementTick+0x164>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d104      	bne.n	8007ffc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff2:	4b3b      	ldr	r3, [pc, #236]	; (80080e0 <xTaskIncrementTick+0x170>)
 8007ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff8:	601a      	str	r2, [r3, #0]
					break;
 8007ffa:	e03f      	b.n	800807c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ffc:	4b35      	ldr	r3, [pc, #212]	; (80080d4 <xTaskIncrementTick+0x164>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	429a      	cmp	r2, r3
 8008012:	d203      	bcs.n	800801c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008014:	4a32      	ldr	r2, [pc, #200]	; (80080e0 <xTaskIncrementTick+0x170>)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800801a:	e02f      	b.n	800807c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	3304      	adds	r3, #4
 8008020:	4618      	mov	r0, r3
 8008022:	f7fe ff45 	bl	8006eb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	2b00      	cmp	r3, #0
 800802c:	d004      	beq.n	8008038 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	3318      	adds	r3, #24
 8008032:	4618      	mov	r0, r3
 8008034:	f7fe ff3c 	bl	8006eb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803c:	4b29      	ldr	r3, [pc, #164]	; (80080e4 <xTaskIncrementTick+0x174>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d903      	bls.n	800804c <xTaskIncrementTick+0xdc>
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008048:	4a26      	ldr	r2, [pc, #152]	; (80080e4 <xTaskIncrementTick+0x174>)
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4a23      	ldr	r2, [pc, #140]	; (80080e8 <xTaskIncrementTick+0x178>)
 800805a:	441a      	add	r2, r3
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	3304      	adds	r3, #4
 8008060:	4619      	mov	r1, r3
 8008062:	4610      	mov	r0, r2
 8008064:	f7fe fec7 	bl	8006df6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806c:	4b1f      	ldr	r3, [pc, #124]	; (80080ec <xTaskIncrementTick+0x17c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008072:	429a      	cmp	r2, r3
 8008074:	d3b8      	bcc.n	8007fe8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008076:	2301      	movs	r3, #1
 8008078:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800807a:	e7b5      	b.n	8007fe8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800807c:	4b1b      	ldr	r3, [pc, #108]	; (80080ec <xTaskIncrementTick+0x17c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008082:	4919      	ldr	r1, [pc, #100]	; (80080e8 <xTaskIncrementTick+0x178>)
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	440b      	add	r3, r1
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d901      	bls.n	8008098 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8008094:	2301      	movs	r3, #1
 8008096:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8008098:	4b15      	ldr	r3, [pc, #84]	; (80080f0 <xTaskIncrementTick+0x180>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d109      	bne.n	80080b4 <xTaskIncrementTick+0x144>
			{
				vApplicationTickHook();
 80080a0:	f7fb fb34 	bl	800370c <vApplicationTickHook>
 80080a4:	e006      	b.n	80080b4 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80080a6:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <xTaskIncrementTick+0x180>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3301      	adds	r3, #1
 80080ac:	4a10      	ldr	r2, [pc, #64]	; (80080f0 <xTaskIncrementTick+0x180>)
 80080ae:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80080b0:	f7fb fb2c 	bl	800370c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80080b4:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <xTaskIncrementTick+0x184>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <xTaskIncrementTick+0x150>
		{
			xSwitchRequired = pdTRUE;
 80080bc:	2301      	movs	r3, #1
 80080be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80080c0:	697b      	ldr	r3, [r7, #20]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000dc8 	.word	0x20000dc8
 80080d0:	20000da4 	.word	0x20000da4
 80080d4:	20000d58 	.word	0x20000d58
 80080d8:	20000d5c 	.word	0x20000d5c
 80080dc:	20000db8 	.word	0x20000db8
 80080e0:	20000dc0 	.word	0x20000dc0
 80080e4:	20000da8 	.word	0x20000da8
 80080e8:	200008d0 	.word	0x200008d0
 80080ec:	200008cc 	.word	0x200008cc
 80080f0:	20000db0 	.word	0x20000db0
 80080f4:	20000db4 	.word	0x20000db4

080080f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080fe:	4b3e      	ldr	r3, [pc, #248]	; (80081f8 <vTaskSwitchContext+0x100>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008106:	4b3d      	ldr	r3, [pc, #244]	; (80081fc <vTaskSwitchContext+0x104>)
 8008108:	2201      	movs	r2, #1
 800810a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800810c:	e06f      	b.n	80081ee <vTaskSwitchContext+0xf6>
		xYieldPending = pdFALSE;
 800810e:	4b3b      	ldr	r3, [pc, #236]	; (80081fc <vTaskSwitchContext+0x104>)
 8008110:	2200      	movs	r2, #0
 8008112:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008114:	4b3a      	ldr	r3, [pc, #232]	; (8008200 <vTaskSwitchContext+0x108>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	429a      	cmp	r2, r3
 800812a:	d111      	bne.n	8008150 <vTaskSwitchContext+0x58>
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	3304      	adds	r3, #4
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	429a      	cmp	r2, r3
 8008136:	d10b      	bne.n	8008150 <vTaskSwitchContext+0x58>
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	3308      	adds	r3, #8
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	429a      	cmp	r2, r3
 8008142:	d105      	bne.n	8008150 <vTaskSwitchContext+0x58>
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	330c      	adds	r3, #12
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	429a      	cmp	r2, r3
 800814e:	d008      	beq.n	8008162 <vTaskSwitchContext+0x6a>
 8008150:	4b2b      	ldr	r3, [pc, #172]	; (8008200 <vTaskSwitchContext+0x108>)
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	4b2a      	ldr	r3, [pc, #168]	; (8008200 <vTaskSwitchContext+0x108>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3334      	adds	r3, #52	; 0x34
 800815a:	4619      	mov	r1, r3
 800815c:	4610      	mov	r0, r2
 800815e:	f7fb fadc 	bl	800371a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008162:	4b28      	ldr	r3, [pc, #160]	; (8008204 <vTaskSwitchContext+0x10c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	e012      	b.n	8008190 <vTaskSwitchContext+0x98>
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10c      	bne.n	800818a <vTaskSwitchContext+0x92>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008174:	b672      	cpsid	i
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	b662      	cpsie	i
 8008184:	607b      	str	r3, [r7, #4]
}
 8008186:	bf00      	nop
 8008188:	e7fe      	b.n	8008188 <vTaskSwitchContext+0x90>
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	3b01      	subs	r3, #1
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	491d      	ldr	r1, [pc, #116]	; (8008208 <vTaskSwitchContext+0x110>)
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	4613      	mov	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	440b      	add	r3, r1
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0e2      	beq.n	800816a <vTaskSwitchContext+0x72>
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4a16      	ldr	r2, [pc, #88]	; (8008208 <vTaskSwitchContext+0x110>)
 80081b0:	4413      	add	r3, r2
 80081b2:	60bb      	str	r3, [r7, #8]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	605a      	str	r2, [r3, #4]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3308      	adds	r3, #8
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d104      	bne.n	80081d4 <vTaskSwitchContext+0xdc>
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	605a      	str	r2, [r3, #4]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	4a09      	ldr	r2, [pc, #36]	; (8008200 <vTaskSwitchContext+0x108>)
 80081dc:	6013      	str	r3, [r2, #0]
 80081de:	4a09      	ldr	r2, [pc, #36]	; (8008204 <vTaskSwitchContext+0x10c>)
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081e4:	4b06      	ldr	r3, [pc, #24]	; (8008200 <vTaskSwitchContext+0x108>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3358      	adds	r3, #88	; 0x58
 80081ea:	4a08      	ldr	r2, [pc, #32]	; (800820c <vTaskSwitchContext+0x114>)
 80081ec:	6013      	str	r3, [r2, #0]
}
 80081ee:	bf00      	nop
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000dc8 	.word	0x20000dc8
 80081fc:	20000db4 	.word	0x20000db4
 8008200:	200008cc 	.word	0x200008cc
 8008204:	20000da8 	.word	0x20000da8
 8008208:	200008d0 	.word	0x200008d0
 800820c:	2000001c 	.word	0x2000001c

08008210 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10c      	bne.n	800823a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	b672      	cpsid	i
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	b662      	cpsie	i
 8008234:	60fb      	str	r3, [r7, #12]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800823a:	4b07      	ldr	r3, [pc, #28]	; (8008258 <vTaskPlaceOnEventList+0x48>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3318      	adds	r3, #24
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fe fdfb 	bl	8006e3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008248:	2101      	movs	r1, #1
 800824a:	6838      	ldr	r0, [r7, #0]
 800824c:	f000 fa90 	bl	8008770 <prvAddCurrentTaskToDelayedList>
}
 8008250:	bf00      	nop
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	200008cc 	.word	0x200008cc

0800825c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800825c:	b580      	push	{r7, lr}
 800825e:	b086      	sub	sp, #24
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10c      	bne.n	8008288 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	b672      	cpsid	i
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	b662      	cpsie	i
 8008282:	617b      	str	r3, [r7, #20]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008288:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3318      	adds	r3, #24
 800828e:	4619      	mov	r1, r3
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f7fe fdb0 	bl	8006df6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800829c:	f04f 33ff 	mov.w	r3, #4294967295
 80082a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	68b8      	ldr	r0, [r7, #8]
 80082a6:	f000 fa63 	bl	8008770 <prvAddCurrentTaskToDelayedList>
	}
 80082aa:	bf00      	nop
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	200008cc 	.word	0x200008cc

080082b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10c      	bne.n	80082e8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	b672      	cpsid	i
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	b662      	cpsie	i
 80082e2:	60fb      	str	r3, [r7, #12]
}
 80082e4:	bf00      	nop
 80082e6:	e7fe      	b.n	80082e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	3318      	adds	r3, #24
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe fddf 	bl	8006eb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082f2:	4b1e      	ldr	r3, [pc, #120]	; (800836c <xTaskRemoveFromEventList+0xb4>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d11d      	bne.n	8008336 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	3304      	adds	r3, #4
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fdd6 	bl	8006eb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008308:	4b19      	ldr	r3, [pc, #100]	; (8008370 <xTaskRemoveFromEventList+0xb8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	429a      	cmp	r2, r3
 800830e:	d903      	bls.n	8008318 <xTaskRemoveFromEventList+0x60>
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	4a16      	ldr	r2, [pc, #88]	; (8008370 <xTaskRemoveFromEventList+0xb8>)
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4a13      	ldr	r2, [pc, #76]	; (8008374 <xTaskRemoveFromEventList+0xbc>)
 8008326:	441a      	add	r2, r3
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	3304      	adds	r3, #4
 800832c:	4619      	mov	r1, r3
 800832e:	4610      	mov	r0, r2
 8008330:	f7fe fd61 	bl	8006df6 <vListInsertEnd>
 8008334:	e005      	b.n	8008342 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	3318      	adds	r3, #24
 800833a:	4619      	mov	r1, r3
 800833c:	480e      	ldr	r0, [pc, #56]	; (8008378 <xTaskRemoveFromEventList+0xc0>)
 800833e:	f7fe fd5a 	bl	8006df6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <xTaskRemoveFromEventList+0xc4>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	429a      	cmp	r2, r3
 800834e:	d905      	bls.n	800835c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008350:	2301      	movs	r3, #1
 8008352:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008354:	4b0a      	ldr	r3, [pc, #40]	; (8008380 <xTaskRemoveFromEventList+0xc8>)
 8008356:	2201      	movs	r2, #1
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e001      	b.n	8008360 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008360:	697b      	ldr	r3, [r7, #20]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20000dc8 	.word	0x20000dc8
 8008370:	20000da8 	.word	0x20000da8
 8008374:	200008d0 	.word	0x200008d0
 8008378:	20000d60 	.word	0x20000d60
 800837c:	200008cc 	.word	0x200008cc
 8008380:	20000db4 	.word	0x20000db4

08008384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800838c:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <vTaskInternalSetTimeOutState+0x24>)
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008394:	4b05      	ldr	r3, [pc, #20]	; (80083ac <vTaskInternalSetTimeOutState+0x28>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	605a      	str	r2, [r3, #4]
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	20000db8 	.word	0x20000db8
 80083ac:	20000da4 	.word	0x20000da4

080083b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10c      	bne.n	80083da <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	b672      	cpsid	i
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	b662      	cpsie	i
 80083d4:	613b      	str	r3, [r7, #16]
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10c      	bne.n	80083fa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e4:	b672      	cpsid	i
 80083e6:	f383 8811 	msr	BASEPRI, r3
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	b662      	cpsie	i
 80083f4:	60fb      	str	r3, [r7, #12]
}
 80083f6:	bf00      	nop
 80083f8:	e7fe      	b.n	80083f8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80083fa:	f000 fe77 	bl	80090ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083fe:	4b1d      	ldr	r3, [pc, #116]	; (8008474 <xTaskCheckForTimeOut+0xc4>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	69ba      	ldr	r2, [r7, #24]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008416:	d102      	bne.n	800841e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008418:	2300      	movs	r3, #0
 800841a:	61fb      	str	r3, [r7, #28]
 800841c:	e023      	b.n	8008466 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <xTaskCheckForTimeOut+0xc8>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d007      	beq.n	800843a <xTaskCheckForTimeOut+0x8a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	429a      	cmp	r2, r3
 8008432:	d302      	bcc.n	800843a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008434:	2301      	movs	r3, #1
 8008436:	61fb      	str	r3, [r7, #28]
 8008438:	e015      	b.n	8008466 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	429a      	cmp	r2, r3
 8008442:	d20b      	bcs.n	800845c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	1ad2      	subs	r2, r2, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7ff ff97 	bl	8008384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008456:	2300      	movs	r3, #0
 8008458:	61fb      	str	r3, [r7, #28]
 800845a:	e004      	b.n	8008466 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2200      	movs	r2, #0
 8008460:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008462:	2301      	movs	r3, #1
 8008464:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008466:	f000 fe75 	bl	8009154 <vPortExitCritical>

	return xReturn;
 800846a:	69fb      	ldr	r3, [r7, #28]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3720      	adds	r7, #32
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20000da4 	.word	0x20000da4
 8008478:	20000db8 	.word	0x20000db8

0800847c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008480:	4b03      	ldr	r3, [pc, #12]	; (8008490 <vTaskMissedYield+0x14>)
 8008482:	2201      	movs	r2, #1
 8008484:	601a      	str	r2, [r3, #0]
}
 8008486:	bf00      	nop
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	20000db4 	.word	0x20000db4

08008494 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800849c:	f000 f854 	bl	8008548 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80084a0:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <prvIdleTask+0x2c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d907      	bls.n	80084b8 <prvIdleTask+0x24>
			{
				taskYIELD();
 80084a8:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <prvIdleTask+0x30>)
 80084aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ae:	601a      	str	r2, [r3, #0]
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80084b8:	f7fb f921 	bl	80036fe <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80084bc:	e7ee      	b.n	800849c <prvIdleTask+0x8>
 80084be:	bf00      	nop
 80084c0:	200008d0 	.word	0x200008d0
 80084c4:	e000ed04 	.word	0xe000ed04

080084c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084ce:	2300      	movs	r3, #0
 80084d0:	607b      	str	r3, [r7, #4]
 80084d2:	e00c      	b.n	80084ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4a12      	ldr	r2, [pc, #72]	; (8008528 <prvInitialiseTaskLists+0x60>)
 80084e0:	4413      	add	r3, r2
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe fc5a 	bl	8006d9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3301      	adds	r3, #1
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b37      	cmp	r3, #55	; 0x37
 80084f2:	d9ef      	bls.n	80084d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084f4:	480d      	ldr	r0, [pc, #52]	; (800852c <prvInitialiseTaskLists+0x64>)
 80084f6:	f7fe fc51 	bl	8006d9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084fa:	480d      	ldr	r0, [pc, #52]	; (8008530 <prvInitialiseTaskLists+0x68>)
 80084fc:	f7fe fc4e 	bl	8006d9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008500:	480c      	ldr	r0, [pc, #48]	; (8008534 <prvInitialiseTaskLists+0x6c>)
 8008502:	f7fe fc4b 	bl	8006d9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008506:	480c      	ldr	r0, [pc, #48]	; (8008538 <prvInitialiseTaskLists+0x70>)
 8008508:	f7fe fc48 	bl	8006d9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800850c:	480b      	ldr	r0, [pc, #44]	; (800853c <prvInitialiseTaskLists+0x74>)
 800850e:	f7fe fc45 	bl	8006d9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008512:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <prvInitialiseTaskLists+0x78>)
 8008514:	4a05      	ldr	r2, [pc, #20]	; (800852c <prvInitialiseTaskLists+0x64>)
 8008516:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008518:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <prvInitialiseTaskLists+0x7c>)
 800851a:	4a05      	ldr	r2, [pc, #20]	; (8008530 <prvInitialiseTaskLists+0x68>)
 800851c:	601a      	str	r2, [r3, #0]
}
 800851e:	bf00      	nop
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	200008d0 	.word	0x200008d0
 800852c:	20000d30 	.word	0x20000d30
 8008530:	20000d44 	.word	0x20000d44
 8008534:	20000d60 	.word	0x20000d60
 8008538:	20000d74 	.word	0x20000d74
 800853c:	20000d8c 	.word	0x20000d8c
 8008540:	20000d58 	.word	0x20000d58
 8008544:	20000d5c 	.word	0x20000d5c

08008548 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800854e:	e019      	b.n	8008584 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008550:	f000 fdcc 	bl	80090ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008554:	4b10      	ldr	r3, [pc, #64]	; (8008598 <prvCheckTasksWaitingTermination+0x50>)
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3304      	adds	r3, #4
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe fca5 	bl	8006eb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008566:	4b0d      	ldr	r3, [pc, #52]	; (800859c <prvCheckTasksWaitingTermination+0x54>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3b01      	subs	r3, #1
 800856c:	4a0b      	ldr	r2, [pc, #44]	; (800859c <prvCheckTasksWaitingTermination+0x54>)
 800856e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008570:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <prvCheckTasksWaitingTermination+0x58>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3b01      	subs	r3, #1
 8008576:	4a0a      	ldr	r2, [pc, #40]	; (80085a0 <prvCheckTasksWaitingTermination+0x58>)
 8008578:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800857a:	f000 fdeb 	bl	8009154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f810 	bl	80085a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008584:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <prvCheckTasksWaitingTermination+0x58>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e1      	bne.n	8008550 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	20000d74 	.word	0x20000d74
 800859c:	20000da0 	.word	0x20000da0
 80085a0:	20000d88 	.word	0x20000d88

080085a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3358      	adds	r3, #88	; 0x58
 80085b0:	4618      	mov	r0, r3
 80085b2:	f002 f8b5 	bl	800a720 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d108      	bne.n	80085d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7f8 ffc5 	bl	8001554 <vPortFree>
				vPortFree( pxTCB );
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7f8 ffc2 	bl	8001554 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085d0:	e01a      	b.n	8008608 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d103      	bne.n	80085e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7f8 ffb9 	bl	8001554 <vPortFree>
	}
 80085e2:	e011      	b.n	8008608 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d00c      	beq.n	8008608 <prvDeleteTCB+0x64>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	b672      	cpsid	i
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	b662      	cpsie	i
 8008602:	60fb      	str	r3, [r7, #12]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <prvDeleteTCB+0x62>
	}
 8008608:	bf00      	nop
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008616:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <prvResetNextTaskUnblockTime+0x38>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d104      	bne.n	800862a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008620:	4b0a      	ldr	r3, [pc, #40]	; (800864c <prvResetNextTaskUnblockTime+0x3c>)
 8008622:	f04f 32ff 	mov.w	r2, #4294967295
 8008626:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008628:	e008      	b.n	800863c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800862a:	4b07      	ldr	r3, [pc, #28]	; (8008648 <prvResetNextTaskUnblockTime+0x38>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	4a04      	ldr	r2, [pc, #16]	; (800864c <prvResetNextTaskUnblockTime+0x3c>)
 800863a:	6013      	str	r3, [r2, #0]
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	20000d58 	.word	0x20000d58
 800864c:	20000dc0 	.word	0x20000dc0

08008650 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008656:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <xTaskGetSchedulerState+0x34>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d102      	bne.n	8008664 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800865e:	2301      	movs	r3, #1
 8008660:	607b      	str	r3, [r7, #4]
 8008662:	e008      	b.n	8008676 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008664:	4b08      	ldr	r3, [pc, #32]	; (8008688 <xTaskGetSchedulerState+0x38>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d102      	bne.n	8008672 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800866c:	2302      	movs	r3, #2
 800866e:	607b      	str	r3, [r7, #4]
 8008670:	e001      	b.n	8008676 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008672:	2300      	movs	r3, #0
 8008674:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008676:	687b      	ldr	r3, [r7, #4]
	}
 8008678:	4618      	mov	r0, r3
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	20000dac 	.word	0x20000dac
 8008688:	20000dc8 	.word	0x20000dc8

0800868c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d05a      	beq.n	8008758 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80086a2:	4b30      	ldr	r3, [pc, #192]	; (8008764 <xTaskPriorityDisinherit+0xd8>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d00c      	beq.n	80086c6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	b672      	cpsid	i
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	b662      	cpsie	i
 80086c0:	60fb      	str	r3, [r7, #12]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10c      	bne.n	80086e8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	b672      	cpsid	i
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	b662      	cpsie	i
 80086e2:	60bb      	str	r3, [r7, #8]
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ec:	1e5a      	subs	r2, r3, #1
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d02c      	beq.n	8008758 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008702:	2b00      	cmp	r3, #0
 8008704:	d128      	bne.n	8008758 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	3304      	adds	r3, #4
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fbd0 	bl	8006eb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <xTaskPriorityDisinherit+0xdc>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	429a      	cmp	r2, r3
 800872e:	d903      	bls.n	8008738 <xTaskPriorityDisinherit+0xac>
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008734:	4a0c      	ldr	r2, [pc, #48]	; (8008768 <xTaskPriorityDisinherit+0xdc>)
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4a09      	ldr	r2, [pc, #36]	; (800876c <xTaskPriorityDisinherit+0xe0>)
 8008746:	441a      	add	r2, r3
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	3304      	adds	r3, #4
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f7fe fb51 	bl	8006df6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008754:	2301      	movs	r3, #1
 8008756:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008758:	697b      	ldr	r3, [r7, #20]
	}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	200008cc 	.word	0x200008cc
 8008768:	20000da8 	.word	0x20000da8
 800876c:	200008d0 	.word	0x200008d0

08008770 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800877a:	4b21      	ldr	r3, [pc, #132]	; (8008800 <prvAddCurrentTaskToDelayedList+0x90>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008780:	4b20      	ldr	r3, [pc, #128]	; (8008804 <prvAddCurrentTaskToDelayedList+0x94>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3304      	adds	r3, #4
 8008786:	4618      	mov	r0, r3
 8008788:	f7fe fb92 	bl	8006eb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008792:	d10a      	bne.n	80087aa <prvAddCurrentTaskToDelayedList+0x3a>
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d007      	beq.n	80087aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800879a:	4b1a      	ldr	r3, [pc, #104]	; (8008804 <prvAddCurrentTaskToDelayedList+0x94>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3304      	adds	r3, #4
 80087a0:	4619      	mov	r1, r3
 80087a2:	4819      	ldr	r0, [pc, #100]	; (8008808 <prvAddCurrentTaskToDelayedList+0x98>)
 80087a4:	f7fe fb27 	bl	8006df6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087a8:	e026      	b.n	80087f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4413      	add	r3, r2
 80087b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087b2:	4b14      	ldr	r3, [pc, #80]	; (8008804 <prvAddCurrentTaskToDelayedList+0x94>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d209      	bcs.n	80087d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087c2:	4b12      	ldr	r3, [pc, #72]	; (800880c <prvAddCurrentTaskToDelayedList+0x9c>)
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	4b0f      	ldr	r3, [pc, #60]	; (8008804 <prvAddCurrentTaskToDelayedList+0x94>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3304      	adds	r3, #4
 80087cc:	4619      	mov	r1, r3
 80087ce:	4610      	mov	r0, r2
 80087d0:	f7fe fb35 	bl	8006e3e <vListInsert>
}
 80087d4:	e010      	b.n	80087f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087d6:	4b0e      	ldr	r3, [pc, #56]	; (8008810 <prvAddCurrentTaskToDelayedList+0xa0>)
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <prvAddCurrentTaskToDelayedList+0x94>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3304      	adds	r3, #4
 80087e0:	4619      	mov	r1, r3
 80087e2:	4610      	mov	r0, r2
 80087e4:	f7fe fb2b 	bl	8006e3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087e8:	4b0a      	ldr	r3, [pc, #40]	; (8008814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d202      	bcs.n	80087f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80087f2:	4a08      	ldr	r2, [pc, #32]	; (8008814 <prvAddCurrentTaskToDelayedList+0xa4>)
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	6013      	str	r3, [r2, #0]
}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20000da4 	.word	0x20000da4
 8008804:	200008cc 	.word	0x200008cc
 8008808:	20000d8c 	.word	0x20000d8c
 800880c:	20000d5c 	.word	0x20000d5c
 8008810:	20000d58 	.word	0x20000d58
 8008814:	20000dc0 	.word	0x20000dc0

08008818 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08a      	sub	sp, #40	; 0x28
 800881c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800881e:	2300      	movs	r3, #0
 8008820:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008822:	f000 fb15 	bl	8008e50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008826:	4b1d      	ldr	r3, [pc, #116]	; (800889c <xTimerCreateTimerTask+0x84>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d021      	beq.n	8008872 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008832:	2300      	movs	r3, #0
 8008834:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008836:	1d3a      	adds	r2, r7, #4
 8008838:	f107 0108 	add.w	r1, r7, #8
 800883c:	f107 030c 	add.w	r3, r7, #12
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe fa91 	bl	8006d68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	9202      	str	r2, [sp, #8]
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	2302      	movs	r3, #2
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	2300      	movs	r3, #0
 8008856:	460a      	mov	r2, r1
 8008858:	4911      	ldr	r1, [pc, #68]	; (80088a0 <xTimerCreateTimerTask+0x88>)
 800885a:	4812      	ldr	r0, [pc, #72]	; (80088a4 <xTimerCreateTimerTask+0x8c>)
 800885c:	f7ff f85c 	bl	8007918 <xTaskCreateStatic>
 8008860:	4603      	mov	r3, r0
 8008862:	4a11      	ldr	r2, [pc, #68]	; (80088a8 <xTimerCreateTimerTask+0x90>)
 8008864:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008866:	4b10      	ldr	r3, [pc, #64]	; (80088a8 <xTimerCreateTimerTask+0x90>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800886e:	2301      	movs	r3, #1
 8008870:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10c      	bne.n	8008892 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	b672      	cpsid	i
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	b662      	cpsie	i
 800888c:	613b      	str	r3, [r7, #16]
}
 800888e:	bf00      	nop
 8008890:	e7fe      	b.n	8008890 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008892:	697b      	ldr	r3, [r7, #20]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20000dfc 	.word	0x20000dfc
 80088a0:	0800af80 	.word	0x0800af80
 80088a4:	080089e9 	.word	0x080089e9
 80088a8:	20000e00 	.word	0x20000e00

080088ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	; 0x28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
 80088b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10c      	bne.n	80088de <xTimerGenericCommand+0x32>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c8:	b672      	cpsid	i
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	b662      	cpsie	i
 80088d8:	623b      	str	r3, [r7, #32]
}
 80088da:	bf00      	nop
 80088dc:	e7fe      	b.n	80088dc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80088de:	4b1a      	ldr	r3, [pc, #104]	; (8008948 <xTimerGenericCommand+0x9c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d02a      	beq.n	800893c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b05      	cmp	r3, #5
 80088f6:	dc18      	bgt.n	800892a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088f8:	f7ff feaa 	bl	8008650 <xTaskGetSchedulerState>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d109      	bne.n	8008916 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008902:	4b11      	ldr	r3, [pc, #68]	; (8008948 <xTimerGenericCommand+0x9c>)
 8008904:	6818      	ldr	r0, [r3, #0]
 8008906:	f107 0110 	add.w	r1, r7, #16
 800890a:	2300      	movs	r3, #0
 800890c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890e:	f7fe fc09 	bl	8007124 <xQueueGenericSend>
 8008912:	6278      	str	r0, [r7, #36]	; 0x24
 8008914:	e012      	b.n	800893c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008916:	4b0c      	ldr	r3, [pc, #48]	; (8008948 <xTimerGenericCommand+0x9c>)
 8008918:	6818      	ldr	r0, [r3, #0]
 800891a:	f107 0110 	add.w	r1, r7, #16
 800891e:	2300      	movs	r3, #0
 8008920:	2200      	movs	r2, #0
 8008922:	f7fe fbff 	bl	8007124 <xQueueGenericSend>
 8008926:	6278      	str	r0, [r7, #36]	; 0x24
 8008928:	e008      	b.n	800893c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800892a:	4b07      	ldr	r3, [pc, #28]	; (8008948 <xTimerGenericCommand+0x9c>)
 800892c:	6818      	ldr	r0, [r3, #0]
 800892e:	f107 0110 	add.w	r1, r7, #16
 8008932:	2300      	movs	r3, #0
 8008934:	683a      	ldr	r2, [r7, #0]
 8008936:	f7fe fcfb 	bl	8007330 <xQueueGenericSendFromISR>
 800893a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800893e:	4618      	mov	r0, r3
 8008940:	3728      	adds	r7, #40	; 0x28
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20000dfc 	.word	0x20000dfc

0800894c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af02      	add	r7, sp, #8
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008956:	4b23      	ldr	r3, [pc, #140]	; (80089e4 <prvProcessExpiredTimer+0x98>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	3304      	adds	r3, #4
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe faa3 	bl	8006eb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008970:	f003 0304 	and.w	r3, r3, #4
 8008974:	2b00      	cmp	r3, #0
 8008976:	d024      	beq.n	80089c2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	699a      	ldr	r2, [r3, #24]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	18d1      	adds	r1, r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	6978      	ldr	r0, [r7, #20]
 8008986:	f000 f8d3 	bl	8008b30 <prvInsertTimerInActiveList>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d021      	beq.n	80089d4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008990:	2300      	movs	r3, #0
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	2300      	movs	r3, #0
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	2100      	movs	r1, #0
 800899a:	6978      	ldr	r0, [r7, #20]
 800899c:	f7ff ff86 	bl	80088ac <xTimerGenericCommand>
 80089a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d115      	bne.n	80089d4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	b672      	cpsid	i
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	b662      	cpsie	i
 80089bc:	60fb      	str	r3, [r7, #12]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089c8:	f023 0301 	bic.w	r3, r3, #1
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	6a1b      	ldr	r3, [r3, #32]
 80089d8:	6978      	ldr	r0, [r7, #20]
 80089da:	4798      	blx	r3
}
 80089dc:	bf00      	nop
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20000df4 	.word	0x20000df4

080089e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80089f0:	f107 0308 	add.w	r3, r7, #8
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 f857 	bl	8008aa8 <prvGetNextExpireTime>
 80089fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4619      	mov	r1, r3
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 f803 	bl	8008a0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008a06:	f000 f8d5 	bl	8008bb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008a0a:	e7f1      	b.n	80089f0 <prvTimerTask+0x8>

08008a0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008a16:	f7ff f9ed 	bl	8007df4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a1a:	f107 0308 	add.w	r3, r7, #8
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 f866 	bl	8008af0 <prvSampleTimeNow>
 8008a24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d130      	bne.n	8008a8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <prvProcessTimerOrBlockTask+0x3c>
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d806      	bhi.n	8008a48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008a3a:	f7ff f9e9 	bl	8007e10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008a3e:	68f9      	ldr	r1, [r7, #12]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff ff83 	bl	800894c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008a46:	e024      	b.n	8008a92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d008      	beq.n	8008a60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a4e:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <prvProcessTimerOrBlockTask+0x90>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <prvProcessTimerOrBlockTask+0x50>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e000      	b.n	8008a5e <prvProcessTimerOrBlockTask+0x52>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a60:	4b0f      	ldr	r3, [pc, #60]	; (8008aa0 <prvProcessTimerOrBlockTask+0x94>)
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	f7fe ff1f 	bl	80078b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008a72:	f7ff f9cd 	bl	8007e10 <xTaskResumeAll>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a7c:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <prvProcessTimerOrBlockTask+0x98>)
 8008a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	f3bf 8f6f 	isb	sy
}
 8008a8c:	e001      	b.n	8008a92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a8e:	f7ff f9bf 	bl	8007e10 <xTaskResumeAll>
}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000df8 	.word	0x20000df8
 8008aa0:	20000dfc 	.word	0x20000dfc
 8008aa4:	e000ed04 	.word	0xe000ed04

08008aa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ab0:	4b0e      	ldr	r3, [pc, #56]	; (8008aec <prvGetNextExpireTime+0x44>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <prvGetNextExpireTime+0x16>
 8008aba:	2201      	movs	r2, #1
 8008abc:	e000      	b.n	8008ac0 <prvGetNextExpireTime+0x18>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d105      	bne.n	8008ad8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008acc:	4b07      	ldr	r3, [pc, #28]	; (8008aec <prvGetNextExpireTime+0x44>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	e001      	b.n	8008adc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008adc:	68fb      	ldr	r3, [r7, #12]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	20000df4 	.word	0x20000df4

08008af0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008af8:	f7ff fa2a 	bl	8007f50 <xTaskGetTickCount>
 8008afc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008afe:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <prvSampleTimeNow+0x3c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d205      	bcs.n	8008b14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008b08:	f000 f93c 	bl	8008d84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	e002      	b.n	8008b1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008b1a:	4a04      	ldr	r2, [pc, #16]	; (8008b2c <prvSampleTimeNow+0x3c>)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008b20:	68fb      	ldr	r3, [r7, #12]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000e04 	.word	0x20000e04

08008b30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d812      	bhi.n	8008b7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	1ad2      	subs	r2, r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d302      	bcc.n	8008b6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008b64:	2301      	movs	r3, #1
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	e01b      	b.n	8008ba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008b6a:	4b10      	ldr	r3, [pc, #64]	; (8008bac <prvInsertTimerInActiveList+0x7c>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3304      	adds	r3, #4
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f7fe f962 	bl	8006e3e <vListInsert>
 8008b7a:	e012      	b.n	8008ba2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d206      	bcs.n	8008b92 <prvInsertTimerInActiveList+0x62>
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d302      	bcc.n	8008b92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	e007      	b.n	8008ba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b92:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <prvInsertTimerInActiveList+0x80>)
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f7fe f94e 	bl	8006e3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ba2:	697b      	ldr	r3, [r7, #20]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20000df8 	.word	0x20000df8
 8008bb0:	20000df4 	.word	0x20000df4

08008bb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08e      	sub	sp, #56	; 0x38
 8008bb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bba:	e0d0      	b.n	8008d5e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	da1a      	bge.n	8008bf8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008bc2:	1d3b      	adds	r3, r7, #4
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10c      	bne.n	8008be8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	b672      	cpsid	i
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	b662      	cpsie	i
 8008be2:	61fb      	str	r3, [r7, #28]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bee:	6850      	ldr	r0, [r2, #4]
 8008bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bf2:	6892      	ldr	r2, [r2, #8]
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f2c0 80ae 	blt.w	8008d5c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	3304      	adds	r3, #4
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fe f94d 	bl	8006eb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008c16:	463b      	mov	r3, r7
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7ff ff69 	bl	8008af0 <prvSampleTimeNow>
 8008c1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b09      	cmp	r3, #9
 8008c24:	f200 809b 	bhi.w	8008d5e <prvProcessReceivedCommands+0x1aa>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <prvProcessReceivedCommands+0x7c>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c59 	.word	0x08008c59
 8008c34:	08008c59 	.word	0x08008c59
 8008c38:	08008c59 	.word	0x08008c59
 8008c3c:	08008cd1 	.word	0x08008cd1
 8008c40:	08008ce5 	.word	0x08008ce5
 8008c44:	08008d33 	.word	0x08008d33
 8008c48:	08008c59 	.word	0x08008c59
 8008c4c:	08008c59 	.word	0x08008c59
 8008c50:	08008cd1 	.word	0x08008cd1
 8008c54:	08008ce5 	.word	0x08008ce5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c5e:	f043 0301 	orr.w	r3, r3, #1
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	18d1      	adds	r1, r2, r3
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c78:	f7ff ff5a 	bl	8008b30 <prvInsertTimerInActiveList>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d06d      	beq.n	8008d5e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	6a1b      	ldr	r3, [r3, #32]
 8008c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d062      	beq.n	8008d5e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	441a      	add	r2, r3
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008caa:	f7ff fdff 	bl	80088ac <xTimerGenericCommand>
 8008cae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d153      	bne.n	8008d5e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cba:	b672      	cpsid	i
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	b662      	cpsie	i
 8008cca:	61bb      	str	r3, [r7, #24]
}
 8008ccc:	bf00      	nop
 8008cce:	e7fe      	b.n	8008cce <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cd6:	f023 0301 	bic.w	r3, r3, #1
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008ce2:	e03c      	b.n	8008d5e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cea:	f043 0301 	orr.w	r3, r3, #1
 8008cee:	b2da      	uxtb	r2, r3
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10c      	bne.n	8008d1e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	b672      	cpsid	i
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	b662      	cpsie	i
 8008d18:	617b      	str	r3, [r7, #20]
}
 8008d1a:	bf00      	nop
 8008d1c:	e7fe      	b.n	8008d1c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	699a      	ldr	r2, [r3, #24]
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	18d1      	adds	r1, r2, r3
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d2c:	f7ff ff00 	bl	8008b30 <prvInsertTimerInActiveList>
					break;
 8008d30:	e015      	b.n	8008d5e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d38:	f003 0302 	and.w	r3, r3, #2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d103      	bne.n	8008d48 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d42:	f7f8 fc07 	bl	8001554 <vPortFree>
 8008d46:	e00a      	b.n	8008d5e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d4e:	f023 0301 	bic.w	r3, r3, #1
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008d5a:	e000      	b.n	8008d5e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008d5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d5e:	4b08      	ldr	r3, [pc, #32]	; (8008d80 <prvProcessReceivedCommands+0x1cc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	1d39      	adds	r1, r7, #4
 8008d64:	2200      	movs	r2, #0
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe fb82 	bl	8007470 <xQueueReceive>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f47f af24 	bne.w	8008bbc <prvProcessReceivedCommands+0x8>
	}
}
 8008d74:	bf00      	nop
 8008d76:	bf00      	nop
 8008d78:	3730      	adds	r7, #48	; 0x30
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	20000dfc 	.word	0x20000dfc

08008d84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b088      	sub	sp, #32
 8008d88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d8a:	e04a      	b.n	8008e22 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d8c:	4b2e      	ldr	r3, [pc, #184]	; (8008e48 <prvSwitchTimerLists+0xc4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d96:	4b2c      	ldr	r3, [pc, #176]	; (8008e48 <prvSwitchTimerLists+0xc4>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe f883 	bl	8006eb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d030      	beq.n	8008e22 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d90e      	bls.n	8008df0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008dde:	4b1a      	ldr	r3, [pc, #104]	; (8008e48 <prvSwitchTimerLists+0xc4>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3304      	adds	r3, #4
 8008de6:	4619      	mov	r1, r3
 8008de8:	4610      	mov	r0, r2
 8008dea:	f7fe f828 	bl	8006e3e <vListInsert>
 8008dee:	e018      	b.n	8008e22 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008df0:	2300      	movs	r3, #0
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	2300      	movs	r3, #0
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	2100      	movs	r1, #0
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f7ff fd56 	bl	80088ac <xTimerGenericCommand>
 8008e00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10c      	bne.n	8008e22 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	b672      	cpsid	i
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	b662      	cpsie	i
 8008e1c:	603b      	str	r3, [r7, #0]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e22:	4b09      	ldr	r3, [pc, #36]	; (8008e48 <prvSwitchTimerLists+0xc4>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1af      	bne.n	8008d8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008e2c:	4b06      	ldr	r3, [pc, #24]	; (8008e48 <prvSwitchTimerLists+0xc4>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008e32:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <prvSwitchTimerLists+0xc8>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a04      	ldr	r2, [pc, #16]	; (8008e48 <prvSwitchTimerLists+0xc4>)
 8008e38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008e3a:	4a04      	ldr	r2, [pc, #16]	; (8008e4c <prvSwitchTimerLists+0xc8>)
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	6013      	str	r3, [r2, #0]
}
 8008e40:	bf00      	nop
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	20000df4 	.word	0x20000df4
 8008e4c:	20000df8 	.word	0x20000df8

08008e50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008e56:	f000 f949 	bl	80090ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008e5a:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <prvCheckForValidListAndQueue+0x60>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d120      	bne.n	8008ea4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008e62:	4814      	ldr	r0, [pc, #80]	; (8008eb4 <prvCheckForValidListAndQueue+0x64>)
 8008e64:	f7fd ff9a 	bl	8006d9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008e68:	4813      	ldr	r0, [pc, #76]	; (8008eb8 <prvCheckForValidListAndQueue+0x68>)
 8008e6a:	f7fd ff97 	bl	8006d9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <prvCheckForValidListAndQueue+0x6c>)
 8008e70:	4a10      	ldr	r2, [pc, #64]	; (8008eb4 <prvCheckForValidListAndQueue+0x64>)
 8008e72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008e74:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <prvCheckForValidListAndQueue+0x70>)
 8008e76:	4a10      	ldr	r2, [pc, #64]	; (8008eb8 <prvCheckForValidListAndQueue+0x68>)
 8008e78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <prvCheckForValidListAndQueue+0x74>)
 8008e80:	4a11      	ldr	r2, [pc, #68]	; (8008ec8 <prvCheckForValidListAndQueue+0x78>)
 8008e82:	2110      	movs	r1, #16
 8008e84:	200a      	movs	r0, #10
 8008e86:	f7fe f8a7 	bl	8006fd8 <xQueueGenericCreateStatic>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	4a08      	ldr	r2, [pc, #32]	; (8008eb0 <prvCheckForValidListAndQueue+0x60>)
 8008e8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e90:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <prvCheckForValidListAndQueue+0x60>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e98:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <prvCheckForValidListAndQueue+0x60>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	490b      	ldr	r1, [pc, #44]	; (8008ecc <prvCheckForValidListAndQueue+0x7c>)
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fcdc 	bl	800785c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ea4:	f000 f956 	bl	8009154 <vPortExitCritical>
}
 8008ea8:	bf00      	nop
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	20000dfc 	.word	0x20000dfc
 8008eb4:	20000dcc 	.word	0x20000dcc
 8008eb8:	20000de0 	.word	0x20000de0
 8008ebc:	20000df4 	.word	0x20000df4
 8008ec0:	20000df8 	.word	0x20000df8
 8008ec4:	20000ea8 	.word	0x20000ea8
 8008ec8:	20000e08 	.word	0x20000e08
 8008ecc:	0800af88 	.word	0x0800af88

08008ed0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3b04      	subs	r3, #4
 8008ee0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3b04      	subs	r3, #4
 8008eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f023 0201 	bic.w	r2, r3, #1
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3b04      	subs	r3, #4
 8008efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f00:	4a0c      	ldr	r2, [pc, #48]	; (8008f34 <pxPortInitialiseStack+0x64>)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3b14      	subs	r3, #20
 8008f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3b04      	subs	r3, #4
 8008f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f06f 0202 	mvn.w	r2, #2
 8008f1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3b20      	subs	r3, #32
 8008f24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f26:	68fb      	ldr	r3, [r7, #12]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr
 8008f34:	08008f39 	.word	0x08008f39

08008f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f42:	4b14      	ldr	r3, [pc, #80]	; (8008f94 <prvTaskExitError+0x5c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4a:	d00c      	beq.n	8008f66 <prvTaskExitError+0x2e>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	b672      	cpsid	i
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	b662      	cpsie	i
 8008f60:	60fb      	str	r3, [r7, #12]
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <prvTaskExitError+0x2c>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	b672      	cpsid	i
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	b662      	cpsie	i
 8008f7a:	60bb      	str	r3, [r7, #8]
}
 8008f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f7e:	bf00      	nop
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d0fc      	beq.n	8008f80 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f86:	bf00      	nop
 8008f88:	bf00      	nop
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	20000010 	.word	0x20000010
	...

08008fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <pxCurrentTCBConst2>)
 8008fa2:	6819      	ldr	r1, [r3, #0]
 8008fa4:	6808      	ldr	r0, [r1, #0]
 8008fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008faa:	f380 8809 	msr	PSP, r0
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f04f 0000 	mov.w	r0, #0
 8008fb6:	f380 8811 	msr	BASEPRI, r0
 8008fba:	4770      	bx	lr
 8008fbc:	f3af 8000 	nop.w

08008fc0 <pxCurrentTCBConst2>:
 8008fc0:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop

08008fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008fc8:	4808      	ldr	r0, [pc, #32]	; (8008fec <prvPortStartFirstTask+0x24>)
 8008fca:	6800      	ldr	r0, [r0, #0]
 8008fcc:	6800      	ldr	r0, [r0, #0]
 8008fce:	f380 8808 	msr	MSP, r0
 8008fd2:	f04f 0000 	mov.w	r0, #0
 8008fd6:	f380 8814 	msr	CONTROL, r0
 8008fda:	b662      	cpsie	i
 8008fdc:	b661      	cpsie	f
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	df00      	svc	0
 8008fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008fea:	bf00      	nop
 8008fec:	e000ed08 	.word	0xe000ed08

08008ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ff6:	4b37      	ldr	r3, [pc, #220]	; (80090d4 <xPortStartScheduler+0xe4>)
 8008ff8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	22ff      	movs	r2, #255	; 0xff
 8009006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	b2db      	uxtb	r3, r3
 800900e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009010:	78fb      	ldrb	r3, [r7, #3]
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009018:	b2da      	uxtb	r2, r3
 800901a:	4b2f      	ldr	r3, [pc, #188]	; (80090d8 <xPortStartScheduler+0xe8>)
 800901c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800901e:	4b2f      	ldr	r3, [pc, #188]	; (80090dc <xPortStartScheduler+0xec>)
 8009020:	2207      	movs	r2, #7
 8009022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009024:	e009      	b.n	800903a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009026:	4b2d      	ldr	r3, [pc, #180]	; (80090dc <xPortStartScheduler+0xec>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3b01      	subs	r3, #1
 800902c:	4a2b      	ldr	r2, [pc, #172]	; (80090dc <xPortStartScheduler+0xec>)
 800902e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	b2db      	uxtb	r3, r3
 8009038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009042:	2b80      	cmp	r3, #128	; 0x80
 8009044:	d0ef      	beq.n	8009026 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009046:	4b25      	ldr	r3, [pc, #148]	; (80090dc <xPortStartScheduler+0xec>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f1c3 0307 	rsb	r3, r3, #7
 800904e:	2b04      	cmp	r3, #4
 8009050:	d00c      	beq.n	800906c <xPortStartScheduler+0x7c>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	b672      	cpsid	i
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	b662      	cpsie	i
 8009066:	60bb      	str	r3, [r7, #8]
}
 8009068:	bf00      	nop
 800906a:	e7fe      	b.n	800906a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800906c:	4b1b      	ldr	r3, [pc, #108]	; (80090dc <xPortStartScheduler+0xec>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	021b      	lsls	r3, r3, #8
 8009072:	4a1a      	ldr	r2, [pc, #104]	; (80090dc <xPortStartScheduler+0xec>)
 8009074:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009076:	4b19      	ldr	r3, [pc, #100]	; (80090dc <xPortStartScheduler+0xec>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800907e:	4a17      	ldr	r2, [pc, #92]	; (80090dc <xPortStartScheduler+0xec>)
 8009080:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	b2da      	uxtb	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800908a:	4b15      	ldr	r3, [pc, #84]	; (80090e0 <xPortStartScheduler+0xf0>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a14      	ldr	r2, [pc, #80]	; (80090e0 <xPortStartScheduler+0xf0>)
 8009090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009094:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009096:	4b12      	ldr	r3, [pc, #72]	; (80090e0 <xPortStartScheduler+0xf0>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a11      	ldr	r2, [pc, #68]	; (80090e0 <xPortStartScheduler+0xf0>)
 800909c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80090a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80090a2:	f000 f8dd 	bl	8009260 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80090a6:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <xPortStartScheduler+0xf4>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80090ac:	f000 f8fc 	bl	80092a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80090b0:	4b0d      	ldr	r3, [pc, #52]	; (80090e8 <xPortStartScheduler+0xf8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a0c      	ldr	r2, [pc, #48]	; (80090e8 <xPortStartScheduler+0xf8>)
 80090b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80090ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80090bc:	f7ff ff84 	bl	8008fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80090c0:	f7ff f81a 	bl	80080f8 <vTaskSwitchContext>
	prvTaskExitError();
 80090c4:	f7ff ff38 	bl	8008f38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	e000e400 	.word	0xe000e400
 80090d8:	20000ef8 	.word	0x20000ef8
 80090dc:	20000efc 	.word	0x20000efc
 80090e0:	e000ed20 	.word	0xe000ed20
 80090e4:	20000010 	.word	0x20000010
 80090e8:	e000ef34 	.word	0xe000ef34

080090ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	b672      	cpsid	i
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	b662      	cpsie	i
 8009106:	607b      	str	r3, [r7, #4]
}
 8009108:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800910a:	4b10      	ldr	r3, [pc, #64]	; (800914c <vPortEnterCritical+0x60>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3301      	adds	r3, #1
 8009110:	4a0e      	ldr	r2, [pc, #56]	; (800914c <vPortEnterCritical+0x60>)
 8009112:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009114:	4b0d      	ldr	r3, [pc, #52]	; (800914c <vPortEnterCritical+0x60>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d111      	bne.n	8009140 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800911c:	4b0c      	ldr	r3, [pc, #48]	; (8009150 <vPortEnterCritical+0x64>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	b2db      	uxtb	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00c      	beq.n	8009140 <vPortEnterCritical+0x54>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	b672      	cpsid	i
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	b662      	cpsie	i
 800913a:	603b      	str	r3, [r7, #0]
}
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <vPortEnterCritical+0x52>
	}
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	20000010 	.word	0x20000010
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800915a:	4b13      	ldr	r3, [pc, #76]	; (80091a8 <vPortExitCritical+0x54>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10c      	bne.n	800917c <vPortExitCritical+0x28>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	b672      	cpsid	i
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	b662      	cpsie	i
 8009176:	607b      	str	r3, [r7, #4]
}
 8009178:	bf00      	nop
 800917a:	e7fe      	b.n	800917a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800917c:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <vPortExitCritical+0x54>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3b01      	subs	r3, #1
 8009182:	4a09      	ldr	r2, [pc, #36]	; (80091a8 <vPortExitCritical+0x54>)
 8009184:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009186:	4b08      	ldr	r3, [pc, #32]	; (80091a8 <vPortExitCritical+0x54>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d105      	bne.n	800919a <vPortExitCritical+0x46>
 800918e:	2300      	movs	r3, #0
 8009190:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	f383 8811 	msr	BASEPRI, r3
}
 8009198:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800919a:	bf00      	nop
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	20000010 	.word	0x20000010
 80091ac:	00000000 	.word	0x00000000

080091b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80091b0:	f3ef 8009 	mrs	r0, PSP
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	4b15      	ldr	r3, [pc, #84]	; (8009210 <pxCurrentTCBConst>)
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	f01e 0f10 	tst.w	lr, #16
 80091c0:	bf08      	it	eq
 80091c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80091c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ca:	6010      	str	r0, [r2, #0]
 80091cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80091d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80091d4:	b672      	cpsid	i
 80091d6:	f380 8811 	msr	BASEPRI, r0
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	b662      	cpsie	i
 80091e4:	f7fe ff88 	bl	80080f8 <vTaskSwitchContext>
 80091e8:	f04f 0000 	mov.w	r0, #0
 80091ec:	f380 8811 	msr	BASEPRI, r0
 80091f0:	bc09      	pop	{r0, r3}
 80091f2:	6819      	ldr	r1, [r3, #0]
 80091f4:	6808      	ldr	r0, [r1, #0]
 80091f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fa:	f01e 0f10 	tst.w	lr, #16
 80091fe:	bf08      	it	eq
 8009200:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009204:	f380 8809 	msr	PSP, r0
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop

08009210 <pxCurrentTCBConst>:
 8009210:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop

08009218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	b672      	cpsid	i
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	b662      	cpsie	i
 8009232:	607b      	str	r3, [r7, #4]
}
 8009234:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009236:	f7fe fe9b 	bl	8007f70 <xTaskIncrementTick>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009240:	4b06      	ldr	r3, [pc, #24]	; (800925c <SysTick_Handler+0x44>)
 8009242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	2300      	movs	r3, #0
 800924a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	f383 8811 	msr	BASEPRI, r3
}
 8009252:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009254:	bf00      	nop
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	e000ed04 	.word	0xe000ed04

08009260 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009260:	b480      	push	{r7}
 8009262:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009264:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <vPortSetupTimerInterrupt+0x34>)
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800926a:	4b0b      	ldr	r3, [pc, #44]	; (8009298 <vPortSetupTimerInterrupt+0x38>)
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009270:	4b0a      	ldr	r3, [pc, #40]	; (800929c <vPortSetupTimerInterrupt+0x3c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a0a      	ldr	r2, [pc, #40]	; (80092a0 <vPortSetupTimerInterrupt+0x40>)
 8009276:	fba2 2303 	umull	r2, r3, r2, r3
 800927a:	099b      	lsrs	r3, r3, #6
 800927c:	4a09      	ldr	r2, [pc, #36]	; (80092a4 <vPortSetupTimerInterrupt+0x44>)
 800927e:	3b01      	subs	r3, #1
 8009280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009282:	4b04      	ldr	r3, [pc, #16]	; (8009294 <vPortSetupTimerInterrupt+0x34>)
 8009284:	2207      	movs	r2, #7
 8009286:	601a      	str	r2, [r3, #0]
}
 8009288:	bf00      	nop
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	e000e010 	.word	0xe000e010
 8009298:	e000e018 	.word	0xe000e018
 800929c:	20000004 	.word	0x20000004
 80092a0:	10624dd3 	.word	0x10624dd3
 80092a4:	e000e014 	.word	0xe000e014

080092a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80092a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80092b8 <vPortEnableVFP+0x10>
 80092ac:	6801      	ldr	r1, [r0, #0]
 80092ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80092b2:	6001      	str	r1, [r0, #0]
 80092b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80092b6:	bf00      	nop
 80092b8:	e000ed88 	.word	0xe000ed88

080092bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80092c2:	f3ef 8305 	mrs	r3, IPSR
 80092c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b0f      	cmp	r3, #15
 80092cc:	d916      	bls.n	80092fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80092ce:	4a19      	ldr	r2, [pc, #100]	; (8009334 <vPortValidateInterruptPriority+0x78>)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80092d8:	4b17      	ldr	r3, [pc, #92]	; (8009338 <vPortValidateInterruptPriority+0x7c>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	7afa      	ldrb	r2, [r7, #11]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d20c      	bcs.n	80092fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	b672      	cpsid	i
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	b662      	cpsie	i
 80092f6:	607b      	str	r3, [r7, #4]
}
 80092f8:	bf00      	nop
 80092fa:	e7fe      	b.n	80092fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092fc:	4b0f      	ldr	r3, [pc, #60]	; (800933c <vPortValidateInterruptPriority+0x80>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009304:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <vPortValidateInterruptPriority+0x84>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	429a      	cmp	r2, r3
 800930a:	d90c      	bls.n	8009326 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	b672      	cpsid	i
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	b662      	cpsie	i
 8009320:	603b      	str	r3, [r7, #0]
}
 8009322:	bf00      	nop
 8009324:	e7fe      	b.n	8009324 <vPortValidateInterruptPriority+0x68>
	}
 8009326:	bf00      	nop
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	e000e3f0 	.word	0xe000e3f0
 8009338:	20000ef8 	.word	0x20000ef8
 800933c:	e000ed0c 	.word	0xe000ed0c
 8009340:	20000efc 	.word	0x20000efc

08009344 <_ZdlPv>:
 8009344:	f001 b886 	b.w	800a454 <free>

08009348 <_ZdlPvj>:
 8009348:	f7ff bffc 	b.w	8009344 <_ZdlPv>

0800934c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 800934c:	4a1a      	ldr	r2, [pc, #104]	; (80093b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6c>)
 800934e:	6853      	ldr	r3, [r2, #4]
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	f1a0 0408 	sub.w	r4, r0, #8
 8009356:	4616      	mov	r6, r2
 8009358:	b123      	cbz	r3, 8009364 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x18>
 800935a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800935e:	1865      	adds	r5, r4, r1
 8009360:	42ab      	cmp	r3, r5
 8009362:	d903      	bls.n	800936c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x20>
 8009364:	f840 3c04 	str.w	r3, [r0, #-4]
 8009368:	6074      	str	r4, [r6, #4]
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	d106      	bne.n	800937c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 800936e:	e9d3 3500 	ldrd	r3, r5, [r3]
 8009372:	4419      	add	r1, r3
 8009374:	e940 1502 	strd	r1, r5, [r0, #-8]
 8009378:	6054      	str	r4, [r2, #4]
 800937a:	e7f6      	b.n	800936a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 800937c:	3204      	adds	r2, #4
 800937e:	685e      	ldr	r6, [r3, #4]
 8009380:	b14e      	cbz	r6, 8009396 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x4a>
 8009382:	42b5      	cmp	r5, r6
 8009384:	d202      	bcs.n	800938c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x40>
 8009386:	1d1a      	adds	r2, r3, #4
 8009388:	4633      	mov	r3, r6
 800938a:	e7f8      	b.n	800937e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x32>
 800938c:	bf01      	itttt	eq
 800938e:	682e      	ldreq	r6, [r5, #0]
 8009390:	686d      	ldreq	r5, [r5, #4]
 8009392:	605d      	streq	r5, [r3, #4]
 8009394:	1989      	addeq	r1, r1, r6
 8009396:	6813      	ldr	r3, [r2, #0]
 8009398:	681d      	ldr	r5, [r3, #0]
 800939a:	195e      	adds	r6, r3, r5
 800939c:	42b4      	cmp	r4, r6
 800939e:	bf1f      	itttt	ne
 80093a0:	685b      	ldrne	r3, [r3, #4]
 80093a2:	f840 3c04 	strne.w	r3, [r0, #-4]
 80093a6:	6813      	ldrne	r3, [r2, #0]
 80093a8:	f840 1c08 	strne.w	r1, [r0, #-8]
 80093ac:	bf06      	itte	eq
 80093ae:	1949      	addeq	r1, r1, r5
 80093b0:	6019      	streq	r1, [r3, #0]
 80093b2:	605c      	strne	r4, [r3, #4]
 80093b4:	e7d9      	b.n	800936a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 80093b6:	bf00      	nop
 80093b8:	20000f00 	.word	0x20000f00

080093bc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 80093bc:	f100 0308 	add.w	r3, r0, #8
 80093c0:	b530      	push	{r4, r5, lr}
 80093c2:	2b08      	cmp	r3, #8
 80093c4:	4a0e      	ldr	r2, [pc, #56]	; (8009400 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 80093c6:	bf38      	it	cc
 80093c8:	2308      	movcc	r3, #8
 80093ca:	3307      	adds	r3, #7
 80093cc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80093d0:	f023 0307 	bic.w	r3, r3, #7
 80093d4:	b168      	cbz	r0, 80093f2 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x36>
 80093d6:	e9d0 1400 	ldrd	r1, r4, [r0]
 80093da:	428b      	cmp	r3, r1
 80093dc:	d90a      	bls.n	80093f4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x38>
 80093de:	1d02      	adds	r2, r0, #4
 80093e0:	4620      	mov	r0, r4
 80093e2:	e7f7      	b.n	80093d4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x18>
 80093e4:	18c5      	adds	r5, r0, r3
 80093e6:	606c      	str	r4, [r5, #4]
 80093e8:	50c1      	str	r1, [r0, r3]
 80093ea:	6810      	ldr	r0, [r2, #0]
 80093ec:	6003      	str	r3, [r0, #0]
 80093ee:	6015      	str	r5, [r2, #0]
 80093f0:	3008      	adds	r0, #8
 80093f2:	bd30      	pop	{r4, r5, pc}
 80093f4:	1ac9      	subs	r1, r1, r3
 80093f6:	2907      	cmp	r1, #7
 80093f8:	d8f4      	bhi.n	80093e4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x28>
 80093fa:	6014      	str	r4, [r2, #0]
 80093fc:	e7f8      	b.n	80093f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
 80093fe:	bf00      	nop
 8009400:	20000f00 	.word	0x20000f00

08009404 <__cxa_allocate_exception>:
 8009404:	b510      	push	{r4, lr}
 8009406:	f100 0480 	add.w	r4, r0, #128	; 0x80
 800940a:	4620      	mov	r0, r4
 800940c:	f001 f81a 	bl	800a444 <malloc>
 8009410:	4603      	mov	r3, r0
 8009412:	b930      	cbnz	r0, 8009422 <__cxa_allocate_exception+0x1e>
 8009414:	4620      	mov	r0, r4
 8009416:	f7ff ffd1 	bl	80093bc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 800941a:	4603      	mov	r3, r0
 800941c:	b908      	cbnz	r0, 8009422 <__cxa_allocate_exception+0x1e>
 800941e:	f000 fbe3 	bl	8009be8 <_ZSt9terminatev>
 8009422:	2280      	movs	r2, #128	; 0x80
 8009424:	2100      	movs	r1, #0
 8009426:	4618      	mov	r0, r3
 8009428:	f001 f844 	bl	800a4b4 <memset>
 800942c:	3080      	adds	r0, #128	; 0x80
 800942e:	bd10      	pop	{r4, pc}

08009430 <__cxa_free_exception>:
 8009430:	4a06      	ldr	r2, [pc, #24]	; (800944c <__cxa_free_exception+0x1c>)
 8009432:	6893      	ldr	r3, [r2, #8]
 8009434:	3880      	subs	r0, #128	; 0x80
 8009436:	4298      	cmp	r0, r3
 8009438:	d905      	bls.n	8009446 <__cxa_free_exception+0x16>
 800943a:	68d2      	ldr	r2, [r2, #12]
 800943c:	4413      	add	r3, r2
 800943e:	4298      	cmp	r0, r3
 8009440:	d201      	bcs.n	8009446 <__cxa_free_exception+0x16>
 8009442:	f7ff bf83 	b.w	800934c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 8009446:	f001 b805 	b.w	800a454 <free>
 800944a:	bf00      	nop
 800944c:	20000f00 	.word	0x20000f00

08009450 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4c08      	ldr	r4, [pc, #32]	; (8009474 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8009454:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8009458:	4628      	mov	r0, r5
 800945a:	60e5      	str	r5, [r4, #12]
 800945c:	f000 fff2 	bl	800a444 <malloc>
 8009460:	60a0      	str	r0, [r4, #8]
 8009462:	b910      	cbnz	r0, 800946a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8009464:	60e0      	str	r0, [r4, #12]
 8009466:	6060      	str	r0, [r4, #4]
 8009468:	bd38      	pop	{r3, r4, r5, pc}
 800946a:	2300      	movs	r3, #0
 800946c:	6060      	str	r0, [r4, #4]
 800946e:	6005      	str	r5, [r0, #0]
 8009470:	6043      	str	r3, [r0, #4]
 8009472:	e7f9      	b.n	8009468 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8009474:	20000f00 	.word	0x20000f00

08009478 <__cxa_end_cleanup>:
 8009478:	b41e      	push	{r1, r2, r3, r4}
 800947a:	f000 f89c 	bl	80095b6 <__gnu_end_cleanup>
 800947e:	bc1e      	pop	{r1, r2, r3, r4}
 8009480:	f7f7 fdcc 	bl	800101c <_Unwind_Resume>

08009484 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8009484:	7803      	ldrb	r3, [r0, #0]
 8009486:	2b47      	cmp	r3, #71	; 0x47
 8009488:	d117      	bne.n	80094ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800948a:	7843      	ldrb	r3, [r0, #1]
 800948c:	2b4e      	cmp	r3, #78	; 0x4e
 800948e:	d114      	bne.n	80094ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009490:	7883      	ldrb	r3, [r0, #2]
 8009492:	2b55      	cmp	r3, #85	; 0x55
 8009494:	d111      	bne.n	80094ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009496:	78c3      	ldrb	r3, [r0, #3]
 8009498:	2b43      	cmp	r3, #67	; 0x43
 800949a:	d10e      	bne.n	80094ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800949c:	7903      	ldrb	r3, [r0, #4]
 800949e:	2b43      	cmp	r3, #67	; 0x43
 80094a0:	d10b      	bne.n	80094ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80094a2:	7943      	ldrb	r3, [r0, #5]
 80094a4:	2b2b      	cmp	r3, #43	; 0x2b
 80094a6:	d108      	bne.n	80094ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80094a8:	7983      	ldrb	r3, [r0, #6]
 80094aa:	2b2b      	cmp	r3, #43	; 0x2b
 80094ac:	d105      	bne.n	80094ba <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80094ae:	79c0      	ldrb	r0, [r0, #7]
 80094b0:	2801      	cmp	r0, #1
 80094b2:	bf8c      	ite	hi
 80094b4:	2000      	movhi	r0, #0
 80094b6:	2001      	movls	r0, #1
 80094b8:	4770      	bx	lr
 80094ba:	2000      	movs	r0, #0
 80094bc:	4770      	bx	lr
	...

080094c0 <__cxa_type_match>:
 80094c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80094c4:	461d      	mov	r5, r3
 80094c6:	7803      	ldrb	r3, [r0, #0]
 80094c8:	2b47      	cmp	r3, #71	; 0x47
 80094ca:	460e      	mov	r6, r1
 80094cc:	4602      	mov	r2, r0
 80094ce:	79c1      	ldrb	r1, [r0, #7]
 80094d0:	d113      	bne.n	80094fa <__cxa_type_match+0x3a>
 80094d2:	7843      	ldrb	r3, [r0, #1]
 80094d4:	2b4e      	cmp	r3, #78	; 0x4e
 80094d6:	d110      	bne.n	80094fa <__cxa_type_match+0x3a>
 80094d8:	7883      	ldrb	r3, [r0, #2]
 80094da:	2b55      	cmp	r3, #85	; 0x55
 80094dc:	d10d      	bne.n	80094fa <__cxa_type_match+0x3a>
 80094de:	78c3      	ldrb	r3, [r0, #3]
 80094e0:	2b43      	cmp	r3, #67	; 0x43
 80094e2:	d10a      	bne.n	80094fa <__cxa_type_match+0x3a>
 80094e4:	7903      	ldrb	r3, [r0, #4]
 80094e6:	2b46      	cmp	r3, #70	; 0x46
 80094e8:	d107      	bne.n	80094fa <__cxa_type_match+0x3a>
 80094ea:	7943      	ldrb	r3, [r0, #5]
 80094ec:	2b4f      	cmp	r3, #79	; 0x4f
 80094ee:	d104      	bne.n	80094fa <__cxa_type_match+0x3a>
 80094f0:	7983      	ldrb	r3, [r0, #6]
 80094f2:	2b52      	cmp	r3, #82	; 0x52
 80094f4:	d101      	bne.n	80094fa <__cxa_type_match+0x3a>
 80094f6:	2900      	cmp	r1, #0
 80094f8:	d031      	beq.n	800955e <__cxa_type_match+0x9e>
 80094fa:	4610      	mov	r0, r2
 80094fc:	f7ff ffc2 	bl	8009484 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8009500:	f080 0001 	eor.w	r0, r0, #1
 8009504:	b2c0      	uxtb	r0, r0
 8009506:	2300      	movs	r3, #0
 8009508:	2400      	movs	r4, #0
 800950a:	9401      	str	r4, [sp, #4]
 800950c:	bb53      	cbnz	r3, 8009564 <__cxa_type_match+0xa4>
 800950e:	bb58      	cbnz	r0, 8009568 <__cxa_type_match+0xa8>
 8009510:	2901      	cmp	r1, #1
 8009512:	bf0a      	itet	eq
 8009514:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8009518:	f1a2 0320 	subne.w	r3, r2, #32
 800951c:	3b78      	subeq	r3, #120	; 0x78
 800951e:	2901      	cmp	r1, #1
 8009520:	bf08      	it	eq
 8009522:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8009526:	681c      	ldr	r4, [r3, #0]
 8009528:	bf18      	it	ne
 800952a:	3258      	addne	r2, #88	; 0x58
 800952c:	9201      	str	r2, [sp, #4]
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	4620      	mov	r0, r4
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	4798      	blx	r3
 8009536:	b1c8      	cbz	r0, 800956c <__cxa_type_match+0xac>
 8009538:	9b01      	ldr	r3, [sp, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	2702      	movs	r7, #2
 8009540:	6833      	ldr	r3, [r6, #0]
 8009542:	aa01      	add	r2, sp, #4
 8009544:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8009548:	4621      	mov	r1, r4
 800954a:	2301      	movs	r3, #1
 800954c:	4630      	mov	r0, r6
 800954e:	47c0      	blx	r8
 8009550:	b170      	cbz	r0, 8009570 <__cxa_type_match+0xb0>
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	602b      	str	r3, [r5, #0]
 8009556:	4638      	mov	r0, r7
 8009558:	b002      	add	sp, #8
 800955a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955e:	2301      	movs	r3, #1
 8009560:	4608      	mov	r0, r1
 8009562:	e7d1      	b.n	8009508 <__cxa_type_match+0x48>
 8009564:	4c03      	ldr	r4, [pc, #12]	; (8009574 <__cxa_type_match+0xb4>)
 8009566:	e7e2      	b.n	800952e <__cxa_type_match+0x6e>
 8009568:	4c03      	ldr	r4, [pc, #12]	; (8009578 <__cxa_type_match+0xb8>)
 800956a:	e7e0      	b.n	800952e <__cxa_type_match+0x6e>
 800956c:	2701      	movs	r7, #1
 800956e:	e7e7      	b.n	8009540 <__cxa_type_match+0x80>
 8009570:	4607      	mov	r7, r0
 8009572:	e7f0      	b.n	8009556 <__cxa_type_match+0x96>
 8009574:	0800b058 	.word	0x0800b058
 8009578:	0800b060 	.word	0x0800b060

0800957c <__cxa_begin_cleanup>:
 800957c:	b510      	push	{r4, lr}
 800957e:	4604      	mov	r4, r0
 8009580:	f000 f8a0 	bl	80096c4 <__cxa_get_globals>
 8009584:	4602      	mov	r2, r0
 8009586:	4620      	mov	r0, r4
 8009588:	f1a4 0120 	sub.w	r1, r4, #32
 800958c:	f7ff ff7a 	bl	8009484 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8009590:	b160      	cbz	r0, 80095ac <__cxa_begin_cleanup+0x30>
 8009592:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009596:	3301      	adds	r3, #1
 8009598:	2b01      	cmp	r3, #1
 800959a:	f844 3c04 	str.w	r3, [r4, #-4]
 800959e:	d103      	bne.n	80095a8 <__cxa_begin_cleanup+0x2c>
 80095a0:	6893      	ldr	r3, [r2, #8]
 80095a2:	f844 3c08 	str.w	r3, [r4, #-8]
 80095a6:	6091      	str	r1, [r2, #8]
 80095a8:	2001      	movs	r0, #1
 80095aa:	bd10      	pop	{r4, pc}
 80095ac:	6893      	ldr	r3, [r2, #8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0f9      	beq.n	80095a6 <__cxa_begin_cleanup+0x2a>
 80095b2:	f000 fb19 	bl	8009be8 <_ZSt9terminatev>

080095b6 <__gnu_end_cleanup>:
 80095b6:	b510      	push	{r4, lr}
 80095b8:	f000 f884 	bl	80096c4 <__cxa_get_globals>
 80095bc:	6882      	ldr	r2, [r0, #8]
 80095be:	4601      	mov	r1, r0
 80095c0:	b90a      	cbnz	r2, 80095c6 <__gnu_end_cleanup+0x10>
 80095c2:	f000 fb11 	bl	8009be8 <_ZSt9terminatev>
 80095c6:	f102 0420 	add.w	r4, r2, #32
 80095ca:	4620      	mov	r0, r4
 80095cc:	f7ff ff5a 	bl	8009484 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80095d0:	b140      	cbz	r0, 80095e4 <__gnu_end_cleanup+0x2e>
 80095d2:	69d3      	ldr	r3, [r2, #28]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	61d3      	str	r3, [r2, #28]
 80095d8:	b913      	cbnz	r3, 80095e0 <__gnu_end_cleanup+0x2a>
 80095da:	6990      	ldr	r0, [r2, #24]
 80095dc:	6088      	str	r0, [r1, #8]
 80095de:	6193      	str	r3, [r2, #24]
 80095e0:	4620      	mov	r0, r4
 80095e2:	bd10      	pop	{r4, pc}
 80095e4:	6088      	str	r0, [r1, #8]
 80095e6:	e7fb      	b.n	80095e0 <__gnu_end_cleanup+0x2a>

080095e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80095e8:	7803      	ldrb	r3, [r0, #0]
 80095ea:	2b47      	cmp	r3, #71	; 0x47
 80095ec:	d117      	bne.n	800961e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80095ee:	7843      	ldrb	r3, [r0, #1]
 80095f0:	2b4e      	cmp	r3, #78	; 0x4e
 80095f2:	d114      	bne.n	800961e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80095f4:	7883      	ldrb	r3, [r0, #2]
 80095f6:	2b55      	cmp	r3, #85	; 0x55
 80095f8:	d111      	bne.n	800961e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80095fa:	78c3      	ldrb	r3, [r0, #3]
 80095fc:	2b43      	cmp	r3, #67	; 0x43
 80095fe:	d10e      	bne.n	800961e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009600:	7903      	ldrb	r3, [r0, #4]
 8009602:	2b43      	cmp	r3, #67	; 0x43
 8009604:	d10b      	bne.n	800961e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009606:	7943      	ldrb	r3, [r0, #5]
 8009608:	2b2b      	cmp	r3, #43	; 0x2b
 800960a:	d108      	bne.n	800961e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800960c:	7983      	ldrb	r3, [r0, #6]
 800960e:	2b2b      	cmp	r3, #43	; 0x2b
 8009610:	d105      	bne.n	800961e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009612:	79c0      	ldrb	r0, [r0, #7]
 8009614:	2801      	cmp	r0, #1
 8009616:	bf8c      	ite	hi
 8009618:	2000      	movhi	r0, #0
 800961a:	2001      	movls	r0, #1
 800961c:	4770      	bx	lr
 800961e:	2000      	movs	r0, #0
 8009620:	4770      	bx	lr

08009622 <__cxa_begin_catch>:
 8009622:	b538      	push	{r3, r4, r5, lr}
 8009624:	4604      	mov	r4, r0
 8009626:	f000 f84d 	bl	80096c4 <__cxa_get_globals>
 800962a:	6805      	ldr	r5, [r0, #0]
 800962c:	4602      	mov	r2, r0
 800962e:	4620      	mov	r0, r4
 8009630:	f1a4 0120 	sub.w	r1, r4, #32
 8009634:	f7ff ffd8 	bl	80095e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8009638:	b928      	cbnz	r0, 8009646 <__cxa_begin_catch+0x24>
 800963a:	b10d      	cbz	r5, 8009640 <__cxa_begin_catch+0x1e>
 800963c:	f000 fad4 	bl	8009be8 <_ZSt9terminatev>
 8009640:	6011      	str	r1, [r2, #0]
 8009642:	4628      	mov	r0, r5
 8009644:	bd38      	pop	{r3, r4, r5, pc}
 8009646:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	bfb4      	ite	lt
 800964e:	f1c3 0301 	rsblt	r3, r3, #1
 8009652:	3301      	addge	r3, #1
 8009654:	f844 3c0c 	str.w	r3, [r4, #-12]
 8009658:	6853      	ldr	r3, [r2, #4]
 800965a:	428d      	cmp	r5, r1
 800965c:	f103 33ff 	add.w	r3, r3, #4294967295
 8009660:	6053      	str	r3, [r2, #4]
 8009662:	4620      	mov	r0, r4
 8009664:	bf1c      	itt	ne
 8009666:	f844 5c10 	strne.w	r5, [r4, #-16]
 800966a:	6011      	strne	r1, [r2, #0]
 800966c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800966e:	f7f7 f925 	bl	80008bc <_Unwind_Complete>
 8009672:	e7e6      	b.n	8009642 <__cxa_begin_catch+0x20>

08009674 <__cxa_end_catch>:
 8009674:	b510      	push	{r4, lr}
 8009676:	f000 f821 	bl	80096bc <__cxa_get_globals_fast>
 800967a:	6802      	ldr	r2, [r0, #0]
 800967c:	4601      	mov	r1, r0
 800967e:	b19a      	cbz	r2, 80096a8 <__cxa_end_catch+0x34>
 8009680:	f102 0420 	add.w	r4, r2, #32
 8009684:	4620      	mov	r0, r4
 8009686:	f7ff ffaf 	bl	80095e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800968a:	b928      	cbnz	r0, 8009698 <__cxa_end_catch+0x24>
 800968c:	6008      	str	r0, [r1, #0]
 800968e:	4620      	mov	r0, r4
 8009690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009694:	f7f7 b914 	b.w	80008c0 <_Unwind_DeleteException>
 8009698:	6953      	ldr	r3, [r2, #20]
 800969a:	2b00      	cmp	r3, #0
 800969c:	da05      	bge.n	80096aa <__cxa_end_catch+0x36>
 800969e:	3301      	adds	r3, #1
 80096a0:	d101      	bne.n	80096a6 <__cxa_end_catch+0x32>
 80096a2:	6910      	ldr	r0, [r2, #16]
 80096a4:	6008      	str	r0, [r1, #0]
 80096a6:	6153      	str	r3, [r2, #20]
 80096a8:	bd10      	pop	{r4, pc}
 80096aa:	3b01      	subs	r3, #1
 80096ac:	d102      	bne.n	80096b4 <__cxa_end_catch+0x40>
 80096ae:	6913      	ldr	r3, [r2, #16]
 80096b0:	600b      	str	r3, [r1, #0]
 80096b2:	e7ec      	b.n	800968e <__cxa_end_catch+0x1a>
 80096b4:	1c59      	adds	r1, r3, #1
 80096b6:	d1f6      	bne.n	80096a6 <__cxa_end_catch+0x32>
 80096b8:	f000 fa96 	bl	8009be8 <_ZSt9terminatev>

080096bc <__cxa_get_globals_fast>:
 80096bc:	4800      	ldr	r0, [pc, #0]	; (80096c0 <__cxa_get_globals_fast+0x4>)
 80096be:	4770      	bx	lr
 80096c0:	20000f10 	.word	0x20000f10

080096c4 <__cxa_get_globals>:
 80096c4:	4800      	ldr	r0, [pc, #0]	; (80096c8 <__cxa_get_globals+0x4>)
 80096c6:	4770      	bx	lr
 80096c8:	20000f10 	.word	0x20000f10

080096cc <_ZL12read_uleb128PKhPm>:
 80096cc:	b530      	push	{r4, r5, lr}
 80096ce:	2300      	movs	r3, #0
 80096d0:	461a      	mov	r2, r3
 80096d2:	f810 5b01 	ldrb.w	r5, [r0], #1
 80096d6:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 80096da:	4094      	lsls	r4, r2
 80096dc:	4323      	orrs	r3, r4
 80096de:	062c      	lsls	r4, r5, #24
 80096e0:	f102 0207 	add.w	r2, r2, #7
 80096e4:	d4f5      	bmi.n	80096d2 <_ZL12read_uleb128PKhPm+0x6>
 80096e6:	600b      	str	r3, [r1, #0]
 80096e8:	bd30      	pop	{r4, r5, pc}

080096ea <_ZL12read_sleb128PKhPl>:
 80096ea:	b530      	push	{r4, r5, lr}
 80096ec:	2300      	movs	r3, #0
 80096ee:	461a      	mov	r2, r3
 80096f0:	f810 4b01 	ldrb.w	r4, [r0], #1
 80096f4:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 80096f8:	4095      	lsls	r5, r2
 80096fa:	432b      	orrs	r3, r5
 80096fc:	0625      	lsls	r5, r4, #24
 80096fe:	f102 0207 	add.w	r2, r2, #7
 8009702:	d4f5      	bmi.n	80096f0 <_ZL12read_sleb128PKhPl+0x6>
 8009704:	2a1f      	cmp	r2, #31
 8009706:	d806      	bhi.n	8009716 <_ZL12read_sleb128PKhPl+0x2c>
 8009708:	0664      	lsls	r4, r4, #25
 800970a:	bf42      	ittt	mi
 800970c:	f04f 34ff 	movmi.w	r4, #4294967295
 8009710:	fa04 f202 	lslmi.w	r2, r4, r2
 8009714:	4313      	orrmi	r3, r2
 8009716:	600b      	str	r3, [r1, #0]
 8009718:	bd30      	pop	{r4, r5, pc}

0800971a <_ZL28read_encoded_value_with_basehjPKhPj>:
 800971a:	2850      	cmp	r0, #80	; 0x50
 800971c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009720:	4606      	mov	r6, r0
 8009722:	4688      	mov	r8, r1
 8009724:	4615      	mov	r5, r2
 8009726:	461f      	mov	r7, r3
 8009728:	d108      	bne.n	800973c <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 800972a:	3203      	adds	r2, #3
 800972c:	f022 0003 	bic.w	r0, r2, #3
 8009730:	f850 4b04 	ldr.w	r4, [r0], #4
 8009734:	603c      	str	r4, [r7, #0]
 8009736:	b002      	add	sp, #8
 8009738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800973c:	f000 030f 	and.w	r3, r0, #15
 8009740:	2b0c      	cmp	r3, #12
 8009742:	d82e      	bhi.n	80097a2 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8009744:	e8df f003 	tbb	[pc, r3]
 8009748:	251d0725 	.word	0x251d0725
 800974c:	2d2d2d29 	.word	0x2d2d2d29
 8009750:	2521182d 	.word	0x2521182d
 8009754:	29          	.byte	0x29
 8009755:	00          	.byte	0x00
 8009756:	a901      	add	r1, sp, #4
 8009758:	4628      	mov	r0, r5
 800975a:	f7ff ffb7 	bl	80096cc <_ZL12read_uleb128PKhPm>
 800975e:	9c01      	ldr	r4, [sp, #4]
 8009760:	2c00      	cmp	r4, #0
 8009762:	d0e7      	beq.n	8009734 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8009764:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8009768:	2b10      	cmp	r3, #16
 800976a:	bf08      	it	eq
 800976c:	46a8      	moveq	r8, r5
 800976e:	4444      	add	r4, r8
 8009770:	0633      	lsls	r3, r6, #24
 8009772:	bf48      	it	mi
 8009774:	6824      	ldrmi	r4, [r4, #0]
 8009776:	e7dd      	b.n	8009734 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8009778:	a901      	add	r1, sp, #4
 800977a:	4628      	mov	r0, r5
 800977c:	f7ff ffb5 	bl	80096ea <_ZL12read_sleb128PKhPl>
 8009780:	e7ed      	b.n	800975e <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8009782:	4628      	mov	r0, r5
 8009784:	f830 4b02 	ldrh.w	r4, [r0], #2
 8009788:	e7ea      	b.n	8009760 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800978a:	4628      	mov	r0, r5
 800978c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8009790:	e7e6      	b.n	8009760 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8009792:	4628      	mov	r0, r5
 8009794:	f850 4b04 	ldr.w	r4, [r0], #4
 8009798:	e7e2      	b.n	8009760 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800979a:	4628      	mov	r0, r5
 800979c:	f850 4b08 	ldr.w	r4, [r0], #8
 80097a0:	e7de      	b.n	8009760 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80097a2:	f000 fd24 	bl	800a1ee <abort>

080097a6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80097a6:	b508      	push	{r3, lr}
 80097a8:	4603      	mov	r3, r0
 80097aa:	2bff      	cmp	r3, #255	; 0xff
 80097ac:	4608      	mov	r0, r1
 80097ae:	d010      	beq.n	80097d2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 80097b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80097b4:	2a30      	cmp	r2, #48	; 0x30
 80097b6:	d012      	beq.n	80097de <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 80097b8:	d807      	bhi.n	80097ca <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 80097ba:	2a20      	cmp	r2, #32
 80097bc:	d00b      	beq.n	80097d6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 80097be:	d802      	bhi.n	80097c6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 80097c0:	f013 0f60 	tst.w	r3, #96	; 0x60
 80097c4:	d005      	beq.n	80097d2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 80097c6:	f000 fd12 	bl	800a1ee <abort>
 80097ca:	2a40      	cmp	r2, #64	; 0x40
 80097cc:	d00b      	beq.n	80097e6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 80097ce:	2a50      	cmp	r2, #80	; 0x50
 80097d0:	d1f9      	bne.n	80097c6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 80097d2:	2000      	movs	r0, #0
 80097d4:	bd08      	pop	{r3, pc}
 80097d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80097da:	f001 bad6 	b.w	800ad8a <_Unwind_GetTextRelBase>
 80097de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80097e2:	f001 bacf 	b.w	800ad84 <_Unwind_GetDataRelBase>
 80097e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80097ea:	f7f7 bdef 	b.w	80013cc <_Unwind_GetRegionStart>

080097ee <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 80097ee:	b513      	push	{r0, r1, r4, lr}
 80097f0:	460c      	mov	r4, r1
 80097f2:	4601      	mov	r1, r0
 80097f4:	4620      	mov	r0, r4
 80097f6:	e9cd 3200 	strd	r3, r2, [sp]
 80097fa:	f7ff ffd4 	bl	80097a6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80097fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009802:	4601      	mov	r1, r0
 8009804:	4620      	mov	r0, r4
 8009806:	b002      	add	sp, #8
 8009808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800980c:	f7ff bf85 	b.w	800971a <_ZL28read_encoded_value_with_basehjPKhPj>

08009810 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8009810:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009812:	460c      	mov	r4, r1
 8009814:	4615      	mov	r5, r2
 8009816:	4606      	mov	r6, r0
 8009818:	b328      	cbz	r0, 8009866 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800981a:	f7f7 fdd7 	bl	80013cc <_Unwind_GetRegionStart>
 800981e:	4603      	mov	r3, r0
 8009820:	4620      	mov	r0, r4
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009828:	29ff      	cmp	r1, #255	; 0xff
 800982a:	d01e      	beq.n	800986a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 800982c:	4602      	mov	r2, r0
 800982e:	1d2b      	adds	r3, r5, #4
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff ffdc 	bl	80097ee <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8009836:	f810 3b01 	ldrb.w	r3, [r0], #1
 800983a:	752b      	strb	r3, [r5, #20]
 800983c:	2bff      	cmp	r3, #255	; 0xff
 800983e:	d016      	beq.n	800986e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8009840:	2310      	movs	r3, #16
 8009842:	752b      	strb	r3, [r5, #20]
 8009844:	a901      	add	r1, sp, #4
 8009846:	f7ff ff41 	bl	80096cc <_ZL12read_uleb128PKhPm>
 800984a:	9b01      	ldr	r3, [sp, #4]
 800984c:	4403      	add	r3, r0
 800984e:	60eb      	str	r3, [r5, #12]
 8009850:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009854:	756b      	strb	r3, [r5, #21]
 8009856:	a901      	add	r1, sp, #4
 8009858:	f7ff ff38 	bl	80096cc <_ZL12read_uleb128PKhPm>
 800985c:	9b01      	ldr	r3, [sp, #4]
 800985e:	4403      	add	r3, r0
 8009860:	612b      	str	r3, [r5, #16]
 8009862:	b002      	add	sp, #8
 8009864:	bd70      	pop	{r4, r5, r6, pc}
 8009866:	4603      	mov	r3, r0
 8009868:	e7da      	b.n	8009820 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 800986a:	606b      	str	r3, [r5, #4]
 800986c:	e7e3      	b.n	8009836 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 800986e:	2300      	movs	r3, #0
 8009870:	e7ed      	b.n	800984e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08009872 <_Unwind_GetGR>:
 8009872:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009874:	ab03      	add	r3, sp, #12
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	2300      	movs	r3, #0
 800987a:	460a      	mov	r2, r1
 800987c:	4619      	mov	r1, r3
 800987e:	f7f7 f825 	bl	80008cc <_Unwind_VRS_Get>
 8009882:	9803      	ldr	r0, [sp, #12]
 8009884:	b005      	add	sp, #20
 8009886:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800988c <__gxx_personality_v0>:
 800988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009890:	b091      	sub	sp, #68	; 0x44
 8009892:	2300      	movs	r3, #0
 8009894:	9305      	str	r3, [sp, #20]
 8009896:	f000 0303 	and.w	r3, r0, #3
 800989a:	2b01      	cmp	r3, #1
 800989c:	4606      	mov	r6, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	4617      	mov	r7, r2
 80098a2:	d00e      	beq.n	80098c2 <__gxx_personality_v0+0x36>
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d003      	beq.n	80098b0 <__gxx_personality_v0+0x24>
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d13b      	bne.n	8009924 <__gxx_personality_v0+0x98>
 80098ac:	0701      	lsls	r1, r0, #28
 80098ae:	d53b      	bpl.n	8009928 <__gxx_personality_v0+0x9c>
 80098b0:	4639      	mov	r1, r7
 80098b2:	4620      	mov	r0, r4
 80098b4:	f7f7 fd74 	bl	80013a0 <__gnu_unwind_frame>
 80098b8:	b390      	cbz	r0, 8009920 <__gxx_personality_v0+0x94>
 80098ba:	2009      	movs	r0, #9
 80098bc:	b011      	add	sp, #68	; 0x44
 80098be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c2:	0702      	lsls	r2, r0, #28
 80098c4:	d406      	bmi.n	80098d4 <__gxx_personality_v0+0x48>
 80098c6:	6a0d      	ldr	r5, [r1, #32]
 80098c8:	4638      	mov	r0, r7
 80098ca:	210d      	movs	r1, #13
 80098cc:	f7ff ffd1 	bl	8009872 <_Unwind_GetGR>
 80098d0:	4285      	cmp	r5, r0
 80098d2:	d02b      	beq.n	800992c <__gxx_personality_v0+0xa0>
 80098d4:	2002      	movs	r0, #2
 80098d6:	2300      	movs	r3, #0
 80098d8:	f006 0608 	and.w	r6, r6, #8
 80098dc:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 80098e0:	4306      	orrs	r6, r0
 80098e2:	f8cd a000 	str.w	sl, [sp]
 80098e6:	220c      	movs	r2, #12
 80098e8:	4619      	mov	r1, r3
 80098ea:	4638      	mov	r0, r7
 80098ec:	940a      	str	r4, [sp, #40]	; 0x28
 80098ee:	f7f7 f811 	bl	8000914 <_Unwind_VRS_Set>
 80098f2:	2e06      	cmp	r6, #6
 80098f4:	d11c      	bne.n	8009930 <__gxx_personality_v0+0xa4>
 80098f6:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 80098fa:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 80098fe:	f1b8 0f00 	cmp.w	r8, #0
 8009902:	bf0c      	ite	eq
 8009904:	f04f 0b01 	moveq.w	fp, #1
 8009908:	f04f 0b03 	movne.w	fp, #3
 800990c:	f016 0608 	ands.w	r6, r6, #8
 8009910:	f000 810c 	beq.w	8009b2c <__gxx_personality_v0+0x2a0>
 8009914:	f1bb 0f01 	cmp.w	fp, #1
 8009918:	f040 8104 	bne.w	8009b24 <__gxx_personality_v0+0x298>
 800991c:	f000 f964 	bl	8009be8 <_ZSt9terminatev>
 8009920:	2008      	movs	r0, #8
 8009922:	e7cb      	b.n	80098bc <__gxx_personality_v0+0x30>
 8009924:	f000 fc63 	bl	800a1ee <abort>
 8009928:	2001      	movs	r0, #1
 800992a:	e7d4      	b.n	80098d6 <__gxx_personality_v0+0x4a>
 800992c:	2006      	movs	r0, #6
 800992e:	e7d2      	b.n	80098d6 <__gxx_personality_v0+0x4a>
 8009930:	4638      	mov	r0, r7
 8009932:	f7f7 fd51 	bl	80013d8 <_Unwind_GetLanguageSpecificData>
 8009936:	4681      	mov	r9, r0
 8009938:	2800      	cmp	r0, #0
 800993a:	d0b9      	beq.n	80098b0 <__gxx_personality_v0+0x24>
 800993c:	4652      	mov	r2, sl
 800993e:	4601      	mov	r1, r0
 8009940:	4638      	mov	r0, r7
 8009942:	f7ff ff65 	bl	8009810 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8009946:	4639      	mov	r1, r7
 8009948:	4605      	mov	r5, r0
 800994a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800994e:	f7ff ff2a 	bl	80097a6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8009952:	210f      	movs	r1, #15
 8009954:	900c      	str	r0, [sp, #48]	; 0x30
 8009956:	4638      	mov	r0, r7
 8009958:	f7ff ff8b 	bl	8009872 <_Unwind_GetGR>
 800995c:	f020 0801 	bic.w	r8, r0, #1
 8009960:	f108 38ff 	add.w	r8, r8, #4294967295
 8009964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009966:	42ab      	cmp	r3, r5
 8009968:	f240 80c4 	bls.w	8009af4 <__gxx_personality_v0+0x268>
 800996c:	462a      	mov	r2, r5
 800996e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8009972:	ab06      	add	r3, sp, #24
 8009974:	2000      	movs	r0, #0
 8009976:	f7ff ff3a 	bl	80097ee <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800997a:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800997e:	4602      	mov	r2, r0
 8009980:	ab07      	add	r3, sp, #28
 8009982:	2000      	movs	r0, #0
 8009984:	f7ff ff33 	bl	80097ee <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8009988:	ab08      	add	r3, sp, #32
 800998a:	4602      	mov	r2, r0
 800998c:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8009990:	2000      	movs	r0, #0
 8009992:	f7ff ff2c 	bl	80097ee <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8009996:	a909      	add	r1, sp, #36	; 0x24
 8009998:	f7ff fe98 	bl	80096cc <_ZL12read_uleb128PKhPm>
 800999c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800999e:	9a06      	ldr	r2, [sp, #24]
 80099a0:	4413      	add	r3, r2
 80099a2:	4543      	cmp	r3, r8
 80099a4:	4605      	mov	r5, r0
 80099a6:	d901      	bls.n	80099ac <__gxx_personality_v0+0x120>
 80099a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80099aa:	e7db      	b.n	8009964 <__gxx_personality_v0+0xd8>
 80099ac:	9a07      	ldr	r2, [sp, #28]
 80099ae:	4413      	add	r3, r2
 80099b0:	4543      	cmp	r3, r8
 80099b2:	d9d7      	bls.n	8009964 <__gxx_personality_v0+0xd8>
 80099b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099b8:	f1b8 0f00 	cmp.w	r8, #0
 80099bc:	d001      	beq.n	80099c2 <__gxx_personality_v0+0x136>
 80099be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099c0:	4498      	add	r8, r3
 80099c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80099c4:	b115      	cbz	r5, 80099cc <__gxx_personality_v0+0x140>
 80099c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80099c8:	3d01      	subs	r5, #1
 80099ca:	4405      	add	r5, r0
 80099cc:	f1b8 0f00 	cmp.w	r8, #0
 80099d0:	f43f af6e 	beq.w	80098b0 <__gxx_personality_v0+0x24>
 80099d4:	2d00      	cmp	r5, #0
 80099d6:	f000 80f7 	beq.w	8009bc8 <__gxx_personality_v0+0x33c>
 80099da:	f016 0308 	ands.w	r3, r6, #8
 80099de:	9302      	str	r3, [sp, #8]
 80099e0:	d034      	beq.n	8009a4c <__gxx_personality_v0+0x1c0>
 80099e2:	2347      	movs	r3, #71	; 0x47
 80099e4:	7023      	strb	r3, [r4, #0]
 80099e6:	234e      	movs	r3, #78	; 0x4e
 80099e8:	7063      	strb	r3, [r4, #1]
 80099ea:	2355      	movs	r3, #85	; 0x55
 80099ec:	70a3      	strb	r3, [r4, #2]
 80099ee:	2343      	movs	r3, #67	; 0x43
 80099f0:	70e3      	strb	r3, [r4, #3]
 80099f2:	2346      	movs	r3, #70	; 0x46
 80099f4:	7123      	strb	r3, [r4, #4]
 80099f6:	234f      	movs	r3, #79	; 0x4f
 80099f8:	7163      	strb	r3, [r4, #5]
 80099fa:	2352      	movs	r3, #82	; 0x52
 80099fc:	71a3      	strb	r3, [r4, #6]
 80099fe:	2300      	movs	r3, #0
 8009a00:	71e3      	strb	r3, [r4, #7]
 8009a02:	f04f 0b00 	mov.w	fp, #0
 8009a06:	a907      	add	r1, sp, #28
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f7ff fe6e 	bl	80096ea <_ZL12read_sleb128PKhPl>
 8009a0e:	a908      	add	r1, sp, #32
 8009a10:	9003      	str	r0, [sp, #12]
 8009a12:	f7ff fe6a 	bl	80096ea <_ZL12read_sleb128PKhPl>
 8009a16:	9907      	ldr	r1, [sp, #28]
 8009a18:	2900      	cmp	r1, #0
 8009a1a:	d068      	beq.n	8009aee <__gxx_personality_v0+0x262>
 8009a1c:	dd3a      	ble.n	8009a94 <__gxx_personality_v0+0x208>
 8009a1e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8009a22:	28ff      	cmp	r0, #255	; 0xff
 8009a24:	d032      	beq.n	8009a8c <__gxx_personality_v0+0x200>
 8009a26:	f000 0307 	and.w	r3, r0, #7
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	f63f af7a 	bhi.w	8009924 <__gxx_personality_v0+0x98>
 8009a30:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <__gxx_personality_v0+0x1ac>)
 8009a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a36:	bf00      	nop
 8009a38:	08009a91 	.word	0x08009a91
 8009a3c:	08009925 	.word	0x08009925
 8009a40:	08009a5f 	.word	0x08009a5f
 8009a44:	08009a91 	.word	0x08009a91
 8009a48:	08009a89 	.word	0x08009a89
 8009a4c:	79e3      	ldrb	r3, [r4, #7]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	bf0c      	ite	eq
 8009a52:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8009a56:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8009a5a:	9305      	str	r3, [sp, #20]
 8009a5c:	e7d1      	b.n	8009a02 <__gxx_personality_v0+0x176>
 8009a5e:	2502      	movs	r5, #2
 8009a60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a62:	ab09      	add	r3, sp, #36	; 0x24
 8009a64:	fb05 2211 	mls	r2, r5, r1, r2
 8009a68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a6a:	f7ff fe56 	bl	800971a <_ZL28read_encoded_value_with_basehjPKhPj>
 8009a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a70:	b131      	cbz	r1, 8009a80 <__gxx_personality_v0+0x1f4>
 8009a72:	b37c      	cbz	r4, 8009ad4 <__gxx_personality_v0+0x248>
 8009a74:	ab05      	add	r3, sp, #20
 8009a76:	2200      	movs	r2, #0
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f7ff fd21 	bl	80094c0 <__cxa_type_match>
 8009a7e:	b348      	cbz	r0, 8009ad4 <__gxx_personality_v0+0x248>
 8009a80:	9d07      	ldr	r5, [sp, #28]
 8009a82:	f04f 0b03 	mov.w	fp, #3
 8009a86:	e039      	b.n	8009afc <__gxx_personality_v0+0x270>
 8009a88:	2508      	movs	r5, #8
 8009a8a:	e7e9      	b.n	8009a60 <__gxx_personality_v0+0x1d4>
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	e7e7      	b.n	8009a60 <__gxx_personality_v0+0x1d4>
 8009a90:	2504      	movs	r5, #4
 8009a92:	e7e5      	b.n	8009a60 <__gxx_personality_v0+0x1d4>
 8009a94:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8009a98:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8009a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a9e:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8009aa2:	313f      	adds	r1, #63	; 0x3f
 8009aa4:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8009aa8:	b1dc      	cbz	r4, 8009ae2 <__gxx_personality_v0+0x256>
 8009aaa:	9a02      	ldr	r2, [sp, #8]
 8009aac:	b9ca      	cbnz	r2, 8009ae2 <__gxx_personality_v0+0x256>
 8009aae:	9b05      	ldr	r3, [sp, #20]
 8009ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab2:	3d04      	subs	r5, #4
 8009ab4:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8009ab8:	b141      	cbz	r1, 8009acc <__gxx_personality_v0+0x240>
 8009aba:	ab09      	add	r3, sp, #36	; 0x24
 8009abc:	2200      	movs	r2, #0
 8009abe:	4429      	add	r1, r5
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f7ff fcfd 	bl	80094c0 <__cxa_type_match>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d0f4      	beq.n	8009ab4 <__gxx_personality_v0+0x228>
 8009aca:	2101      	movs	r1, #1
 8009acc:	f081 0101 	eor.w	r1, r1, #1
 8009ad0:	2900      	cmp	r1, #0
 8009ad2:	d1d5      	bne.n	8009a80 <__gxx_personality_v0+0x1f4>
 8009ad4:	9d08      	ldr	r5, [sp, #32]
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	d072      	beq.n	8009bc0 <__gxx_personality_v0+0x334>
 8009ada:	9b03      	ldr	r3, [sp, #12]
 8009adc:	442b      	add	r3, r5
 8009ade:	461d      	mov	r5, r3
 8009ae0:	e791      	b.n	8009a06 <__gxx_personality_v0+0x17a>
 8009ae2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009ae6:	fab1 f181 	clz	r1, r1
 8009aea:	0949      	lsrs	r1, r1, #5
 8009aec:	e7f0      	b.n	8009ad0 <__gxx_personality_v0+0x244>
 8009aee:	f04f 0b01 	mov.w	fp, #1
 8009af2:	e7ef      	b.n	8009ad4 <__gxx_personality_v0+0x248>
 8009af4:	2500      	movs	r5, #0
 8009af6:	46a8      	mov	r8, r5
 8009af8:	f04f 0b01 	mov.w	fp, #1
 8009afc:	07f3      	lsls	r3, r6, #31
 8009afe:	f57f af05 	bpl.w	800990c <__gxx_personality_v0+0x80>
 8009b02:	f1bb 0f02 	cmp.w	fp, #2
 8009b06:	f43f aed3 	beq.w	80098b0 <__gxx_personality_v0+0x24>
 8009b0a:	210d      	movs	r1, #13
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	9e05      	ldr	r6, [sp, #20]
 8009b10:	f7ff feaf 	bl	8009872 <_Unwind_GetGR>
 8009b14:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8009b18:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8009b1c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8009b20:	2006      	movs	r0, #6
 8009b22:	e6cb      	b.n	80098bc <__gxx_personality_v0+0x30>
 8009b24:	2d00      	cmp	r5, #0
 8009b26:	da22      	bge.n	8009b6e <__gxx_personality_v0+0x2e2>
 8009b28:	f000 f870 	bl	8009c0c <_ZSt10unexpectedv>
 8009b2c:	f1bb 0f01 	cmp.w	fp, #1
 8009b30:	d102      	bne.n	8009b38 <__gxx_personality_v0+0x2ac>
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 faa7 	bl	800a086 <__cxa_call_terminate>
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	da18      	bge.n	8009b6e <__gxx_personality_v0+0x2e2>
 8009b3c:	4652      	mov	r2, sl
 8009b3e:	4649      	mov	r1, r9
 8009b40:	4638      	mov	r0, r7
 8009b42:	f7ff fe65 	bl	8009810 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8009b46:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8009b4a:	4639      	mov	r1, r7
 8009b4c:	f7ff fe2b 	bl	80097a6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8009b50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b52:	900c      	str	r0, [sp, #48]	; 0x30
 8009b54:	43eb      	mvns	r3, r5
 8009b56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b5a:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8009b5e:	b10a      	cbz	r2, 8009b64 <__gxx_personality_v0+0x2d8>
 8009b60:	3601      	adds	r6, #1
 8009b62:	e7fa      	b.n	8009b5a <__gxx_personality_v0+0x2ce>
 8009b64:	2204      	movs	r2, #4
 8009b66:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8009b6a:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8009b6e:	2300      	movs	r3, #0
 8009b70:	ae09      	add	r6, sp, #36	; 0x24
 8009b72:	461a      	mov	r2, r3
 8009b74:	4619      	mov	r1, r3
 8009b76:	9600      	str	r6, [sp, #0]
 8009b78:	4638      	mov	r0, r7
 8009b7a:	9409      	str	r4, [sp, #36]	; 0x24
 8009b7c:	f7f6 feca 	bl	8000914 <_Unwind_VRS_Set>
 8009b80:	2300      	movs	r3, #0
 8009b82:	4619      	mov	r1, r3
 8009b84:	2201      	movs	r2, #1
 8009b86:	9600      	str	r6, [sp, #0]
 8009b88:	4638      	mov	r0, r7
 8009b8a:	9509      	str	r5, [sp, #36]	; 0x24
 8009b8c:	f7f6 fec2 	bl	8000914 <_Unwind_VRS_Set>
 8009b90:	210f      	movs	r1, #15
 8009b92:	4638      	mov	r0, r7
 8009b94:	f7ff fe6d 	bl	8009872 <_Unwind_GetGR>
 8009b98:	f000 0001 	and.w	r0, r0, #1
 8009b9c:	ea40 0008 	orr.w	r0, r0, r8
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	9009      	str	r0, [sp, #36]	; 0x24
 8009ba4:	9600      	str	r6, [sp, #0]
 8009ba6:	220f      	movs	r2, #15
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4638      	mov	r0, r7
 8009bac:	f7f6 feb2 	bl	8000914 <_Unwind_VRS_Set>
 8009bb0:	f1bb 0f02 	cmp.w	fp, #2
 8009bb4:	d102      	bne.n	8009bbc <__gxx_personality_v0+0x330>
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f7ff fce0 	bl	800957c <__cxa_begin_cleanup>
 8009bbc:	2007      	movs	r0, #7
 8009bbe:	e67d      	b.n	80098bc <__gxx_personality_v0+0x30>
 8009bc0:	f1bb 0f00 	cmp.w	fp, #0
 8009bc4:	f43f ae74 	beq.w	80098b0 <__gxx_personality_v0+0x24>
 8009bc8:	f04f 0b02 	mov.w	fp, #2
 8009bcc:	e796      	b.n	8009afc <__gxx_personality_v0+0x270>
 8009bce:	bf00      	nop

08009bd0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009bd0:	b508      	push	{r3, lr}
 8009bd2:	4780      	blx	r0
 8009bd4:	f000 fb0b 	bl	800a1ee <abort>

08009bd8 <_ZSt13get_terminatev>:
 8009bd8:	4b02      	ldr	r3, [pc, #8]	; (8009be4 <_ZSt13get_terminatev+0xc>)
 8009bda:	6818      	ldr	r0, [r3, #0]
 8009bdc:	f3bf 8f5b 	dmb	ish
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	20000018 	.word	0x20000018

08009be8 <_ZSt9terminatev>:
 8009be8:	b508      	push	{r3, lr}
 8009bea:	f7ff fff5 	bl	8009bd8 <_ZSt13get_terminatev>
 8009bee:	f7ff ffef 	bl	8009bd0 <_ZN10__cxxabiv111__terminateEPFvvE>

08009bf2 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8009bf2:	b508      	push	{r3, lr}
 8009bf4:	4780      	blx	r0
 8009bf6:	f7ff fff7 	bl	8009be8 <_ZSt9terminatev>
	...

08009bfc <_ZSt14get_unexpectedv>:
 8009bfc:	4b02      	ldr	r3, [pc, #8]	; (8009c08 <_ZSt14get_unexpectedv+0xc>)
 8009bfe:	6818      	ldr	r0, [r3, #0]
 8009c00:	f3bf 8f5b 	dmb	ish
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	20000014 	.word	0x20000014

08009c0c <_ZSt10unexpectedv>:
 8009c0c:	b508      	push	{r3, lr}
 8009c0e:	f7ff fff5 	bl	8009bfc <_ZSt14get_unexpectedv>
 8009c12:	f7ff ffee 	bl	8009bf2 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08009c16 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8009c16:	2801      	cmp	r0, #1
 8009c18:	b507      	push	{r0, r1, r2, lr}
 8009c1a:	d903      	bls.n	8009c24 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8009c1c:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8009c20:	f7ff ffd6 	bl	8009bd0 <_ZN10__cxxabiv111__terminateEPFvvE>
 8009c24:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8009c28:	f3bf 8f5b 	dmb	ish
 8009c2c:	e853 2f00 	ldrex	r2, [r3]
 8009c30:	3a01      	subs	r2, #1
 8009c32:	e843 2000 	strex	r0, r2, [r3]
 8009c36:	2800      	cmp	r0, #0
 8009c38:	d1f8      	bne.n	8009c2c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 8009c3a:	f3bf 8f5b 	dmb	ish
 8009c3e:	b962      	cbnz	r2, 8009c5a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x44>
 8009c40:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8009c44:	f101 0058 	add.w	r0, r1, #88	; 0x58
 8009c48:	b113      	cbz	r3, 8009c50 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 8009c4a:	9001      	str	r0, [sp, #4]
 8009c4c:	4798      	blx	r3
 8009c4e:	9801      	ldr	r0, [sp, #4]
 8009c50:	b003      	add	sp, #12
 8009c52:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c56:	f7ff bbeb 	b.w	8009430 <__cxa_free_exception>
 8009c5a:	b003      	add	sp, #12
 8009c5c:	f85d fb04 	ldr.w	pc, [sp], #4

08009c60 <__cxa_init_primary_exception>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	2500      	movs	r5, #0
 8009c64:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 8009c68:	f840 5c80 	str.w	r5, [r0, #-128]
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	f7ff ffc5 	bl	8009bfc <_ZSt14get_unexpectedv>
 8009c72:	f844 0c70 	str.w	r0, [r4, #-112]
 8009c76:	f7ff ffaf 	bl	8009bd8 <_ZSt13get_terminatev>
 8009c7a:	2347      	movs	r3, #71	; 0x47
 8009c7c:	f804 3c58 	strb.w	r3, [r4, #-88]
 8009c80:	234e      	movs	r3, #78	; 0x4e
 8009c82:	f804 3c57 	strb.w	r3, [r4, #-87]
 8009c86:	2355      	movs	r3, #85	; 0x55
 8009c88:	f804 3c56 	strb.w	r3, [r4, #-86]
 8009c8c:	2343      	movs	r3, #67	; 0x43
 8009c8e:	f804 3c55 	strb.w	r3, [r4, #-85]
 8009c92:	f804 3c54 	strb.w	r3, [r4, #-84]
 8009c96:	232b      	movs	r3, #43	; 0x2b
 8009c98:	f804 3c53 	strb.w	r3, [r4, #-83]
 8009c9c:	f804 3c52 	strb.w	r3, [r4, #-82]
 8009ca0:	4b04      	ldr	r3, [pc, #16]	; (8009cb4 <__cxa_init_primary_exception+0x54>)
 8009ca2:	f844 0c6c 	str.w	r0, [r4, #-108]
 8009ca6:	f804 5c51 	strb.w	r5, [r4, #-81]
 8009caa:	f844 3c50 	str.w	r3, [r4, #-80]
 8009cae:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 8009cb2:	bd38      	pop	{r3, r4, r5, pc}
 8009cb4:	08009c17 	.word	0x08009c17

08009cb8 <__cxa_throw>:
 8009cb8:	b507      	push	{r0, r1, r2, lr}
 8009cba:	4604      	mov	r4, r0
 8009cbc:	e9cd 2100 	strd	r2, r1, [sp]
 8009cc0:	f7ff fd00 	bl	80096c4 <__cxa_get_globals>
 8009cc4:	6843      	ldr	r3, [r0, #4]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	e9dd 2100 	ldrd	r2, r1, [sp]
 8009ccc:	6043      	str	r3, [r0, #4]
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f7ff ffc6 	bl	8009c60 <__cxa_init_primary_exception>
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f844 3b28 	str.w	r3, [r4], #40
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f7f7 f98b 	bl	8000ff8 <_Unwind_RaiseException>
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7ff fc9d 	bl	8009622 <__cxa_begin_catch>
 8009ce8:	f7ff ff7e 	bl	8009be8 <_ZSt9terminatev>

08009cec <__cxa_rethrow>:
 8009cec:	b508      	push	{r3, lr}
 8009cee:	f7ff fce9 	bl	80096c4 <__cxa_get_globals>
 8009cf2:	e9d0 4200 	ldrd	r4, r2, [r0]
 8009cf6:	3201      	adds	r2, #1
 8009cf8:	6042      	str	r2, [r0, #4]
 8009cfa:	b34c      	cbz	r4, 8009d50 <__cxa_rethrow+0x64>
 8009cfc:	f894 2020 	ldrb.w	r2, [r4, #32]
 8009d00:	2a47      	cmp	r2, #71	; 0x47
 8009d02:	d127      	bne.n	8009d54 <__cxa_rethrow+0x68>
 8009d04:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8009d08:	2a4e      	cmp	r2, #78	; 0x4e
 8009d0a:	d123      	bne.n	8009d54 <__cxa_rethrow+0x68>
 8009d0c:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8009d10:	2a55      	cmp	r2, #85	; 0x55
 8009d12:	d11f      	bne.n	8009d54 <__cxa_rethrow+0x68>
 8009d14:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8009d18:	2a43      	cmp	r2, #67	; 0x43
 8009d1a:	d11b      	bne.n	8009d54 <__cxa_rethrow+0x68>
 8009d1c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8009d20:	2a43      	cmp	r2, #67	; 0x43
 8009d22:	d117      	bne.n	8009d54 <__cxa_rethrow+0x68>
 8009d24:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8009d28:	2a2b      	cmp	r2, #43	; 0x2b
 8009d2a:	d113      	bne.n	8009d54 <__cxa_rethrow+0x68>
 8009d2c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8009d30:	2a2b      	cmp	r2, #43	; 0x2b
 8009d32:	d10f      	bne.n	8009d54 <__cxa_rethrow+0x68>
 8009d34:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8009d38:	2a01      	cmp	r2, #1
 8009d3a:	d80b      	bhi.n	8009d54 <__cxa_rethrow+0x68>
 8009d3c:	6962      	ldr	r2, [r4, #20]
 8009d3e:	4252      	negs	r2, r2
 8009d40:	6162      	str	r2, [r4, #20]
 8009d42:	3420      	adds	r4, #32
 8009d44:	4620      	mov	r0, r4
 8009d46:	f7f7 f97b 	bl	8001040 <_Unwind_Resume_or_Rethrow>
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f7ff fc69 	bl	8009622 <__cxa_begin_catch>
 8009d50:	f7ff ff4a 	bl	8009be8 <_ZSt9terminatev>
 8009d54:	2200      	movs	r2, #0
 8009d56:	6002      	str	r2, [r0, #0]
 8009d58:	e7f3      	b.n	8009d42 <__cxa_rethrow+0x56>
	...

08009d5c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	4b03      	ldr	r3, [pc, #12]	; (8009d6c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 8009d60:	6003      	str	r3, [r0, #0]
 8009d62:	4604      	mov	r4, r0
 8009d64:	f000 f8db 	bl	8009f1e <_ZNSt9type_infoD1Ev>
 8009d68:	4620      	mov	r0, r4
 8009d6a:	bd10      	pop	{r4, pc}
 8009d6c:	0800b11c 	.word	0x0800b11c

08009d70 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 8009d70:	b510      	push	{r4, lr}
 8009d72:	4604      	mov	r4, r0
 8009d74:	f7ff fff2 	bl	8009d5c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 8009d78:	4620      	mov	r0, r4
 8009d7a:	2108      	movs	r1, #8
 8009d7c:	f7ff fae4 	bl	8009348 <_ZdlPvj>
 8009d80:	4620      	mov	r0, r4
 8009d82:	bd10      	pop	{r4, pc}

08009d84 <_Znwj>:
 8009d84:	2801      	cmp	r0, #1
 8009d86:	bf38      	it	cc
 8009d88:	2001      	movcc	r0, #1
 8009d8a:	b510      	push	{r4, lr}
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f000 fb58 	bl	800a444 <malloc>
 8009d94:	b930      	cbnz	r0, 8009da4 <_Znwj+0x20>
 8009d96:	f000 f999 	bl	800a0cc <_ZSt15get_new_handlerv>
 8009d9a:	b908      	cbnz	r0, 8009da0 <_Znwj+0x1c>
 8009d9c:	f000 fa27 	bl	800a1ee <abort>
 8009da0:	4780      	blx	r0
 8009da2:	e7f4      	b.n	8009d8e <_Znwj+0xa>
 8009da4:	bd10      	pop	{r4, pc}

08009da6 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 8009da6:	2001      	movs	r0, #1
 8009da8:	4770      	bx	lr
	...

08009dac <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 8009dac:	b510      	push	{r4, lr}
 8009dae:	4b03      	ldr	r3, [pc, #12]	; (8009dbc <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 8009db0:	6003      	str	r3, [r0, #0]
 8009db2:	4604      	mov	r4, r0
 8009db4:	f000 f99c 	bl	800a0f0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 8009db8:	4620      	mov	r0, r4
 8009dba:	bd10      	pop	{r4, pc}
 8009dbc:	0800b16c 	.word	0x0800b16c

08009dc0 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	f7ff fff2 	bl	8009dac <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
 8009dc8:	4620      	mov	r0, r4
 8009dca:	2110      	movs	r1, #16
 8009dcc:	f7ff fabc 	bl	8009348 <_ZdlPvj>
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	bd10      	pop	{r4, pc}

08009dd4 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dd8:	4606      	mov	r6, r0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	461d      	mov	r5, r3
 8009dde:	d80f      	bhi.n	8009e00 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2c>
 8009de0:	490c      	ldr	r1, [pc, #48]	; (8009e14 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
 8009de2:	68c0      	ldr	r0, [r0, #12]
 8009de4:	9201      	str	r2, [sp, #4]
 8009de6:	f000 f89f 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 8009dea:	9a01      	ldr	r2, [sp, #4]
 8009dec:	b140      	cbz	r0, 8009e00 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2c>
 8009dee:	68e0      	ldr	r0, [r4, #12]
 8009df0:	6803      	ldr	r3, [r0, #0]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	4798      	blx	r3
 8009df6:	f080 0001 	eor.w	r0, r0, #1
 8009dfa:	b2c0      	uxtb	r0, r0
 8009dfc:	b002      	add	sp, #8
 8009dfe:	bd70      	pop	{r4, r5, r6, pc}
 8009e00:	68f0      	ldr	r0, [r6, #12]
 8009e02:	68e1      	ldr	r1, [r4, #12]
 8009e04:	6803      	ldr	r3, [r0, #0]
 8009e06:	691e      	ldr	r6, [r3, #16]
 8009e08:	1cab      	adds	r3, r5, #2
 8009e0a:	46b4      	mov	ip, r6
 8009e0c:	b002      	add	sp, #8
 8009e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e12:	4760      	bx	ip
 8009e14:	0800b0d8 	.word	0x0800b0d8

08009e18 <__cxa_pure_virtual>:
 8009e18:	b508      	push	{r3, lr}
 8009e1a:	f7ff fee5 	bl	8009be8 <_ZSt9terminatev>
	...

08009e20 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8009e20:	b510      	push	{r4, lr}
 8009e22:	4b03      	ldr	r3, [pc, #12]	; (8009e30 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8009e24:	6003      	str	r3, [r0, #0]
 8009e26:	4604      	mov	r4, r0
 8009e28:	f000 f8bc 	bl	8009fa4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	bd10      	pop	{r4, pc}
 8009e30:	0800b1c4 	.word	0x0800b1c4

08009e34 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8009e34:	b510      	push	{r4, lr}
 8009e36:	4604      	mov	r4, r0
 8009e38:	f7ff fff2 	bl	8009e20 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	210c      	movs	r1, #12
 8009e40:	f7ff fa82 	bl	8009348 <_ZdlPvj>
 8009e44:	4620      	mov	r0, r4
 8009e46:	bd10      	pop	{r4, pc}

08009e48 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8009e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e4a:	9f08      	ldr	r7, [sp, #32]
 8009e4c:	4297      	cmp	r7, r2
 8009e4e:	4605      	mov	r5, r0
 8009e50:	460e      	mov	r6, r1
 8009e52:	4614      	mov	r4, r2
 8009e54:	d00a      	beq.n	8009e6c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8009e56:	68a8      	ldr	r0, [r5, #8]
 8009e58:	6802      	ldr	r2, [r0, #0]
 8009e5a:	9708      	str	r7, [sp, #32]
 8009e5c:	6a15      	ldr	r5, [r2, #32]
 8009e5e:	4631      	mov	r1, r6
 8009e60:	4622      	mov	r2, r4
 8009e62:	46ac      	mov	ip, r5
 8009e64:	b003      	add	sp, #12
 8009e66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009e6a:	4760      	bx	ip
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	9301      	str	r3, [sp, #4]
 8009e70:	f000 f85a 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 8009e74:	9b01      	ldr	r3, [sp, #4]
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d0ed      	beq.n	8009e56 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 8009e7a:	2006      	movs	r0, #6
 8009e7c:	b003      	add	sp, #12
 8009e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e80 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8009e80:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	460d      	mov	r5, r1
 8009e86:	4619      	mov	r1, r3
 8009e88:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8009e8c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8009e90:	4681      	mov	r9, r0
 8009e92:	4617      	mov	r7, r2
 8009e94:	4698      	mov	r8, r3
 8009e96:	f000 f847 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 8009e9a:	b190      	cbz	r0, 8009ec2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8009e9c:	2d00      	cmp	r5, #0
 8009e9e:	6034      	str	r4, [r6, #0]
 8009ea0:	7137      	strb	r7, [r6, #4]
 8009ea2:	db09      	blt.n	8009eb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8009ea4:	1961      	adds	r1, r4, r5
 8009ea6:	458a      	cmp	sl, r1
 8009ea8:	bf0c      	ite	eq
 8009eaa:	2106      	moveq	r1, #6
 8009eac:	2101      	movne	r1, #1
 8009eae:	71b1      	strb	r1, [r6, #6]
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	b001      	add	sp, #4
 8009eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb8:	3502      	adds	r5, #2
 8009eba:	d1f9      	bne.n	8009eb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	71b3      	strb	r3, [r6, #6]
 8009ec0:	e7f6      	b.n	8009eb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8009ec2:	4554      	cmp	r4, sl
 8009ec4:	d106      	bne.n	8009ed4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8009ec6:	4659      	mov	r1, fp
 8009ec8:	4648      	mov	r0, r9
 8009eca:	f000 f82d 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 8009ece:	b108      	cbz	r0, 8009ed4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8009ed0:	7177      	strb	r7, [r6, #5]
 8009ed2:	e7ed      	b.n	8009eb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8009ed4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8009ed8:	6803      	ldr	r3, [r0, #0]
 8009eda:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8009ede:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8009ee2:	69dc      	ldr	r4, [r3, #28]
 8009ee4:	463a      	mov	r2, r7
 8009ee6:	4643      	mov	r3, r8
 8009ee8:	4629      	mov	r1, r5
 8009eea:	46a4      	mov	ip, r4
 8009eec:	b001      	add	sp, #4
 8009eee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef2:	4760      	bx	ip

08009ef4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8009ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef8:	4607      	mov	r7, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	4615      	mov	r5, r2
 8009efe:	461e      	mov	r6, r3
 8009f00:	f000 f883 	bl	800a00a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8009f04:	b948      	cbnz	r0, 8009f1a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8009f06:	68b8      	ldr	r0, [r7, #8]
 8009f08:	6803      	ldr	r3, [r0, #0]
 8009f0a:	699f      	ldr	r7, [r3, #24]
 8009f0c:	462a      	mov	r2, r5
 8009f0e:	4633      	mov	r3, r6
 8009f10:	4621      	mov	r1, r4
 8009f12:	46bc      	mov	ip, r7
 8009f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f18:	4760      	bx	ip
 8009f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f1e <_ZNSt9type_infoD1Ev>:
 8009f1e:	4770      	bx	lr

08009f20 <_ZNKSt9type_info14__is_pointer_pEv>:
 8009f20:	2000      	movs	r0, #0
 8009f22:	4770      	bx	lr

08009f24 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 8009f24:	2000      	movs	r0, #0
 8009f26:	4770      	bx	lr

08009f28 <_ZNKSt9type_infoeqERKS_>:
 8009f28:	4281      	cmp	r1, r0
 8009f2a:	b508      	push	{r3, lr}
 8009f2c:	d00e      	beq.n	8009f4c <_ZNKSt9type_infoeqERKS_+0x24>
 8009f2e:	6840      	ldr	r0, [r0, #4]
 8009f30:	7803      	ldrb	r3, [r0, #0]
 8009f32:	2b2a      	cmp	r3, #42	; 0x2a
 8009f34:	d00c      	beq.n	8009f50 <_ZNKSt9type_infoeqERKS_+0x28>
 8009f36:	6849      	ldr	r1, [r1, #4]
 8009f38:	780b      	ldrb	r3, [r1, #0]
 8009f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f3c:	bf08      	it	eq
 8009f3e:	3101      	addeq	r1, #1
 8009f40:	f7f6 f97e 	bl	8000240 <strcmp>
 8009f44:	fab0 f080 	clz	r0, r0
 8009f48:	0940      	lsrs	r0, r0, #5
 8009f4a:	bd08      	pop	{r3, pc}
 8009f4c:	2001      	movs	r0, #1
 8009f4e:	e7fc      	b.n	8009f4a <_ZNKSt9type_infoeqERKS_+0x22>
 8009f50:	2000      	movs	r0, #0
 8009f52:	e7fa      	b.n	8009f4a <_ZNKSt9type_infoeqERKS_+0x22>

08009f54 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8009f54:	f7ff bfe8 	b.w	8009f28 <_ZNKSt9type_infoeqERKS_>

08009f58 <_ZSt17__throw_bad_allocv>:
 8009f58:	b508      	push	{r3, lr}
 8009f5a:	f000 f948 	bl	800a1ee <abort>

08009f5e <_ZSt20__throw_length_errorPKc>:
 8009f5e:	b508      	push	{r3, lr}
 8009f60:	f000 f945 	bl	800a1ee <abort>

08009f64 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8009f64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009f66:	2400      	movs	r4, #0
 8009f68:	2310      	movs	r3, #16
 8009f6a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009f6e:	6803      	ldr	r3, [r0, #0]
 8009f70:	9400      	str	r4, [sp, #0]
 8009f72:	699e      	ldr	r6, [r3, #24]
 8009f74:	f88d 4004 	strb.w	r4, [sp, #4]
 8009f78:	4615      	mov	r5, r2
 8009f7a:	466b      	mov	r3, sp
 8009f7c:	6812      	ldr	r2, [r2, #0]
 8009f7e:	47b0      	blx	r6
 8009f80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009f84:	f003 0306 	and.w	r3, r3, #6
 8009f88:	2b06      	cmp	r3, #6
 8009f8a:	bf03      	ittte	eq
 8009f8c:	9b00      	ldreq	r3, [sp, #0]
 8009f8e:	602b      	streq	r3, [r5, #0]
 8009f90:	2001      	moveq	r0, #1
 8009f92:	4620      	movne	r0, r4
 8009f94:	b004      	add	sp, #16
 8009f96:	bd70      	pop	{r4, r5, r6, pc}

08009f98 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8009f98:	9800      	ldr	r0, [sp, #0]
 8009f9a:	4290      	cmp	r0, r2
 8009f9c:	bf14      	ite	ne
 8009f9e:	2001      	movne	r0, #1
 8009fa0:	2006      	moveq	r0, #6
 8009fa2:	4770      	bx	lr

08009fa4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8009fa4:	b510      	push	{r4, lr}
 8009fa6:	4b03      	ldr	r3, [pc, #12]	; (8009fb4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8009fa8:	6003      	str	r3, [r0, #0]
 8009faa:	4604      	mov	r4, r0
 8009fac:	f7ff ffb7 	bl	8009f1e <_ZNSt9type_infoD1Ev>
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	bd10      	pop	{r4, pc}
 8009fb4:	0800b238 	.word	0x0800b238

08009fb8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8009fb8:	b510      	push	{r4, lr}
 8009fba:	4604      	mov	r4, r0
 8009fbc:	f7ff fff2 	bl	8009fa4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	2108      	movs	r1, #8
 8009fc4:	f7ff f9c0 	bl	8009348 <_ZdlPvj>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	bd10      	pop	{r4, pc}

08009fcc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8009fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd0:	461f      	mov	r7, r3
 8009fd2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8009fd6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009fda:	4598      	cmp	r8, r3
 8009fdc:	4606      	mov	r6, r0
 8009fde:	4615      	mov	r5, r2
 8009fe0:	d107      	bne.n	8009ff2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8009fe2:	9907      	ldr	r1, [sp, #28]
 8009fe4:	f7ff ffa0 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 8009fe8:	b118      	cbz	r0, 8009ff2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8009fea:	7165      	strb	r5, [r4, #5]
 8009fec:	2000      	movs	r0, #0
 8009fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f7ff ff97 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d0f6      	beq.n	8009fec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8009ffe:	2301      	movs	r3, #1
 800a000:	f8c4 8000 	str.w	r8, [r4]
 800a004:	7125      	strb	r5, [r4, #4]
 800a006:	71a3      	strb	r3, [r4, #6]
 800a008:	e7f0      	b.n	8009fec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0800a00a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800a00a:	b538      	push	{r3, r4, r5, lr}
 800a00c:	4615      	mov	r5, r2
 800a00e:	461c      	mov	r4, r3
 800a010:	f7ff ff8a 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 800a014:	b120      	cbz	r0, 800a020 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800a016:	2308      	movs	r3, #8
 800a018:	60e3      	str	r3, [r4, #12]
 800a01a:	2306      	movs	r3, #6
 800a01c:	6025      	str	r5, [r4, #0]
 800a01e:	7123      	strb	r3, [r4, #4]
 800a020:	bd38      	pop	{r3, r4, r5, pc}

0800a022 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800a022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a024:	4605      	mov	r5, r0
 800a026:	460c      	mov	r4, r1
 800a028:	9201      	str	r2, [sp, #4]
 800a02a:	461e      	mov	r6, r3
 800a02c:	f7ff ff7c 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 800a030:	b950      	cbnz	r0, 800a048 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800a032:	2e03      	cmp	r6, #3
 800a034:	d808      	bhi.n	800a048 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800a036:	6823      	ldr	r3, [r4, #0]
 800a038:	9a01      	ldr	r2, [sp, #4]
 800a03a:	695b      	ldr	r3, [r3, #20]
 800a03c:	4629      	mov	r1, r5
 800a03e:	4620      	mov	r0, r4
 800a040:	b002      	add	sp, #8
 800a042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a046:	4718      	bx	r3
 800a048:	b002      	add	sp, #8
 800a04a:	bd70      	pop	{r4, r5, r6, pc}

0800a04c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800a04c:	7803      	ldrb	r3, [r0, #0]
 800a04e:	2b47      	cmp	r3, #71	; 0x47
 800a050:	d117      	bne.n	800a082 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a052:	7843      	ldrb	r3, [r0, #1]
 800a054:	2b4e      	cmp	r3, #78	; 0x4e
 800a056:	d114      	bne.n	800a082 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a058:	7883      	ldrb	r3, [r0, #2]
 800a05a:	2b55      	cmp	r3, #85	; 0x55
 800a05c:	d111      	bne.n	800a082 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a05e:	78c3      	ldrb	r3, [r0, #3]
 800a060:	2b43      	cmp	r3, #67	; 0x43
 800a062:	d10e      	bne.n	800a082 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a064:	7903      	ldrb	r3, [r0, #4]
 800a066:	2b43      	cmp	r3, #67	; 0x43
 800a068:	d10b      	bne.n	800a082 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a06a:	7943      	ldrb	r3, [r0, #5]
 800a06c:	2b2b      	cmp	r3, #43	; 0x2b
 800a06e:	d108      	bne.n	800a082 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a070:	7983      	ldrb	r3, [r0, #6]
 800a072:	2b2b      	cmp	r3, #43	; 0x2b
 800a074:	d105      	bne.n	800a082 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a076:	79c0      	ldrb	r0, [r0, #7]
 800a078:	2801      	cmp	r0, #1
 800a07a:	bf8c      	ite	hi
 800a07c:	2000      	movhi	r0, #0
 800a07e:	2001      	movls	r0, #1
 800a080:	4770      	bx	lr
 800a082:	2000      	movs	r0, #0
 800a084:	4770      	bx	lr

0800a086 <__cxa_call_terminate>:
 800a086:	b510      	push	{r4, lr}
 800a088:	4604      	mov	r4, r0
 800a08a:	b148      	cbz	r0, 800a0a0 <__cxa_call_terminate+0x1a>
 800a08c:	f7ff fac9 	bl	8009622 <__cxa_begin_catch>
 800a090:	4620      	mov	r0, r4
 800a092:	f7ff ffdb 	bl	800a04c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a096:	b118      	cbz	r0, 800a0a0 <__cxa_call_terminate+0x1a>
 800a098:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800a09c:	f7ff fd98 	bl	8009bd0 <_ZN10__cxxabiv111__terminateEPFvvE>
 800a0a0:	f7ff fda2 	bl	8009be8 <_ZSt9terminatev>

0800a0a4 <__cxa_call_unexpected>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	f7ff ffd0 	bl	800a04c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a0ac:	b140      	cbz	r0, 800a0c0 <__cxa_call_unexpected+0x1c>
 800a0ae:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800a0b2:	2500      	movs	r5, #0
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	f7ff fab4 	bl	8009622 <__cxa_begin_catch>
 800a0ba:	b125      	cbz	r5, 800a0c6 <__cxa_call_unexpected+0x22>
 800a0bc:	f7ff fda6 	bl	8009c0c <_ZSt10unexpectedv>
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	2501      	movs	r5, #1
 800a0c4:	e7f6      	b.n	800a0b4 <__cxa_call_unexpected+0x10>
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f7ff fd93 	bl	8009bf2 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800a0cc <_ZSt15get_new_handlerv>:
 800a0cc:	4b02      	ldr	r3, [pc, #8]	; (800a0d8 <_ZSt15get_new_handlerv+0xc>)
 800a0ce:	6818      	ldr	r0, [r3, #0]
 800a0d0:	f3bf 8f5b 	dmb	ish
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	20000f1c 	.word	0x20000f1c

0800a0dc <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 800a0dc:	68c0      	ldr	r0, [r0, #12]
 800a0de:	68c9      	ldr	r1, [r1, #12]
 800a0e0:	b410      	push	{r4}
 800a0e2:	6804      	ldr	r4, [r0, #0]
 800a0e4:	6924      	ldr	r4, [r4, #16]
 800a0e6:	3302      	adds	r3, #2
 800a0e8:	46a4      	mov	ip, r4
 800a0ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ee:	4760      	bx	ip

0800a0f0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 800a0f0:	b510      	push	{r4, lr}
 800a0f2:	4b03      	ldr	r3, [pc, #12]	; (800a100 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 800a0f4:	6003      	str	r3, [r0, #0]
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	f7ff ff11 	bl	8009f1e <_ZNSt9type_infoD1Ev>
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	bd10      	pop	{r4, pc}
 800a100:	0800b294 	.word	0x0800b294

0800a104 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 800a104:	b510      	push	{r4, lr}
 800a106:	4604      	mov	r4, r0
 800a108:	f7ff fff2 	bl	800a0f0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800a10c:	4620      	mov	r0, r4
 800a10e:	2110      	movs	r1, #16
 800a110:	f7ff f91a 	bl	8009348 <_ZdlPvj>
 800a114:	4620      	mov	r0, r4
 800a116:	bd10      	pop	{r4, pc}

0800a118 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 800a118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a11c:	4605      	mov	r5, r0
 800a11e:	460e      	mov	r6, r1
 800a120:	4617      	mov	r7, r2
 800a122:	4698      	mov	r8, r3
 800a124:	f7ff ff00 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 800a128:	4604      	mov	r4, r0
 800a12a:	b9f0      	cbnz	r0, 800a16a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800a12c:	4929      	ldr	r1, [pc, #164]	; (800a1d4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>)
 800a12e:	4630      	mov	r0, r6
 800a130:	f7ff fefa 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 800a134:	b300      	cbz	r0, 800a178 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800a136:	682b      	ldr	r3, [r5, #0]
 800a138:	4927      	ldr	r1, [pc, #156]	; (800a1d8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc0>)
 800a13a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a13e:	f7ff fef3 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 800a142:	b110      	cbz	r0, 800a14a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
 800a144:	603c      	str	r4, [r7, #0]
 800a146:	4604      	mov	r4, r0
 800a148:	e00f      	b.n	800a16a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800a14a:	682b      	ldr	r3, [r5, #0]
 800a14c:	4923      	ldr	r1, [pc, #140]	; (800a1dc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>)
 800a14e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a152:	f7ff fee9 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 800a156:	4681      	mov	r9, r0
 800a158:	b170      	cbz	r0, 800a178 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800a15a:	68e8      	ldr	r0, [r5, #12]
 800a15c:	6803      	ldr	r3, [r0, #0]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	4798      	blx	r3
 800a162:	4604      	mov	r4, r0
 800a164:	b120      	cbz	r0, 800a170 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 800a166:	4b1e      	ldr	r3, [pc, #120]	; (800a1e0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc8>)
 800a168:	603b      	str	r3, [r7, #0]
 800a16a:	4620      	mov	r0, r4
 800a16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a170:	4b1c      	ldr	r3, [pc, #112]	; (800a1e4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xcc>)
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	464c      	mov	r4, r9
 800a176:	e7f8      	b.n	800a16a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a17e:	b33e      	cbz	r6, 800a1d0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb8>
 800a180:	6833      	ldr	r3, [r6, #0]
 800a182:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800a186:	f7ff fecf 	bl	8009f28 <_ZNKSt9type_infoeqERKS_>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d0db      	beq.n	800a146 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x2e>
 800a18e:	f018 0f01 	tst.w	r8, #1
 800a192:	d0ea      	beq.n	800a16a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800a194:	68b3      	ldr	r3, [r6, #8]
 800a196:	68a9      	ldr	r1, [r5, #8]
 800a198:	f003 0060 	and.w	r0, r3, #96	; 0x60
 800a19c:	f001 0260 	and.w	r2, r1, #96	; 0x60
 800a1a0:	ea30 0c02 	bics.w	ip, r0, r2
 800a1a4:	bf18      	it	ne
 800a1a6:	4013      	andne	r3, r2
 800a1a8:	ea23 0301 	bic.w	r3, r3, r1
 800a1ac:	ea22 0200 	bic.w	r2, r2, r0
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	d1da      	bne.n	800a16a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800a1b4:	07cb      	lsls	r3, r1, #31
 800a1b6:	682b      	ldr	r3, [r5, #0]
 800a1b8:	699c      	ldr	r4, [r3, #24]
 800a1ba:	bf58      	it	pl
 800a1bc:	f028 0801 	bicpl.w	r8, r8, #1
 800a1c0:	4643      	mov	r3, r8
 800a1c2:	463a      	mov	r2, r7
 800a1c4:	4631      	mov	r1, r6
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	46a4      	mov	ip, r4
 800a1ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ce:	4760      	bx	ip
 800a1d0:	f000 f80a 	bl	800a1e8 <__cxa_bad_typeid>
 800a1d4:	0800b0b8 	.word	0x0800b0b8
 800a1d8:	0800b134 	.word	0x0800b134
 800a1dc:	0800b2bc 	.word	0x0800b2bc
 800a1e0:	0800b2b4 	.word	0x0800b2b4
 800a1e4:	0800b2b0 	.word	0x0800b2b0

0800a1e8 <__cxa_bad_typeid>:
 800a1e8:	b508      	push	{r3, lr}
 800a1ea:	f000 f800 	bl	800a1ee <abort>

0800a1ee <abort>:
 800a1ee:	b508      	push	{r3, lr}
 800a1f0:	2006      	movs	r0, #6
 800a1f2:	f000 fb19 	bl	800a828 <raise>
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	f7f9 fde0 	bl	8003dbc <_exit>

0800a1fc <__errno>:
 800a1fc:	4b01      	ldr	r3, [pc, #4]	; (800a204 <__errno+0x8>)
 800a1fe:	6818      	ldr	r0, [r3, #0]
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	2000001c 	.word	0x2000001c

0800a208 <std>:
 800a208:	2300      	movs	r3, #0
 800a20a:	b510      	push	{r4, lr}
 800a20c:	4604      	mov	r4, r0
 800a20e:	e9c0 3300 	strd	r3, r3, [r0]
 800a212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a216:	6083      	str	r3, [r0, #8]
 800a218:	8181      	strh	r1, [r0, #12]
 800a21a:	6643      	str	r3, [r0, #100]	; 0x64
 800a21c:	81c2      	strh	r2, [r0, #14]
 800a21e:	6183      	str	r3, [r0, #24]
 800a220:	4619      	mov	r1, r3
 800a222:	2208      	movs	r2, #8
 800a224:	305c      	adds	r0, #92	; 0x5c
 800a226:	f000 f945 	bl	800a4b4 <memset>
 800a22a:	4b05      	ldr	r3, [pc, #20]	; (800a240 <std+0x38>)
 800a22c:	6263      	str	r3, [r4, #36]	; 0x24
 800a22e:	4b05      	ldr	r3, [pc, #20]	; (800a244 <std+0x3c>)
 800a230:	62a3      	str	r3, [r4, #40]	; 0x28
 800a232:	4b05      	ldr	r3, [pc, #20]	; (800a248 <std+0x40>)
 800a234:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a236:	4b05      	ldr	r3, [pc, #20]	; (800a24c <std+0x44>)
 800a238:	6224      	str	r4, [r4, #32]
 800a23a:	6323      	str	r3, [r4, #48]	; 0x30
 800a23c:	bd10      	pop	{r4, pc}
 800a23e:	bf00      	nop
 800a240:	0800a861 	.word	0x0800a861
 800a244:	0800a883 	.word	0x0800a883
 800a248:	0800a8bb 	.word	0x0800a8bb
 800a24c:	0800a8df 	.word	0x0800a8df

0800a250 <_cleanup_r>:
 800a250:	4901      	ldr	r1, [pc, #4]	; (800a258 <_cleanup_r+0x8>)
 800a252:	f000 b8af 	b.w	800a3b4 <_fwalk_reent>
 800a256:	bf00      	nop
 800a258:	0800abb9 	.word	0x0800abb9

0800a25c <__sfmoreglue>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	1e4a      	subs	r2, r1, #1
 800a260:	2568      	movs	r5, #104	; 0x68
 800a262:	4355      	muls	r5, r2
 800a264:	460e      	mov	r6, r1
 800a266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a26a:	f000 f97b 	bl	800a564 <_malloc_r>
 800a26e:	4604      	mov	r4, r0
 800a270:	b140      	cbz	r0, 800a284 <__sfmoreglue+0x28>
 800a272:	2100      	movs	r1, #0
 800a274:	e9c0 1600 	strd	r1, r6, [r0]
 800a278:	300c      	adds	r0, #12
 800a27a:	60a0      	str	r0, [r4, #8]
 800a27c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a280:	f000 f918 	bl	800a4b4 <memset>
 800a284:	4620      	mov	r0, r4
 800a286:	bd70      	pop	{r4, r5, r6, pc}

0800a288 <__sfp_lock_acquire>:
 800a288:	4801      	ldr	r0, [pc, #4]	; (800a290 <__sfp_lock_acquire+0x8>)
 800a28a:	f000 b8d8 	b.w	800a43e <__retarget_lock_acquire_recursive>
 800a28e:	bf00      	nop
 800a290:	200014c8 	.word	0x200014c8

0800a294 <__sfp_lock_release>:
 800a294:	4801      	ldr	r0, [pc, #4]	; (800a29c <__sfp_lock_release+0x8>)
 800a296:	f000 b8d3 	b.w	800a440 <__retarget_lock_release_recursive>
 800a29a:	bf00      	nop
 800a29c:	200014c8 	.word	0x200014c8

0800a2a0 <__sinit_lock_acquire>:
 800a2a0:	4801      	ldr	r0, [pc, #4]	; (800a2a8 <__sinit_lock_acquire+0x8>)
 800a2a2:	f000 b8cc 	b.w	800a43e <__retarget_lock_acquire_recursive>
 800a2a6:	bf00      	nop
 800a2a8:	200014c3 	.word	0x200014c3

0800a2ac <__sinit_lock_release>:
 800a2ac:	4801      	ldr	r0, [pc, #4]	; (800a2b4 <__sinit_lock_release+0x8>)
 800a2ae:	f000 b8c7 	b.w	800a440 <__retarget_lock_release_recursive>
 800a2b2:	bf00      	nop
 800a2b4:	200014c3 	.word	0x200014c3

0800a2b8 <__sinit>:
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	f7ff fff0 	bl	800a2a0 <__sinit_lock_acquire>
 800a2c0:	69a3      	ldr	r3, [r4, #24]
 800a2c2:	b11b      	cbz	r3, 800a2cc <__sinit+0x14>
 800a2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c8:	f7ff bff0 	b.w	800a2ac <__sinit_lock_release>
 800a2cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2d0:	6523      	str	r3, [r4, #80]	; 0x50
 800a2d2:	4b13      	ldr	r3, [pc, #76]	; (800a320 <__sinit+0x68>)
 800a2d4:	4a13      	ldr	r2, [pc, #76]	; (800a324 <__sinit+0x6c>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2da:	42a3      	cmp	r3, r4
 800a2dc:	bf04      	itt	eq
 800a2de:	2301      	moveq	r3, #1
 800a2e0:	61a3      	streq	r3, [r4, #24]
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f000 f820 	bl	800a328 <__sfp>
 800a2e8:	6060      	str	r0, [r4, #4]
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f000 f81c 	bl	800a328 <__sfp>
 800a2f0:	60a0      	str	r0, [r4, #8]
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 f818 	bl	800a328 <__sfp>
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	60e0      	str	r0, [r4, #12]
 800a2fc:	2104      	movs	r1, #4
 800a2fe:	6860      	ldr	r0, [r4, #4]
 800a300:	f7ff ff82 	bl	800a208 <std>
 800a304:	68a0      	ldr	r0, [r4, #8]
 800a306:	2201      	movs	r2, #1
 800a308:	2109      	movs	r1, #9
 800a30a:	f7ff ff7d 	bl	800a208 <std>
 800a30e:	68e0      	ldr	r0, [r4, #12]
 800a310:	2202      	movs	r2, #2
 800a312:	2112      	movs	r1, #18
 800a314:	f7ff ff78 	bl	800a208 <std>
 800a318:	2301      	movs	r3, #1
 800a31a:	61a3      	str	r3, [r4, #24]
 800a31c:	e7d2      	b.n	800a2c4 <__sinit+0xc>
 800a31e:	bf00      	nop
 800a320:	0800b358 	.word	0x0800b358
 800a324:	0800a251 	.word	0x0800a251

0800a328 <__sfp>:
 800a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32a:	4607      	mov	r7, r0
 800a32c:	f7ff ffac 	bl	800a288 <__sfp_lock_acquire>
 800a330:	4b1e      	ldr	r3, [pc, #120]	; (800a3ac <__sfp+0x84>)
 800a332:	681e      	ldr	r6, [r3, #0]
 800a334:	69b3      	ldr	r3, [r6, #24]
 800a336:	b913      	cbnz	r3, 800a33e <__sfp+0x16>
 800a338:	4630      	mov	r0, r6
 800a33a:	f7ff ffbd 	bl	800a2b8 <__sinit>
 800a33e:	3648      	adds	r6, #72	; 0x48
 800a340:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a344:	3b01      	subs	r3, #1
 800a346:	d503      	bpl.n	800a350 <__sfp+0x28>
 800a348:	6833      	ldr	r3, [r6, #0]
 800a34a:	b30b      	cbz	r3, 800a390 <__sfp+0x68>
 800a34c:	6836      	ldr	r6, [r6, #0]
 800a34e:	e7f7      	b.n	800a340 <__sfp+0x18>
 800a350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a354:	b9d5      	cbnz	r5, 800a38c <__sfp+0x64>
 800a356:	4b16      	ldr	r3, [pc, #88]	; (800a3b0 <__sfp+0x88>)
 800a358:	60e3      	str	r3, [r4, #12]
 800a35a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a35e:	6665      	str	r5, [r4, #100]	; 0x64
 800a360:	f000 f86c 	bl	800a43c <__retarget_lock_init_recursive>
 800a364:	f7ff ff96 	bl	800a294 <__sfp_lock_release>
 800a368:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a36c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a370:	6025      	str	r5, [r4, #0]
 800a372:	61a5      	str	r5, [r4, #24]
 800a374:	2208      	movs	r2, #8
 800a376:	4629      	mov	r1, r5
 800a378:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a37c:	f000 f89a 	bl	800a4b4 <memset>
 800a380:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a384:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a388:	4620      	mov	r0, r4
 800a38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a38c:	3468      	adds	r4, #104	; 0x68
 800a38e:	e7d9      	b.n	800a344 <__sfp+0x1c>
 800a390:	2104      	movs	r1, #4
 800a392:	4638      	mov	r0, r7
 800a394:	f7ff ff62 	bl	800a25c <__sfmoreglue>
 800a398:	4604      	mov	r4, r0
 800a39a:	6030      	str	r0, [r6, #0]
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d1d5      	bne.n	800a34c <__sfp+0x24>
 800a3a0:	f7ff ff78 	bl	800a294 <__sfp_lock_release>
 800a3a4:	230c      	movs	r3, #12
 800a3a6:	603b      	str	r3, [r7, #0]
 800a3a8:	e7ee      	b.n	800a388 <__sfp+0x60>
 800a3aa:	bf00      	nop
 800a3ac:	0800b358 	.word	0x0800b358
 800a3b0:	ffff0001 	.word	0xffff0001

0800a3b4 <_fwalk_reent>:
 800a3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b8:	4606      	mov	r6, r0
 800a3ba:	4688      	mov	r8, r1
 800a3bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3c0:	2700      	movs	r7, #0
 800a3c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3c6:	f1b9 0901 	subs.w	r9, r9, #1
 800a3ca:	d505      	bpl.n	800a3d8 <_fwalk_reent+0x24>
 800a3cc:	6824      	ldr	r4, [r4, #0]
 800a3ce:	2c00      	cmp	r4, #0
 800a3d0:	d1f7      	bne.n	800a3c2 <_fwalk_reent+0xe>
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d8:	89ab      	ldrh	r3, [r5, #12]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d907      	bls.n	800a3ee <_fwalk_reent+0x3a>
 800a3de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	d003      	beq.n	800a3ee <_fwalk_reent+0x3a>
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	47c0      	blx	r8
 800a3ec:	4307      	orrs	r7, r0
 800a3ee:	3568      	adds	r5, #104	; 0x68
 800a3f0:	e7e9      	b.n	800a3c6 <_fwalk_reent+0x12>
	...

0800a3f4 <__libc_init_array>:
 800a3f4:	b570      	push	{r4, r5, r6, lr}
 800a3f6:	4d0d      	ldr	r5, [pc, #52]	; (800a42c <__libc_init_array+0x38>)
 800a3f8:	4c0d      	ldr	r4, [pc, #52]	; (800a430 <__libc_init_array+0x3c>)
 800a3fa:	1b64      	subs	r4, r4, r5
 800a3fc:	10a4      	asrs	r4, r4, #2
 800a3fe:	2600      	movs	r6, #0
 800a400:	42a6      	cmp	r6, r4
 800a402:	d109      	bne.n	800a418 <__libc_init_array+0x24>
 800a404:	4d0b      	ldr	r5, [pc, #44]	; (800a434 <__libc_init_array+0x40>)
 800a406:	4c0c      	ldr	r4, [pc, #48]	; (800a438 <__libc_init_array+0x44>)
 800a408:	f000 fcc2 	bl	800ad90 <_init>
 800a40c:	1b64      	subs	r4, r4, r5
 800a40e:	10a4      	asrs	r4, r4, #2
 800a410:	2600      	movs	r6, #0
 800a412:	42a6      	cmp	r6, r4
 800a414:	d105      	bne.n	800a422 <__libc_init_array+0x2e>
 800a416:	bd70      	pop	{r4, r5, r6, pc}
 800a418:	f855 3b04 	ldr.w	r3, [r5], #4
 800a41c:	4798      	blx	r3
 800a41e:	3601      	adds	r6, #1
 800a420:	e7ee      	b.n	800a400 <__libc_init_array+0xc>
 800a422:	f855 3b04 	ldr.w	r3, [r5], #4
 800a426:	4798      	blx	r3
 800a428:	3601      	adds	r6, #1
 800a42a:	e7f2      	b.n	800a412 <__libc_init_array+0x1e>
 800a42c:	0800b958 	.word	0x0800b958
 800a430:	0800b958 	.word	0x0800b958
 800a434:	0800b958 	.word	0x0800b958
 800a438:	0800b964 	.word	0x0800b964

0800a43c <__retarget_lock_init_recursive>:
 800a43c:	4770      	bx	lr

0800a43e <__retarget_lock_acquire_recursive>:
 800a43e:	4770      	bx	lr

0800a440 <__retarget_lock_release_recursive>:
 800a440:	4770      	bx	lr
	...

0800a444 <malloc>:
 800a444:	4b02      	ldr	r3, [pc, #8]	; (800a450 <malloc+0xc>)
 800a446:	4601      	mov	r1, r0
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	f000 b88b 	b.w	800a564 <_malloc_r>
 800a44e:	bf00      	nop
 800a450:	2000001c 	.word	0x2000001c

0800a454 <free>:
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <free+0xc>)
 800a456:	4601      	mov	r1, r0
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f000 b833 	b.w	800a4c4 <_free_r>
 800a45e:	bf00      	nop
 800a460:	2000001c 	.word	0x2000001c

0800a464 <memcpy>:
 800a464:	440a      	add	r2, r1
 800a466:	4291      	cmp	r1, r2
 800a468:	f100 33ff 	add.w	r3, r0, #4294967295
 800a46c:	d100      	bne.n	800a470 <memcpy+0xc>
 800a46e:	4770      	bx	lr
 800a470:	b510      	push	{r4, lr}
 800a472:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a47a:	4291      	cmp	r1, r2
 800a47c:	d1f9      	bne.n	800a472 <memcpy+0xe>
 800a47e:	bd10      	pop	{r4, pc}

0800a480 <memmove>:
 800a480:	4288      	cmp	r0, r1
 800a482:	b510      	push	{r4, lr}
 800a484:	eb01 0402 	add.w	r4, r1, r2
 800a488:	d902      	bls.n	800a490 <memmove+0x10>
 800a48a:	4284      	cmp	r4, r0
 800a48c:	4623      	mov	r3, r4
 800a48e:	d807      	bhi.n	800a4a0 <memmove+0x20>
 800a490:	1e43      	subs	r3, r0, #1
 800a492:	42a1      	cmp	r1, r4
 800a494:	d008      	beq.n	800a4a8 <memmove+0x28>
 800a496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a49a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a49e:	e7f8      	b.n	800a492 <memmove+0x12>
 800a4a0:	4402      	add	r2, r0
 800a4a2:	4601      	mov	r1, r0
 800a4a4:	428a      	cmp	r2, r1
 800a4a6:	d100      	bne.n	800a4aa <memmove+0x2a>
 800a4a8:	bd10      	pop	{r4, pc}
 800a4aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4b2:	e7f7      	b.n	800a4a4 <memmove+0x24>

0800a4b4 <memset>:
 800a4b4:	4402      	add	r2, r0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d100      	bne.n	800a4be <memset+0xa>
 800a4bc:	4770      	bx	lr
 800a4be:	f803 1b01 	strb.w	r1, [r3], #1
 800a4c2:	e7f9      	b.n	800a4b8 <memset+0x4>

0800a4c4 <_free_r>:
 800a4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4c6:	2900      	cmp	r1, #0
 800a4c8:	d048      	beq.n	800a55c <_free_r+0x98>
 800a4ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ce:	9001      	str	r0, [sp, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a4d6:	bfb8      	it	lt
 800a4d8:	18e4      	addlt	r4, r4, r3
 800a4da:	f7f6 fffb 	bl	80014d4 <__malloc_lock>
 800a4de:	4a20      	ldr	r2, [pc, #128]	; (800a560 <_free_r+0x9c>)
 800a4e0:	9801      	ldr	r0, [sp, #4]
 800a4e2:	6813      	ldr	r3, [r2, #0]
 800a4e4:	4615      	mov	r5, r2
 800a4e6:	b933      	cbnz	r3, 800a4f6 <_free_r+0x32>
 800a4e8:	6063      	str	r3, [r4, #4]
 800a4ea:	6014      	str	r4, [r2, #0]
 800a4ec:	b003      	add	sp, #12
 800a4ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4f2:	f7f7 b80d 	b.w	8001510 <__malloc_unlock>
 800a4f6:	42a3      	cmp	r3, r4
 800a4f8:	d90b      	bls.n	800a512 <_free_r+0x4e>
 800a4fa:	6821      	ldr	r1, [r4, #0]
 800a4fc:	1862      	adds	r2, r4, r1
 800a4fe:	4293      	cmp	r3, r2
 800a500:	bf04      	itt	eq
 800a502:	681a      	ldreq	r2, [r3, #0]
 800a504:	685b      	ldreq	r3, [r3, #4]
 800a506:	6063      	str	r3, [r4, #4]
 800a508:	bf04      	itt	eq
 800a50a:	1852      	addeq	r2, r2, r1
 800a50c:	6022      	streq	r2, [r4, #0]
 800a50e:	602c      	str	r4, [r5, #0]
 800a510:	e7ec      	b.n	800a4ec <_free_r+0x28>
 800a512:	461a      	mov	r2, r3
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	b10b      	cbz	r3, 800a51c <_free_r+0x58>
 800a518:	42a3      	cmp	r3, r4
 800a51a:	d9fa      	bls.n	800a512 <_free_r+0x4e>
 800a51c:	6811      	ldr	r1, [r2, #0]
 800a51e:	1855      	adds	r5, r2, r1
 800a520:	42a5      	cmp	r5, r4
 800a522:	d10b      	bne.n	800a53c <_free_r+0x78>
 800a524:	6824      	ldr	r4, [r4, #0]
 800a526:	4421      	add	r1, r4
 800a528:	1854      	adds	r4, r2, r1
 800a52a:	42a3      	cmp	r3, r4
 800a52c:	6011      	str	r1, [r2, #0]
 800a52e:	d1dd      	bne.n	800a4ec <_free_r+0x28>
 800a530:	681c      	ldr	r4, [r3, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	6053      	str	r3, [r2, #4]
 800a536:	4421      	add	r1, r4
 800a538:	6011      	str	r1, [r2, #0]
 800a53a:	e7d7      	b.n	800a4ec <_free_r+0x28>
 800a53c:	d902      	bls.n	800a544 <_free_r+0x80>
 800a53e:	230c      	movs	r3, #12
 800a540:	6003      	str	r3, [r0, #0]
 800a542:	e7d3      	b.n	800a4ec <_free_r+0x28>
 800a544:	6825      	ldr	r5, [r4, #0]
 800a546:	1961      	adds	r1, r4, r5
 800a548:	428b      	cmp	r3, r1
 800a54a:	bf04      	itt	eq
 800a54c:	6819      	ldreq	r1, [r3, #0]
 800a54e:	685b      	ldreq	r3, [r3, #4]
 800a550:	6063      	str	r3, [r4, #4]
 800a552:	bf04      	itt	eq
 800a554:	1949      	addeq	r1, r1, r5
 800a556:	6021      	streq	r1, [r4, #0]
 800a558:	6054      	str	r4, [r2, #4]
 800a55a:	e7c7      	b.n	800a4ec <_free_r+0x28>
 800a55c:	b003      	add	sp, #12
 800a55e:	bd30      	pop	{r4, r5, pc}
 800a560:	20000f20 	.word	0x20000f20

0800a564 <_malloc_r>:
 800a564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a566:	1ccd      	adds	r5, r1, #3
 800a568:	f025 0503 	bic.w	r5, r5, #3
 800a56c:	3508      	adds	r5, #8
 800a56e:	2d0c      	cmp	r5, #12
 800a570:	bf38      	it	cc
 800a572:	250c      	movcc	r5, #12
 800a574:	2d00      	cmp	r5, #0
 800a576:	4606      	mov	r6, r0
 800a578:	db01      	blt.n	800a57e <_malloc_r+0x1a>
 800a57a:	42a9      	cmp	r1, r5
 800a57c:	d903      	bls.n	800a586 <_malloc_r+0x22>
 800a57e:	230c      	movs	r3, #12
 800a580:	6033      	str	r3, [r6, #0]
 800a582:	2000      	movs	r0, #0
 800a584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a586:	f7f6 ffa5 	bl	80014d4 <__malloc_lock>
 800a58a:	4921      	ldr	r1, [pc, #132]	; (800a610 <_malloc_r+0xac>)
 800a58c:	680a      	ldr	r2, [r1, #0]
 800a58e:	4614      	mov	r4, r2
 800a590:	b99c      	cbnz	r4, 800a5ba <_malloc_r+0x56>
 800a592:	4f20      	ldr	r7, [pc, #128]	; (800a614 <_malloc_r+0xb0>)
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	b923      	cbnz	r3, 800a5a2 <_malloc_r+0x3e>
 800a598:	4621      	mov	r1, r4
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7f6 ff28 	bl	80013f0 <_sbrk_r>
 800a5a0:	6038      	str	r0, [r7, #0]
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f7f6 ff23 	bl	80013f0 <_sbrk_r>
 800a5aa:	1c43      	adds	r3, r0, #1
 800a5ac:	d123      	bne.n	800a5f6 <_malloc_r+0x92>
 800a5ae:	230c      	movs	r3, #12
 800a5b0:	6033      	str	r3, [r6, #0]
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f7f6 ffac 	bl	8001510 <__malloc_unlock>
 800a5b8:	e7e3      	b.n	800a582 <_malloc_r+0x1e>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	1b5b      	subs	r3, r3, r5
 800a5be:	d417      	bmi.n	800a5f0 <_malloc_r+0x8c>
 800a5c0:	2b0b      	cmp	r3, #11
 800a5c2:	d903      	bls.n	800a5cc <_malloc_r+0x68>
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	441c      	add	r4, r3
 800a5c8:	6025      	str	r5, [r4, #0]
 800a5ca:	e004      	b.n	800a5d6 <_malloc_r+0x72>
 800a5cc:	6863      	ldr	r3, [r4, #4]
 800a5ce:	42a2      	cmp	r2, r4
 800a5d0:	bf0c      	ite	eq
 800a5d2:	600b      	streq	r3, [r1, #0]
 800a5d4:	6053      	strne	r3, [r2, #4]
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f7f6 ff9a 	bl	8001510 <__malloc_unlock>
 800a5dc:	f104 000b 	add.w	r0, r4, #11
 800a5e0:	1d23      	adds	r3, r4, #4
 800a5e2:	f020 0007 	bic.w	r0, r0, #7
 800a5e6:	1ac2      	subs	r2, r0, r3
 800a5e8:	d0cc      	beq.n	800a584 <_malloc_r+0x20>
 800a5ea:	1a1b      	subs	r3, r3, r0
 800a5ec:	50a3      	str	r3, [r4, r2]
 800a5ee:	e7c9      	b.n	800a584 <_malloc_r+0x20>
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	6864      	ldr	r4, [r4, #4]
 800a5f4:	e7cc      	b.n	800a590 <_malloc_r+0x2c>
 800a5f6:	1cc4      	adds	r4, r0, #3
 800a5f8:	f024 0403 	bic.w	r4, r4, #3
 800a5fc:	42a0      	cmp	r0, r4
 800a5fe:	d0e3      	beq.n	800a5c8 <_malloc_r+0x64>
 800a600:	1a21      	subs	r1, r4, r0
 800a602:	4630      	mov	r0, r6
 800a604:	f7f6 fef4 	bl	80013f0 <_sbrk_r>
 800a608:	3001      	adds	r0, #1
 800a60a:	d1dd      	bne.n	800a5c8 <_malloc_r+0x64>
 800a60c:	e7cf      	b.n	800a5ae <_malloc_r+0x4a>
 800a60e:	bf00      	nop
 800a610:	20000f20 	.word	0x20000f20
 800a614:	20000f24 	.word	0x20000f24

0800a618 <_puts_r>:
 800a618:	b570      	push	{r4, r5, r6, lr}
 800a61a:	460e      	mov	r6, r1
 800a61c:	4605      	mov	r5, r0
 800a61e:	b118      	cbz	r0, 800a628 <_puts_r+0x10>
 800a620:	6983      	ldr	r3, [r0, #24]
 800a622:	b90b      	cbnz	r3, 800a628 <_puts_r+0x10>
 800a624:	f7ff fe48 	bl	800a2b8 <__sinit>
 800a628:	69ab      	ldr	r3, [r5, #24]
 800a62a:	68ac      	ldr	r4, [r5, #8]
 800a62c:	b913      	cbnz	r3, 800a634 <_puts_r+0x1c>
 800a62e:	4628      	mov	r0, r5
 800a630:	f7ff fe42 	bl	800a2b8 <__sinit>
 800a634:	4b2c      	ldr	r3, [pc, #176]	; (800a6e8 <_puts_r+0xd0>)
 800a636:	429c      	cmp	r4, r3
 800a638:	d120      	bne.n	800a67c <_puts_r+0x64>
 800a63a:	686c      	ldr	r4, [r5, #4]
 800a63c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a63e:	07db      	lsls	r3, r3, #31
 800a640:	d405      	bmi.n	800a64e <_puts_r+0x36>
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	0598      	lsls	r0, r3, #22
 800a646:	d402      	bmi.n	800a64e <_puts_r+0x36>
 800a648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a64a:	f7ff fef8 	bl	800a43e <__retarget_lock_acquire_recursive>
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	0719      	lsls	r1, r3, #28
 800a652:	d51d      	bpl.n	800a690 <_puts_r+0x78>
 800a654:	6923      	ldr	r3, [r4, #16]
 800a656:	b1db      	cbz	r3, 800a690 <_puts_r+0x78>
 800a658:	3e01      	subs	r6, #1
 800a65a:	68a3      	ldr	r3, [r4, #8]
 800a65c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a660:	3b01      	subs	r3, #1
 800a662:	60a3      	str	r3, [r4, #8]
 800a664:	bb39      	cbnz	r1, 800a6b6 <_puts_r+0x9e>
 800a666:	2b00      	cmp	r3, #0
 800a668:	da38      	bge.n	800a6dc <_puts_r+0xc4>
 800a66a:	4622      	mov	r2, r4
 800a66c:	210a      	movs	r1, #10
 800a66e:	4628      	mov	r0, r5
 800a670:	f000 f93a 	bl	800a8e8 <__swbuf_r>
 800a674:	3001      	adds	r0, #1
 800a676:	d011      	beq.n	800a69c <_puts_r+0x84>
 800a678:	250a      	movs	r5, #10
 800a67a:	e011      	b.n	800a6a0 <_puts_r+0x88>
 800a67c:	4b1b      	ldr	r3, [pc, #108]	; (800a6ec <_puts_r+0xd4>)
 800a67e:	429c      	cmp	r4, r3
 800a680:	d101      	bne.n	800a686 <_puts_r+0x6e>
 800a682:	68ac      	ldr	r4, [r5, #8]
 800a684:	e7da      	b.n	800a63c <_puts_r+0x24>
 800a686:	4b1a      	ldr	r3, [pc, #104]	; (800a6f0 <_puts_r+0xd8>)
 800a688:	429c      	cmp	r4, r3
 800a68a:	bf08      	it	eq
 800a68c:	68ec      	ldreq	r4, [r5, #12]
 800a68e:	e7d5      	b.n	800a63c <_puts_r+0x24>
 800a690:	4621      	mov	r1, r4
 800a692:	4628      	mov	r0, r5
 800a694:	f000 f98c 	bl	800a9b0 <__swsetup_r>
 800a698:	2800      	cmp	r0, #0
 800a69a:	d0dd      	beq.n	800a658 <_puts_r+0x40>
 800a69c:	f04f 35ff 	mov.w	r5, #4294967295
 800a6a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6a2:	07da      	lsls	r2, r3, #31
 800a6a4:	d405      	bmi.n	800a6b2 <_puts_r+0x9a>
 800a6a6:	89a3      	ldrh	r3, [r4, #12]
 800a6a8:	059b      	lsls	r3, r3, #22
 800a6aa:	d402      	bmi.n	800a6b2 <_puts_r+0x9a>
 800a6ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ae:	f7ff fec7 	bl	800a440 <__retarget_lock_release_recursive>
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	da04      	bge.n	800a6c4 <_puts_r+0xac>
 800a6ba:	69a2      	ldr	r2, [r4, #24]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	dc06      	bgt.n	800a6ce <_puts_r+0xb6>
 800a6c0:	290a      	cmp	r1, #10
 800a6c2:	d004      	beq.n	800a6ce <_puts_r+0xb6>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	6022      	str	r2, [r4, #0]
 800a6ca:	7019      	strb	r1, [r3, #0]
 800a6cc:	e7c5      	b.n	800a65a <_puts_r+0x42>
 800a6ce:	4622      	mov	r2, r4
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f000 f909 	bl	800a8e8 <__swbuf_r>
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	d1bf      	bne.n	800a65a <_puts_r+0x42>
 800a6da:	e7df      	b.n	800a69c <_puts_r+0x84>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	250a      	movs	r5, #10
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	6022      	str	r2, [r4, #0]
 800a6e4:	701d      	strb	r5, [r3, #0]
 800a6e6:	e7db      	b.n	800a6a0 <_puts_r+0x88>
 800a6e8:	0800b318 	.word	0x0800b318
 800a6ec:	0800b338 	.word	0x0800b338
 800a6f0:	0800b2f8 	.word	0x0800b2f8

0800a6f4 <puts>:
 800a6f4:	4b02      	ldr	r3, [pc, #8]	; (800a700 <puts+0xc>)
 800a6f6:	4601      	mov	r1, r0
 800a6f8:	6818      	ldr	r0, [r3, #0]
 800a6fa:	f7ff bf8d 	b.w	800a618 <_puts_r>
 800a6fe:	bf00      	nop
 800a700:	2000001c 	.word	0x2000001c

0800a704 <cleanup_glue>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	460c      	mov	r4, r1
 800a708:	6809      	ldr	r1, [r1, #0]
 800a70a:	4605      	mov	r5, r0
 800a70c:	b109      	cbz	r1, 800a712 <cleanup_glue+0xe>
 800a70e:	f7ff fff9 	bl	800a704 <cleanup_glue>
 800a712:	4621      	mov	r1, r4
 800a714:	4628      	mov	r0, r5
 800a716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a71a:	f7ff bed3 	b.w	800a4c4 <_free_r>
	...

0800a720 <_reclaim_reent>:
 800a720:	4b2c      	ldr	r3, [pc, #176]	; (800a7d4 <_reclaim_reent+0xb4>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4283      	cmp	r3, r0
 800a726:	b570      	push	{r4, r5, r6, lr}
 800a728:	4604      	mov	r4, r0
 800a72a:	d051      	beq.n	800a7d0 <_reclaim_reent+0xb0>
 800a72c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a72e:	b143      	cbz	r3, 800a742 <_reclaim_reent+0x22>
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d14a      	bne.n	800a7cc <_reclaim_reent+0xac>
 800a736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a738:	6819      	ldr	r1, [r3, #0]
 800a73a:	b111      	cbz	r1, 800a742 <_reclaim_reent+0x22>
 800a73c:	4620      	mov	r0, r4
 800a73e:	f7ff fec1 	bl	800a4c4 <_free_r>
 800a742:	6961      	ldr	r1, [r4, #20]
 800a744:	b111      	cbz	r1, 800a74c <_reclaim_reent+0x2c>
 800a746:	4620      	mov	r0, r4
 800a748:	f7ff febc 	bl	800a4c4 <_free_r>
 800a74c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a74e:	b111      	cbz	r1, 800a756 <_reclaim_reent+0x36>
 800a750:	4620      	mov	r0, r4
 800a752:	f7ff feb7 	bl	800a4c4 <_free_r>
 800a756:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a758:	b111      	cbz	r1, 800a760 <_reclaim_reent+0x40>
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7ff feb2 	bl	800a4c4 <_free_r>
 800a760:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a762:	b111      	cbz	r1, 800a76a <_reclaim_reent+0x4a>
 800a764:	4620      	mov	r0, r4
 800a766:	f7ff fead 	bl	800a4c4 <_free_r>
 800a76a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a76c:	b111      	cbz	r1, 800a774 <_reclaim_reent+0x54>
 800a76e:	4620      	mov	r0, r4
 800a770:	f7ff fea8 	bl	800a4c4 <_free_r>
 800a774:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a776:	b111      	cbz	r1, 800a77e <_reclaim_reent+0x5e>
 800a778:	4620      	mov	r0, r4
 800a77a:	f7ff fea3 	bl	800a4c4 <_free_r>
 800a77e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a780:	b111      	cbz	r1, 800a788 <_reclaim_reent+0x68>
 800a782:	4620      	mov	r0, r4
 800a784:	f7ff fe9e 	bl	800a4c4 <_free_r>
 800a788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a78a:	b111      	cbz	r1, 800a792 <_reclaim_reent+0x72>
 800a78c:	4620      	mov	r0, r4
 800a78e:	f7ff fe99 	bl	800a4c4 <_free_r>
 800a792:	69a3      	ldr	r3, [r4, #24]
 800a794:	b1e3      	cbz	r3, 800a7d0 <_reclaim_reent+0xb0>
 800a796:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a798:	4620      	mov	r0, r4
 800a79a:	4798      	blx	r3
 800a79c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a79e:	b1b9      	cbz	r1, 800a7d0 <_reclaim_reent+0xb0>
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7a6:	f7ff bfad 	b.w	800a704 <cleanup_glue>
 800a7aa:	5949      	ldr	r1, [r1, r5]
 800a7ac:	b941      	cbnz	r1, 800a7c0 <_reclaim_reent+0xa0>
 800a7ae:	3504      	adds	r5, #4
 800a7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7b2:	2d80      	cmp	r5, #128	; 0x80
 800a7b4:	68d9      	ldr	r1, [r3, #12]
 800a7b6:	d1f8      	bne.n	800a7aa <_reclaim_reent+0x8a>
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f7ff fe83 	bl	800a4c4 <_free_r>
 800a7be:	e7ba      	b.n	800a736 <_reclaim_reent+0x16>
 800a7c0:	680e      	ldr	r6, [r1, #0]
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f7ff fe7e 	bl	800a4c4 <_free_r>
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	e7ef      	b.n	800a7ac <_reclaim_reent+0x8c>
 800a7cc:	2500      	movs	r5, #0
 800a7ce:	e7ef      	b.n	800a7b0 <_reclaim_reent+0x90>
 800a7d0:	bd70      	pop	{r4, r5, r6, pc}
 800a7d2:	bf00      	nop
 800a7d4:	2000001c 	.word	0x2000001c

0800a7d8 <_raise_r>:
 800a7d8:	291f      	cmp	r1, #31
 800a7da:	b538      	push	{r3, r4, r5, lr}
 800a7dc:	4604      	mov	r4, r0
 800a7de:	460d      	mov	r5, r1
 800a7e0:	d904      	bls.n	800a7ec <_raise_r+0x14>
 800a7e2:	2316      	movs	r3, #22
 800a7e4:	6003      	str	r3, [r0, #0]
 800a7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7ee:	b112      	cbz	r2, 800a7f6 <_raise_r+0x1e>
 800a7f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7f4:	b94b      	cbnz	r3, 800a80a <_raise_r+0x32>
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 f830 	bl	800a85c <_getpid_r>
 800a7fc:	462a      	mov	r2, r5
 800a7fe:	4601      	mov	r1, r0
 800a800:	4620      	mov	r0, r4
 800a802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a806:	f000 b817 	b.w	800a838 <_kill_r>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d00a      	beq.n	800a824 <_raise_r+0x4c>
 800a80e:	1c59      	adds	r1, r3, #1
 800a810:	d103      	bne.n	800a81a <_raise_r+0x42>
 800a812:	2316      	movs	r3, #22
 800a814:	6003      	str	r3, [r0, #0]
 800a816:	2001      	movs	r0, #1
 800a818:	e7e7      	b.n	800a7ea <_raise_r+0x12>
 800a81a:	2400      	movs	r4, #0
 800a81c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a820:	4628      	mov	r0, r5
 800a822:	4798      	blx	r3
 800a824:	2000      	movs	r0, #0
 800a826:	e7e0      	b.n	800a7ea <_raise_r+0x12>

0800a828 <raise>:
 800a828:	4b02      	ldr	r3, [pc, #8]	; (800a834 <raise+0xc>)
 800a82a:	4601      	mov	r1, r0
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	f7ff bfd3 	b.w	800a7d8 <_raise_r>
 800a832:	bf00      	nop
 800a834:	2000001c 	.word	0x2000001c

0800a838 <_kill_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	4d07      	ldr	r5, [pc, #28]	; (800a858 <_kill_r+0x20>)
 800a83c:	2300      	movs	r3, #0
 800a83e:	4604      	mov	r4, r0
 800a840:	4608      	mov	r0, r1
 800a842:	4611      	mov	r1, r2
 800a844:	602b      	str	r3, [r5, #0]
 800a846:	f7f9 faa9 	bl	8003d9c <_kill>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	d102      	bne.n	800a854 <_kill_r+0x1c>
 800a84e:	682b      	ldr	r3, [r5, #0]
 800a850:	b103      	cbz	r3, 800a854 <_kill_r+0x1c>
 800a852:	6023      	str	r3, [r4, #0]
 800a854:	bd38      	pop	{r3, r4, r5, pc}
 800a856:	bf00      	nop
 800a858:	200014cc 	.word	0x200014cc

0800a85c <_getpid_r>:
 800a85c:	f7f9 ba96 	b.w	8003d8c <_getpid>

0800a860 <__sread>:
 800a860:	b510      	push	{r4, lr}
 800a862:	460c      	mov	r4, r1
 800a864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a868:	f000 fa58 	bl	800ad1c <_read_r>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	bfab      	itete	ge
 800a870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a872:	89a3      	ldrhlt	r3, [r4, #12]
 800a874:	181b      	addge	r3, r3, r0
 800a876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a87a:	bfac      	ite	ge
 800a87c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a87e:	81a3      	strhlt	r3, [r4, #12]
 800a880:	bd10      	pop	{r4, pc}

0800a882 <__swrite>:
 800a882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a886:	461f      	mov	r7, r3
 800a888:	898b      	ldrh	r3, [r1, #12]
 800a88a:	05db      	lsls	r3, r3, #23
 800a88c:	4605      	mov	r5, r0
 800a88e:	460c      	mov	r4, r1
 800a890:	4616      	mov	r6, r2
 800a892:	d505      	bpl.n	800a8a0 <__swrite+0x1e>
 800a894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a898:	2302      	movs	r3, #2
 800a89a:	2200      	movs	r2, #0
 800a89c:	f000 f9c8 	bl	800ac30 <_lseek_r>
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8aa:	81a3      	strh	r3, [r4, #12]
 800a8ac:	4632      	mov	r2, r6
 800a8ae:	463b      	mov	r3, r7
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b6:	f000 b869 	b.w	800a98c <_write_r>

0800a8ba <__sseek>:
 800a8ba:	b510      	push	{r4, lr}
 800a8bc:	460c      	mov	r4, r1
 800a8be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c2:	f000 f9b5 	bl	800ac30 <_lseek_r>
 800a8c6:	1c43      	adds	r3, r0, #1
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	bf15      	itete	ne
 800a8cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8d6:	81a3      	strheq	r3, [r4, #12]
 800a8d8:	bf18      	it	ne
 800a8da:	81a3      	strhne	r3, [r4, #12]
 800a8dc:	bd10      	pop	{r4, pc}

0800a8de <__sclose>:
 800a8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e2:	f000 b8d3 	b.w	800aa8c <_close_r>
	...

0800a8e8 <__swbuf_r>:
 800a8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ea:	460e      	mov	r6, r1
 800a8ec:	4614      	mov	r4, r2
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	b118      	cbz	r0, 800a8fa <__swbuf_r+0x12>
 800a8f2:	6983      	ldr	r3, [r0, #24]
 800a8f4:	b90b      	cbnz	r3, 800a8fa <__swbuf_r+0x12>
 800a8f6:	f7ff fcdf 	bl	800a2b8 <__sinit>
 800a8fa:	4b21      	ldr	r3, [pc, #132]	; (800a980 <__swbuf_r+0x98>)
 800a8fc:	429c      	cmp	r4, r3
 800a8fe:	d12b      	bne.n	800a958 <__swbuf_r+0x70>
 800a900:	686c      	ldr	r4, [r5, #4]
 800a902:	69a3      	ldr	r3, [r4, #24]
 800a904:	60a3      	str	r3, [r4, #8]
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	071a      	lsls	r2, r3, #28
 800a90a:	d52f      	bpl.n	800a96c <__swbuf_r+0x84>
 800a90c:	6923      	ldr	r3, [r4, #16]
 800a90e:	b36b      	cbz	r3, 800a96c <__swbuf_r+0x84>
 800a910:	6923      	ldr	r3, [r4, #16]
 800a912:	6820      	ldr	r0, [r4, #0]
 800a914:	1ac0      	subs	r0, r0, r3
 800a916:	6963      	ldr	r3, [r4, #20]
 800a918:	b2f6      	uxtb	r6, r6
 800a91a:	4283      	cmp	r3, r0
 800a91c:	4637      	mov	r7, r6
 800a91e:	dc04      	bgt.n	800a92a <__swbuf_r+0x42>
 800a920:	4621      	mov	r1, r4
 800a922:	4628      	mov	r0, r5
 800a924:	f000 f948 	bl	800abb8 <_fflush_r>
 800a928:	bb30      	cbnz	r0, 800a978 <__swbuf_r+0x90>
 800a92a:	68a3      	ldr	r3, [r4, #8]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	60a3      	str	r3, [r4, #8]
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	6022      	str	r2, [r4, #0]
 800a936:	701e      	strb	r6, [r3, #0]
 800a938:	6963      	ldr	r3, [r4, #20]
 800a93a:	3001      	adds	r0, #1
 800a93c:	4283      	cmp	r3, r0
 800a93e:	d004      	beq.n	800a94a <__swbuf_r+0x62>
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	07db      	lsls	r3, r3, #31
 800a944:	d506      	bpl.n	800a954 <__swbuf_r+0x6c>
 800a946:	2e0a      	cmp	r6, #10
 800a948:	d104      	bne.n	800a954 <__swbuf_r+0x6c>
 800a94a:	4621      	mov	r1, r4
 800a94c:	4628      	mov	r0, r5
 800a94e:	f000 f933 	bl	800abb8 <_fflush_r>
 800a952:	b988      	cbnz	r0, 800a978 <__swbuf_r+0x90>
 800a954:	4638      	mov	r0, r7
 800a956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a958:	4b0a      	ldr	r3, [pc, #40]	; (800a984 <__swbuf_r+0x9c>)
 800a95a:	429c      	cmp	r4, r3
 800a95c:	d101      	bne.n	800a962 <__swbuf_r+0x7a>
 800a95e:	68ac      	ldr	r4, [r5, #8]
 800a960:	e7cf      	b.n	800a902 <__swbuf_r+0x1a>
 800a962:	4b09      	ldr	r3, [pc, #36]	; (800a988 <__swbuf_r+0xa0>)
 800a964:	429c      	cmp	r4, r3
 800a966:	bf08      	it	eq
 800a968:	68ec      	ldreq	r4, [r5, #12]
 800a96a:	e7ca      	b.n	800a902 <__swbuf_r+0x1a>
 800a96c:	4621      	mov	r1, r4
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 f81e 	bl	800a9b0 <__swsetup_r>
 800a974:	2800      	cmp	r0, #0
 800a976:	d0cb      	beq.n	800a910 <__swbuf_r+0x28>
 800a978:	f04f 37ff 	mov.w	r7, #4294967295
 800a97c:	e7ea      	b.n	800a954 <__swbuf_r+0x6c>
 800a97e:	bf00      	nop
 800a980:	0800b318 	.word	0x0800b318
 800a984:	0800b338 	.word	0x0800b338
 800a988:	0800b2f8 	.word	0x0800b2f8

0800a98c <_write_r>:
 800a98c:	b538      	push	{r3, r4, r5, lr}
 800a98e:	4d07      	ldr	r5, [pc, #28]	; (800a9ac <_write_r+0x20>)
 800a990:	4604      	mov	r4, r0
 800a992:	4608      	mov	r0, r1
 800a994:	4611      	mov	r1, r2
 800a996:	2200      	movs	r2, #0
 800a998:	602a      	str	r2, [r5, #0]
 800a99a:	461a      	mov	r2, r3
 800a99c:	f7f9 fa35 	bl	8003e0a <_write>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d102      	bne.n	800a9aa <_write_r+0x1e>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	b103      	cbz	r3, 800a9aa <_write_r+0x1e>
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	200014cc 	.word	0x200014cc

0800a9b0 <__swsetup_r>:
 800a9b0:	4b32      	ldr	r3, [pc, #200]	; (800aa7c <__swsetup_r+0xcc>)
 800a9b2:	b570      	push	{r4, r5, r6, lr}
 800a9b4:	681d      	ldr	r5, [r3, #0]
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	b125      	cbz	r5, 800a9c6 <__swsetup_r+0x16>
 800a9bc:	69ab      	ldr	r3, [r5, #24]
 800a9be:	b913      	cbnz	r3, 800a9c6 <__swsetup_r+0x16>
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	f7ff fc79 	bl	800a2b8 <__sinit>
 800a9c6:	4b2e      	ldr	r3, [pc, #184]	; (800aa80 <__swsetup_r+0xd0>)
 800a9c8:	429c      	cmp	r4, r3
 800a9ca:	d10f      	bne.n	800a9ec <__swsetup_r+0x3c>
 800a9cc:	686c      	ldr	r4, [r5, #4]
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9d4:	0719      	lsls	r1, r3, #28
 800a9d6:	d42c      	bmi.n	800aa32 <__swsetup_r+0x82>
 800a9d8:	06dd      	lsls	r5, r3, #27
 800a9da:	d411      	bmi.n	800aa00 <__swsetup_r+0x50>
 800a9dc:	2309      	movs	r3, #9
 800a9de:	6033      	str	r3, [r6, #0]
 800a9e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9e4:	81a3      	strh	r3, [r4, #12]
 800a9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ea:	e03e      	b.n	800aa6a <__swsetup_r+0xba>
 800a9ec:	4b25      	ldr	r3, [pc, #148]	; (800aa84 <__swsetup_r+0xd4>)
 800a9ee:	429c      	cmp	r4, r3
 800a9f0:	d101      	bne.n	800a9f6 <__swsetup_r+0x46>
 800a9f2:	68ac      	ldr	r4, [r5, #8]
 800a9f4:	e7eb      	b.n	800a9ce <__swsetup_r+0x1e>
 800a9f6:	4b24      	ldr	r3, [pc, #144]	; (800aa88 <__swsetup_r+0xd8>)
 800a9f8:	429c      	cmp	r4, r3
 800a9fa:	bf08      	it	eq
 800a9fc:	68ec      	ldreq	r4, [r5, #12]
 800a9fe:	e7e6      	b.n	800a9ce <__swsetup_r+0x1e>
 800aa00:	0758      	lsls	r0, r3, #29
 800aa02:	d512      	bpl.n	800aa2a <__swsetup_r+0x7a>
 800aa04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa06:	b141      	cbz	r1, 800aa1a <__swsetup_r+0x6a>
 800aa08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa0c:	4299      	cmp	r1, r3
 800aa0e:	d002      	beq.n	800aa16 <__swsetup_r+0x66>
 800aa10:	4630      	mov	r0, r6
 800aa12:	f7ff fd57 	bl	800a4c4 <_free_r>
 800aa16:	2300      	movs	r3, #0
 800aa18:	6363      	str	r3, [r4, #52]	; 0x34
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa20:	81a3      	strh	r3, [r4, #12]
 800aa22:	2300      	movs	r3, #0
 800aa24:	6063      	str	r3, [r4, #4]
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	f043 0308 	orr.w	r3, r3, #8
 800aa30:	81a3      	strh	r3, [r4, #12]
 800aa32:	6923      	ldr	r3, [r4, #16]
 800aa34:	b94b      	cbnz	r3, 800aa4a <__swsetup_r+0x9a>
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa40:	d003      	beq.n	800aa4a <__swsetup_r+0x9a>
 800aa42:	4621      	mov	r1, r4
 800aa44:	4630      	mov	r0, r6
 800aa46:	f000 f929 	bl	800ac9c <__smakebuf_r>
 800aa4a:	89a0      	ldrh	r0, [r4, #12]
 800aa4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa50:	f010 0301 	ands.w	r3, r0, #1
 800aa54:	d00a      	beq.n	800aa6c <__swsetup_r+0xbc>
 800aa56:	2300      	movs	r3, #0
 800aa58:	60a3      	str	r3, [r4, #8]
 800aa5a:	6963      	ldr	r3, [r4, #20]
 800aa5c:	425b      	negs	r3, r3
 800aa5e:	61a3      	str	r3, [r4, #24]
 800aa60:	6923      	ldr	r3, [r4, #16]
 800aa62:	b943      	cbnz	r3, 800aa76 <__swsetup_r+0xc6>
 800aa64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa68:	d1ba      	bne.n	800a9e0 <__swsetup_r+0x30>
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}
 800aa6c:	0781      	lsls	r1, r0, #30
 800aa6e:	bf58      	it	pl
 800aa70:	6963      	ldrpl	r3, [r4, #20]
 800aa72:	60a3      	str	r3, [r4, #8]
 800aa74:	e7f4      	b.n	800aa60 <__swsetup_r+0xb0>
 800aa76:	2000      	movs	r0, #0
 800aa78:	e7f7      	b.n	800aa6a <__swsetup_r+0xba>
 800aa7a:	bf00      	nop
 800aa7c:	2000001c 	.word	0x2000001c
 800aa80:	0800b318 	.word	0x0800b318
 800aa84:	0800b338 	.word	0x0800b338
 800aa88:	0800b2f8 	.word	0x0800b2f8

0800aa8c <_close_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4d06      	ldr	r5, [pc, #24]	; (800aaa8 <_close_r+0x1c>)
 800aa90:	2300      	movs	r3, #0
 800aa92:	4604      	mov	r4, r0
 800aa94:	4608      	mov	r0, r1
 800aa96:	602b      	str	r3, [r5, #0]
 800aa98:	f7f9 f9d3 	bl	8003e42 <_close>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d102      	bne.n	800aaa6 <_close_r+0x1a>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	b103      	cbz	r3, 800aaa6 <_close_r+0x1a>
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	200014cc 	.word	0x200014cc

0800aaac <__sflush_r>:
 800aaac:	898a      	ldrh	r2, [r1, #12]
 800aaae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab2:	4605      	mov	r5, r0
 800aab4:	0710      	lsls	r0, r2, #28
 800aab6:	460c      	mov	r4, r1
 800aab8:	d458      	bmi.n	800ab6c <__sflush_r+0xc0>
 800aaba:	684b      	ldr	r3, [r1, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dc05      	bgt.n	800aacc <__sflush_r+0x20>
 800aac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	dc02      	bgt.n	800aacc <__sflush_r+0x20>
 800aac6:	2000      	movs	r0, #0
 800aac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aacc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aace:	2e00      	cmp	r6, #0
 800aad0:	d0f9      	beq.n	800aac6 <__sflush_r+0x1a>
 800aad2:	2300      	movs	r3, #0
 800aad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aad8:	682f      	ldr	r7, [r5, #0]
 800aada:	602b      	str	r3, [r5, #0]
 800aadc:	d032      	beq.n	800ab44 <__sflush_r+0x98>
 800aade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	075a      	lsls	r2, r3, #29
 800aae4:	d505      	bpl.n	800aaf2 <__sflush_r+0x46>
 800aae6:	6863      	ldr	r3, [r4, #4]
 800aae8:	1ac0      	subs	r0, r0, r3
 800aaea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aaec:	b10b      	cbz	r3, 800aaf2 <__sflush_r+0x46>
 800aaee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aaf0:	1ac0      	subs	r0, r0, r3
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaf8:	6a21      	ldr	r1, [r4, #32]
 800aafa:	4628      	mov	r0, r5
 800aafc:	47b0      	blx	r6
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	d106      	bne.n	800ab12 <__sflush_r+0x66>
 800ab04:	6829      	ldr	r1, [r5, #0]
 800ab06:	291d      	cmp	r1, #29
 800ab08:	d82c      	bhi.n	800ab64 <__sflush_r+0xb8>
 800ab0a:	4a2a      	ldr	r2, [pc, #168]	; (800abb4 <__sflush_r+0x108>)
 800ab0c:	40ca      	lsrs	r2, r1
 800ab0e:	07d6      	lsls	r6, r2, #31
 800ab10:	d528      	bpl.n	800ab64 <__sflush_r+0xb8>
 800ab12:	2200      	movs	r2, #0
 800ab14:	6062      	str	r2, [r4, #4]
 800ab16:	04d9      	lsls	r1, r3, #19
 800ab18:	6922      	ldr	r2, [r4, #16]
 800ab1a:	6022      	str	r2, [r4, #0]
 800ab1c:	d504      	bpl.n	800ab28 <__sflush_r+0x7c>
 800ab1e:	1c42      	adds	r2, r0, #1
 800ab20:	d101      	bne.n	800ab26 <__sflush_r+0x7a>
 800ab22:	682b      	ldr	r3, [r5, #0]
 800ab24:	b903      	cbnz	r3, 800ab28 <__sflush_r+0x7c>
 800ab26:	6560      	str	r0, [r4, #84]	; 0x54
 800ab28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab2a:	602f      	str	r7, [r5, #0]
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	d0ca      	beq.n	800aac6 <__sflush_r+0x1a>
 800ab30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab34:	4299      	cmp	r1, r3
 800ab36:	d002      	beq.n	800ab3e <__sflush_r+0x92>
 800ab38:	4628      	mov	r0, r5
 800ab3a:	f7ff fcc3 	bl	800a4c4 <_free_r>
 800ab3e:	2000      	movs	r0, #0
 800ab40:	6360      	str	r0, [r4, #52]	; 0x34
 800ab42:	e7c1      	b.n	800aac8 <__sflush_r+0x1c>
 800ab44:	6a21      	ldr	r1, [r4, #32]
 800ab46:	2301      	movs	r3, #1
 800ab48:	4628      	mov	r0, r5
 800ab4a:	47b0      	blx	r6
 800ab4c:	1c41      	adds	r1, r0, #1
 800ab4e:	d1c7      	bne.n	800aae0 <__sflush_r+0x34>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0c4      	beq.n	800aae0 <__sflush_r+0x34>
 800ab56:	2b1d      	cmp	r3, #29
 800ab58:	d001      	beq.n	800ab5e <__sflush_r+0xb2>
 800ab5a:	2b16      	cmp	r3, #22
 800ab5c:	d101      	bne.n	800ab62 <__sflush_r+0xb6>
 800ab5e:	602f      	str	r7, [r5, #0]
 800ab60:	e7b1      	b.n	800aac6 <__sflush_r+0x1a>
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab68:	81a3      	strh	r3, [r4, #12]
 800ab6a:	e7ad      	b.n	800aac8 <__sflush_r+0x1c>
 800ab6c:	690f      	ldr	r7, [r1, #16]
 800ab6e:	2f00      	cmp	r7, #0
 800ab70:	d0a9      	beq.n	800aac6 <__sflush_r+0x1a>
 800ab72:	0793      	lsls	r3, r2, #30
 800ab74:	680e      	ldr	r6, [r1, #0]
 800ab76:	bf08      	it	eq
 800ab78:	694b      	ldreq	r3, [r1, #20]
 800ab7a:	600f      	str	r7, [r1, #0]
 800ab7c:	bf18      	it	ne
 800ab7e:	2300      	movne	r3, #0
 800ab80:	eba6 0807 	sub.w	r8, r6, r7
 800ab84:	608b      	str	r3, [r1, #8]
 800ab86:	f1b8 0f00 	cmp.w	r8, #0
 800ab8a:	dd9c      	ble.n	800aac6 <__sflush_r+0x1a>
 800ab8c:	6a21      	ldr	r1, [r4, #32]
 800ab8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab90:	4643      	mov	r3, r8
 800ab92:	463a      	mov	r2, r7
 800ab94:	4628      	mov	r0, r5
 800ab96:	47b0      	blx	r6
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	dc06      	bgt.n	800abaa <__sflush_r+0xfe>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aba2:	81a3      	strh	r3, [r4, #12]
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	e78e      	b.n	800aac8 <__sflush_r+0x1c>
 800abaa:	4407      	add	r7, r0
 800abac:	eba8 0800 	sub.w	r8, r8, r0
 800abb0:	e7e9      	b.n	800ab86 <__sflush_r+0xda>
 800abb2:	bf00      	nop
 800abb4:	20400001 	.word	0x20400001

0800abb8 <_fflush_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	690b      	ldr	r3, [r1, #16]
 800abbc:	4605      	mov	r5, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	b913      	cbnz	r3, 800abc8 <_fflush_r+0x10>
 800abc2:	2500      	movs	r5, #0
 800abc4:	4628      	mov	r0, r5
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	b118      	cbz	r0, 800abd2 <_fflush_r+0x1a>
 800abca:	6983      	ldr	r3, [r0, #24]
 800abcc:	b90b      	cbnz	r3, 800abd2 <_fflush_r+0x1a>
 800abce:	f7ff fb73 	bl	800a2b8 <__sinit>
 800abd2:	4b14      	ldr	r3, [pc, #80]	; (800ac24 <_fflush_r+0x6c>)
 800abd4:	429c      	cmp	r4, r3
 800abd6:	d11b      	bne.n	800ac10 <_fflush_r+0x58>
 800abd8:	686c      	ldr	r4, [r5, #4]
 800abda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0ef      	beq.n	800abc2 <_fflush_r+0xa>
 800abe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abe4:	07d0      	lsls	r0, r2, #31
 800abe6:	d404      	bmi.n	800abf2 <_fflush_r+0x3a>
 800abe8:	0599      	lsls	r1, r3, #22
 800abea:	d402      	bmi.n	800abf2 <_fflush_r+0x3a>
 800abec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abee:	f7ff fc26 	bl	800a43e <__retarget_lock_acquire_recursive>
 800abf2:	4628      	mov	r0, r5
 800abf4:	4621      	mov	r1, r4
 800abf6:	f7ff ff59 	bl	800aaac <__sflush_r>
 800abfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abfc:	07da      	lsls	r2, r3, #31
 800abfe:	4605      	mov	r5, r0
 800ac00:	d4e0      	bmi.n	800abc4 <_fflush_r+0xc>
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	059b      	lsls	r3, r3, #22
 800ac06:	d4dd      	bmi.n	800abc4 <_fflush_r+0xc>
 800ac08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac0a:	f7ff fc19 	bl	800a440 <__retarget_lock_release_recursive>
 800ac0e:	e7d9      	b.n	800abc4 <_fflush_r+0xc>
 800ac10:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <_fflush_r+0x70>)
 800ac12:	429c      	cmp	r4, r3
 800ac14:	d101      	bne.n	800ac1a <_fflush_r+0x62>
 800ac16:	68ac      	ldr	r4, [r5, #8]
 800ac18:	e7df      	b.n	800abda <_fflush_r+0x22>
 800ac1a:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <_fflush_r+0x74>)
 800ac1c:	429c      	cmp	r4, r3
 800ac1e:	bf08      	it	eq
 800ac20:	68ec      	ldreq	r4, [r5, #12]
 800ac22:	e7da      	b.n	800abda <_fflush_r+0x22>
 800ac24:	0800b318 	.word	0x0800b318
 800ac28:	0800b338 	.word	0x0800b338
 800ac2c:	0800b2f8 	.word	0x0800b2f8

0800ac30 <_lseek_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d07      	ldr	r5, [pc, #28]	; (800ac50 <_lseek_r+0x20>)
 800ac34:	4604      	mov	r4, r0
 800ac36:	4608      	mov	r0, r1
 800ac38:	4611      	mov	r1, r2
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	602a      	str	r2, [r5, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f7f9 f926 	bl	8003e90 <_lseek>
 800ac44:	1c43      	adds	r3, r0, #1
 800ac46:	d102      	bne.n	800ac4e <_lseek_r+0x1e>
 800ac48:	682b      	ldr	r3, [r5, #0]
 800ac4a:	b103      	cbz	r3, 800ac4e <_lseek_r+0x1e>
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	bd38      	pop	{r3, r4, r5, pc}
 800ac50:	200014cc 	.word	0x200014cc

0800ac54 <__swhatbuf_r>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	460e      	mov	r6, r1
 800ac58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	b096      	sub	sp, #88	; 0x58
 800ac60:	4614      	mov	r4, r2
 800ac62:	461d      	mov	r5, r3
 800ac64:	da07      	bge.n	800ac76 <__swhatbuf_r+0x22>
 800ac66:	2300      	movs	r3, #0
 800ac68:	602b      	str	r3, [r5, #0]
 800ac6a:	89b3      	ldrh	r3, [r6, #12]
 800ac6c:	061a      	lsls	r2, r3, #24
 800ac6e:	d410      	bmi.n	800ac92 <__swhatbuf_r+0x3e>
 800ac70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac74:	e00e      	b.n	800ac94 <__swhatbuf_r+0x40>
 800ac76:	466a      	mov	r2, sp
 800ac78:	f000 f862 	bl	800ad40 <_fstat_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	dbf2      	blt.n	800ac66 <__swhatbuf_r+0x12>
 800ac80:	9a01      	ldr	r2, [sp, #4]
 800ac82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac8a:	425a      	negs	r2, r3
 800ac8c:	415a      	adcs	r2, r3
 800ac8e:	602a      	str	r2, [r5, #0]
 800ac90:	e7ee      	b.n	800ac70 <__swhatbuf_r+0x1c>
 800ac92:	2340      	movs	r3, #64	; 0x40
 800ac94:	2000      	movs	r0, #0
 800ac96:	6023      	str	r3, [r4, #0]
 800ac98:	b016      	add	sp, #88	; 0x58
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}

0800ac9c <__smakebuf_r>:
 800ac9c:	898b      	ldrh	r3, [r1, #12]
 800ac9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aca0:	079d      	lsls	r5, r3, #30
 800aca2:	4606      	mov	r6, r0
 800aca4:	460c      	mov	r4, r1
 800aca6:	d507      	bpl.n	800acb8 <__smakebuf_r+0x1c>
 800aca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	6123      	str	r3, [r4, #16]
 800acb0:	2301      	movs	r3, #1
 800acb2:	6163      	str	r3, [r4, #20]
 800acb4:	b002      	add	sp, #8
 800acb6:	bd70      	pop	{r4, r5, r6, pc}
 800acb8:	ab01      	add	r3, sp, #4
 800acba:	466a      	mov	r2, sp
 800acbc:	f7ff ffca 	bl	800ac54 <__swhatbuf_r>
 800acc0:	9900      	ldr	r1, [sp, #0]
 800acc2:	4605      	mov	r5, r0
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7ff fc4d 	bl	800a564 <_malloc_r>
 800acca:	b948      	cbnz	r0, 800ace0 <__smakebuf_r+0x44>
 800accc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd0:	059a      	lsls	r2, r3, #22
 800acd2:	d4ef      	bmi.n	800acb4 <__smakebuf_r+0x18>
 800acd4:	f023 0303 	bic.w	r3, r3, #3
 800acd8:	f043 0302 	orr.w	r3, r3, #2
 800acdc:	81a3      	strh	r3, [r4, #12]
 800acde:	e7e3      	b.n	800aca8 <__smakebuf_r+0xc>
 800ace0:	4b0d      	ldr	r3, [pc, #52]	; (800ad18 <__smakebuf_r+0x7c>)
 800ace2:	62b3      	str	r3, [r6, #40]	; 0x28
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	6020      	str	r0, [r4, #0]
 800ace8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acec:	81a3      	strh	r3, [r4, #12]
 800acee:	9b00      	ldr	r3, [sp, #0]
 800acf0:	6163      	str	r3, [r4, #20]
 800acf2:	9b01      	ldr	r3, [sp, #4]
 800acf4:	6120      	str	r0, [r4, #16]
 800acf6:	b15b      	cbz	r3, 800ad10 <__smakebuf_r+0x74>
 800acf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acfc:	4630      	mov	r0, r6
 800acfe:	f000 f831 	bl	800ad64 <_isatty_r>
 800ad02:	b128      	cbz	r0, 800ad10 <__smakebuf_r+0x74>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f023 0303 	bic.w	r3, r3, #3
 800ad0a:	f043 0301 	orr.w	r3, r3, #1
 800ad0e:	81a3      	strh	r3, [r4, #12]
 800ad10:	89a0      	ldrh	r0, [r4, #12]
 800ad12:	4305      	orrs	r5, r0
 800ad14:	81a5      	strh	r5, [r4, #12]
 800ad16:	e7cd      	b.n	800acb4 <__smakebuf_r+0x18>
 800ad18:	0800a251 	.word	0x0800a251

0800ad1c <_read_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4d07      	ldr	r5, [pc, #28]	; (800ad3c <_read_r+0x20>)
 800ad20:	4604      	mov	r4, r0
 800ad22:	4608      	mov	r0, r1
 800ad24:	4611      	mov	r1, r2
 800ad26:	2200      	movs	r2, #0
 800ad28:	602a      	str	r2, [r5, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	f7f9 f850 	bl	8003dd0 <_read>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d102      	bne.n	800ad3a <_read_r+0x1e>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b103      	cbz	r3, 800ad3a <_read_r+0x1e>
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	bd38      	pop	{r3, r4, r5, pc}
 800ad3c:	200014cc 	.word	0x200014cc

0800ad40 <_fstat_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d07      	ldr	r5, [pc, #28]	; (800ad60 <_fstat_r+0x20>)
 800ad44:	2300      	movs	r3, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	602b      	str	r3, [r5, #0]
 800ad4e:	f7f9 f884 	bl	8003e5a <_fstat>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	d102      	bne.n	800ad5c <_fstat_r+0x1c>
 800ad56:	682b      	ldr	r3, [r5, #0]
 800ad58:	b103      	cbz	r3, 800ad5c <_fstat_r+0x1c>
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	bd38      	pop	{r3, r4, r5, pc}
 800ad5e:	bf00      	nop
 800ad60:	200014cc 	.word	0x200014cc

0800ad64 <_isatty_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d06      	ldr	r5, [pc, #24]	; (800ad80 <_isatty_r+0x1c>)
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	602b      	str	r3, [r5, #0]
 800ad70:	f7f9 f883 	bl	8003e7a <_isatty>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_isatty_r+0x1a>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_isatty_r+0x1a>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	200014cc 	.word	0x200014cc

0800ad84 <_Unwind_GetDataRelBase>:
 800ad84:	b508      	push	{r3, lr}
 800ad86:	f7ff fa32 	bl	800a1ee <abort>

0800ad8a <_Unwind_GetTextRelBase>:
 800ad8a:	b508      	push	{r3, lr}
 800ad8c:	f7ff fffa 	bl	800ad84 <_Unwind_GetDataRelBase>

0800ad90 <_init>:
 800ad90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad92:	bf00      	nop
 800ad94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad96:	bc08      	pop	{r3}
 800ad98:	469e      	mov	lr, r3
 800ad9a:	4770      	bx	lr

0800ad9c <_fini>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	bf00      	nop
 800ada0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada2:	bc08      	pop	{r3}
 800ada4:	469e      	mov	lr, r3
 800ada6:	4770      	bx	lr
