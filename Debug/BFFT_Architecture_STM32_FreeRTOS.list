
BFFT_Architecture_STM32_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800b8dc  0800b8dc  0001b8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000002dc  0800bed0  0800bed0  0001bed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000338  0800c1ac  0800c1ac  0001c1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4e4  0800c4e4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800c4e4  0800c4e4  0001c4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c4f4  0800c4f4  0001c4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c4fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  20000080  0800c57c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001094  0800c57c  00021094  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000305ca  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000567f  00000000  00000000  00050678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020a8  00000000  00000000  00055cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f08  00000000  00000000  00057da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017fd3  00000000  00000000  00059ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00010d34  00000000  00000000  00071c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000829af  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a4c0  00000000  00000000  00082a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b8c4 	.word	0x0800b8c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800b8c4 	.word	0x0800b8c4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <__aeabi_uldivmod>:
 8000254:	b953      	cbnz	r3, 800026c <__aeabi_uldivmod+0x18>
 8000256:	b94a      	cbnz	r2, 800026c <__aeabi_uldivmod+0x18>
 8000258:	2900      	cmp	r1, #0
 800025a:	bf08      	it	eq
 800025c:	2800      	cmpeq	r0, #0
 800025e:	bf1c      	itt	ne
 8000260:	f04f 31ff 	movne.w	r1, #4294967295
 8000264:	f04f 30ff 	movne.w	r0, #4294967295
 8000268:	f001 b8c0 	b.w	80013ec <__aeabi_idiv0>
 800026c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000280:	b004      	add	sp, #16
 8000282:	4770      	bx	lr

08000284 <__udivmoddi4>:
 8000284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000288:	9d08      	ldr	r5, [sp, #32]
 800028a:	4604      	mov	r4, r0
 800028c:	468c      	mov	ip, r1
 800028e:	2b00      	cmp	r3, #0
 8000290:	f040 8083 	bne.w	800039a <__udivmoddi4+0x116>
 8000294:	428a      	cmp	r2, r1
 8000296:	4617      	mov	r7, r2
 8000298:	d947      	bls.n	800032a <__udivmoddi4+0xa6>
 800029a:	fab2 f282 	clz	r2, r2
 800029e:	b142      	cbz	r2, 80002b2 <__udivmoddi4+0x2e>
 80002a0:	f1c2 0020 	rsb	r0, r2, #32
 80002a4:	fa24 f000 	lsr.w	r0, r4, r0
 80002a8:	4091      	lsls	r1, r2
 80002aa:	4097      	lsls	r7, r2
 80002ac:	ea40 0c01 	orr.w	ip, r0, r1
 80002b0:	4094      	lsls	r4, r2
 80002b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	fbbc f6f8 	udiv	r6, ip, r8
 80002bc:	fa1f fe87 	uxth.w	lr, r7
 80002c0:	fb08 c116 	mls	r1, r8, r6, ip
 80002c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c8:	fb06 f10e 	mul.w	r1, r6, lr
 80002cc:	4299      	cmp	r1, r3
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x60>
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 8119 	bcs.w	800050c <__udivmoddi4+0x288>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 8116 	bls.w	800050c <__udivmoddi4+0x288>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	443b      	add	r3, r7
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002f8:	45a6      	cmp	lr, r4
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x8c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	f080 8105 	bcs.w	8000510 <__udivmoddi4+0x28c>
 8000306:	45a6      	cmp	lr, r4
 8000308:	f240 8102 	bls.w	8000510 <__udivmoddi4+0x28c>
 800030c:	3802      	subs	r0, #2
 800030e:	443c      	add	r4, r7
 8000310:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000314:	eba4 040e 	sub.w	r4, r4, lr
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa0>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xaa>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	2a00      	cmp	r2, #0
 8000334:	d150      	bne.n	80003d8 <__udivmoddi4+0x154>
 8000336:	1bcb      	subs	r3, r1, r7
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f f887 	uxth.w	r8, r7
 8000340:	2601      	movs	r6, #1
 8000342:	fbb3 fcfe 	udiv	ip, r3, lr
 8000346:	0c21      	lsrs	r1, r4, #16
 8000348:	fb0e 331c 	mls	r3, lr, ip, r3
 800034c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000350:	fb08 f30c 	mul.w	r3, r8, ip
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xe4>
 8000358:	1879      	adds	r1, r7, r1
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0xe2>
 8000360:	428b      	cmp	r3, r1
 8000362:	f200 80e9 	bhi.w	8000538 <__udivmoddi4+0x2b4>
 8000366:	4684      	mov	ip, r0
 8000368:	1ac9      	subs	r1, r1, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1110 	mls	r1, lr, r0, r1
 8000374:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x10c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x10a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80d9 	bhi.w	8000540 <__udivmoddi4+0x2bc>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e7bf      	b.n	800031a <__udivmoddi4+0x96>
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0x12e>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80b1 	beq.w	8000506 <__udivmoddi4+0x282>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x1cc>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0x140>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80b8 	bhi.w	8000534 <__udivmoddi4+0x2b0>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	468c      	mov	ip, r1
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0a8      	beq.n	8000324 <__udivmoddi4+0xa0>
 80003d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003d6:	e7a5      	b.n	8000324 <__udivmoddi4+0xa0>
 80003d8:	f1c2 0320 	rsb	r3, r2, #32
 80003dc:	fa20 f603 	lsr.w	r6, r0, r3
 80003e0:	4097      	lsls	r7, r2
 80003e2:	fa01 f002 	lsl.w	r0, r1, r2
 80003e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ea:	40d9      	lsrs	r1, r3
 80003ec:	4330      	orrs	r0, r6
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000400:	fb06 f108 	mul.w	r1, r6, r8
 8000404:	4299      	cmp	r1, r3
 8000406:	fa04 f402 	lsl.w	r4, r4, r2
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x19c>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000412:	f080 808d 	bcs.w	8000530 <__udivmoddi4+0x2ac>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 808a 	bls.w	8000530 <__udivmoddi4+0x2ac>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b281      	uxth	r1, r0
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000430:	fb00 f308 	mul.w	r3, r0, r8
 8000434:	428b      	cmp	r3, r1
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x1c4>
 8000438:	1879      	adds	r1, r7, r1
 800043a:	f100 3cff 	add.w	ip, r0, #4294967295
 800043e:	d273      	bcs.n	8000528 <__udivmoddi4+0x2a4>
 8000440:	428b      	cmp	r3, r1
 8000442:	d971      	bls.n	8000528 <__udivmoddi4+0x2a4>
 8000444:	3802      	subs	r0, #2
 8000446:	4439      	add	r1, r7
 8000448:	1acb      	subs	r3, r1, r3
 800044a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800044e:	e778      	b.n	8000342 <__udivmoddi4+0xbe>
 8000450:	f1c6 0c20 	rsb	ip, r6, #32
 8000454:	fa03 f406 	lsl.w	r4, r3, r6
 8000458:	fa22 f30c 	lsr.w	r3, r2, ip
 800045c:	431c      	orrs	r4, r3
 800045e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800046a:	fa21 f10c 	lsr.w	r1, r1, ip
 800046e:	431f      	orrs	r7, r3
 8000470:	0c3b      	lsrs	r3, r7, #16
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fa1f f884 	uxth.w	r8, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000482:	fb09 fa08 	mul.w	sl, r9, r8
 8000486:	458a      	cmp	sl, r1
 8000488:	fa02 f206 	lsl.w	r2, r2, r6
 800048c:	fa00 f306 	lsl.w	r3, r0, r6
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x220>
 8000492:	1861      	adds	r1, r4, r1
 8000494:	f109 30ff 	add.w	r0, r9, #4294967295
 8000498:	d248      	bcs.n	800052c <__udivmoddi4+0x2a8>
 800049a:	458a      	cmp	sl, r1
 800049c:	d946      	bls.n	800052c <__udivmoddi4+0x2a8>
 800049e:	f1a9 0902 	sub.w	r9, r9, #2
 80004a2:	4421      	add	r1, r4
 80004a4:	eba1 010a 	sub.w	r1, r1, sl
 80004a8:	b2bf      	uxth	r7, r7
 80004aa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ae:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004b6:	fb00 f808 	mul.w	r8, r0, r8
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x24a>
 80004be:	19e7      	adds	r7, r4, r7
 80004c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004c4:	d22e      	bcs.n	8000524 <__udivmoddi4+0x2a0>
 80004c6:	45b8      	cmp	r8, r7
 80004c8:	d92c      	bls.n	8000524 <__udivmoddi4+0x2a0>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4427      	add	r7, r4
 80004ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004d2:	eba7 0708 	sub.w	r7, r7, r8
 80004d6:	fba0 8902 	umull	r8, r9, r0, r2
 80004da:	454f      	cmp	r7, r9
 80004dc:	46c6      	mov	lr, r8
 80004de:	4649      	mov	r1, r9
 80004e0:	d31a      	bcc.n	8000518 <__udivmoddi4+0x294>
 80004e2:	d017      	beq.n	8000514 <__udivmoddi4+0x290>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x27a>
 80004e6:	ebb3 020e 	subs.w	r2, r3, lr
 80004ea:	eb67 0701 	sbc.w	r7, r7, r1
 80004ee:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004f2:	40f2      	lsrs	r2, r6
 80004f4:	ea4c 0202 	orr.w	r2, ip, r2
 80004f8:	40f7      	lsrs	r7, r6
 80004fa:	e9c5 2700 	strd	r2, r7, [r5]
 80004fe:	2600      	movs	r6, #0
 8000500:	4631      	mov	r1, r6
 8000502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000506:	462e      	mov	r6, r5
 8000508:	4628      	mov	r0, r5
 800050a:	e70b      	b.n	8000324 <__udivmoddi4+0xa0>
 800050c:	4606      	mov	r6, r0
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0x60>
 8000510:	4618      	mov	r0, r3
 8000512:	e6fd      	b.n	8000310 <__udivmoddi4+0x8c>
 8000514:	4543      	cmp	r3, r8
 8000516:	d2e5      	bcs.n	80004e4 <__udivmoddi4+0x260>
 8000518:	ebb8 0e02 	subs.w	lr, r8, r2
 800051c:	eb69 0104 	sbc.w	r1, r9, r4
 8000520:	3801      	subs	r0, #1
 8000522:	e7df      	b.n	80004e4 <__udivmoddi4+0x260>
 8000524:	4608      	mov	r0, r1
 8000526:	e7d2      	b.n	80004ce <__udivmoddi4+0x24a>
 8000528:	4660      	mov	r0, ip
 800052a:	e78d      	b.n	8000448 <__udivmoddi4+0x1c4>
 800052c:	4681      	mov	r9, r0
 800052e:	e7b9      	b.n	80004a4 <__udivmoddi4+0x220>
 8000530:	4666      	mov	r6, ip
 8000532:	e775      	b.n	8000420 <__udivmoddi4+0x19c>
 8000534:	4630      	mov	r0, r6
 8000536:	e74a      	b.n	80003ce <__udivmoddi4+0x14a>
 8000538:	f1ac 0c02 	sub.w	ip, ip, #2
 800053c:	4439      	add	r1, r7
 800053e:	e713      	b.n	8000368 <__udivmoddi4+0xe4>
 8000540:	3802      	subs	r0, #2
 8000542:	443c      	add	r4, r7
 8000544:	e724      	b.n	8000390 <__udivmoddi4+0x10c>
 8000546:	bf00      	nop

08000548 <selfrel_offset31>:
 8000548:	6803      	ldr	r3, [r0, #0]
 800054a:	005a      	lsls	r2, r3, #1
 800054c:	bf4c      	ite	mi
 800054e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000552:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000556:	4418      	add	r0, r3
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <search_EIT_table>:
 800055c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000560:	b329      	cbz	r1, 80005ae <search_EIT_table+0x52>
 8000562:	1e4f      	subs	r7, r1, #1
 8000564:	4604      	mov	r4, r0
 8000566:	4615      	mov	r5, r2
 8000568:	463e      	mov	r6, r7
 800056a:	f04f 0800 	mov.w	r8, #0
 800056e:	eb08 0106 	add.w	r1, r8, r6
 8000572:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000576:	1049      	asrs	r1, r1, #1
 8000578:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 800057c:	4648      	mov	r0, r9
 800057e:	f7ff ffe3 	bl	8000548 <selfrel_offset31>
 8000582:	4603      	mov	r3, r0
 8000584:	00c8      	lsls	r0, r1, #3
 8000586:	3008      	adds	r0, #8
 8000588:	428f      	cmp	r7, r1
 800058a:	4420      	add	r0, r4
 800058c:	d009      	beq.n	80005a2 <search_EIT_table+0x46>
 800058e:	42ab      	cmp	r3, r5
 8000590:	d809      	bhi.n	80005a6 <search_EIT_table+0x4a>
 8000592:	f7ff ffd9 	bl	8000548 <selfrel_offset31>
 8000596:	3801      	subs	r0, #1
 8000598:	42a8      	cmp	r0, r5
 800059a:	d20a      	bcs.n	80005b2 <search_EIT_table+0x56>
 800059c:	f101 0801 	add.w	r8, r1, #1
 80005a0:	e7e5      	b.n	800056e <search_EIT_table+0x12>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d905      	bls.n	80005b2 <search_EIT_table+0x56>
 80005a6:	4588      	cmp	r8, r1
 80005a8:	d001      	beq.n	80005ae <search_EIT_table+0x52>
 80005aa:	1e4e      	subs	r6, r1, #1
 80005ac:	e7df      	b.n	800056e <search_EIT_table+0x12>
 80005ae:	f04f 0900 	mov.w	r9, #0
 80005b2:	4648      	mov	r0, r9
 80005b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080005b8 <__gnu_unwind_get_pr_addr>:
 80005b8:	2801      	cmp	r0, #1
 80005ba:	d007      	beq.n	80005cc <__gnu_unwind_get_pr_addr+0x14>
 80005bc:	2802      	cmp	r0, #2
 80005be:	d007      	beq.n	80005d0 <__gnu_unwind_get_pr_addr+0x18>
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <__gnu_unwind_get_pr_addr+0x1c>)
 80005c2:	2800      	cmp	r0, #0
 80005c4:	bf0c      	ite	eq
 80005c6:	4618      	moveq	r0, r3
 80005c8:	2000      	movne	r0, #0
 80005ca:	4770      	bx	lr
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <__gnu_unwind_get_pr_addr+0x20>)
 80005ce:	4770      	bx	lr
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <__gnu_unwind_get_pr_addr+0x24>)
 80005d2:	4770      	bx	lr
 80005d4:	08000c7d 	.word	0x08000c7d
 80005d8:	08000c81 	.word	0x08000c81
 80005dc:	08000c85 	.word	0x08000c85

080005e0 <get_eit_entry>:
 80005e0:	b530      	push	{r4, r5, lr}
 80005e2:	4b23      	ldr	r3, [pc, #140]	; (8000670 <get_eit_entry+0x90>)
 80005e4:	b083      	sub	sp, #12
 80005e6:	4604      	mov	r4, r0
 80005e8:	1e8d      	subs	r5, r1, #2
 80005ea:	b33b      	cbz	r3, 800063c <get_eit_entry+0x5c>
 80005ec:	a901      	add	r1, sp, #4
 80005ee:	4628      	mov	r0, r5
 80005f0:	f3af 8000 	nop.w
 80005f4:	b1e8      	cbz	r0, 8000632 <get_eit_entry+0x52>
 80005f6:	9901      	ldr	r1, [sp, #4]
 80005f8:	462a      	mov	r2, r5
 80005fa:	f7ff ffaf 	bl	800055c <search_EIT_table>
 80005fe:	4601      	mov	r1, r0
 8000600:	b1b8      	cbz	r0, 8000632 <get_eit_entry+0x52>
 8000602:	f7ff ffa1 	bl	8000548 <selfrel_offset31>
 8000606:	684b      	ldr	r3, [r1, #4]
 8000608:	64a0      	str	r0, [r4, #72]	; 0x48
 800060a:	2b01      	cmp	r3, #1
 800060c:	d02b      	beq.n	8000666 <get_eit_entry+0x86>
 800060e:	2b00      	cmp	r3, #0
 8000610:	f101 0004 	add.w	r0, r1, #4
 8000614:	db23      	blt.n	800065e <get_eit_entry+0x7e>
 8000616:	f7ff ff97 	bl	8000548 <selfrel_offset31>
 800061a:	2300      	movs	r3, #0
 800061c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000620:	6803      	ldr	r3, [r0, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db10      	blt.n	8000648 <get_eit_entry+0x68>
 8000626:	f7ff ff8f 	bl	8000548 <selfrel_offset31>
 800062a:	6120      	str	r0, [r4, #16]
 800062c:	2000      	movs	r0, #0
 800062e:	b003      	add	sp, #12
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	2300      	movs	r3, #0
 8000634:	2009      	movs	r0, #9
 8000636:	6123      	str	r3, [r4, #16]
 8000638:	b003      	add	sp, #12
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	490d      	ldr	r1, [pc, #52]	; (8000674 <get_eit_entry+0x94>)
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <get_eit_entry+0x98>)
 8000640:	1a09      	subs	r1, r1, r0
 8000642:	10c9      	asrs	r1, r1, #3
 8000644:	9101      	str	r1, [sp, #4]
 8000646:	e7d7      	b.n	80005f8 <get_eit_entry+0x18>
 8000648:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800064c:	f7ff ffb4 	bl	80005b8 <__gnu_unwind_get_pr_addr>
 8000650:	2800      	cmp	r0, #0
 8000652:	6120      	str	r0, [r4, #16]
 8000654:	bf14      	ite	ne
 8000656:	2000      	movne	r0, #0
 8000658:	2009      	moveq	r0, #9
 800065a:	b003      	add	sp, #12
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	2301      	movs	r3, #1
 8000660:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000664:	e7dc      	b.n	8000620 <get_eit_entry+0x40>
 8000666:	2300      	movs	r3, #0
 8000668:	6123      	str	r3, [r4, #16]
 800066a:	2005      	movs	r0, #5
 800066c:	e7df      	b.n	800062e <get_eit_entry+0x4e>
 800066e:	bf00      	nop
 8000670:	00000000 	.word	0x00000000
 8000674:	0800c4e4 	.word	0x0800c4e4
 8000678:	0800c1ac 	.word	0x0800c1ac

0800067c <restore_non_core_regs>:
 800067c:	6803      	ldr	r3, [r0, #0]
 800067e:	07da      	lsls	r2, r3, #31
 8000680:	b510      	push	{r4, lr}
 8000682:	4604      	mov	r4, r0
 8000684:	d406      	bmi.n	8000694 <restore_non_core_regs+0x18>
 8000686:	079b      	lsls	r3, r3, #30
 8000688:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800068c:	d509      	bpl.n	80006a2 <restore_non_core_regs+0x26>
 800068e:	f000 fc4b 	bl	8000f28 <__gnu_Unwind_Restore_VFP_D>
 8000692:	6823      	ldr	r3, [r4, #0]
 8000694:	0759      	lsls	r1, r3, #29
 8000696:	d509      	bpl.n	80006ac <restore_non_core_regs+0x30>
 8000698:	071a      	lsls	r2, r3, #28
 800069a:	d50e      	bpl.n	80006ba <restore_non_core_regs+0x3e>
 800069c:	06db      	lsls	r3, r3, #27
 800069e:	d513      	bpl.n	80006c8 <restore_non_core_regs+0x4c>
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	f000 fc39 	bl	8000f18 <__gnu_Unwind_Restore_VFP>
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	0759      	lsls	r1, r3, #29
 80006aa:	d4f5      	bmi.n	8000698 <restore_non_core_regs+0x1c>
 80006ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006b0:	f000 fc42 	bl	8000f38 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	071a      	lsls	r2, r3, #28
 80006b8:	d4f0      	bmi.n	800069c <restore_non_core_regs+0x20>
 80006ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006be:	f000 fc43 	bl	8000f48 <__gnu_Unwind_Restore_WMMXD>
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	06db      	lsls	r3, r3, #27
 80006c6:	d4eb      	bmi.n	80006a0 <restore_non_core_regs+0x24>
 80006c8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80006cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d0:	f000 bc7e 	b.w	8000fd0 <__gnu_Unwind_Restore_WMMXC>

080006d4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006d4:	4603      	mov	r3, r0
 80006d6:	6800      	ldr	r0, [r0, #0]
 80006d8:	b100      	cbz	r0, 80006dc <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 80006da:	4418      	add	r0, r3
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop

080006e0 <__gnu_unwind_24bit.isra.0>:
 80006e0:	2009      	movs	r0, #9
 80006e2:	4770      	bx	lr

080006e4 <_Unwind_DebugHook>:
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <unwind_phase2>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4604      	mov	r4, r0
 80006ec:	460e      	mov	r6, r1
 80006ee:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80006f0:	4620      	mov	r0, r4
 80006f2:	f7ff ff75 	bl	80005e0 <get_eit_entry>
 80006f6:	4605      	mov	r5, r0
 80006f8:	b988      	cbnz	r0, 800071e <unwind_phase2+0x36>
 80006fa:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80006fc:	6163      	str	r3, [r4, #20]
 80006fe:	4632      	mov	r2, r6
 8000700:	6923      	ldr	r3, [r4, #16]
 8000702:	4621      	mov	r1, r4
 8000704:	2001      	movs	r0, #1
 8000706:	4798      	blx	r3
 8000708:	2808      	cmp	r0, #8
 800070a:	d0f0      	beq.n	80006ee <unwind_phase2+0x6>
 800070c:	2807      	cmp	r0, #7
 800070e:	d106      	bne.n	800071e <unwind_phase2+0x36>
 8000710:	4628      	mov	r0, r5
 8000712:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000714:	f7ff ffe6 	bl	80006e4 <_Unwind_DebugHook>
 8000718:	1d30      	adds	r0, r6, #4
 800071a:	f000 fbf1 	bl	8000f00 <__restore_core_regs>
 800071e:	f00a fb00 	bl	800ad22 <abort>
 8000722:	bf00      	nop

08000724 <unwind_phase2_forced>:
 8000724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000728:	1d0d      	adds	r5, r1, #4
 800072a:	4606      	mov	r6, r0
 800072c:	4614      	mov	r4, r2
 800072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000730:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000734:	f10d 0c0c 	add.w	ip, sp, #12
 8000738:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800073c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000748:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800074c:	ad02      	add	r5, sp, #8
 800074e:	68f7      	ldr	r7, [r6, #12]
 8000750:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8000754:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000758:	2300      	movs	r3, #0
 800075a:	602b      	str	r3, [r5, #0]
 800075c:	e021      	b.n	80007a2 <unwind_phase2_forced+0x7e>
 800075e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000760:	6173      	str	r3, [r6, #20]
 8000762:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000766:	4629      	mov	r1, r5
 8000768:	a87a      	add	r0, sp, #488	; 0x1e8
 800076a:	f00a fc15 	bl	800af98 <memcpy>
 800076e:	6933      	ldr	r3, [r6, #16]
 8000770:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000772:	4631      	mov	r1, r6
 8000774:	4650      	mov	r0, sl
 8000776:	4798      	blx	r3
 8000778:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800077a:	e9cd 5800 	strd	r5, r8, [sp]
 800077e:	4621      	mov	r1, r4
 8000780:	646b      	str	r3, [r5, #68]	; 0x44
 8000782:	4681      	mov	r9, r0
 8000784:	4633      	mov	r3, r6
 8000786:	4632      	mov	r2, r6
 8000788:	2001      	movs	r0, #1
 800078a:	47b8      	blx	r7
 800078c:	4604      	mov	r4, r0
 800078e:	b9e8      	cbnz	r0, 80007cc <unwind_phase2_forced+0xa8>
 8000790:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000794:	a97a      	add	r1, sp, #488	; 0x1e8
 8000796:	4628      	mov	r0, r5
 8000798:	f00a fbfe 	bl	800af98 <memcpy>
 800079c:	f1b9 0f08 	cmp.w	r9, #8
 80007a0:	d11b      	bne.n	80007da <unwind_phase2_forced+0xb6>
 80007a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007a4:	4630      	mov	r0, r6
 80007a6:	f7ff ff1b 	bl	80005e0 <get_eit_entry>
 80007aa:	3409      	adds	r4, #9
 80007ac:	fa5f fa84 	uxtb.w	sl, r4
 80007b0:	4681      	mov	r9, r0
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d0d3      	beq.n	800075e <unwind_phase2_forced+0x3a>
 80007b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80007b8:	f04a 0110 	orr.w	r1, sl, #16
 80007bc:	e9cd 5800 	strd	r5, r8, [sp]
 80007c0:	4632      	mov	r2, r6
 80007c2:	646b      	str	r3, [r5, #68]	; 0x44
 80007c4:	2001      	movs	r0, #1
 80007c6:	4633      	mov	r3, r6
 80007c8:	47b8      	blx	r7
 80007ca:	b108      	cbz	r0, 80007d0 <unwind_phase2_forced+0xac>
 80007cc:	f04f 0909 	mov.w	r9, #9
 80007d0:	4648      	mov	r0, r9
 80007d2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007da:	f1b9 0f07 	cmp.w	r9, #7
 80007de:	d1f5      	bne.n	80007cc <unwind_phase2_forced+0xa8>
 80007e0:	4620      	mov	r0, r4
 80007e2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007e4:	f7ff ff7e 	bl	80006e4 <_Unwind_DebugHook>
 80007e8:	a803      	add	r0, sp, #12
 80007ea:	f000 fb89 	bl	8000f00 <__restore_core_regs>
 80007ee:	bf00      	nop

080007f0 <_Unwind_GetCFA>:
 80007f0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007f2:	4770      	bx	lr

080007f4 <__gnu_Unwind_RaiseException>:
 80007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007f8:	640b      	str	r3, [r1, #64]	; 0x40
 80007fa:	1d0e      	adds	r6, r1, #4
 80007fc:	460f      	mov	r7, r1
 80007fe:	4605      	mov	r5, r0
 8000800:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000802:	b0f9      	sub	sp, #484	; 0x1e4
 8000804:	ac01      	add	r4, sp, #4
 8000806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000808:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800080e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000810:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000814:	f04f 36ff 	mov.w	r6, #4294967295
 8000818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800081c:	9600      	str	r6, [sp, #0]
 800081e:	e006      	b.n	800082e <__gnu_Unwind_RaiseException+0x3a>
 8000820:	692b      	ldr	r3, [r5, #16]
 8000822:	466a      	mov	r2, sp
 8000824:	4629      	mov	r1, r5
 8000826:	4798      	blx	r3
 8000828:	2808      	cmp	r0, #8
 800082a:	4604      	mov	r4, r0
 800082c:	d108      	bne.n	8000840 <__gnu_Unwind_RaiseException+0x4c>
 800082e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000830:	4628      	mov	r0, r5
 8000832:	f7ff fed5 	bl	80005e0 <get_eit_entry>
 8000836:	2800      	cmp	r0, #0
 8000838:	d0f2      	beq.n	8000820 <__gnu_Unwind_RaiseException+0x2c>
 800083a:	2009      	movs	r0, #9
 800083c:	b079      	add	sp, #484	; 0x1e4
 800083e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000840:	4668      	mov	r0, sp
 8000842:	f7ff ff1b 	bl	800067c <restore_non_core_regs>
 8000846:	2c06      	cmp	r4, #6
 8000848:	d1f7      	bne.n	800083a <__gnu_Unwind_RaiseException+0x46>
 800084a:	4639      	mov	r1, r7
 800084c:	4628      	mov	r0, r5
 800084e:	f7ff ff4b 	bl	80006e8 <unwind_phase2>
 8000852:	bf00      	nop

08000854 <__gnu_Unwind_ForcedUnwind>:
 8000854:	b430      	push	{r4, r5}
 8000856:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000858:	60c1      	str	r1, [r0, #12]
 800085a:	6182      	str	r2, [r0, #24]
 800085c:	4619      	mov	r1, r3
 800085e:	641d      	str	r5, [r3, #64]	; 0x40
 8000860:	2200      	movs	r2, #0
 8000862:	bc30      	pop	{r4, r5}
 8000864:	e75e      	b.n	8000724 <unwind_phase2_forced>
 8000866:	bf00      	nop

08000868 <__gnu_Unwind_Resume>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	68c6      	ldr	r6, [r0, #12]
 800086c:	6943      	ldr	r3, [r0, #20]
 800086e:	640b      	str	r3, [r1, #64]	; 0x40
 8000870:	b9ae      	cbnz	r6, 800089e <__gnu_Unwind_Resume+0x36>
 8000872:	6903      	ldr	r3, [r0, #16]
 8000874:	460a      	mov	r2, r1
 8000876:	4604      	mov	r4, r0
 8000878:	460d      	mov	r5, r1
 800087a:	4601      	mov	r1, r0
 800087c:	2002      	movs	r0, #2
 800087e:	4798      	blx	r3
 8000880:	2807      	cmp	r0, #7
 8000882:	d005      	beq.n	8000890 <__gnu_Unwind_Resume+0x28>
 8000884:	2808      	cmp	r0, #8
 8000886:	d10f      	bne.n	80008a8 <__gnu_Unwind_Resume+0x40>
 8000888:	4629      	mov	r1, r5
 800088a:	4620      	mov	r0, r4
 800088c:	f7ff ff2c 	bl	80006e8 <unwind_phase2>
 8000890:	4630      	mov	r0, r6
 8000892:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000894:	f7ff ff26 	bl	80006e4 <_Unwind_DebugHook>
 8000898:	1d28      	adds	r0, r5, #4
 800089a:	f000 fb31 	bl	8000f00 <__restore_core_regs>
 800089e:	2201      	movs	r2, #1
 80008a0:	f7ff ff40 	bl	8000724 <unwind_phase2_forced>
 80008a4:	f00a fa3d 	bl	800ad22 <abort>
 80008a8:	f00a fa3b 	bl	800ad22 <abort>

080008ac <__gnu_Unwind_Resume_or_Rethrow>:
 80008ac:	68c2      	ldr	r2, [r0, #12]
 80008ae:	b11a      	cbz	r2, 80008b8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008b0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008b2:	640a      	str	r2, [r1, #64]	; 0x40
 80008b4:	2200      	movs	r2, #0
 80008b6:	e735      	b.n	8000724 <unwind_phase2_forced>
 80008b8:	e79c      	b.n	80007f4 <__gnu_Unwind_RaiseException>
 80008ba:	bf00      	nop

080008bc <_Unwind_Complete>:
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop

080008c0 <_Unwind_DeleteException>:
 80008c0:	6883      	ldr	r3, [r0, #8]
 80008c2:	4601      	mov	r1, r0
 80008c4:	b10b      	cbz	r3, 80008ca <_Unwind_DeleteException+0xa>
 80008c6:	2001      	movs	r0, #1
 80008c8:	4718      	bx	r3
 80008ca:	4770      	bx	lr

080008cc <_Unwind_VRS_Get>:
 80008cc:	2901      	cmp	r1, #1
 80008ce:	d012      	beq.n	80008f6 <_Unwind_VRS_Get+0x2a>
 80008d0:	d809      	bhi.n	80008e6 <_Unwind_VRS_Get+0x1a>
 80008d2:	b973      	cbnz	r3, 80008f2 <_Unwind_VRS_Get+0x26>
 80008d4:	2a0f      	cmp	r2, #15
 80008d6:	d80c      	bhi.n	80008f2 <_Unwind_VRS_Get+0x26>
 80008d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008dc:	4618      	mov	r0, r3
 80008de:	6853      	ldr	r3, [r2, #4]
 80008e0:	9a00      	ldr	r2, [sp, #0]
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4770      	bx	lr
 80008e6:	3903      	subs	r1, #3
 80008e8:	2901      	cmp	r1, #1
 80008ea:	bf94      	ite	ls
 80008ec:	2001      	movls	r0, #1
 80008ee:	2002      	movhi	r0, #2
 80008f0:	4770      	bx	lr
 80008f2:	2002      	movs	r0, #2
 80008f4:	4770      	bx	lr
 80008f6:	4608      	mov	r0, r1
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <_Unwind_GetGR>:
 80008fc:	b510      	push	{r4, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	2300      	movs	r3, #0
 8000902:	ac03      	add	r4, sp, #12
 8000904:	460a      	mov	r2, r1
 8000906:	9400      	str	r4, [sp, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f7ff ffdf 	bl	80008cc <_Unwind_VRS_Get>
 800090e:	9803      	ldr	r0, [sp, #12]
 8000910:	b004      	add	sp, #16
 8000912:	bd10      	pop	{r4, pc}

08000914 <_Unwind_VRS_Set>:
 8000914:	2901      	cmp	r1, #1
 8000916:	d012      	beq.n	800093e <_Unwind_VRS_Set+0x2a>
 8000918:	d809      	bhi.n	800092e <_Unwind_VRS_Set+0x1a>
 800091a:	b973      	cbnz	r3, 800093a <_Unwind_VRS_Set+0x26>
 800091c:	2a0f      	cmp	r2, #15
 800091e:	d80c      	bhi.n	800093a <_Unwind_VRS_Set+0x26>
 8000920:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000924:	9a00      	ldr	r2, [sp, #0]
 8000926:	6812      	ldr	r2, [r2, #0]
 8000928:	6042      	str	r2, [r0, #4]
 800092a:	4618      	mov	r0, r3
 800092c:	4770      	bx	lr
 800092e:	3903      	subs	r1, #3
 8000930:	2901      	cmp	r1, #1
 8000932:	bf94      	ite	ls
 8000934:	2001      	movls	r0, #1
 8000936:	2002      	movhi	r0, #2
 8000938:	4770      	bx	lr
 800093a:	2002      	movs	r0, #2
 800093c:	4770      	bx	lr
 800093e:	4608      	mov	r0, r1
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <_Unwind_SetGR>:
 8000944:	b510      	push	{r4, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	2300      	movs	r3, #0
 800094a:	ac03      	add	r4, sp, #12
 800094c:	9203      	str	r2, [sp, #12]
 800094e:	9400      	str	r4, [sp, #0]
 8000950:	460a      	mov	r2, r1
 8000952:	4619      	mov	r1, r3
 8000954:	f7ff ffde 	bl	8000914 <_Unwind_VRS_Set>
 8000958:	b004      	add	sp, #16
 800095a:	bd10      	pop	{r4, pc}

0800095c <__gnu_Unwind_Backtrace>:
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	1d15      	adds	r5, r2, #4
 8000964:	468c      	mov	ip, r1
 8000966:	4606      	mov	r6, r0
 8000968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800096e:	ac17      	add	r4, sp, #92	; 0x5c
 8000970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800097e:	f04f 37ff 	mov.w	r7, #4294967295
 8000982:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000986:	4665      	mov	r5, ip
 8000988:	9716      	str	r7, [sp, #88]	; 0x58
 800098a:	e010      	b.n	80009ae <__gnu_Unwind_Backtrace+0x52>
 800098c:	f7ff ffda 	bl	8000944 <_Unwind_SetGR>
 8000990:	4629      	mov	r1, r5
 8000992:	a816      	add	r0, sp, #88	; 0x58
 8000994:	47b0      	blx	r6
 8000996:	4603      	mov	r3, r0
 8000998:	aa16      	add	r2, sp, #88	; 0x58
 800099a:	4669      	mov	r1, sp
 800099c:	2008      	movs	r0, #8
 800099e:	b983      	cbnz	r3, 80009c2 <__gnu_Unwind_Backtrace+0x66>
 80009a0:	9b04      	ldr	r3, [sp, #16]
 80009a2:	4798      	blx	r3
 80009a4:	2805      	cmp	r0, #5
 80009a6:	4604      	mov	r4, r0
 80009a8:	d00c      	beq.n	80009c4 <__gnu_Unwind_Backtrace+0x68>
 80009aa:	2809      	cmp	r0, #9
 80009ac:	d009      	beq.n	80009c2 <__gnu_Unwind_Backtrace+0x66>
 80009ae:	9926      	ldr	r1, [sp, #152]	; 0x98
 80009b0:	4668      	mov	r0, sp
 80009b2:	f7ff fe15 	bl	80005e0 <get_eit_entry>
 80009b6:	4603      	mov	r3, r0
 80009b8:	466a      	mov	r2, sp
 80009ba:	210c      	movs	r1, #12
 80009bc:	a816      	add	r0, sp, #88	; 0x58
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0e4      	beq.n	800098c <__gnu_Unwind_Backtrace+0x30>
 80009c2:	2409      	movs	r4, #9
 80009c4:	a816      	add	r0, sp, #88	; 0x58
 80009c6:	f7ff fe59 	bl	800067c <restore_non_core_regs>
 80009ca:	4620      	mov	r0, r4
 80009cc:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d2:	bf00      	nop

080009d4 <__gnu_unwind_pr_common>:
 80009d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009d8:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	460d      	mov	r5, r1
 80009de:	f854 1b04 	ldr.w	r1, [r4], #4
 80009e2:	9406      	str	r4, [sp, #24]
 80009e4:	4617      	mov	r7, r2
 80009e6:	f000 0803 	and.w	r8, r0, #3
 80009ea:	461e      	mov	r6, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d079      	beq.n	8000ae4 <__gnu_unwind_pr_common+0x110>
 80009f0:	0c0b      	lsrs	r3, r1, #16
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	0409      	lsls	r1, r1, #16
 80009f6:	f88d 301d 	strb.w	r3, [sp, #29]
 80009fa:	2302      	movs	r3, #2
 80009fc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000a00:	9105      	str	r1, [sp, #20]
 8000a02:	f88d 301c 	strb.w	r3, [sp, #28]
 8000a06:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a08:	f1b8 0f02 	cmp.w	r8, #2
 8000a0c:	bf08      	it	eq
 8000a0e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a10:	f013 0301 	ands.w	r3, r3, #1
 8000a14:	d00c      	beq.n	8000a30 <__gnu_unwind_pr_common+0x5c>
 8000a16:	4638      	mov	r0, r7
 8000a18:	a905      	add	r1, sp, #20
 8000a1a:	f000 fb73 	bl	8001104 <__gnu_unwind_execute>
 8000a1e:	b918      	cbnz	r0, 8000a28 <__gnu_unwind_pr_common+0x54>
 8000a20:	2008      	movs	r0, #8
 8000a22:	b009      	add	sp, #36	; 0x24
 8000a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a28:	2009      	movs	r0, #9
 8000a2a:	b009      	add	sp, #36	; 0x24
 8000a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a30:	f8d4 a000 	ldr.w	sl, [r4]
 8000a34:	f1ba 0f00 	cmp.w	sl, #0
 8000a38:	d0ed      	beq.n	8000a16 <__gnu_unwind_pr_common+0x42>
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	f000 0308 	and.w	r3, r0, #8
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	2e02      	cmp	r6, #2
 8000a44:	d04a      	beq.n	8000adc <__gnu_unwind_pr_common+0x108>
 8000a46:	f8b4 a000 	ldrh.w	sl, [r4]
 8000a4a:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000a4e:	3404      	adds	r4, #4
 8000a50:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000a52:	f029 0b01 	bic.w	fp, r9, #1
 8000a56:	210f      	movs	r1, #15
 8000a58:	4638      	mov	r0, r7
 8000a5a:	4493      	add	fp, r2
 8000a5c:	f7ff ff4e 	bl	80008fc <_Unwind_GetGR>
 8000a60:	4583      	cmp	fp, r0
 8000a62:	d839      	bhi.n	8000ad8 <__gnu_unwind_pr_common+0x104>
 8000a64:	f02a 0201 	bic.w	r2, sl, #1
 8000a68:	445a      	add	r2, fp
 8000a6a:	4282      	cmp	r2, r0
 8000a6c:	bf94      	ite	ls
 8000a6e:	2000      	movls	r0, #0
 8000a70:	2001      	movhi	r0, #1
 8000a72:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	f00a 0a01 	and.w	sl, sl, #1
 8000a7e:	ea43 030a 	orr.w	r3, r3, sl
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d049      	beq.n	8000b1a <__gnu_unwind_pr_common+0x146>
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d032      	beq.n	8000af0 <__gnu_unwind_pr_common+0x11c>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1cc      	bne.n	8000a28 <__gnu_unwind_pr_common+0x54>
 8000a8e:	f1b8 0f00 	cmp.w	r8, #0
 8000a92:	d002      	beq.n	8000a9a <__gnu_unwind_pr_common+0xc6>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	f040 80cd 	bne.w	8000c34 <__gnu_unwind_pr_common+0x260>
 8000a9a:	3404      	adds	r4, #4
 8000a9c:	f8d4 a000 	ldr.w	sl, [r4]
 8000aa0:	f1ba 0f00 	cmp.w	sl, #0
 8000aa4:	d1cd      	bne.n	8000a42 <__gnu_unwind_pr_common+0x6e>
 8000aa6:	a905      	add	r1, sp, #20
 8000aa8:	4638      	mov	r0, r7
 8000aaa:	f000 fb2b 	bl	8001104 <__gnu_unwind_execute>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d1ba      	bne.n	8000a28 <__gnu_unwind_pr_common+0x54>
 8000ab2:	9b01      	ldr	r3, [sp, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0b3      	beq.n	8000a20 <__gnu_unwind_pr_common+0x4c>
 8000ab8:	210f      	movs	r1, #15
 8000aba:	4638      	mov	r0, r7
 8000abc:	f7ff ff1e 	bl	80008fc <_Unwind_GetGR>
 8000ac0:	210e      	movs	r1, #14
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	4638      	mov	r0, r7
 8000ac6:	f7ff ff3d 	bl	8000944 <_Unwind_SetGR>
 8000aca:	4638      	mov	r0, r7
 8000acc:	4a6a      	ldr	r2, [pc, #424]	; (8000c78 <__gnu_unwind_pr_common+0x2a4>)
 8000ace:	210f      	movs	r1, #15
 8000ad0:	f7ff ff38 	bl	8000944 <_Unwind_SetGR>
 8000ad4:	2007      	movs	r0, #7
 8000ad6:	e7a8      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	e7ca      	b.n	8000a72 <__gnu_unwind_pr_common+0x9e>
 8000adc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000ae0:	3408      	adds	r4, #8
 8000ae2:	e7b5      	b.n	8000a50 <__gnu_unwind_pr_common+0x7c>
 8000ae4:	0209      	lsls	r1, r1, #8
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	9105      	str	r1, [sp, #20]
 8000aea:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000aee:	e78a      	b.n	8000a06 <__gnu_unwind_pr_common+0x32>
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000af6:	f1b8 0f00 	cmp.w	r8, #0
 8000afa:	d145      	bne.n	8000b88 <__gnu_unwind_pr_common+0x1b4>
 8000afc:	b128      	cbz	r0, 8000b0a <__gnu_unwind_pr_common+0x136>
 8000afe:	9a02      	ldr	r2, [sp, #8]
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	d05c      	beq.n	8000bbe <__gnu_unwind_pr_common+0x1ea>
 8000b04:	f1bb 0f00 	cmp.w	fp, #0
 8000b08:	d074      	beq.n	8000bf4 <__gnu_unwind_pr_common+0x220>
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da00      	bge.n	8000b10 <__gnu_unwind_pr_common+0x13c>
 8000b0e:	3404      	adds	r4, #4
 8000b10:	f10b 0b01 	add.w	fp, fp, #1
 8000b14:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000b18:	e7c0      	b.n	8000a9c <__gnu_unwind_pr_common+0xc8>
 8000b1a:	f1b8 0f00 	cmp.w	r8, #0
 8000b1e:	d119      	bne.n	8000b54 <__gnu_unwind_pr_common+0x180>
 8000b20:	b1b0      	cbz	r0, 8000b50 <__gnu_unwind_pr_common+0x17c>
 8000b22:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000b26:	1c99      	adds	r1, r3, #2
 8000b28:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b2c:	f43f af7c 	beq.w	8000a28 <__gnu_unwind_pr_common+0x54>
 8000b30:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b34:	3301      	adds	r3, #1
 8000b36:	9104      	str	r1, [sp, #16]
 8000b38:	f000 8090 	beq.w	8000c5c <__gnu_unwind_pr_common+0x288>
 8000b3c:	1d20      	adds	r0, r4, #4
 8000b3e:	f7ff fdc9 	bl	80006d4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b42:	ab04      	add	r3, sp, #16
 8000b44:	4601      	mov	r1, r0
 8000b46:	4628      	mov	r0, r5
 8000b48:	f009 fa42 	bl	8009fd0 <__cxa_type_match>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d15b      	bne.n	8000c08 <__gnu_unwind_pr_common+0x234>
 8000b50:	3408      	adds	r4, #8
 8000b52:	e7a3      	b.n	8000a9c <__gnu_unwind_pr_common+0xc8>
 8000b54:	210d      	movs	r1, #13
 8000b56:	4638      	mov	r0, r7
 8000b58:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000b5c:	f7ff fece 	bl	80008fc <_Unwind_GetGR>
 8000b60:	4581      	cmp	r9, r0
 8000b62:	d1f5      	bne.n	8000b50 <__gnu_unwind_pr_common+0x17c>
 8000b64:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b66:	429c      	cmp	r4, r3
 8000b68:	d1f2      	bne.n	8000b50 <__gnu_unwind_pr_common+0x17c>
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f7ff fcec 	bl	8000548 <selfrel_offset31>
 8000b70:	210f      	movs	r1, #15
 8000b72:	4602      	mov	r2, r0
 8000b74:	4638      	mov	r0, r7
 8000b76:	f7ff fee5 	bl	8000944 <_Unwind_SetGR>
 8000b7a:	4638      	mov	r0, r7
 8000b7c:	462a      	mov	r2, r5
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f7ff fee0 	bl	8000944 <_Unwind_SetGR>
 8000b84:	2007      	movs	r0, #7
 8000b86:	e750      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000b88:	210d      	movs	r1, #13
 8000b8a:	4638      	mov	r0, r7
 8000b8c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000b90:	f7ff feb4 	bl	80008fc <_Unwind_GetGR>
 8000b94:	4581      	cmp	r9, r0
 8000b96:	d001      	beq.n	8000b9c <__gnu_unwind_pr_common+0x1c8>
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	e7b6      	b.n	8000b0a <__gnu_unwind_pr_common+0x136>
 8000b9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b9e:	429c      	cmp	r4, r3
 8000ba0:	d1fa      	bne.n	8000b98 <__gnu_unwind_pr_common+0x1c4>
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 8000baa:	18a3      	adds	r3, r4, r2
 8000bac:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000bb0:	636b      	str	r3, [r5, #52]	; 0x34
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	db59      	blt.n	8000c6c <__gnu_unwind_pr_common+0x298>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	e7a8      	b.n	8000b10 <__gnu_unwind_pr_common+0x13c>
 8000bbe:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bc6:	f104 0a04 	add.w	sl, r4, #4
 8000bca:	46b0      	mov	r8, r6
 8000bcc:	4691      	mov	r9, r2
 8000bce:	461e      	mov	r6, r3
 8000bd0:	e00d      	b.n	8000bee <__gnu_unwind_pr_common+0x21a>
 8000bd2:	9604      	str	r6, [sp, #16]
 8000bd4:	f7ff fd7e 	bl	80006d4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bd8:	ab04      	add	r3, sp, #16
 8000bda:	4601      	mov	r1, r0
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4628      	mov	r0, r5
 8000be0:	f009 f9f6 	bl	8009fd0 <__cxa_type_match>
 8000be4:	f109 0901 	add.w	r9, r9, #1
 8000be8:	f10a 0a04 	add.w	sl, sl, #4
 8000bec:	b9e8      	cbnz	r0, 8000c2a <__gnu_unwind_pr_common+0x256>
 8000bee:	45d9      	cmp	r9, fp
 8000bf0:	4650      	mov	r0, sl
 8000bf2:	d1ee      	bne.n	8000bd2 <__gnu_unwind_pr_common+0x1fe>
 8000bf4:	4638      	mov	r0, r7
 8000bf6:	210d      	movs	r1, #13
 8000bf8:	f7ff fe80 	bl	80008fc <_Unwind_GetGR>
 8000bfc:	9b04      	ldr	r3, [sp, #16]
 8000bfe:	6228      	str	r0, [r5, #32]
 8000c00:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000c04:	2006      	movs	r0, #6
 8000c06:	e710      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000c08:	4681      	mov	r9, r0
 8000c0a:	210d      	movs	r1, #13
 8000c0c:	4638      	mov	r0, r7
 8000c0e:	f7ff fe75 	bl	80008fc <_Unwind_GetGR>
 8000c12:	f1b9 0f02 	cmp.w	r9, #2
 8000c16:	6228      	str	r0, [r5, #32]
 8000c18:	d125      	bne.n	8000c66 <__gnu_unwind_pr_common+0x292>
 8000c1a:	462b      	mov	r3, r5
 8000c1c:	9a04      	ldr	r2, [sp, #16]
 8000c1e:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c22:	626b      	str	r3, [r5, #36]	; 0x24
 8000c24:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c26:	2006      	movs	r0, #6
 8000c28:	e6ff      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000c2a:	4646      	mov	r6, r8
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000c32:	e76a      	b.n	8000b0a <__gnu_unwind_pr_common+0x136>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f7ff fc87 	bl	8000548 <selfrel_offset31>
 8000c3a:	3404      	adds	r4, #4
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c40:	4628      	mov	r0, r5
 8000c42:	4614      	mov	r4, r2
 8000c44:	f009 fa22 	bl	800a08c <__cxa_begin_cleanup>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	f43f aeed 	beq.w	8000a28 <__gnu_unwind_pr_common+0x54>
 8000c4e:	4638      	mov	r0, r7
 8000c50:	4622      	mov	r2, r4
 8000c52:	210f      	movs	r1, #15
 8000c54:	f7ff fe76 	bl	8000944 <_Unwind_SetGR>
 8000c58:	2007      	movs	r0, #7
 8000c5a:	e6e6      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000c5c:	4638      	mov	r0, r7
 8000c5e:	210d      	movs	r1, #13
 8000c60:	f7ff fe4c 	bl	80008fc <_Unwind_GetGR>
 8000c64:	6228      	str	r0, [r5, #32]
 8000c66:	9b04      	ldr	r3, [sp, #16]
 8000c68:	626b      	str	r3, [r5, #36]	; 0x24
 8000c6a:	e7db      	b.n	8000c24 <__gnu_unwind_pr_common+0x250>
 8000c6c:	f10b 0001 	add.w	r0, fp, #1
 8000c70:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c74:	e77a      	b.n	8000b6c <__gnu_unwind_pr_common+0x198>
 8000c76:	bf00      	nop
 8000c78:	0800abd9 	.word	0x0800abd9

08000c7c <__aeabi_unwind_cpp_pr0>:
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e6a9      	b.n	80009d4 <__gnu_unwind_pr_common>

08000c80 <__aeabi_unwind_cpp_pr1>:
 8000c80:	2301      	movs	r3, #1
 8000c82:	e6a7      	b.n	80009d4 <__gnu_unwind_pr_common>

08000c84 <__aeabi_unwind_cpp_pr2>:
 8000c84:	2302      	movs	r3, #2
 8000c86:	e6a5      	b.n	80009d4 <__gnu_unwind_pr_common>

08000c88 <_Unwind_VRS_Pop>:
 8000c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	b0c3      	sub	sp, #268	; 0x10c
 8000c90:	4615      	mov	r5, r2
 8000c92:	461c      	mov	r4, r3
 8000c94:	2904      	cmp	r1, #4
 8000c96:	f200 80b9 	bhi.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000c9a:	e8df f001 	tbb	[pc, r1]
 8000c9e:	539a      	.short	0x539a
 8000ca0:	29b7      	.short	0x29b7
 8000ca2:	03          	.byte	0x03
 8000ca3:	00          	.byte	0x00
 8000ca4:	2c00      	cmp	r4, #0
 8000ca6:	f040 80b1 	bne.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000caa:	2a10      	cmp	r2, #16
 8000cac:	f200 80ae 	bhi.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000cb0:	6803      	ldr	r3, [r0, #0]
 8000cb2:	06d8      	lsls	r0, r3, #27
 8000cb4:	f100 80f3 	bmi.w	8000e9e <_Unwind_VRS_Pop+0x216>
 8000cb8:	af20      	add	r7, sp, #128	; 0x80
 8000cba:	4638      	mov	r0, r7
 8000cbc:	f000 f992 	bl	8000fe4 <__gnu_Unwind_Save_WMMXC>
 8000cc0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2401      	movs	r4, #1
 8000cc6:	fa04 f203 	lsl.w	r2, r4, r3
 8000cca:	422a      	tst	r2, r5
 8000ccc:	4601      	mov	r1, r0
 8000cce:	d004      	beq.n	8000cda <_Unwind_VRS_Pop+0x52>
 8000cd0:	f851 2b04 	ldr.w	r2, [r1], #4
 8000cd4:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000cd8:	4608      	mov	r0, r1
 8000cda:	3301      	adds	r3, #1
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d1f2      	bne.n	8000cc6 <_Unwind_VRS_Pop+0x3e>
 8000ce0:	63b0      	str	r0, [r6, #56]	; 0x38
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	f000 f974 	bl	8000fd0 <__gnu_Unwind_Restore_WMMXC>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	b043      	add	sp, #268	; 0x10c
 8000cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cf0:	2c03      	cmp	r4, #3
 8000cf2:	f040 808b 	bne.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000cf6:	b294      	uxth	r4, r2
 8000cf8:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000cfc:	2b10      	cmp	r3, #16
 8000cfe:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000d02:	f200 8083 	bhi.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000d06:	6803      	ldr	r3, [r0, #0]
 8000d08:	071f      	lsls	r7, r3, #28
 8000d0a:	f100 80d0 	bmi.w	8000eae <_Unwind_VRS_Pop+0x226>
 8000d0e:	af20      	add	r7, sp, #128	; 0x80
 8000d10:	4638      	mov	r0, r7
 8000d12:	f000 f93b 	bl	8000f8c <__gnu_Unwind_Save_WMMXD>
 8000d16:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000d1a:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8000d1c:	b154      	cbz	r4, 8000d34 <_Unwind_VRS_Pop+0xac>
 8000d1e:	460b      	mov	r3, r1
 8000d20:	1ae8      	subs	r0, r5, r3
 8000d22:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000d26:	00e4      	lsls	r4, r4, #3
 8000d28:	581a      	ldr	r2, [r3, r0]
 8000d2a:	f843 2b04 	str.w	r2, [r3], #4
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d1fa      	bne.n	8000d28 <_Unwind_VRS_Pop+0xa0>
 8000d32:	4425      	add	r5, r4
 8000d34:	4638      	mov	r0, r7
 8000d36:	63b5      	str	r5, [r6, #56]	; 0x38
 8000d38:	f000 f906 	bl	8000f48 <__gnu_Unwind_Restore_WMMXD>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	b043      	add	sp, #268	; 0x10c
 8000d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d44:	2c01      	cmp	r4, #1
 8000d46:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000d4a:	b295      	uxth	r5, r2
 8000d4c:	d05a      	beq.n	8000e04 <_Unwind_VRS_Pop+0x17c>
 8000d4e:	2c05      	cmp	r4, #5
 8000d50:	d15c      	bne.n	8000e0c <_Unwind_VRS_Pop+0x184>
 8000d52:	eb08 0905 	add.w	r9, r8, r5
 8000d56:	f1b9 0f20 	cmp.w	r9, #32
 8000d5a:	d857      	bhi.n	8000e0c <_Unwind_VRS_Pop+0x184>
 8000d5c:	f1b8 0f0f 	cmp.w	r8, #15
 8000d60:	d977      	bls.n	8000e52 <_Unwind_VRS_Pop+0x1ca>
 8000d62:	46a9      	mov	r9, r5
 8000d64:	2d00      	cmp	r5, #0
 8000d66:	f040 8088 	bne.w	8000e7a <_Unwind_VRS_Pop+0x1f2>
 8000d6a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000d6c:	b36d      	cbz	r5, 8000dca <_Unwind_VRS_Pop+0x142>
 8000d6e:	af20      	add	r7, sp, #128	; 0x80
 8000d70:	f04f 0900 	mov.w	r9, #0
 8000d74:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000d78:	3f04      	subs	r7, #4
 8000d7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000d7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8000d82:	f847 1f04 	str.w	r1, [r7, #4]!
 8000d86:	42ab      	cmp	r3, r5
 8000d88:	d1f9      	bne.n	8000d7e <_Unwind_VRS_Pop+0xf6>
 8000d8a:	f1b9 0f00 	cmp.w	r9, #0
 8000d8e:	d00f      	beq.n	8000db0 <_Unwind_VRS_Pop+0x128>
 8000d90:	466f      	mov	r7, sp
 8000d92:	4641      	mov	r1, r8
 8000d94:	2910      	cmp	r1, #16
 8000d96:	bf38      	it	cc
 8000d98:	2110      	movcc	r1, #16
 8000d9a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000d9e:	3984      	subs	r1, #132	; 0x84
 8000da0:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000da4:	f853 0b04 	ldr.w	r0, [r3], #4
 8000da8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d1f9      	bne.n	8000da4 <_Unwind_VRS_Pop+0x11c>
 8000db0:	2c01      	cmp	r4, #1
 8000db2:	f000 8084 	beq.w	8000ebe <_Unwind_VRS_Pop+0x236>
 8000db6:	f1b8 0f0f 	cmp.w	r8, #15
 8000dba:	63b5      	str	r5, [r6, #56]	; 0x38
 8000dbc:	d945      	bls.n	8000e4a <_Unwind_VRS_Pop+0x1c2>
 8000dbe:	f1b9 0f00 	cmp.w	r9, #0
 8000dc2:	d002      	beq.n	8000dca <_Unwind_VRS_Pop+0x142>
 8000dc4:	4668      	mov	r0, sp
 8000dc6:	f000 f8b7 	bl	8000f38 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000dca:	2000      	movs	r0, #0
 8000dcc:	b043      	add	sp, #268	; 0x10c
 8000dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dd2:	b9dc      	cbnz	r4, 8000e0c <_Unwind_VRS_Pop+0x184>
 8000dd4:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8000dd6:	4623      	mov	r3, r4
 8000dd8:	2001      	movs	r0, #1
 8000dda:	b294      	uxth	r4, r2
 8000ddc:	f106 0c04 	add.w	ip, r6, #4
 8000de0:	fa00 f203 	lsl.w	r2, r0, r3
 8000de4:	4222      	tst	r2, r4
 8000de6:	4639      	mov	r1, r7
 8000de8:	d004      	beq.n	8000df4 <_Unwind_VRS_Pop+0x16c>
 8000dea:	f851 2b04 	ldr.w	r2, [r1], #4
 8000dee:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 8000df2:	460f      	mov	r7, r1
 8000df4:	3301      	adds	r3, #1
 8000df6:	2b10      	cmp	r3, #16
 8000df8:	d1f2      	bne.n	8000de0 <_Unwind_VRS_Pop+0x158>
 8000dfa:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000dfe:	d1e4      	bne.n	8000dca <_Unwind_VRS_Pop+0x142>
 8000e00:	63b7      	str	r7, [r6, #56]	; 0x38
 8000e02:	e004      	b.n	8000e0e <_Unwind_VRS_Pop+0x186>
 8000e04:	eb08 0305 	add.w	r3, r8, r5
 8000e08:	2b10      	cmp	r3, #16
 8000e0a:	d903      	bls.n	8000e14 <_Unwind_VRS_Pop+0x18c>
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	b043      	add	sp, #268	; 0x10c
 8000e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e14:	f1b8 0f0f 	cmp.w	r8, #15
 8000e18:	d8f8      	bhi.n	8000e0c <_Unwind_VRS_Pop+0x184>
 8000e1a:	6833      	ldr	r3, [r6, #0]
 8000e1c:	07da      	lsls	r2, r3, #31
 8000e1e:	d506      	bpl.n	8000e2e <_Unwind_VRS_Pop+0x1a6>
 8000e20:	4630      	mov	r0, r6
 8000e22:	f023 0303 	bic.w	r3, r3, #3
 8000e26:	f840 3b48 	str.w	r3, [r0], #72
 8000e2a:	f000 f879 	bl	8000f20 <__gnu_Unwind_Save_VFP>
 8000e2e:	af20      	add	r7, sp, #128	; 0x80
 8000e30:	4638      	mov	r0, r7
 8000e32:	f000 f875 	bl	8000f20 <__gnu_Unwind_Save_VFP>
 8000e36:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d199      	bne.n	8000d70 <_Unwind_VRS_Pop+0xe8>
 8000e3c:	461d      	mov	r5, r3
 8000e3e:	3504      	adds	r5, #4
 8000e40:	63b5      	str	r5, [r6, #56]	; 0x38
 8000e42:	4638      	mov	r0, r7
 8000e44:	f000 f868 	bl	8000f18 <__gnu_Unwind_Restore_VFP>
 8000e48:	e7bf      	b.n	8000dca <_Unwind_VRS_Pop+0x142>
 8000e4a:	a820      	add	r0, sp, #128	; 0x80
 8000e4c:	f000 f86c 	bl	8000f28 <__gnu_Unwind_Restore_VFP_D>
 8000e50:	e7b5      	b.n	8000dbe <_Unwind_VRS_Pop+0x136>
 8000e52:	f1b9 0f10 	cmp.w	r9, #16
 8000e56:	d940      	bls.n	8000eda <_Unwind_VRS_Pop+0x252>
 8000e58:	f1a9 0910 	sub.w	r9, r9, #16
 8000e5c:	6833      	ldr	r3, [r6, #0]
 8000e5e:	07d9      	lsls	r1, r3, #31
 8000e60:	d508      	bpl.n	8000e74 <_Unwind_VRS_Pop+0x1ec>
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	4630      	mov	r0, r6
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	f840 3b48 	str.w	r3, [r0], #72
 8000e70:	f000 f85e 	bl	8000f30 <__gnu_Unwind_Save_VFP_D>
 8000e74:	f1b9 0f00 	cmp.w	r9, #0
 8000e78:	d032      	beq.n	8000ee0 <_Unwind_VRS_Pop+0x258>
 8000e7a:	6833      	ldr	r3, [r6, #0]
 8000e7c:	075a      	lsls	r2, r3, #29
 8000e7e:	d420      	bmi.n	8000ec2 <_Unwind_VRS_Pop+0x23a>
 8000e80:	f1b8 0f0f 	cmp.w	r8, #15
 8000e84:	d925      	bls.n	8000ed2 <_Unwind_VRS_Pop+0x24a>
 8000e86:	466f      	mov	r7, sp
 8000e88:	4638      	mov	r0, r7
 8000e8a:	f1c8 0510 	rsb	r5, r8, #16
 8000e8e:	f000 f857 	bl	8000f40 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e96:	f77f af7c 	ble.w	8000d92 <_Unwind_VRS_Pop+0x10a>
 8000e9a:	af20      	add	r7, sp, #128	; 0x80
 8000e9c:	e76a      	b.n	8000d74 <_Unwind_VRS_Pop+0xec>
 8000e9e:	f023 0310 	bic.w	r3, r3, #16
 8000ea2:	6033      	str	r3, [r6, #0]
 8000ea4:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000ea8:	f000 f89c 	bl	8000fe4 <__gnu_Unwind_Save_WMMXC>
 8000eac:	e704      	b.n	8000cb8 <_Unwind_VRS_Pop+0x30>
 8000eae:	f023 0308 	bic.w	r3, r3, #8
 8000eb2:	6003      	str	r3, [r0, #0]
 8000eb4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000eb8:	f000 f868 	bl	8000f8c <__gnu_Unwind_Save_WMMXD>
 8000ebc:	e727      	b.n	8000d0e <_Unwind_VRS_Pop+0x86>
 8000ebe:	af20      	add	r7, sp, #128	; 0x80
 8000ec0:	e7bd      	b.n	8000e3e <_Unwind_VRS_Pop+0x1b6>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	f023 0304 	bic.w	r3, r3, #4
 8000ec8:	f840 3bd0 	str.w	r3, [r0], #208
 8000ecc:	f000 f838 	bl	8000f40 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ed0:	e7d6      	b.n	8000e80 <_Unwind_VRS_Pop+0x1f8>
 8000ed2:	a820      	add	r0, sp, #128	; 0x80
 8000ed4:	f000 f82c 	bl	8000f30 <__gnu_Unwind_Save_VFP_D>
 8000ed8:	e7d5      	b.n	8000e86 <_Unwind_VRS_Pop+0x1fe>
 8000eda:	f04f 0900 	mov.w	r9, #0
 8000ede:	e7bd      	b.n	8000e5c <_Unwind_VRS_Pop+0x1d4>
 8000ee0:	f1b8 0f0f 	cmp.w	r8, #15
 8000ee4:	f63f af41 	bhi.w	8000d6a <_Unwind_VRS_Pop+0xe2>
 8000ee8:	af20      	add	r7, sp, #128	; 0x80
 8000eea:	4638      	mov	r0, r7
 8000eec:	f000 f820 	bl	8000f30 <__gnu_Unwind_Save_VFP_D>
 8000ef0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	f47f af3c 	bne.w	8000d70 <_Unwind_VRS_Pop+0xe8>
 8000ef8:	4638      	mov	r0, r7
 8000efa:	f000 f815 	bl	8000f28 <__gnu_Unwind_Restore_VFP_D>
 8000efe:	e764      	b.n	8000dca <_Unwind_VRS_Pop+0x142>

08000f00 <__restore_core_regs>:
 8000f00:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f04:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f08:	469c      	mov	ip, r3
 8000f0a:	46a6      	mov	lr, r4
 8000f0c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f10:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f14:	46e5      	mov	sp, ip
 8000f16:	bd00      	pop	{pc}

08000f18 <__gnu_Unwind_Restore_VFP>:
 8000f18:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__gnu_Unwind_Save_VFP>:
 8000f20:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__gnu_Unwind_Restore_VFP_D>:
 8000f28:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__gnu_Unwind_Save_VFP_D>:
 8000f30:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f38:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f40:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <__gnu_Unwind_Restore_WMMXD>:
 8000f48:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f4c:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f50:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f54:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f58:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f5c:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f60:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f64:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f68:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f6c:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f70:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f74:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f78:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f7c:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f80:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f84:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__gnu_Unwind_Save_WMMXD>:
 8000f8c:	ece0 0102 	stfe	f0, [r0], #8
 8000f90:	ece0 1102 	stfe	f1, [r0], #8
 8000f94:	ece0 2102 	stfe	f2, [r0], #8
 8000f98:	ece0 3102 	stfe	f3, [r0], #8
 8000f9c:	ece0 4102 	stfe	f4, [r0], #8
 8000fa0:	ece0 5102 	stfe	f5, [r0], #8
 8000fa4:	ece0 6102 	stfe	f6, [r0], #8
 8000fa8:	ece0 7102 	stfe	f7, [r0], #8
 8000fac:	ece0 8102 	stfp	f0, [r0], #8
 8000fb0:	ece0 9102 	stfp	f1, [r0], #8
 8000fb4:	ece0 a102 	stfp	f2, [r0], #8
 8000fb8:	ece0 b102 	stfp	f3, [r0], #8
 8000fbc:	ece0 c102 	stfp	f4, [r0], #8
 8000fc0:	ece0 d102 	stfp	f5, [r0], #8
 8000fc4:	ece0 e102 	stfp	f6, [r0], #8
 8000fc8:	ece0 f102 	stfp	f7, [r0], #8
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__gnu_Unwind_Restore_WMMXC>:
 8000fd0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fd4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fd8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fdc:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__gnu_Unwind_Save_WMMXC>:
 8000fe4:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fe8:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fec:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000ff0:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_Unwind_RaiseException>:
 8000ff8:	46ec      	mov	ip, sp
 8000ffa:	b500      	push	{lr}
 8000ffc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001000:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e92d 000c 	stmdb	sp!, {r2, r3}
 800100c:	a901      	add	r1, sp, #4
 800100e:	f7ff fbf1 	bl	80007f4 <__gnu_Unwind_RaiseException>
 8001012:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001016:	b012      	add	sp, #72	; 0x48
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <_Unwind_Resume>:
 800101c:	46ec      	mov	ip, sp
 800101e:	b500      	push	{lr}
 8001020:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001024:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001030:	a901      	add	r1, sp, #4
 8001032:	f7ff fc19 	bl	8000868 <__gnu_Unwind_Resume>
 8001036:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800103a:	b012      	add	sp, #72	; 0x48
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_Unwind_Resume_or_Rethrow>:
 8001040:	46ec      	mov	ip, sp
 8001042:	b500      	push	{lr}
 8001044:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001048:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001054:	a901      	add	r1, sp, #4
 8001056:	f7ff fc29 	bl	80008ac <__gnu_Unwind_Resume_or_Rethrow>
 800105a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800105e:	b012      	add	sp, #72	; 0x48
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <_Unwind_ForcedUnwind>:
 8001064:	46ec      	mov	ip, sp
 8001066:	b500      	push	{lr}
 8001068:	e92d 5000 	stmdb	sp!, {ip, lr}
 800106c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001078:	ab01      	add	r3, sp, #4
 800107a:	f7ff fbeb 	bl	8000854 <__gnu_Unwind_ForcedUnwind>
 800107e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001082:	b012      	add	sp, #72	; 0x48
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <_Unwind_Backtrace>:
 8001088:	46ec      	mov	ip, sp
 800108a:	b500      	push	{lr}
 800108c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001090:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	e92d 000c 	stmdb	sp!, {r2, r3}
 800109c:	aa01      	add	r2, sp, #4
 800109e:	f7ff fc5d 	bl	800095c <__gnu_Unwind_Backtrace>
 80010a2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010a6:	b012      	add	sp, #72	; 0x48
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <next_unwind_byte>:
 80010ac:	7a02      	ldrb	r2, [r0, #8]
 80010ae:	b97a      	cbnz	r2, 80010d0 <next_unwind_byte+0x24>
 80010b0:	7a43      	ldrb	r3, [r0, #9]
 80010b2:	b1a3      	cbz	r3, 80010de <next_unwind_byte+0x32>
 80010b4:	6842      	ldr	r2, [r0, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	b410      	push	{r4}
 80010ba:	7243      	strb	r3, [r0, #9]
 80010bc:	6813      	ldr	r3, [r2, #0]
 80010be:	2103      	movs	r1, #3
 80010c0:	1d14      	adds	r4, r2, #4
 80010c2:	7201      	strb	r1, [r0, #8]
 80010c4:	021a      	lsls	r2, r3, #8
 80010c6:	6044      	str	r4, [r0, #4]
 80010c8:	6002      	str	r2, [r0, #0]
 80010ca:	bc10      	pop	{r4}
 80010cc:	0e18      	lsrs	r0, r3, #24
 80010ce:	4770      	bx	lr
 80010d0:	6803      	ldr	r3, [r0, #0]
 80010d2:	3a01      	subs	r2, #1
 80010d4:	7202      	strb	r2, [r0, #8]
 80010d6:	021a      	lsls	r2, r3, #8
 80010d8:	6002      	str	r2, [r0, #0]
 80010da:	0e18      	lsrs	r0, r3, #24
 80010dc:	4770      	bx	lr
 80010de:	20b0      	movs	r0, #176	; 0xb0
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <_Unwind_GetGR.constprop.0>:
 80010e4:	b500      	push	{lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	aa03      	add	r2, sp, #12
 80010ea:	2300      	movs	r3, #0
 80010ec:	9200      	str	r2, [sp, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	220c      	movs	r2, #12
 80010f2:	f7ff fbeb 	bl	80008cc <_Unwind_VRS_Get>
 80010f6:	9803      	ldr	r0, [sp, #12]
 80010f8:	b005      	add	sp, #20
 80010fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80010fe:	bf00      	nop

08001100 <unwind_UCB_from_context>:
 8001100:	e7f0      	b.n	80010e4 <_Unwind_GetGR.constprop.0>
 8001102:	bf00      	nop

08001104 <__gnu_unwind_execute>:
 8001104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001108:	4605      	mov	r5, r0
 800110a:	b085      	sub	sp, #20
 800110c:	460e      	mov	r6, r1
 800110e:	f04f 0800 	mov.w	r8, #0
 8001112:	4630      	mov	r0, r6
 8001114:	f7ff ffca 	bl	80010ac <next_unwind_byte>
 8001118:	28b0      	cmp	r0, #176	; 0xb0
 800111a:	4604      	mov	r4, r0
 800111c:	f000 80b2 	beq.w	8001284 <__gnu_unwind_execute+0x180>
 8001120:	0607      	lsls	r7, r0, #24
 8001122:	d520      	bpl.n	8001166 <__gnu_unwind_execute+0x62>
 8001124:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001128:	2b80      	cmp	r3, #128	; 0x80
 800112a:	d04d      	beq.n	80011c8 <__gnu_unwind_execute+0xc4>
 800112c:	2b90      	cmp	r3, #144	; 0x90
 800112e:	d036      	beq.n	800119e <__gnu_unwind_execute+0x9a>
 8001130:	2ba0      	cmp	r3, #160	; 0xa0
 8001132:	d060      	beq.n	80011f6 <__gnu_unwind_execute+0xf2>
 8001134:	2bb0      	cmp	r3, #176	; 0xb0
 8001136:	d074      	beq.n	8001222 <__gnu_unwind_execute+0x11e>
 8001138:	2bc0      	cmp	r3, #192	; 0xc0
 800113a:	f000 808b 	beq.w	8001254 <__gnu_unwind_execute+0x150>
 800113e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001142:	2bd0      	cmp	r3, #208	; 0xd0
 8001144:	d10b      	bne.n	800115e <__gnu_unwind_execute+0x5a>
 8001146:	f000 0207 	and.w	r2, r0, #7
 800114a:	3201      	adds	r2, #1
 800114c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001150:	2305      	movs	r3, #5
 8001152:	2101      	movs	r1, #1
 8001154:	4628      	mov	r0, r5
 8001156:	f7ff fd97 	bl	8000c88 <_Unwind_VRS_Pop>
 800115a:	2800      	cmp	r0, #0
 800115c:	d0d9      	beq.n	8001112 <__gnu_unwind_execute+0xe>
 800115e:	2009      	movs	r0, #9
 8001160:	b005      	add	sp, #20
 8001162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001166:	f10d 090c 	add.w	r9, sp, #12
 800116a:	2300      	movs	r3, #0
 800116c:	4619      	mov	r1, r3
 800116e:	0087      	lsls	r7, r0, #2
 8001170:	f8cd 9000 	str.w	r9, [sp]
 8001174:	220d      	movs	r2, #13
 8001176:	4628      	mov	r0, r5
 8001178:	f7ff fba8 	bl	80008cc <_Unwind_VRS_Get>
 800117c:	b2ff      	uxtb	r7, r7
 800117e:	9b03      	ldr	r3, [sp, #12]
 8001180:	f8cd 9000 	str.w	r9, [sp]
 8001184:	3704      	adds	r7, #4
 8001186:	0660      	lsls	r0, r4, #25
 8001188:	bf4c      	ite	mi
 800118a:	1bdf      	submi	r7, r3, r7
 800118c:	18ff      	addpl	r7, r7, r3
 800118e:	2300      	movs	r3, #0
 8001190:	4619      	mov	r1, r3
 8001192:	220d      	movs	r2, #13
 8001194:	4628      	mov	r0, r5
 8001196:	9703      	str	r7, [sp, #12]
 8001198:	f7ff fbbc 	bl	8000914 <_Unwind_VRS_Set>
 800119c:	e7b9      	b.n	8001112 <__gnu_unwind_execute+0xe>
 800119e:	f000 030d 	and.w	r3, r0, #13
 80011a2:	2b0d      	cmp	r3, #13
 80011a4:	d0db      	beq.n	800115e <__gnu_unwind_execute+0x5a>
 80011a6:	af03      	add	r7, sp, #12
 80011a8:	2300      	movs	r3, #0
 80011aa:	f000 020f 	and.w	r2, r0, #15
 80011ae:	4619      	mov	r1, r3
 80011b0:	9700      	str	r7, [sp, #0]
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff fb8a 	bl	80008cc <_Unwind_VRS_Get>
 80011b8:	2300      	movs	r3, #0
 80011ba:	9700      	str	r7, [sp, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	220d      	movs	r2, #13
 80011c0:	4628      	mov	r0, r5
 80011c2:	f7ff fba7 	bl	8000914 <_Unwind_VRS_Set>
 80011c6:	e7a4      	b.n	8001112 <__gnu_unwind_execute+0xe>
 80011c8:	4630      	mov	r0, r6
 80011ca:	f7ff ff6f 	bl	80010ac <next_unwind_byte>
 80011ce:	0224      	lsls	r4, r4, #8
 80011d0:	4320      	orrs	r0, r4
 80011d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80011d6:	d0c2      	beq.n	800115e <__gnu_unwind_execute+0x5a>
 80011d8:	0104      	lsls	r4, r0, #4
 80011da:	2300      	movs	r3, #0
 80011dc:	b2a2      	uxth	r2, r4
 80011de:	4619      	mov	r1, r3
 80011e0:	4628      	mov	r0, r5
 80011e2:	f7ff fd51 	bl	8000c88 <_Unwind_VRS_Pop>
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d1b9      	bne.n	800115e <__gnu_unwind_execute+0x5a>
 80011ea:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80011ee:	bf18      	it	ne
 80011f0:	f04f 0801 	movne.w	r8, #1
 80011f4:	e78d      	b.n	8001112 <__gnu_unwind_execute+0xe>
 80011f6:	43c2      	mvns	r2, r0
 80011f8:	f002 0307 	and.w	r3, r2, #7
 80011fc:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001200:	411a      	asrs	r2, r3
 8001202:	0701      	lsls	r1, r0, #28
 8001204:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	bf48      	it	mi
 800120e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001212:	4619      	mov	r1, r3
 8001214:	4628      	mov	r0, r5
 8001216:	f7ff fd37 	bl	8000c88 <_Unwind_VRS_Pop>
 800121a:	2800      	cmp	r0, #0
 800121c:	f43f af79 	beq.w	8001112 <__gnu_unwind_execute+0xe>
 8001220:	e79d      	b.n	800115e <__gnu_unwind_execute+0x5a>
 8001222:	28b1      	cmp	r0, #177	; 0xb1
 8001224:	d033      	beq.n	800128e <__gnu_unwind_execute+0x18a>
 8001226:	28b2      	cmp	r0, #178	; 0xb2
 8001228:	f000 808b 	beq.w	8001342 <__gnu_unwind_execute+0x23e>
 800122c:	28b3      	cmp	r0, #179	; 0xb3
 800122e:	d039      	beq.n	80012a4 <__gnu_unwind_execute+0x1a0>
 8001230:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001234:	2bb4      	cmp	r3, #180	; 0xb4
 8001236:	d092      	beq.n	800115e <__gnu_unwind_execute+0x5a>
 8001238:	f000 0207 	and.w	r2, r0, #7
 800123c:	3201      	adds	r2, #1
 800123e:	2301      	movs	r3, #1
 8001240:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001244:	4619      	mov	r1, r3
 8001246:	4628      	mov	r0, r5
 8001248:	f7ff fd1e 	bl	8000c88 <_Unwind_VRS_Pop>
 800124c:	2800      	cmp	r0, #0
 800124e:	f43f af60 	beq.w	8001112 <__gnu_unwind_execute+0xe>
 8001252:	e784      	b.n	800115e <__gnu_unwind_execute+0x5a>
 8001254:	28c6      	cmp	r0, #198	; 0xc6
 8001256:	d042      	beq.n	80012de <__gnu_unwind_execute+0x1da>
 8001258:	28c7      	cmp	r0, #199	; 0xc7
 800125a:	d04c      	beq.n	80012f6 <__gnu_unwind_execute+0x1f2>
 800125c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001260:	2bc0      	cmp	r3, #192	; 0xc0
 8001262:	d05b      	beq.n	800131c <__gnu_unwind_execute+0x218>
 8001264:	28c8      	cmp	r0, #200	; 0xc8
 8001266:	d060      	beq.n	800132a <__gnu_unwind_execute+0x226>
 8001268:	28c9      	cmp	r0, #201	; 0xc9
 800126a:	f47f af78 	bne.w	800115e <__gnu_unwind_execute+0x5a>
 800126e:	4630      	mov	r0, r6
 8001270:	f7ff ff1c 	bl	80010ac <next_unwind_byte>
 8001274:	0302      	lsls	r2, r0, #12
 8001276:	f000 000f 	and.w	r0, r0, #15
 800127a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800127e:	3001      	adds	r0, #1
 8001280:	4302      	orrs	r2, r0
 8001282:	e765      	b.n	8001150 <__gnu_unwind_execute+0x4c>
 8001284:	f1b8 0f00 	cmp.w	r8, #0
 8001288:	d018      	beq.n	80012bc <__gnu_unwind_execute+0x1b8>
 800128a:	2000      	movs	r0, #0
 800128c:	e768      	b.n	8001160 <__gnu_unwind_execute+0x5c>
 800128e:	4630      	mov	r0, r6
 8001290:	f7ff ff0c 	bl	80010ac <next_unwind_byte>
 8001294:	4602      	mov	r2, r0
 8001296:	2800      	cmp	r0, #0
 8001298:	f43f af61 	beq.w	800115e <__gnu_unwind_execute+0x5a>
 800129c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012a0:	d0d0      	beq.n	8001244 <__gnu_unwind_execute+0x140>
 80012a2:	e75c      	b.n	800115e <__gnu_unwind_execute+0x5a>
 80012a4:	4630      	mov	r0, r6
 80012a6:	f7ff ff01 	bl	80010ac <next_unwind_byte>
 80012aa:	0301      	lsls	r1, r0, #12
 80012ac:	f000 000f 	and.w	r0, r0, #15
 80012b0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80012b4:	1c42      	adds	r2, r0, #1
 80012b6:	2301      	movs	r3, #1
 80012b8:	430a      	orrs	r2, r1
 80012ba:	e7c3      	b.n	8001244 <__gnu_unwind_execute+0x140>
 80012bc:	ac03      	add	r4, sp, #12
 80012be:	4643      	mov	r3, r8
 80012c0:	220e      	movs	r2, #14
 80012c2:	4641      	mov	r1, r8
 80012c4:	9400      	str	r4, [sp, #0]
 80012c6:	4628      	mov	r0, r5
 80012c8:	f7ff fb00 	bl	80008cc <_Unwind_VRS_Get>
 80012cc:	9400      	str	r4, [sp, #0]
 80012ce:	4628      	mov	r0, r5
 80012d0:	4643      	mov	r3, r8
 80012d2:	220f      	movs	r2, #15
 80012d4:	4641      	mov	r1, r8
 80012d6:	f7ff fb1d 	bl	8000914 <_Unwind_VRS_Set>
 80012da:	4640      	mov	r0, r8
 80012dc:	e740      	b.n	8001160 <__gnu_unwind_execute+0x5c>
 80012de:	4630      	mov	r0, r6
 80012e0:	f7ff fee4 	bl	80010ac <next_unwind_byte>
 80012e4:	0301      	lsls	r1, r0, #12
 80012e6:	f000 000f 	and.w	r0, r0, #15
 80012ea:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80012ee:	1c42      	adds	r2, r0, #1
 80012f0:	2303      	movs	r3, #3
 80012f2:	430a      	orrs	r2, r1
 80012f4:	e7a6      	b.n	8001244 <__gnu_unwind_execute+0x140>
 80012f6:	4630      	mov	r0, r6
 80012f8:	f7ff fed8 	bl	80010ac <next_unwind_byte>
 80012fc:	4602      	mov	r2, r0
 80012fe:	2800      	cmp	r0, #0
 8001300:	f43f af2d 	beq.w	800115e <__gnu_unwind_execute+0x5a>
 8001304:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001308:	f47f af29 	bne.w	800115e <__gnu_unwind_execute+0x5a>
 800130c:	2104      	movs	r1, #4
 800130e:	4628      	mov	r0, r5
 8001310:	f7ff fcba 	bl	8000c88 <_Unwind_VRS_Pop>
 8001314:	2800      	cmp	r0, #0
 8001316:	f43f aefc 	beq.w	8001112 <__gnu_unwind_execute+0xe>
 800131a:	e720      	b.n	800115e <__gnu_unwind_execute+0x5a>
 800131c:	f000 020f 	and.w	r2, r0, #15
 8001320:	3201      	adds	r2, #1
 8001322:	2303      	movs	r3, #3
 8001324:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001328:	e78c      	b.n	8001244 <__gnu_unwind_execute+0x140>
 800132a:	4630      	mov	r0, r6
 800132c:	f7ff febe 	bl	80010ac <next_unwind_byte>
 8001330:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001334:	f000 030f 	and.w	r3, r0, #15
 8001338:	3210      	adds	r2, #16
 800133a:	3301      	adds	r3, #1
 800133c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001340:	e706      	b.n	8001150 <__gnu_unwind_execute+0x4c>
 8001342:	2300      	movs	r3, #0
 8001344:	f10d 090c 	add.w	r9, sp, #12
 8001348:	220d      	movs	r2, #13
 800134a:	4619      	mov	r1, r3
 800134c:	f8cd 9000 	str.w	r9, [sp]
 8001350:	4628      	mov	r0, r5
 8001352:	f7ff fabb 	bl	80008cc <_Unwind_VRS_Get>
 8001356:	4630      	mov	r0, r6
 8001358:	f7ff fea8 	bl	80010ac <next_unwind_byte>
 800135c:	0602      	lsls	r2, r0, #24
 800135e:	f04f 0702 	mov.w	r7, #2
 8001362:	d50c      	bpl.n	800137e <__gnu_unwind_execute+0x27a>
 8001364:	9b03      	ldr	r3, [sp, #12]
 8001366:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800136a:	40b8      	lsls	r0, r7
 800136c:	4403      	add	r3, r0
 800136e:	4630      	mov	r0, r6
 8001370:	9303      	str	r3, [sp, #12]
 8001372:	f7ff fe9b 	bl	80010ac <next_unwind_byte>
 8001376:	0603      	lsls	r3, r0, #24
 8001378:	f107 0707 	add.w	r7, r7, #7
 800137c:	d4f2      	bmi.n	8001364 <__gnu_unwind_execute+0x260>
 800137e:	9b03      	ldr	r3, [sp, #12]
 8001380:	f8cd 9000 	str.w	r9, [sp]
 8001384:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001388:	f503 7201 	add.w	r2, r3, #516	; 0x204
 800138c:	40bc      	lsls	r4, r7
 800138e:	2300      	movs	r3, #0
 8001390:	4414      	add	r4, r2
 8001392:	4619      	mov	r1, r3
 8001394:	220d      	movs	r2, #13
 8001396:	4628      	mov	r0, r5
 8001398:	9403      	str	r4, [sp, #12]
 800139a:	f7ff fabb 	bl	8000914 <_Unwind_VRS_Set>
 800139e:	e6b8      	b.n	8001112 <__gnu_unwind_execute+0xe>

080013a0 <__gnu_unwind_frame>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80013a4:	b084      	sub	sp, #16
 80013a6:	6853      	ldr	r3, [r2, #4]
 80013a8:	2403      	movs	r4, #3
 80013aa:	f88d 400c 	strb.w	r4, [sp, #12]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	f102 0408 	add.w	r4, r2, #8
 80013b4:	4608      	mov	r0, r1
 80013b6:	79d2      	ldrb	r2, [r2, #7]
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	a901      	add	r1, sp, #4
 80013bc:	9402      	str	r4, [sp, #8]
 80013be:	f88d 200d 	strb.w	r2, [sp, #13]
 80013c2:	f7ff fe9f 	bl	8001104 <__gnu_unwind_execute>
 80013c6:	b004      	add	sp, #16
 80013c8:	bd10      	pop	{r4, pc}
 80013ca:	bf00      	nop

080013cc <_Unwind_GetRegionStart>:
 80013cc:	b508      	push	{r3, lr}
 80013ce:	f7ff fe97 	bl	8001100 <unwind_UCB_from_context>
 80013d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013d4:	bd08      	pop	{r3, pc}
 80013d6:	bf00      	nop

080013d8 <_Unwind_GetLanguageSpecificData>:
 80013d8:	b508      	push	{r3, lr}
 80013da:	f7ff fe91 	bl	8001100 <unwind_UCB_from_context>
 80013de:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013e0:	79c3      	ldrb	r3, [r0, #7]
 80013e2:	3302      	adds	r3, #2
 80013e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013e8:	bd08      	pop	{r3, pc}
 80013ea:	bf00      	nop

080013ec <__aeabi_idiv0>:
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <_ZN5TicksC1Em>:

/**
 * @fn Ticks
 * @brief Constructor
 */
Ticks::Ticks(const TickType_t cxTicks): cxTicks(cxTicks)
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	601a      	str	r2, [r3, #0]
{
}
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <_Z41__static_initialization_and_destruction_0ii>:
 * @param cu32ms: Defines the length of delay in ms
 */
Ticks Ticks::fromMs(const uint32_t cu32ms)
{
   return Ticks(static_cast<TickType_t>(cu32ms/portTICK_RATE_MS));
}
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d109      	bne.n	8001434 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001426:	4293      	cmp	r3, r2
 8001428:	d104      	bne.n	8001434 <_Z41__static_initialization_and_destruction_0ii+0x24>
const Ticks Ticks::cMaxDelay = Ticks(static_cast<TickType_t>(1000u/portTICK_RATE_MS)); // TODO: Max delay has to be defined appropriately
 800142a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001430:	f7ff ffde 	bl	80013f0 <_ZN5TicksC1Em>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	2000009c 	.word	0x2000009c

08001440 <_GLOBAL__sub_I__ZN5Ticks9cMaxDelayE>:
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
 8001444:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff ffe1 	bl	8001410 <_Z41__static_initialization_and_destruction_0ii>
 800144e:	bd80      	pop	{r7, pc}

08001450 <_sbrk_r>:
static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit; // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void* _sbrk_r(struct _reent *pReent, int incr) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
	static char *currentHeapEnd = &__HeapBase;
#ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
	if (TotalHeapSize == 0) {
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <_sbrk_r+0xc8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10e      	bne.n	8001480 <_sbrk_r+0x30>
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 8001462:	4a2e      	ldr	r2, [pc, #184]	; (800151c <_sbrk_r+0xcc>)
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <_sbrk_r+0xd0>)
 8001466:	1ad3      	subs	r3, r2, r3
				- (&__HeapBase)) - ISR_STACK_LENGTH_BYTES;
 8001468:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 800146c:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <_sbrk_r+0xd4>)
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4a2a      	ldr	r2, [pc, #168]	; (800151c <_sbrk_r+0xcc>)
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <_sbrk_r+0xd0>)
 8001474:	1ad3      	subs	r3, r2, r3
				- (&__HeapBase)) - ISR_STACK_LENGTH_BYTES;
 8001476:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 800147a:	461a      	mov	r2, r3
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <_sbrk_r+0xc8>)
 800147e:	601a      	str	r2, [r3, #0]
	char* my_heap_limit = &__HeapLimit;
	char* my_heap_isr_stack_limit = &__HeapLimit - ISR_STACK_LENGTH_BYTES;
	*/

	char *limit =
			(xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) ?
 8001480:	f007 fe72 	bl	8009168 <xTaskGetSchedulerState>
 8001484:	4603      	mov	r3, r0
					stack_ptr : // Before scheduler is started, limit is stack pointer (risky!)
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <_sbrk_r+0x3e>
 800148a:	466b      	mov	r3, sp
 800148c:	e000      	b.n	8001490 <_sbrk_r+0x40>
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <_sbrk_r+0xd8>)
	char *limit =
 8001490:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001492:	f3ef 8211 	mrs	r2, BASEPRI
 8001496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800149a:	b672      	cpsid	i
 800149c:	f383 8811 	msr	BASEPRI, r3
 80014a0:	f3bf 8f6f 	isb	sy
 80014a4:	f3bf 8f4f 	dsb	sy
 80014a8:	b662      	cpsie	i
 80014aa:	61ba      	str	r2, [r7, #24]
 80014ac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80014ae:	69bb      	ldr	r3, [r7, #24]
					&__HeapLimit - ISR_STACK_LENGTH_BYTES; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
	DRN_ENTER_CRITICAL_SECTION(usis);
 80014b0:	623b      	str	r3, [r7, #32]
	char *previousHeapEnd = currentHeapEnd;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <_sbrk_r+0xdc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	61fb      	str	r3, [r7, #28]
	if (currentHeapEnd + incr > limit) {
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <_sbrk_r+0xdc>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d20a      	bcs.n	80014dc <_sbrk_r+0x8c>
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80014d0:	bf00      	nop
		// Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
		{
			extern void vApplicationMallocFailedHook(void);
			DRN_EXIT_CRITICAL_SECTION(usis);
			vApplicationMallocFailedHook();
 80014d2:	f002 f97d 	bl	80037d0 <vApplicationMallocFailedHook>
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
            DRN_EXIT_CRITICAL_SECTION(usis);
        #endif
		return (char*) -1; // the malloc-family routine that called sbrk will return 0
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e018      	b.n	800150e <_sbrk_r+0xbe>
	}
	// 'incr' of memory is available: update accounting and return it.
	currentHeapEnd += incr;
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <_sbrk_r+0xdc>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <_sbrk_r+0xdc>)
 80014e6:	6013      	str	r3, [r2, #0]
	heapBytesRemaining -= incr;
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <_sbrk_r+0xd4>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <_sbrk_r+0xd4>)
 80014f2:	6013      	str	r3, [r2, #0]
#ifndef NDEBUG
	totalBytesProvidedBySBRK += incr;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <_sbrk_r+0xe0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <_sbrk_r+0xe0>)
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f383 8811 	msr	BASEPRI, r3
}
 800150a:	bf00      	nop
#endif
	DRN_EXIT_CRITICAL_SECTION(usis);
	return (char*) previousHeapEnd;
 800150c:	69fb      	ldr	r3, [r7, #28]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000f38 	.word	0x20000f38
 800151c:	20080000 	.word	0x20080000
 8001520:	20001098 	.word	0x20001098
 8001524:	200000a0 	.word	0x200000a0
 8001528:	2007fe00 	.word	0x2007fe00
 800152c:	20000000 	.word	0x20000000
 8001530:	200000a4 	.word	0x200000a4

08001534 <__malloc_lock>:
;

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r) {
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	__asm volatile
 800153c:	f3ef 8211 	mrs	r2, BASEPRI
 8001540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001544:	b672      	cpsid	i
 8001546:	f383 8811 	msr	BASEPRI, r3
 800154a:	f3bf 8f6f 	isb	sy
 800154e:	f3bf 8f4f 	dsb	sy
 8001552:	b662      	cpsie	i
 8001554:	60fa      	str	r2, [r7, #12]
 8001556:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 8001558:	68fb      	ldr	r3, [r7, #12]
#if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <__malloc_lock+0x38>)
 800155c:	6013      	str	r3, [r2, #0]
		taskDISABLE_INTERRUPTS();
		for( ;; );
	}
	vTaskSuspendAll();
#endif
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	200000a8 	.word	0x200000a8

08001570 <__malloc_unlock>:
;
void __malloc_unlock(struct _reent *r) {
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
#if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <__malloc_unlock+0x24>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f383 8811 	msr	BASEPRI, r3
}
 8001584:	bf00      	nop
  #else
	(void) xTaskResumeAll();
#endif
}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200000a8 	.word	0x200000a8

08001598 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void* pvPortMalloc(size_t xSize) PRIVILEGED_FUNCTION {
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	void *p = malloc(xSize);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f009 fce9 	bl	800af78 <malloc>
 80015a6:	4603      	mov	r3, r0
 80015a8:	60fb      	str	r3, [r7, #12]
	return p;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <vPortFree>:
void vPortFree(void *pv) PRIVILEGED_FUNCTION {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	free(pv);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f009 fce3 	bl	800af88 <free>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_ZN17CANControllerBase13addSubscriberE10CANFrameIdR14ICANSubscriber>:
{
	std::vector<CANFrameId> _canFrameIds;
	std::vector<ICANSubscriber*> _canSubscribers;

public:
	void addSubscriber(CANFrameId id, ICANSubscriber &subscriber) override
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	4638      	mov	r0, r7
 80015ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		_canFrameIds.push_back(id);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3304      	adds	r3, #4
 80015f4:	463a      	mov	r2, r7
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fa87 	bl	8001b0c <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_>
		_canSubscribers.push_back(&subscriber);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f103 0210 	add.w	r2, r3, #16
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f000 faa2 	bl	8001b58 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE9push_backEOS1_>
	}
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN17CANControllerBase7receiveE8CANFrame>:

	void receive(CANFrame frame) override
 800161c:	b084      	sub	sp, #16
 800161e:	b5b0      	push	{r4, r5, r7, lr}
 8001620:	b08c      	sub	sp, #48	; 0x30
 8001622:	af04      	add	r7, sp, #16
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800162a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		// update each subscriber that listens to the same frame id as the id of the given frame
		for (auto it = _canFrameIds.begin(); it != _canFrameIds.end(); ++it)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	4618      	mov	r0, r3
 8001634:	f000 faa1 	bl	8001b7a <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 8001638:	4603      	mov	r3, r0
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3304      	adds	r3, #4
 8001640:	4618      	mov	r0, r3
 8001642:	f000 faaa 	bl	8001b9a <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>
 8001646:	4603      	mov	r3, r0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	f107 0210 	add.w	r2, r7, #16
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f000 fab1 	bl	8001bbc <_ZN9__gnu_cxxneIP10CANFrameIdSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d03e      	beq.n	80016de <_ZN17CANControllerBase7receiveE8CANFrame+0xc2>
		{
			if (frame.id == *it)
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fad2 	bl	8001c0e <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEdeEv>
 800166a:	4602      	mov	r2, r0
 800166c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f002 f83a 	bl	80036ec <_ZNK10CANFrameIdeqERKS_>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d029      	beq.n	80016d2 <_ZN17CANControllerBase7receiveE8CANFrame+0xb6>
			{
				const int index = it - _canFrameIds.begin();
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3304      	adds	r3, #4
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fa79 	bl	8001b7a <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 8001688:	4603      	mov	r3, r0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	f107 0214 	add.w	r2, r7, #20
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fac6 	bl	8001c28 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800169c:	61f8      	str	r0, [r7, #28]
				ICANSubscriber *subscriber = _canSubscribers[index];
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3310      	adds	r3, #16
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fad8 	bl	8001c5c <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEixEj>
 80016ac:	4603      	mov	r3, r0
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61bb      	str	r3, [r7, #24]
				subscriber->receive(frame);
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	3308      	adds	r3, #8
 80016b8:	681d      	ldr	r5, [r3, #0]
 80016ba:	466c      	mov	r4, sp
 80016bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80016c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ce:	69b8      	ldr	r0, [r7, #24]
 80016d0:	47a8      	blx	r5
		for (auto it = _canFrameIds.begin(); it != _canFrameIds.end(); ++it)
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fa88 	bl	8001bec <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEppEv>
 80016dc:	e7ae      	b.n	800163c <_ZN17CANControllerBase7receiveE8CANFrame+0x20>
			}
		}
	}
 80016de:	bf00      	nop
 80016e0:	3720      	adds	r7, #32
 80016e2:	46bd      	mov	sp, r7
 80016e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016e8:	b004      	add	sp, #16
 80016ea:	4770      	bx	lr

080016ec <_ZN14ICANSubscriberC1Ev>:
#ifndef ICANSUBSCRIBER_HPP_
#define ICANSUBSCRIBER_HPP_

#include <middleware_layer/can/CANFrame.hpp>

class ICANSubscriber
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <_ZN14ICANSubscriberC1Ev+0x1c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	0800bb38 	.word	0x0800bb38

0800170c <_ZN14ICANSubscriberD1Ev>:
{
public:
	virtual ~ICANSubscriber() = default;
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <_ZN14ICANSubscriberD1Ev+0x1c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	0800bb38 	.word	0x0800bb38

0800172c <_ZN14ICANSubscriberD0Ev>:
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ffe9 	bl	800170c <_ZN14ICANSubscriberD1Ev>
 800173a:	2104      	movs	r1, #4
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f008 fb8b 	bl	8009e58 <_ZdlPvj>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <_ZN8InverterC1ER13CANController10CANFrameId>:
private:
	CANController& _canController;
	CANFrameId _setTargetRevolutionSpeedId;

public:
	Inverter(CANController &canController, CANFrameId setTargetRevolutionSpeedId) :
 800174c:	b082      	sub	sp, #8
 800174e:	b590      	push	{r4, r7, lr}
 8001750:	b085      	sub	sp, #20
 8001752:	af02      	add	r7, sp, #8
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
 8001758:	f107 0118 	add.w	r1, r7, #24
 800175c:	e881 000c 	stmia.w	r1, {r2, r3}
		_canController(canController),
		_setTargetRevolutionSpeedId(setTargetRevolutionSpeedId)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ffc2 	bl	80016ec <_ZN14ICANSubscriberC1Ev>
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <_ZN8InverterC1ER13CANController10CANFrameId+0x70>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3308      	adds	r3, #8
 8001778:	f107 0218 	add.w	r2, r7, #24
 800177c:	ca07      	ldmia	r2, {r0, r1, r2}
 800177e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	{
		_canController.addSubscriber(_setTargetRevolutionSpeedId, *this);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681c      	ldr	r4, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	9200      	str	r2, [sp, #0]
 8001796:	3308      	adds	r3, #8
 8001798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179a:	47a0      	blx	r4
	}
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	e005      	b.n	80017ac <_ZN8InverterC1ER13CANController10CANFrameId+0x60>
		_setTargetRevolutionSpeedId(setTargetRevolutionSpeedId)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ffb2 	bl	800170c <_ZN14ICANSubscriberD1Ev>
 80017a8:	f008 fbee 	bl	8009f88 <__cxa_end_cleanup>
	}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80017b6:	b002      	add	sp, #8
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	0800bb10 	.word	0x0800bb10

080017c0 <_ZN8InverterD1Ev>:
	virtual ~Inverter() = default;
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <_ZN8InverterD1Ev+0x20>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff9b 	bl	800170c <_ZN14ICANSubscriberD1Ev>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	0800bb10 	.word	0x0800bb10

080017e4 <_ZN8InverterD0Ev>:
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffe7 	bl	80017c0 <_ZN8InverterD1Ev>
 80017f2:	2114      	movs	r1, #20
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f008 fb2f 	bl	8009e58 <_ZdlPvj>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_ZN12InverterLeftC1ER13CANController>:


class InverterLeft : Inverter
{
public:
	InverterLeft(CANController &canController) : Inverter(canController, CANFrameId(0xAA))
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af02      	add	r7, sp, #8
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	687c      	ldr	r4, [r7, #4]
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	21aa      	movs	r1, #170	; 0xaa
 8001816:	4618      	mov	r0, r3
 8001818:	f001 ff58 	bl	80036cc <_ZN10CANFrameIdC1Em>
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	cb0c      	ldmia	r3, {r2, r3}
 8001826:	6839      	ldr	r1, [r7, #0]
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff ff8f 	bl	800174c <_ZN8InverterC1ER13CANController10CANFrameId>
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <_ZN12InverterLeftC1ER13CANController+0x3c>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	601a      	str	r2, [r3, #0]
	{
	}
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	0800bafc 	.word	0x0800bafc

08001844 <_ZN12InverterLeft7receiveE8CANFrame>:

	void receive(CANFrame frame) override
 8001844:	b084      	sub	sp, #16
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	f107 0014 	add.w	r0, r7, #20
 8001852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		puts("InverterLeft: frame received");
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <_ZN12InverterLeft7receiveE8CANFrame+0x28>)
 8001858:	f009 fce6 	bl	800b228 <puts>
	}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001866:	b004      	add	sp, #16
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	0800b8dc 	.word	0x0800b8dc

08001870 <_ZN13InverterRightC1ER13CANController>:


class InverterRight : Inverter
{
public:
	InverterRight(CANController &canController) : Inverter(canController, CANFrameId(0xBB))
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af02      	add	r7, sp, #8
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	687c      	ldr	r4, [r7, #4]
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	21bb      	movs	r1, #187	; 0xbb
 8001882:	4618      	mov	r0, r3
 8001884:	f001 ff22 	bl	80036cc <_ZN10CANFrameIdC1Em>
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	cb0c      	ldmia	r3, {r2, r3}
 8001892:	6839      	ldr	r1, [r7, #0]
 8001894:	4620      	mov	r0, r4
 8001896:	f7ff ff59 	bl	800174c <_ZN8InverterC1ER13CANController10CANFrameId>
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <_ZN13InverterRightC1ER13CANController+0x3c>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	601a      	str	r2, [r3, #0]
	{
	}
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4618      	mov	r0, r3
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	0800bae8 	.word	0x0800bae8

080018b0 <_ZN13InverterRight7receiveE8CANFrame>:

	void receive(CANFrame frame) override
 80018b0:	b084      	sub	sp, #16
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	f107 0014 	add.w	r0, r7, #20
 80018be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		puts("InverterRight: frame received");
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <_ZN13InverterRight7receiveE8CANFrame+0x28>)
 80018c4:	f009 fcb0 	bl	800b228 <puts>
	}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018d2:	b004      	add	sp, #16
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	0800b8fc 	.word	0x0800b8fc

080018dc <_ZN17CANControllerBaseD1Ev>:
class CANControllerBase : public ICANController
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	4a08      	ldr	r2, [pc, #32]	; (8001908 <_ZN17CANControllerBaseD1Ev+0x2c>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3310      	adds	r3, #16
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f9df 	bl	8001cb2 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EED1Ev>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3304      	adds	r3, #4
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f9bf 	bl	8001c7c <_ZNSt6vectorI10CANFrameIdSaIS0_EED1Ev>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	0800bb24 	.word	0x0800bb24

0800190c <_ZN13CANControllerD1Ev>:

#include <middleware_layer/can/CANControllerBase.hpp>
#include <middleware_layer/can/CANHandle.hpp>


class CANController : public CANControllerBase
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	4a05      	ldr	r2, [pc, #20]	; (800192c <_ZN13CANControllerD1Ev+0x20>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ffdd 	bl	80018dc <_ZN17CANControllerBaseD1Ev>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	0800bb4c 	.word	0x0800bb4c

08001930 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f9d5 	bl	8001ce8 <_ZNSaI10CANFrameIdED1Ev>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implD1Ev>:
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f9f3 	bl	8001d3c <_ZNSaIP14ICANSubscriberED1Ev>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <vtestCAN>:

Notes:-
1) Error state is not yet defined or implemented.s
*******************************************************************************************************************/
void vtestCAN (void)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af04      	add	r7, sp, #16

	switch(eMachineState)
 8001966:	4b5c      	ldr	r3, [pc, #368]	; (8001ad8 <vtestCAN+0x178>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <vtestCAN+0x14>
 800196e:	2b01      	cmp	r3, #1
 8001970:	d063      	beq.n	8001a3a <vtestCAN+0xda>
 8001972:	e09d      	b.n	8001ab0 <vtestCAN+0x150>
	{
		case TEST_INIT:
			/*start the can controller*/
			canController1.start();
 8001974:	4859      	ldr	r0, [pc, #356]	; (8001adc <vtestCAN+0x17c>)
 8001976:	f001 fd17 	bl	80033a8 <_ZN13CANController5startEv>

			/*start the Interrupts*/
			canController1.activateInterrupt();
 800197a:	4858      	ldr	r0, [pc, #352]	; (8001adc <vtestCAN+0x17c>)
 800197c:	f001 fd66 	bl	800344c <_ZN13CANController17activateInterruptEv>

			payload.bitLength = 8;
 8001980:	4b57      	ldr	r3, [pc, #348]	; (8001ae0 <vtestCAN+0x180>)
 8001982:	2208      	movs	r2, #8
 8001984:	721a      	strb	r2, [r3, #8]
			payload.data.uint8[0] = 0xAA;
 8001986:	4b56      	ldr	r3, [pc, #344]	; (8001ae0 <vtestCAN+0x180>)
 8001988:	22aa      	movs	r2, #170	; 0xaa
 800198a:	701a      	strb	r2, [r3, #0]
			payload.isRemoteFrame = false;
 800198c:	4b54      	ldr	r3, [pc, #336]	; (8001ae0 <vtestCAN+0x180>)
 800198e:	2200      	movs	r2, #0
 8001990:	725a      	strb	r2, [r3, #9]
			static CANFrame leftInverterFrame = CANFrame(canFrameIdLeftInverter, payload);
 8001992:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <vtestCAN+0x184>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	f3bf 8f5b 	dmb	ish
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d019      	beq.n	80019e2 <vtestCAN+0x82>
 80019ae:	484d      	ldr	r0, [pc, #308]	; (8001ae4 <vtestCAN+0x184>)
 80019b0:	f008 ff70 	bl	800a894 <__cxa_guard_acquire>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf14      	ite	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	2300      	moveq	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00e      	beq.n	80019e2 <vtestCAN+0x82>
 80019c4:	2500      	movs	r5, #0
 80019c6:	4c48      	ldr	r4, [pc, #288]	; (8001ae8 <vtestCAN+0x188>)
 80019c8:	4a45      	ldr	r2, [pc, #276]	; (8001ae0 <vtestCAN+0x180>)
 80019ca:	466b      	mov	r3, sp
 80019cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019d2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80019d6:	4845      	ldr	r0, [pc, #276]	; (8001aec <vtestCAN+0x18c>)
 80019d8:	f001 fdec 	bl	80035b4 <_ZN8CANFrameC1E10CANFrameId10CANPayload>
 80019dc:	4841      	ldr	r0, [pc, #260]	; (8001ae4 <vtestCAN+0x184>)
 80019de:	f008 ff68 	bl	800a8b2 <__cxa_guard_release>
			static CANFrame rightInverterFrame = CANFrame(canFrameIdRightInverter, payload);
 80019e2:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <vtestCAN+0x190>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	f3bf 8f5b 	dmb	ish
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d019      	beq.n	8001a32 <vtestCAN+0xd2>
 80019fe:	483c      	ldr	r0, [pc, #240]	; (8001af0 <vtestCAN+0x190>)
 8001a00:	f008 ff48 	bl	800a894 <__cxa_guard_acquire>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf14      	ite	ne
 8001a0a:	2301      	movne	r3, #1
 8001a0c:	2300      	moveq	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00e      	beq.n	8001a32 <vtestCAN+0xd2>
 8001a14:	2500      	movs	r5, #0
 8001a16:	4c37      	ldr	r4, [pc, #220]	; (8001af4 <vtestCAN+0x194>)
 8001a18:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <vtestCAN+0x180>)
 8001a1a:	466b      	mov	r3, sp
 8001a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a22:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001a26:	4834      	ldr	r0, [pc, #208]	; (8001af8 <vtestCAN+0x198>)
 8001a28:	f001 fdc4 	bl	80035b4 <_ZN8CANFrameC1E10CANFrameId10CANPayload>
 8001a2c:	4830      	ldr	r0, [pc, #192]	; (8001af0 <vtestCAN+0x190>)
 8001a2e:	f008 ff40 	bl	800a8b2 <__cxa_guard_release>
			eMachineState=TEST_EXECUTE;
 8001a32:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <vtestCAN+0x178>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	701a      	strb	r2, [r3, #0]
			break;
 8001a38:	e03c      	b.n	8001ab4 <vtestCAN+0x154>

		case TEST_EXECUTE:
			/*read user-button*/
			u8_pin_state = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 8001a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a3e:	482f      	ldr	r0, [pc, #188]	; (8001afc <vtestCAN+0x19c>)
 8001a40:	f003 fd42 	bl	80054c8 <HAL_GPIO_ReadPin>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b2d      	ldr	r3, [pc, #180]	; (8001b00 <vtestCAN+0x1a0>)
 8001a4a:	701a      	strb	r2, [r3, #0]

			if( u8_pin_state == 1 && u8_last_pin_state == 0)
 8001a4c:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <vtestCAN+0x1a0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d121      	bne.n	8001a98 <vtestCAN+0x138>
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <vtestCAN+0x1a4>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d11d      	bne.n	8001a98 <vtestCAN+0x138>
			{	/*button is push*/
				/*toggle led*/
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	482a      	ldr	r0, [pc, #168]	; (8001b08 <vtestCAN+0x1a8>)
 8001a60:	f003 fd63 	bl	800552a <HAL_GPIO_TogglePin>
				u8_last_pin_state = 1;
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <vtestCAN+0x1a4>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
				/*CAN send*/
				canController1.send(leftInverterFrame);
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <vtestCAN+0x18c>)
 8001a6c:	466c      	mov	r4, sp
 8001a6e:	f103 020c 	add.w	r2, r3, #12
 8001a72:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a7a:	4818      	ldr	r0, [pc, #96]	; (8001adc <vtestCAN+0x17c>)
 8001a7c:	f001 fc00 	bl	8003280 <_ZN13CANController4sendE8CANFrame>
				canController1.send(rightInverterFrame);
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <vtestCAN+0x198>)
 8001a82:	466c      	mov	r4, sp
 8001a84:	f103 020c 	add.w	r2, r3, #12
 8001a88:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a90:	4812      	ldr	r0, [pc, #72]	; (8001adc <vtestCAN+0x17c>)
 8001a92:	f001 fbf5 	bl	8003280 <_ZN13CANController4sendE8CANFrame>
			}
			else if (u8_pin_state == 0 && u8_last_pin_state == 1)
			{
				u8_last_pin_state = 0;
			}
			break;
 8001a96:	e00c      	b.n	8001ab2 <vtestCAN+0x152>
			else if (u8_pin_state == 0 && u8_last_pin_state == 1)
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <vtestCAN+0x1a0>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d108      	bne.n	8001ab2 <vtestCAN+0x152>
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <vtestCAN+0x1a4>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d104      	bne.n	8001ab2 <vtestCAN+0x152>
				u8_last_pin_state = 0;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <vtestCAN+0x1a4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
			break;
 8001aae:	e000      	b.n	8001ab2 <vtestCAN+0x152>

		case TEST_ERROR:
		default:
			while(1)
 8001ab0:	e7fe      	b.n	8001ab0 <vtestCAN+0x150>
			break;
 8001ab2:	bf00      	nop
			break;

	}


}
 8001ab4:	e00d      	b.n	8001ad2 <vtestCAN+0x172>
			static CANFrame leftInverterFrame = CANFrame(canFrameIdLeftInverter, payload);
 8001ab6:	2d00      	cmp	r5, #0
 8001ab8:	d102      	bne.n	8001ac0 <vtestCAN+0x160>
 8001aba:	480a      	ldr	r0, [pc, #40]	; (8001ae4 <vtestCAN+0x184>)
 8001abc:	f008 fef6 	bl	800a8ac <__cxa_guard_abort>
 8001ac0:	f008 fa62 	bl	8009f88 <__cxa_end_cleanup>
			static CANFrame rightInverterFrame = CANFrame(canFrameIdRightInverter, payload);
 8001ac4:	2d00      	cmp	r5, #0
 8001ac6:	d102      	bne.n	8001ace <vtestCAN+0x16e>
 8001ac8:	4809      	ldr	r0, [pc, #36]	; (8001af0 <vtestCAN+0x190>)
 8001aca:	f008 feef 	bl	800a8ac <__cxa_guard_abort>
 8001ace:	f008 fa5b 	bl	8009f88 <__cxa_end_cleanup>
}
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000118 	.word	0x20000118
 8001adc:	200000ac 	.word	0x200000ac
 8001ae0:	2000010c 	.word	0x2000010c
 8001ae4:	20000134 	.word	0x20000134
 8001ae8:	200000cc 	.word	0x200000cc
 8001aec:	2000011c 	.word	0x2000011c
 8001af0:	20000150 	.word	0x20000150
 8001af4:	200000d8 	.word	0x200000d8
 8001af8:	20000138 	.word	0x20000138
 8001afc:	40020800 	.word	0x40020800
 8001b00:	20000119 	.word	0x20000119
 8001b04:	2000011a 	.word	0x2000011a
 8001b08:	40020400 	.word	0x40020400

08001b0c <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d00d      	beq.n	8001b3e <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f000 f92b 	bl	8001d86 <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f103 020c 	add.w	r2, r3, #12
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8001b3c:	e008      	b.n	8001b50 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f82b 	bl	8001b9a <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>
 8001b44:	4603      	mov	r3, r0
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f944 	bl	8001dd8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE9push_backEOS1_>:

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8001b62:	6838      	ldr	r0, [r7, #0]
 8001b64:	f000 fa2e 	bl	8001fc4 <_ZSt4moveIRP14ICANSubscriberEONSt16remove_referenceIT_E4typeEOS4_>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fa34 	bl	8001fda <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fa53 	bl	8002036 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	1d1a      	adds	r2, r3, #4
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 fa42 	bl	8002036 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <_ZN9__gnu_cxxneIP10CANFrameIdSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fa45 	bl	8002056 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	681c      	ldr	r4, [r3, #0]
 8001bd0:	6838      	ldr	r0, [r7, #0]
 8001bd2:	f000 fa40 	bl	8002056 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	429c      	cmp	r4, r3
 8001bdc:	bf14      	ite	ne
 8001bde:	2301      	movne	r3, #1
 8001be0:	2300      	moveq	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}

08001bec <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f103 020c 	add.w	r2, r3, #12
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	601a      	str	r2, [r3, #0]
	return *this;
 8001c00:	687b      	ldr	r3, [r7, #4]
      }
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 fa0f 	bl	8002056 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	681c      	ldr	r4, [r3, #0]
 8001c3c:	6838      	ldr	r0, [r7, #0]
 8001c3e:	f000 fa0a 	bl	8002056 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001c42:	4603      	mov	r3, r0
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	1ae3      	subs	r3, r4, r3
 8001c48:	109b      	asrs	r3, r3, #2
 8001c4a:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	aaaaaaab 	.word	0xaaaaaaab

08001c5c <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
      }
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_ZNSt6vectorI10CANFrameIdSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001c7c:	b5b0      	push	{r4, r5, r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681c      	ldr	r4, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f9ec 	bl	800206c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001c94:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c96:	461a      	mov	r2, r3
 8001c98:	4629      	mov	r1, r5
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f000 f9f1 	bl	8002082 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
      }
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f82c 	bl	8001d00 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bdb0      	pop	{r4, r5, r7, pc}

08001cb2 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001cb2:	b5b0      	push	{r4, r5, r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681c      	ldr	r4, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f9ea 	bl	800209e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8001cca:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4629      	mov	r1, r5
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f000 f9ef 	bl	80020b4 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
      }
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 f83b 	bl	8001d54 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EED1Ev>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bdb0      	pop	{r4, r5, r7, pc}

08001ce8 <_ZNSaI10CANFrameIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f9ed 	bl	80020d0 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdED1Ev>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	109b      	asrs	r3, r3, #2
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev+0x38>)
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f9e0 	bl	80020e6 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fe01 	bl	8001930 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implD1Ev>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	aaaaaaab 	.word	0xaaaaaaab

08001d3c <_ZNSaIP14ICANSubscriberED1Ev>:
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f9e1 	bl	800210c <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberED1Ev>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f9d7 	bl	8002122 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
      }
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fde6 	bl	8001948 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implD1Ev>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f9d8 	bl	8002148 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f9dd 	bl	800215e <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_ZNSt6vectorI10CANFrameIdSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f805 	bl	8001dc2 <_ZNSt6vectorI10CANFrameIdSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8001db8:	4603      	mov	r3, r0
      }
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_ZNSt6vectorI10CANFrameIdSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001dca:	2301      	movs	r3, #1
      }
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8001de4:	4a75      	ldr	r2, [pc, #468]	; (8001fbc <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1e4>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f9d0 	bl	800218e <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc>
 8001dee:	4603      	mov	r3, r0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff febb 	bl	8001b7a <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 8001e04:	4603      	mov	r3, r0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	f107 0214 	add.w	r2, r7, #20
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff08 	bl	8001c28 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 f9fb 	bl	800221c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj>
 8001e26:	4603      	mov	r3, r0
 8001e28:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001e2e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	189d      	adds	r5, r3, r2
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f981 	bl	8002148 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff ff9a 	bl	8001d86 <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8001e56:	f7ff ffa9 	bl	8001dac <_ZNSt6vectorI10CANFrameIdSaIS0_EE15_S_use_relocateEv>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d027      	beq.n	8001eb0 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001e60:	f107 0308 	add.w	r3, r7, #8
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f8f6 	bl	8002056 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f8fb 	bl	800206c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001e76:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e7e:	f000 f9e1 	bl	8002244 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8001e82:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e86:	330c      	adds	r3, #12
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f8e1 	bl	8002056 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001e94:	4603      	mov	r3, r0
 8001e96:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f8e6 	bl	800206c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001ea0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea4:	6a39      	ldr	r1, [r7, #32]
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f000 f9cc 	bl	8002244 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8001eac:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001eae:	e028      	b.n	8001f02 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f8ce 	bl	8002056 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 f8d3 	bl	800206c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001ec6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4621      	mov	r1, r4
 8001ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ece:	f000 f9cd 	bl	800226c <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed8:	330c      	adds	r3, #12
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f8b8 	bl	8002056 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 f8bd 	bl	800206c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001ef2:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8001ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef6:	6a39      	ldr	r1, [r7, #32]
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f000 f9b7 	bl	800226c <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001efe:	4603      	mov	r3, r0
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8001f02:	f7ff ff53 	bl	8001dac <_ZNSt6vectorI10CANFrameIdSaIS0_EE15_S_use_relocateEv>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d009      	beq.n	8001f26 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x14e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f8a9 	bl	800206c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	6a39      	ldr	r1, [r7, #32]
 8001f20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f22:	f000 f8ae 	bl	8002082 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001f26:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	109b      	asrs	r3, r3, #2
 8001f32:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1e8>)
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8001f38:	461a      	mov	r2, r3
 8001f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3c:	f000 f8d3 	bl	80020e6 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f4a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	461a      	mov	r2, r3
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	441a      	add	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	609a      	str	r2, [r3, #8]
    }
 8001f60:	e029      	b.n	8001fb6 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1de>
 8001f62:	4603      	mov	r3, r0
      __catch(...)
 8001f64:	4618      	mov	r0, r3
 8001f66:	f008 f8e4 	bl	800a132 <__cxa_begin_catch>
	  if (!__new_finish)
 8001f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10c      	bne.n	8001f8a <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1b2>
	    _Alloc_traits::destroy(this->_M_impl,
 8001f70:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	461a      	mov	r2, r3
	    _Alloc_traits::destroy(this->_M_impl,
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4413      	add	r3, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f000 f98b 	bl	800229e <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>
 8001f88:	e009      	b.n	8001f9e <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1c6>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 f86d 	bl	800206c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f98:	69b8      	ldr	r0, [r7, #24]
 8001f9a:	f000 f872 	bl	8002082 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f89e 	bl	80020e6 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
	  __throw_exception_again;
 8001faa:	f008 fc27 	bl	800a7fc <__cxa_rethrow>
      __catch(...)
 8001fae:	f008 f8e9 	bl	800a184 <__cxa_end_catch>
 8001fb2:	f007 ffe9 	bl	8009f88 <__cxa_end_cleanup>
    }
 8001fb6:	3730      	adds	r7, #48	; 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbc:	0800b91c 	.word	0x0800b91c
 8001fc0:	aaaaaaab 	.word	0xaaaaaaab

08001fc4 <_ZSt4moveIRP14ICANSubscriberEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8001fda:	b5b0      	push	{r4, r5, r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d011      	beq.n	8002014 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001ff0:	687c      	ldr	r4, [r7, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685d      	ldr	r5, [r3, #4]
 8001ff6:	6838      	ldr	r0, [r7, #0]
 8001ff8:	f000 f95e 	bl	80022b8 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	4629      	mov	r1, r5
 8002002:	4620      	mov	r0, r4
 8002004:	f000 f963 	bl	80022ce <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	1d1a      	adds	r2, r3, #4
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	605a      	str	r2, [r3, #4]
      }
 8002012:	e00c      	b.n	800202e <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f96d 	bl	80022f4 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE3endEv>
 800201a:	4604      	mov	r4, r0
 800201c:	6838      	ldr	r0, [r7, #0]
 800201e:	f000 f94b 	bl	80022b8 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	4621      	mov	r1, r4
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f98b 	bl	8002344 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bdb0      	pop	{r4, r5, r7, pc}

08002036 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800208e:	68b9      	ldr	r1, [r7, #8]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 fa3d 	bl	8002510 <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>
    }
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 fa31 	bl	800252a <_ZSt8_DestroyIPP14ICANSubscriberEvT_S3_>
    }
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
	if (__p)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fa20 	bl	8002544 <_ZNSt16allocator_traitsISaI10CANFrameIdEE10deallocateERS1_PS0_j>
      }
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberED1Ev>:
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
	if (__p)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fa11 	bl	8002562 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE10deallocateERS2_PS1_j>
      }
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800215e:	b590      	push	{r4, r7, lr}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffec 	bl	8002148 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 8002170:	4604      	mov	r4, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4619      	mov	r1, r3
 8002176:	200c      	movs	r0, #12
 8002178:	f7ff fa27 	bl	80015ca <_ZnwjPv>
 800217c:	4603      	mov	r3, r0
 800217e:	4622      	mov	r2, r4
 8002180:	ca07      	ldmia	r2, {r0, r1, r2}
 8002182:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}

0800218e <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800218e:	b590      	push	{r4, r7, lr}
 8002190:	b087      	sub	sp, #28
 8002192:	af00      	add	r7, sp, #0
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f9f0 	bl	8002580 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 80021a0:	4604      	mov	r4, r0
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f9fe 	bl	80025a4 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 80021a8:	4603      	mov	r3, r0
 80021aa:	1ae2      	subs	r2, r4, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	bf34      	ite	cc
 80021b2:	2301      	movcc	r3, #1
 80021b4:	2300      	movcs	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f008 fc68 	bl	800aa92 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f9ee 	bl	80025a4 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 80021c8:	4604      	mov	r4, r0
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 f9ea 	bl	80025a4 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 80021d0:	4603      	mov	r3, r0
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	f107 0208 	add.w	r2, r7, #8
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f9f6 	bl	80025d0 <_ZSt3maxIjERKT_S2_S2_>
 80021e4:	4603      	mov	r3, r0
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4423      	add	r3, r4
 80021ea:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f9d9 	bl	80025a4 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 80021f2:	4602      	mov	r2, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d306      	bcc.n	8002208 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x7a>
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f9c0 	bl	8002580 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 8002200:	4602      	mov	r2, r0
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4293      	cmp	r3, r2
 8002206:	d904      	bls.n	8002212 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x84>
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f9b9 	bl	8002580 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 800220e:	4603      	mov	r3, r0
 8002210:	e000      	b.n	8002214 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x86>
 8002212:	697b      	ldr	r3, [r7, #20]
      }
 8002214:	4618      	mov	r0, r3
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}

0800221c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d006      	beq.n	800223a <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj+0x1e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f000 f9e1 	bl	80025f8 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8allocateERS1_j>
 8002236:	4603      	mov	r3, r0
 8002238:	e000      	b.n	800223c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj+0x20>
 800223a:	2300      	movs	r3, #0
      }
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8002252:	f88d 4000 	strb.w	r4, [sp]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f9da 	bl	8002616 <_ZNSt6vectorI10CANFrameIdSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8002262:	4603      	mov	r3, r0
      }
 8002264:	4618      	mov	r0, r3
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd90      	pop	{r4, r7, pc}

0800226c <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f9dd 	bl	800263a <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>
 8002280:	4604      	mov	r4, r0
 8002282:	68b8      	ldr	r0, [r7, #8]
 8002284:	f000 f9d9 	bl	800263a <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>
 8002288:	4601      	mov	r1, r0
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4620      	mov	r0, r4
 8002290:	f000 f9e2 	bl	8002658 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CANFrameIdES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8002294:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bd90      	pop	{r4, r7, pc}

0800229e <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 80022a8:	6839      	ldr	r1, [r7, #0]
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f9e5 	bl	800267a <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE7destroyIS1_EEvPT_>
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffec 	bl	80022b8 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f9d2 	bl	8002690 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_>
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1d1a      	adds	r2, r3, #4
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f9d8 	bl	80026bc <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800231c:	4618      	mov	r0, r3
 800231e:	f000 f805 	bl	800232c <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8002322:	4603      	mov	r3, r0
      }
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8002334:	2301      	movs	r3, #1
      }
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b08c      	sub	sp, #48	; 0x30
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8002350:	4a6e      	ldr	r2, [pc, #440]	; (800250c <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1c8>)
 8002352:	2101      	movs	r1, #1
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f9c1 	bl	80026dc <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc>
 800235a:	4603      	mov	r3, r0
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f9fd 	bl	800276a <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE5beginEv>
 8002370:	4603      	mov	r3, r0
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	f107 0214 	add.w	r2, r7, #20
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fa03 	bl	800278a <_ZN9__gnu_cxxmiIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002384:	4603      	mov	r3, r0
 8002386:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fa11 	bl	80027b4 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj>
 8002392:	4603      	mov	r3, r0
 8002394:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800239a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	18d5      	adds	r5, r2, r3
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff87 	bl	80022b8 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	4629      	mov	r1, r5
 80023b0:	4620      	mov	r0, r4
 80023b2:	f7ff ff8c 	bl	80022ce <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80023b6:	2300      	movs	r3, #0
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80023ba:	f7ff ffac 	bl	8002316 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE15_S_use_relocateEv>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d027      	beq.n	8002414 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd0>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fa1b 	bl	8002804 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 80023ce:	4603      	mov	r3, r0
 80023d0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe62 	bl	800209e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 80023da:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4621      	mov	r1, r4
 80023e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023e2:	f000 f9fb 	bl	80027dc <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80023e6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	3304      	adds	r3, #4
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fa06 	bl	8002804 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fe4d 	bl	800209e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8002404:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002408:	6a39      	ldr	r1, [r7, #32]
 800240a:	4620      	mov	r0, r4
 800240c:	f000 f9e6 	bl	80027dc <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8002410:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002412:	e028      	b.n	8002466 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x122>
		(__old_start, __position.base(),
 8002414:	f107 0308 	add.w	r3, r7, #8
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f9f3 	bl	8002804 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 800241e:	4603      	mov	r3, r0
 8002420:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fe3a 	bl	800209e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 800242a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4621      	mov	r1, r4
 8002430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002432:	f000 f9f2 	bl	800281a <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 8002436:	4603      	mov	r3, r0
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
	      ++__new_finish;
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	3304      	adds	r3, #4
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f9dd 	bl	8002804 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 800244a:	4603      	mov	r3, r0
 800244c:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fe24 	bl	800209e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8002456:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8002458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800245a:	6a39      	ldr	r1, [r7, #32]
 800245c:	4620      	mov	r0, r4
 800245e:	f000 f9dc 	bl	800281a <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 8002462:	4603      	mov	r3, r0
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8002466:	f7ff ff56 	bl	8002316 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE15_S_use_relocateEv>
 800246a:	4603      	mov	r3, r0
 800246c:	f083 0301 	eor.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x146>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fe10 	bl	800209e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	6a39      	ldr	r1, [r7, #32]
 8002484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002486:	f7ff fe15 	bl	80020b4 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800248a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8002496:	461a      	mov	r2, r3
 8002498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800249a:	f7ff fe42 	bl	8002122 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	441a      	add	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	609a      	str	r2, [r3, #8]
    }
 80024b6:	e025      	b.n	8002504 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1c0>
 80024b8:	4603      	mov	r3, r0
      __catch(...)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f007 fe39 	bl	800a132 <__cxa_begin_catch>
	  if (!__new_finish)
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d108      	bne.n	80024d8 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x194>
	    _Alloc_traits::destroy(this->_M_impl,
 80024c6:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	009b      	lsls	r3, r3, #2
	    _Alloc_traits::destroy(this->_M_impl,
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4413      	add	r3, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f000 f9bb 	bl	800284c <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE7destroyIS1_EEvRS2_PT_>
 80024d6:	e009      	b.n	80024ec <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1a8>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fddf 	bl	800209e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024e6:	69b8      	ldr	r0, [r7, #24]
 80024e8:	f7ff fde4 	bl	80020b4 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f0:	69b9      	ldr	r1, [r7, #24]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fe15 	bl	8002122 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
	  __throw_exception_again;
 80024f8:	f008 f980 	bl	800a7fc <__cxa_rethrow>
      __catch(...)
 80024fc:	f007 fe42 	bl	800a184 <__cxa_end_catch>
 8002500:	f007 fd42 	bl	8009f88 <__cxa_end_cleanup>
    }
 8002504:	3730      	adds	r7, #48	; 0x30
 8002506:	46bd      	mov	sp, r7
 8002508:	bdb0      	pop	{r4, r5, r7, pc}
 800250a:	bf00      	nop
 800250c:	0800b91c 	.word	0x0800b91c

08002510 <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 800251a:	6839      	ldr	r1, [r7, #0]
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f9a2 	bl	8002866 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CANFrameIdEEvT_S4_>
    }
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZSt8_DestroyIPP14ICANSubscriberEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002534:	6839      	ldr	r1, [r7, #0]
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f9a0 	bl	800287c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14ICANSubscriberEEvT_S5_>
    }
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_ZNSt16allocator_traitsISaI10CANFrameIdEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f99c 	bl	8002892 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE10deallocateEPS1_j>
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002562:	b580      	push	{r7, lr}
 8002564:	b084      	sub	sp, #16
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f99a 	bl	80028ac <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE10deallocateEPS2_j>
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f9b8 	bl	8002900 <_ZNKSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8002590:	4603      	mov	r3, r0
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f998 	bl	80028c8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_max_sizeERKS1_>
 8002598:	4603      	mov	r3, r0
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	109b      	asrs	r3, r3, #2
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv+0x28>)
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	aaaaaaab 	.word	0xaaaaaaab

080025d0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d201      	bcs.n	80025ea <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	e000      	b.n	80025ec <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80025ea:	687b      	ldr	r3, [r7, #4]
    }
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002602:	2200      	movs	r2, #0
 8002604:	6839      	ldr	r1, [r7, #0]
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f985 	bl	8002916 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv>
 800260c:	4603      	mov	r3, r0
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <_ZNSt6vectorI10CANFrameIdSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 f994 	bl	8002958 <_ZSt12__relocate_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002630:	4603      	mov	r3, r0
      }
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f9a2 	bl	8002992 <_ZNSt13move_iteratorIP10CANFrameIdEC1ES1_>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CANFrameIdES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f9a0 	bl	80029b0 <_ZSt18uninitialized_copyISt13move_iteratorIP10CANFrameIdES2_ET0_T_S5_S4_>
 8002670:	4603      	mov	r3, r0
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff fe0b 	bl	80022b8 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 80026a2:	4603      	mov	r3, r0
 80026a4:	681c      	ldr	r4, [r3, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	4619      	mov	r1, r3
 80026aa:	2004      	movs	r0, #4
 80026ac:	f7fe ff8d 	bl	80015ca <_ZnwjPv>
 80026b0:	4603      	mov	r3, r0
 80026b2:	601c      	str	r4, [r3, #0]
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}

080026bc <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f973 	bl	80029d4 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 80026ee:	4604      	mov	r4, r0
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f980 	bl	80029f6 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 80026f6:	4603      	mov	r3, r0
 80026f8:	1ae2      	subs	r2, r4, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	bf34      	ite	cc
 8002700:	2301      	movcc	r3, #1
 8002702:	2300      	movcs	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f008 f9c1 	bl	800aa92 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f970 	bl	80029f6 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 8002716:	4604      	mov	r4, r0
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f96c 	bl	80029f6 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 800271e:	4603      	mov	r3, r0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	f107 0208 	add.w	r2, r7, #8
 8002726:	f107 0310 	add.w	r3, r7, #16
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff4f 	bl	80025d0 <_ZSt3maxIjERKT_S2_S2_>
 8002732:	4603      	mov	r3, r0
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4423      	add	r3, r4
 8002738:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f95b 	bl	80029f6 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 8002740:	4602      	mov	r2, r0
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	4293      	cmp	r3, r2
 8002746:	d306      	bcc.n	8002756 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f943 	bl	80029d4 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 800274e:	4602      	mov	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	4293      	cmp	r3, r2
 8002754:	d904      	bls.n	8002760 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x84>
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f93c 	bl	80029d4 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 800275c:	4603      	mov	r3, r0
 800275e:	e000      	b.n	8002762 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x86>
 8002760:	697b      	ldr	r3, [r7, #20]
      }
 8002762:	4618      	mov	r0, r3
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd90      	pop	{r4, r7, pc}

0800276a <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff9e 	bl	80026bc <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <_ZN9__gnu_cxxmiIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800278a:	b590      	push	{r4, r7, lr}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f835 	bl	8002804 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 800279a:	4603      	mov	r3, r0
 800279c:	681c      	ldr	r4, [r3, #0]
 800279e:	6838      	ldr	r0, [r7, #0]
 80027a0:	f000 f830 	bl	8002804 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 80027a4:	4603      	mov	r3, r0
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	1ae3      	subs	r3, r4, r3
 80027aa:	109b      	asrs	r3, r3, #2
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}

080027b4 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d006      	beq.n	80027d2 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj+0x1e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f924 	bl	8002a16 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8allocateERS2_j>
 80027ce:	4603      	mov	r3, r0
 80027d0:	e000      	b.n	80027d4 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj+0x20>
 80027d2:	2300      	movs	r3, #0
      }
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80027ea:	f88d 4000 	strb.w	r4, [sp]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f91d 	bl	8002a34 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80027fa:	4603      	mov	r3, r0
      }
 80027fc:	4618      	mov	r0, r3
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}

08002804 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800281a:	b590      	push	{r4, r7, lr}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f915 	bl	8002a58 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>
 800282e:	4604      	mov	r4, r0
 8002830:	68b8      	ldr	r0, [r7, #8]
 8002832:	f000 f911 	bl	8002a58 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>
 8002836:	4601      	mov	r1, r0
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4620      	mov	r0, r4
 800283e:	f000 f91a 	bl	8002a76 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14ICANSubscriberES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8002842:	4603      	mov	r3, r0
    }
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bd90      	pop	{r4, r7, pc}

0800284c <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8002856:	6839      	ldr	r1, [r7, #0]
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f91d 	bl	8002a98 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE7destroyIS2_EEvPT_>
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CANFrameIdEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14ICANSubscriberEEvT_S5_>:
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800289e:	68b8      	ldr	r0, [r7, #8]
 80028a0:	f007 fad8 	bl	8009e54 <_ZdlPv>
      }
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80028b8:	68b8      	ldr	r0, [r7, #8]
 80028ba:	f007 facb 	bl	8009e54 <_ZdlPv>
      }
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 80028d2:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f8ea 	bl	8002aae <_ZNSt16allocator_traitsISaI10CANFrameIdEE8max_sizeERKS1_>
 80028da:	4603      	mov	r3, r0
 80028dc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80028de:	f107 0208 	add.w	r2, r7, #8
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f8ec 	bl	8002ac6 <_ZSt3minIjERKT_S2_S2_>
 80028ee:	4603      	mov	r3, r0
 80028f0:	681b      	ldr	r3, [r3, #0]
      }
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	0aaaaaaa 	.word	0x0aaaaaaa

08002900 <_ZNKSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f8e4 	bl	8002af0 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4293      	cmp	r3, r2
 800292e:	bf8c      	ite	hi
 8002930:	2301      	movhi	r3, #1
 8002932:	2300      	movls	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800293a:	f008 f8a7 	bl	800aa8c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4618      	mov	r0, r3
 800294a:	f007 ffb5 	bl	800a8b8 <_Znwj>
 800294e:	4603      	mov	r3, r0
      }
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_ZSt12__relocate_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f8d0 	bl	8002b0c <_ZSt12__niter_baseIP10CANFrameIdET_S2_>
 800296c:	4604      	mov	r4, r0
 800296e:	68b8      	ldr	r0, [r7, #8]
 8002970:	f000 f8cc 	bl	8002b0c <_ZSt12__niter_baseIP10CANFrameIdET_S2_>
 8002974:	4605      	mov	r5, r0
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f8c8 	bl	8002b0c <_ZSt12__niter_baseIP10CANFrameIdET_S2_>
 800297c:	4602      	mov	r2, r0
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	4629      	mov	r1, r5
 8002982:	4620      	mov	r0, r4
 8002984:	f000 f8cd 	bl	8002b22 <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002988:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bdb0      	pop	{r4, r5, r7, pc}

08002992 <_ZNSt13move_iteratorIP10CANFrameIdEC1ES1_>:
      move_iterator(iterator_type __i)
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <_ZSt18uninitialized_copyISt13move_iteratorIP10CANFrameIdES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80029bc:	2300      	movs	r3, #0
 80029be:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f8d2 	bl	8002b6e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_>
 80029ca:	4603      	mov	r3, r0
    }
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f91d 	bl	8002c1e <_ZNKSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f8ff 	bl	8002bea <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_max_sizeERKS2_>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	109b      	asrs	r3, r3, #2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002a20:	2200      	movs	r2, #0
 8002a22:	6839      	ldr	r1, [r7, #0]
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f905 	bl	8002c34 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f911 	bl	8002c70 <_ZSt12__relocate_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 8002a4e:	4603      	mov	r3, r0
      }
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f91f 	bl	8002caa <_ZNSt13move_iteratorIPP14ICANSubscriberEC1ES2_>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14ICANSubscriberES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f91d 	bl	8002cc8 <_ZSt18uninitialized_copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <_ZNSt16allocator_traitsISaI10CANFrameIdEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f81a 	bl	8002af0 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d201      	bcs.n	8002ae0 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	e000      	b.n	8002ae2 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002ae0:	687b      	ldr	r3, [r7, #4]
    }
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv+0x18>)
      }
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	0aaaaaaa 	.word	0x0aaaaaaa

08002b0c <_ZSt12__niter_baseIP10CANFrameIdET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8002b22:	b590      	push	{r4, r7, lr}
 8002b24:	b087      	sub	sp, #28
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d013      	beq.n	8002b64 <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8002b3c:	6978      	ldr	r0, [r7, #20]
 8002b3e:	f000 f8d5 	bl	8002cec <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002b42:	4604      	mov	r4, r0
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f8d1 	bl	8002cec <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4620      	mov	r0, r4
 8002b52:	f000 f8d6 	bl	8002d02 <_ZSt19__relocate_object_aI10CANFrameIdS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	330c      	adds	r3, #12
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	330c      	adds	r3, #12
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e7e7      	b.n	8002b34 <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 8002b64:	697b      	ldr	r3, [r7, #20]
    }
 8002b66:	4618      	mov	r0, r3
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}

08002b6e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002b6e:	b590      	push	{r4, r7, lr}
 8002b70:	b087      	sub	sp, #28
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8002b7e:	f107 0208 	add.w	r2, r7, #8
 8002b82:	f107 030c 	add.w	r3, r7, #12
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f8d5 	bl	8002d38 <_ZStneIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d016      	beq.n	8002bc2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8002b94:	6978      	ldr	r0, [r7, #20]
 8002b96:	f000 f8a9 	bl	8002cec <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f8eb 	bl	8002d7c <_ZNKSt13move_iteratorIP10CANFrameIdEdeEv>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4620      	mov	r0, r4
 8002bac:	f000 f8f2 	bl	8002d94 <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 f8d0 	bl	8002d5a <_ZNSt13move_iteratorIP10CANFrameIdEppEv>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e7dd      	b.n	8002b7e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	e00d      	b.n	8002be2 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x74>
 8002bc6:	4603      	mov	r3, r0
	  __catch(...)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f007 fab2 	bl	800a132 <__cxa_begin_catch>
	      std::_Destroy(__result, __cur);
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff fc9d 	bl	8002510 <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>
	      __throw_exception_again;
 8002bd6:	f007 fe11 	bl	800a7fc <__cxa_rethrow>
	  __catch(...)
 8002bda:	f007 fad3 	bl	800a184 <__cxa_end_catch>
 8002bde:	f007 f9d3 	bl	8009f88 <__cxa_end_cleanup>
	}
 8002be2:	4618      	mov	r0, r3
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd90      	pop	{r4, r7, pc}

08002bea <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002bf2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002bf6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8e2 	bl	8002dc2 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8max_sizeERKS2_>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002c02:	f107 0208 	add.w	r2, r7, #8
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff5a 	bl	8002ac6 <_ZSt3minIjERKT_S2_S2_>
 8002c12:	4603      	mov	r3, r0
 8002c14:	681b      	ldr	r3, [r3, #0]
      }
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <_ZNKSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f8ca 	bl	8002dda <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	bf8c      	ite	hi
 8002c4e:	2301      	movhi	r3, #1
 8002c50:	2300      	movls	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002c58:	f007 ff18 	bl	800aa8c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f007 fe29 	bl	800a8b8 <_Znwj>
 8002c66:	4603      	mov	r3, r0
      }
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_ZSt12__relocate_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f8b7 	bl	8002df2 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002c84:	4604      	mov	r4, r0
 8002c86:	68b8      	ldr	r0, [r7, #8]
 8002c88:	f000 f8b3 	bl	8002df2 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8af 	bl	8002df2 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002c94:	4602      	mov	r2, r0
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	4629      	mov	r1, r5
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f000 f8b4 	bl	8002e08 <_ZSt14__relocate_a_1IP14ICANSubscriberS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002ca0:	4603      	mov	r3, r0
    }
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bdb0      	pop	{r4, r5, r7, pc}

08002caa <_ZNSt13move_iteratorIPP14ICANSubscriberEC1ES2_>:
      move_iterator(iterator_type __i)
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_ZSt18uninitialized_copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f8b1 	bl	8002e44 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14ICANSubscriberES5_EET0_T_S8_S7_>
 8002ce2:	4603      	mov	r3, r0
    }
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZSt11__addressofI10CANFrameIdEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <_ZSt19__relocate_object_aI10CANFrameIdS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8002d0e:	68b8      	ldr	r0, [r7, #8]
 8002d10:	f000 f8a8 	bl	8002e64 <_ZSt4moveIR10CANFrameIdEONSt16remove_referenceIT_E4typeEOS3_>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461a      	mov	r2, r3
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8ad 	bl	8002e7a <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8002d20:	68b8      	ldr	r0, [r7, #8]
 8002d22:	f7ff ffe3 	bl	8002cec <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fab7 	bl	800229e <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>
    }
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_ZStneIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8002d42:	6839      	ldr	r1, [r7, #0]
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f8ab 	bl	8002ea0 <_ZSteqIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f083 0301 	eor.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <_ZNSt13move_iteratorIP10CANFrameIdEppEv>:
      operator++()
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f103 020c 	add.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
	return *this;
 8002d6e:	687b      	ldr	r3, [r7, #4]
      }
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <_ZNKSt13move_iteratorIP10CANFrameIdEdeEv>:
      operator*() const
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8002d9e:	6838      	ldr	r0, [r7, #0]
 8002da0:	f000 f894 	bl	8002ecc <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>
 8002da4:	4604      	mov	r4, r0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4619      	mov	r1, r3
 8002daa:	200c      	movs	r0, #12
 8002dac:	f7fe fc0d 	bl	80015ca <_ZnwjPv>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4622      	mov	r2, r4
 8002db4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002db6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd90      	pop	{r4, r7, pc}

08002dc2 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f805 	bl	8002dda <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002de2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>:
    __niter_base(_Iterator __it)
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <_ZSt14__relocate_a_1IP14ICANSubscriberS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	109b      	asrs	r3, r3, #2
 8002e1e:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	dd06      	ble.n	8002e34 <_ZSt14__relocate_a_1IP14ICANSubscriberS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f008 f8c0 	bl	800afb4 <memmove>
      return __result + __count;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4413      	add	r3, r2
    }
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14ICANSubscriberES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f844 	bl	8002ee2 <_ZSt4copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <_ZSt4moveIR10CANFrameIdEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f820 	bl	8002ecc <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f83d 	bl	8002f12 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JS1_EEEvPT_DpOT0_>
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <_ZSteqIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f849 	bl	8002f42 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	6838      	ldr	r0, [r7, #0]
 8002eb4:	f000 f845 	bl	8002f42 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	429c      	cmp	r4, r3
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2301      	moveq	r3, #1
 8002ec0:	2300      	movne	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd90      	pop	{r4, r7, pc}

08002ecc <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <_ZSt4copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002ee2:	b590      	push	{r4, r7, lr}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f833 	bl	8002f5a <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	68b8      	ldr	r0, [r7, #8]
 8002ef8:	f000 f82f 	bl	8002f5a <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002efc:	4603      	mov	r3, r0
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4619      	mov	r1, r3
 8002f02:	4620      	mov	r0, r4
 8002f04:	f000 f83a 	bl	8002f7c <_ZSt14__copy_move_a2ILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>
 8002f08:	4603      	mov	r3, r0
    }
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}

08002f12 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002f12:	b590      	push	{r4, r7, lr}
 8002f14:	b085      	sub	sp, #20
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ffd4 	bl	8002ecc <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>
 8002f24:	4604      	mov	r4, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	200c      	movs	r0, #12
 8002f2c:	f7fe fb4d 	bl	80015ca <_ZnwjPv>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4622      	mov	r2, r4
 8002f34:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd90      	pop	{r4, r7, pc}

08002f42 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>:
      base() const
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f82c 	bl	8002fc2 <_ZNKSt13move_iteratorIPP14ICANSubscriberE4baseEv>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 f834 	bl	8002fda <_ZSt12__miter_baseIPP14ICANSubscriberET_S3_>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <_ZSt14__copy_move_a2ILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002f7c:	b5b0      	push	{r4, r5, r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7ff ff32 	bl	8002df2 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002f8e:	4604      	mov	r4, r0
 8002f90:	68b8      	ldr	r0, [r7, #8]
 8002f92:	f7ff ff2e 	bl	8002df2 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002f96:	4605      	mov	r5, r0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff ff29 	bl	8002df2 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f000 f822 	bl	8002ff0 <_ZSt13__copy_move_aILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>
 8002fac:	4602      	mov	r2, r0
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f82e 	bl	8003014 <_ZSt12__niter_wrapIPP14ICANSubscriberET_RKS3_S3_>
 8002fb8:	4603      	mov	r3, r0
    }
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bdb0      	pop	{r4, r5, r7, pc}

08002fc2 <_ZNKSt13move_iteratorIPP14ICANSubscriberE4baseEv>:
      base() const
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <_ZSt12__miter_baseIPP14ICANSubscriberET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_ZSt13__copy_move_aILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f811 	bl	800302c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_>
 800300a:	4603      	mov	r3, r0
    }
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_ZSt12__niter_wrapIPP14ICANSubscriberET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
    { return __res; }
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	109b      	asrs	r3, r3, #2
 8003040:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d006      	beq.n	8003056 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	461a      	mov	r2, r3
 800304e:	68f9      	ldr	r1, [r7, #12]
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f007 ffaf 	bl	800afb4 <memmove>
	  return __result + _Num;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4413      	add	r3, r2
	}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <_ZN13InverterRightD1Ev>:
class InverterRight : Inverter
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	4a05      	ldr	r2, [pc, #20]	; (8003088 <_ZN13InverterRightD1Ev+0x20>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe fba1 	bl	80017c0 <_ZN8InverterD1Ev>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	0800bae8 	.word	0x0800bae8

0800308c <_ZN13InverterRightD0Ev>:
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ffe7 	bl	8003068 <_ZN13InverterRightD1Ev>
 800309a:	2114      	movs	r1, #20
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f006 fedb 	bl	8009e58 <_ZdlPvj>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <_ZN12InverterLeftD1Ev>:
class InverterLeft : Inverter
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	4a05      	ldr	r2, [pc, #20]	; (80030cc <_ZN12InverterLeftD1Ev+0x20>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fb7f 	bl	80017c0 <_ZN8InverterD1Ev>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	0800bafc 	.word	0x0800bafc

080030d0 <_ZN12InverterLeftD0Ev>:
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ffe7 	bl	80030ac <_ZN12InverterLeftD1Ev>
 80030de:	2114      	movs	r1, #20
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f006 feb9 	bl	8009e58 <_ZdlPvj>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <_Z41__static_initialization_and_destruction_0ii>:
Called by		: Not used yet (checked call graph)
*******************************************************************************************************************/
void CAN1_irq_receive()
{
	canController1.receiveFromISR();
}
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d118      	bne.n	8003132 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003106:	4293      	cmp	r3, r2
 8003108:	d113      	bne.n	8003132 <_Z41__static_initialization_and_destruction_0ii+0x42>
CANController canController1 = CANController(hcan1);
 800310a:	4914      	ldr	r1, [pc, #80]	; (800315c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800310c:	4814      	ldr	r0, [pc, #80]	; (8003160 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800310e:	f000 f8a1 	bl	8003254 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef>
CANFrameId canFrameIdLeftInverter = CANFrameId(0xAA);
 8003112:	21aa      	movs	r1, #170	; 0xaa
 8003114:	4813      	ldr	r0, [pc, #76]	; (8003164 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003116:	f000 fad9 	bl	80036cc <_ZN10CANFrameIdC1Em>
CANFrameId canFrameIdRightInverter = CANFrameId(0xBB);
 800311a:	21bb      	movs	r1, #187	; 0xbb
 800311c:	4812      	ldr	r0, [pc, #72]	; (8003168 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800311e:	f000 fad5 	bl	80036cc <_ZN10CANFrameIdC1Em>
InverterLeft inverterLeft  = InverterLeft(canController1);
 8003122:	490f      	ldr	r1, [pc, #60]	; (8003160 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003124:	4811      	ldr	r0, [pc, #68]	; (800316c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003126:	f7fe fb6d 	bl	8001804 <_ZN12InverterLeftC1ER13CANController>
InverterRight inverterRight = InverterRight(canController1);
 800312a:	490d      	ldr	r1, [pc, #52]	; (8003160 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800312c:	4810      	ldr	r0, [pc, #64]	; (8003170 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800312e:	f7fe fb9f 	bl	8001870 <_ZN13InverterRightC1ER13CANController>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10d      	bne.n	8003154 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800313e:	4293      	cmp	r3, r2
 8003140:	d108      	bne.n	8003154 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8003142:	480b      	ldr	r0, [pc, #44]	; (8003170 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003144:	f7ff ff90 	bl	8003068 <_ZN13InverterRightD1Ev>
InverterLeft inverterLeft  = InverterLeft(canController1);
 8003148:	4808      	ldr	r0, [pc, #32]	; (800316c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800314a:	f7ff ffaf 	bl	80030ac <_ZN12InverterLeftD1Ev>
CANController canController1 = CANController(hcan1);
 800314e:	4804      	ldr	r0, [pc, #16]	; (8003160 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003150:	f7fe fbdc 	bl	800190c <_ZN13CANControllerD1Ev>
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000fcc 	.word	0x20000fcc
 8003160:	200000ac 	.word	0x200000ac
 8003164:	200000cc 	.word	0x200000cc
 8003168:	200000d8 	.word	0x200000d8
 800316c:	200000e4 	.word	0x200000e4
 8003170:	200000f8 	.word	0x200000f8

08003174 <_GLOBAL__sub_I_canController1>:
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
 8003178:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800317c:	2001      	movs	r0, #1
 800317e:	f7ff ffb7 	bl	80030f0 <_Z41__static_initialization_and_destruction_0ii>
 8003182:	bd80      	pop	{r7, pc}

08003184 <_GLOBAL__sub_D_canController1>:
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
 8003188:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800318c:	2000      	movs	r0, #0
 800318e:	f7ff ffaf 	bl	80030f0 <_Z41__static_initialization_and_destruction_0ii>
 8003192:	bd80      	pop	{r7, pc}

08003194 <_ZN14ICANControllerC1Ev>:
#include <middleware_layer/can/CANFrame.hpp>
#include <middleware_layer/can/CANFrameId.hpp>
#include <middleware_layer/can/ICANSubscriber.hpp>


class ICANController
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <_ZN14ICANControllerC1Ev+0x1c>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	0800bb60 	.word	0x0800bb60

080031b4 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EEC1Ev>:
      _Vector_base() = default;
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f982 	bl	80034c8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implC1Ev>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <_ZNSt6vectorI10CANFrameIdSaIS0_EEC1Ev>:
      vector() = default;
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ffeb 	bl	80031b4 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EEC1Ev>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f978 	bl	80034e8 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implC1Ev>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEC1Ev>:
      vector() = default;
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ffeb 	bl	80031e8 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EEC1Ev>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <_ZN17CANControllerBaseC1Ev>:
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ffb4 	bl	8003194 <_ZN14ICANControllerC1Ev>
 800322c:	4a08      	ldr	r2, [pc, #32]	; (8003250 <_ZN17CANControllerBaseC1Ev+0x34>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3304      	adds	r3, #4
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ffc9 	bl	80031ce <_ZNSt6vectorI10CANFrameIdSaIS0_EEC1Ev>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3310      	adds	r3, #16
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ffde 	bl	8003202 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEC1Ev>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	0800bb24 	.word	0x0800bb24

08003254 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef>:

#include <middleware_layer/can/CANController.hpp>
#include "main.h"


CANController::CANController(CANHandle &canHandle) : _canHandle(canHandle)
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff ffdb 	bl	800321c <_ZN17CANControllerBaseC1Ev>
 8003266:	4a05      	ldr	r2, [pc, #20]	; (800327c <_ZN13CANControllerC1ER19__CAN_HandleTypeDef+0x28>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	61da      	str	r2, [r3, #28]
{
	// do nothing here
}
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	0800bb4c 	.word	0x0800bb4c

08003280 <_ZN13CANController4sendE8CANFrame>:
	receive(RxFrame);
}


void CANController::send(CANFrame frame)
{
 8003280:	b084      	sub	sp, #16
 8003282:	b590      	push	{r4, r7, lr}
 8003284:	b08b      	sub	sp, #44	; 0x2c
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800328e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/*Local values*/
	uint32_t u32canTxMailbox = 0;			// Param for the Tx mailbox
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef canTxHeader;		// Tx Header set all information for the transmission

/*mailbox handling*/

	/*check if ther are any empty mailboxes*/
	if (HAL_CAN_GetTxMailboxesFreeLevel(&_canHandle))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4618      	mov	r0, r3
 800329c:	f001 fabb 	bl	8004816 <HAL_CAN_GetTxMailboxesFreeLevel>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf14      	ite	ne
 80032a6:	2301      	movne	r3, #1
 80032a8:	2300      	moveq	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d024      	beq.n	80032fa <_ZN13CANController4sendE8CANFrame+0x7a>
	{/*find the empty mailbox*/
		/*check mailbox 0*/
		if (!HAL_CAN_IsTxMessagePending(&_canHandle, CAN_TX_MAILBOX0))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2101      	movs	r1, #1
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 fae2 	bl	8004880 <HAL_CAN_IsTxMessagePending>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf0c      	ite	eq
 80032c2:	2301      	moveq	r3, #1
 80032c4:	2300      	movne	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <_ZN13CANController4sendE8CANFrame+0x52>
		{/*mailbox0 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX0;
 80032cc:	2301      	movs	r3, #1
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
 80032d0:	e01e      	b.n	8003310 <_ZN13CANController4sendE8CANFrame+0x90>
		}
		else if (!HAL_CAN_IsTxMessagePending(&_canHandle, CAN_TX_MAILBOX1))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	2102      	movs	r1, #2
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 fad1 	bl	8004880 <HAL_CAN_IsTxMessagePending>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2301      	moveq	r3, #1
 80032e6:	2300      	movne	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <_ZN13CANController4sendE8CANFrame+0x74>
		{/*mailbox1 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX1;
 80032ee:	2302      	movs	r3, #2
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
 80032f2:	e00d      	b.n	8003310 <_ZN13CANController4sendE8CANFrame+0x90>
		}
		else
		{/*mailbox2 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX2;
 80032f4:	2304      	movs	r3, #4
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
 80032f8:	e00a      	b.n	8003310 <_ZN13CANController4sendE8CANFrame+0x90>
		}
	}
	/*no empty mailbox, throw error-handling*/
	else throw "no empty mailbox";
 80032fa:	2004      	movs	r0, #4
 80032fc:	f006 fe0a 	bl	8009f14 <__cxa_allocate_exception>
 8003300:	4603      	mov	r3, r0
 8003302:	4a26      	ldr	r2, [pc, #152]	; (800339c <_ZN13CANController4sendE8CANFrame+0x11c>)
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	4925      	ldr	r1, [pc, #148]	; (80033a0 <_ZN13CANController4sendE8CANFrame+0x120>)
 800330a:	4618      	mov	r0, r3
 800330c:	f007 fa5c 	bl	800a7c8 <__cxa_throw>


	/*set the Tx Header with the CAN information*/
	/*set standard and extended Id for transmission*/
	canTxHeader.StdId = frame.id.standardId;
 8003310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003312:	60fb      	str	r3, [r7, #12]
	canTxHeader.ExtId = frame.id.extendedId;
 8003314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003316:	613b      	str	r3, [r7, #16]
	/*specify if standard or extended Id is use*/
	if(frame.id.isExtendedFrame)
 8003318:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <_ZN13CANController4sendE8CANFrame+0xa6>
		/*use extended Id*/
		canTxHeader.IDE = CAN_ID_EXT;
 8003320:	2304      	movs	r3, #4
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	e001      	b.n	800332a <_ZN13CANController4sendE8CANFrame+0xaa>
	else
		/*use standard Id*/
		canTxHeader.IDE = CAN_ID_STD;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]

	/*specify the type of frame to transmission*/
	if ( frame.payload.isRemoteFrame)
 800332a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <_ZN13CANController4sendE8CANFrame+0xb8>
		/*send remote frame*/
		canTxHeader.RTR = CAN_RTR_REMOTE;
 8003332:	2302      	movs	r3, #2
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e001      	b.n	800333c <_ZN13CANController4sendE8CANFrame+0xbc>
	else
		/*send a Data frame*/
		canTxHeader.RTR = CAN_RTR_DATA;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]

	/*set length of dataframe*/
	canTxHeader.DLC = frame.payload.bitLength/8;
 800333c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003340:	08db      	lsrs	r3, r3, #3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	61fb      	str	r3, [r7, #28]
	/*diesable TransmitglobalTime*/
	canTxHeader.TransmitGlobalTime = DISABLE;
 8003346:	2300      	movs	r3, #0
 8003348:	f887 3020 	strb.w	r3, [r7, #32]


	/*start transmission*/
	if(HAL_CAN_AddTxMessage(&_canHandle, &canTxHeader, frame.payload.data.uint8, &u32canTxMailbox))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69d8      	ldr	r0, [r3, #28]
 8003350:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8003354:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003358:	f103 020c 	add.w	r2, r3, #12
 800335c:	f107 010c 	add.w	r1, r7, #12
 8003360:	4623      	mov	r3, r4
 8003362:	f001 f97d 	bl	8004660 <HAL_CAN_AddTxMessage>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <_ZN13CANController4sendE8CANFrame+0x10c>
		/*transmission failed*/
		throw "send TX is not possible";
 8003376:	2004      	movs	r0, #4
 8003378:	f006 fdcc 	bl	8009f14 <__cxa_allocate_exception>
 800337c:	4603      	mov	r3, r0
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <_ZN13CANController4sendE8CANFrame+0x124>)
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	4906      	ldr	r1, [pc, #24]	; (80033a0 <_ZN13CANController4sendE8CANFrame+0x120>)
 8003386:	4618      	mov	r0, r3
 8003388:	f007 fa1e 	bl	800a7c8 <__cxa_throw>

}
 800338c:	bf00      	nop
 800338e:	372c      	adds	r7, #44	; 0x2c
 8003390:	46bd      	mov	sp, r7
 8003392:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003396:	b004      	add	sp, #16
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	0800b974 	.word	0x0800b974
 80033a0:	0800bc34 	.word	0x0800bc34
 80033a4:	0800b988 	.word	0x0800b988

080033a8 <_ZN13CANController5startEv>:
/** function to start the CAN communication*/
void CANController::start(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08e      	sub	sp, #56	; 0x38
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_Start(&_canHandle))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f001 f90f 	bl	80045d8 <HAL_CAN_Start>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <_ZN13CANController5startEv+0x38>
	{
		throw "Can can't start";
 80033ca:	2004      	movs	r0, #4
 80033cc:	f006 fda2 	bl	8009f14 <__cxa_allocate_exception>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4a1a      	ldr	r2, [pc, #104]	; (800343c <_ZN13CANController5startEv+0x94>)
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	4919      	ldr	r1, [pc, #100]	; (8003440 <_ZN13CANController5startEv+0x98>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f007 f9f4 	bl	800a7c8 <__cxa_throw>
	}

	/*Filter function for the CAN*/
		CAN_FilterTypeDef s_filter_can;
		s_filter_can.FilterMaskIdHigh = 0x0000;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
		s_filter_can.FilterIdLow = 0x0000;
 80033e4:	2300      	movs	r3, #0
 80033e6:	613b      	str	r3, [r7, #16]
		s_filter_can.FilterMaskIdHigh = 0x0000;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
		s_filter_can.FilterMaskIdLow = 0x0000;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61bb      	str	r3, [r7, #24]
		s_filter_can.FilterFIFOAssignment = CAN_RX_FIFO0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61fb      	str	r3, [r7, #28]
		s_filter_can.FilterBank = 13;
 80033f4:	230d      	movs	r3, #13
 80033f6:	623b      	str	r3, [r7, #32]
		s_filter_can.FilterMode = CAN_FILTERMODE_IDMASK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
		s_filter_can.FilterScale = CAN_FILTERSCALE_16BIT;
 80033fc:	2300      	movs	r3, #0
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
		s_filter_can.FilterActivation = CAN_FILTER_ENABLE;
 8003400:	2301      	movs	r3, #1
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c

		HAL_StatusTypeDef ret = HAL_CAN_ConfigFilter(&hcan1, &s_filter_can);
 8003404:	f107 030c 	add.w	r3, r7, #12
 8003408:	4619      	mov	r1, r3
 800340a:	480e      	ldr	r0, [pc, #56]	; (8003444 <_ZN13CANController5startEv+0x9c>)
 800340c:	f000 fff8 	bl	8004400 <HAL_CAN_ConfigFilter>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (ret == HAL_ERROR)
 8003416:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800341a:	2b01      	cmp	r3, #1
 800341c:	d10a      	bne.n	8003434 <_ZN13CANController5startEv+0x8c>
		{
			throw "RxFilter can't set";
 800341e:	2004      	movs	r0, #4
 8003420:	f006 fd78 	bl	8009f14 <__cxa_allocate_exception>
 8003424:	4603      	mov	r3, r0
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <_ZN13CANController5startEv+0xa0>)
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	4904      	ldr	r1, [pc, #16]	; (8003440 <_ZN13CANController5startEv+0x98>)
 800342e:	4618      	mov	r0, r3
 8003430:	f007 f9ca 	bl	800a7c8 <__cxa_throw>
		}


}
 8003434:	bf00      	nop
 8003436:	3738      	adds	r7, #56	; 0x38
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	0800b9a0 	.word	0x0800b9a0
 8003440:	0800bc34 	.word	0x0800bc34
 8003444:	20000fcc 	.word	0x20000fcc
 8003448:	0800b9b0 	.word	0x0800b9b0

0800344c <_ZN13CANController17activateInterruptEv>:
/**function to activate the Interrupt for CAN*/
void CANController::activateInterrupt (void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO0_MSG_PENDING)) throw "Interrupt can't activate";
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2102      	movs	r1, #2
 800345a:	4618      	mov	r0, r3
 800345c:	f001 fb46 	bl	8004aec <HAL_CAN_ActivateNotification>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <_ZN13CANController17activateInterruptEv+0x3a>
 8003470:	2004      	movs	r0, #4
 8003472:	f006 fd4f 	bl	8009f14 <__cxa_allocate_exception>
 8003476:	4603      	mov	r3, r0
 8003478:	4a11      	ldr	r2, [pc, #68]	; (80034c0 <_ZN13CANController17activateInterruptEv+0x74>)
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	2200      	movs	r2, #0
 800347e:	4911      	ldr	r1, [pc, #68]	; (80034c4 <_ZN13CANController17activateInterruptEv+0x78>)
 8003480:	4618      	mov	r0, r3
 8003482:	f007 f9a1 	bl	800a7c8 <__cxa_throw>
	if(HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO1_MSG_PENDING)) throw "Interrupt can't activate";
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	2110      	movs	r1, #16
 800348c:	4618      	mov	r0, r3
 800348e:	f001 fb2d 	bl	8004aec <HAL_CAN_ActivateNotification>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf14      	ite	ne
 8003498:	2301      	movne	r3, #1
 800349a:	2300      	moveq	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <_ZN13CANController17activateInterruptEv+0x6c>
 80034a2:	2004      	movs	r0, #4
 80034a4:	f006 fd36 	bl	8009f14 <__cxa_allocate_exception>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <_ZN13CANController17activateInterruptEv+0x74>)
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	4904      	ldr	r1, [pc, #16]	; (80034c4 <_ZN13CANController17activateInterruptEv+0x78>)
 80034b2:	4618      	mov	r0, r3
 80034b4:	f007 f988 	bl	800a7c8 <__cxa_throw>
	//HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO0_FULL);
	//HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO1_FULL);
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	0800b9c4 	.word	0x0800b9c4
 80034c4:	0800bc34 	.word	0x0800bc34

080034c8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f819 	bl	8003508 <_ZNSaI10CANFrameIdEC1Ev>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 f821 	bl	8003520 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f829 	bl	8003548 <_ZNSaIP14ICANSubscriberEC1Ev>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f831 	bl	8003560 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <_ZNSaI10CANFrameIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f839 	bl	8003588 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdEC1Ev>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
	{ }
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <_ZNSaIP14ICANSubscriberEC1Ev>:
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f824 	bl	800359e <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberEC1Ev>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
	{ }
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberEC1Ev>:
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <_ZN8CANFrameC1E10CANFrameId10CANPayload>:

#include <middleware_layer/can/CANFrame.hpp>



CANFrame::CANFrame(CANFrameId id, CANPayload payload) : id(id), payload(payload)
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	4638      	mov	r0, r7
 80035be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	461c      	mov	r4, r3
 80035c6:	463b      	mov	r3, r7
 80035c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	330c      	adds	r3, #12
 80035d4:	f107 0220 	add.w	r2, r7, #32
 80035d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80035da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
{
	if (!payload.isValid()) throw "Invalid CAN frame payload.";
 80035de:	f107 0020 	add.w	r0, r7, #32
 80035e2:	f000 f8a3 	bl	800372c <_ZNK10CANPayload7isValidEv>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f083 0301 	eor.w	r3, r3, #1
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x54>
 80035f2:	2004      	movs	r0, #4
 80035f4:	f006 fc8e 	bl	8009f14 <__cxa_allocate_exception>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4a06      	ldr	r2, [pc, #24]	; (8003614 <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x60>)
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	4905      	ldr	r1, [pc, #20]	; (8003618 <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x64>)
 8003602:	4618      	mov	r0, r3
 8003604:	f007 f8e0 	bl	800a7c8 <__cxa_throw>
}
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bd90      	pop	{r4, r7, pc}
 8003612:	bf00      	nop
 8003614:	0800ba18 	.word	0x0800ba18
 8003618:	0800bc34 	.word	0x0800bc34

0800361c <_ZN10CANFrameIdC1Emmb>:
*
*
*/
#include <middleware_layer/can/CANFrameId.hpp>

CANFrameId::CANFrameId(uint32_t standardId, uint32_t extendedId, bool isExtendedFrame) :
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	70fb      	strb	r3, [r7, #3]
	standardId(standardId), extendedId(extendedId), isExtendedFrame(isExtendedFrame)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	721a      	strb	r2, [r3, #8]
{
	// check standard id
	if (standardId & ~0x7FF) throw "Not an 11 bit CAN standard id.";
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <_ZN10CANFrameIdC1Emmb+0x98>)
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <_ZN10CANFrameIdC1Emmb+0x40>
 8003646:	2004      	movs	r0, #4
 8003648:	f006 fc64 	bl	8009f14 <__cxa_allocate_exception>
 800364c:	4603      	mov	r3, r0
 800364e:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <_ZN10CANFrameIdC1Emmb+0x9c>)
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	2200      	movs	r2, #0
 8003654:	4919      	ldr	r1, [pc, #100]	; (80036bc <_ZN10CANFrameIdC1Emmb+0xa0>)
 8003656:	4618      	mov	r0, r3
 8003658:	f007 f8b6 	bl	800a7c8 <__cxa_throw>
	// check extended id
	if (!isExtendedFrame && extendedId) throw "CAN extended id is not used but is not zero.";
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	f083 0301 	eor.w	r3, r3, #1
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <_ZN10CANFrameIdC1Emmb+0x68>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <_ZN10CANFrameIdC1Emmb+0x68>
 800366e:	2004      	movs	r0, #4
 8003670:	f006 fc50 	bl	8009f14 <__cxa_allocate_exception>
 8003674:	4603      	mov	r3, r0
 8003676:	4a12      	ldr	r2, [pc, #72]	; (80036c0 <_ZN10CANFrameIdC1Emmb+0xa4>)
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	2200      	movs	r2, #0
 800367c:	490f      	ldr	r1, [pc, #60]	; (80036bc <_ZN10CANFrameIdC1Emmb+0xa0>)
 800367e:	4618      	mov	r0, r3
 8003680:	f007 f8a2 	bl	800a7c8 <__cxa_throw>
	if (isExtendedFrame && (extendedId & ~0x3FF)) throw "Not an 18 bit CAN extended id.";
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00f      	beq.n	80036aa <_ZN10CANFrameIdC1Emmb+0x8e>
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <_ZN10CANFrameIdC1Emmb+0xa8>)
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <_ZN10CANFrameIdC1Emmb+0x8e>
 8003694:	2004      	movs	r0, #4
 8003696:	f006 fc3d 	bl	8009f14 <__cxa_allocate_exception>
 800369a:	4603      	mov	r3, r0
 800369c:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <_ZN10CANFrameIdC1Emmb+0xac>)
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	2200      	movs	r2, #0
 80036a2:	4906      	ldr	r1, [pc, #24]	; (80036bc <_ZN10CANFrameIdC1Emmb+0xa0>)
 80036a4:	4618      	mov	r0, r3
 80036a6:	f007 f88f 	bl	800a7c8 <__cxa_throw>
}
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	fffff800 	.word	0xfffff800
 80036b8:	0800ba34 	.word	0x0800ba34
 80036bc:	0800bc34 	.word	0x0800bc34
 80036c0:	0800ba54 	.word	0x0800ba54
 80036c4:	fffffc00 	.word	0xfffffc00
 80036c8:	0800ba84 	.word	0x0800ba84

080036cc <_ZN10CANFrameIdC1Em>:


CANFrameId::CANFrameId(uint32_t standardId) : CANFrameId(standardId, 0, false)
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
 80036d6:	2300      	movs	r3, #0
 80036d8:	2200      	movs	r2, #0
 80036da:	6839      	ldr	r1, [r7, #0]
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff ff9d 	bl	800361c <_ZN10CANFrameIdC1Emmb>
{
	// do nothing here
}
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <_ZNK10CANFrameIdeqERKS_>:
	// do nothing here
}


bool CANFrameId::operator== (const CANFrameId& other) const
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
	return (standardId == other.standardId &&
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
			extendedId == other.extendedId &&
 80036fe:	429a      	cmp	r2, r3
 8003700:	d10d      	bne.n	800371e <_ZNK10CANFrameIdeqERKS_+0x32>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
	return (standardId == other.standardId &&
 800370a:	429a      	cmp	r2, r3
 800370c:	d107      	bne.n	800371e <_ZNK10CANFrameIdeqERKS_+0x32>
			isExtendedFrame == other.isExtendedFrame);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7a1a      	ldrb	r2, [r3, #8]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	7a1b      	ldrb	r3, [r3, #8]
			extendedId == other.extendedId &&
 8003716:	429a      	cmp	r2, r3
 8003718:	d101      	bne.n	800371e <_ZNK10CANFrameIdeqERKS_+0x32>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <_ZNK10CANFrameIdeqERKS_+0x34>
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <_ZNK10CANPayload7isValidEv>:
*/

#include <middleware_layer/can/CANPayload.hpp>

bool CANPayload::isValid() const
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	if (isRemoteFrame && bitLength) return false;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	7a5b      	ldrb	r3, [r3, #9]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <_ZNK10CANPayload7isValidEv+0x1c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	7a1b      	ldrb	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <_ZNK10CANPayload7isValidEv+0x1c>
 8003744:	2300      	movs	r3, #0
 8003746:	e024      	b.n	8003792 <_ZNK10CANPayload7isValidEv+0x66>
	if (bitLength > 64) return false;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	7a1b      	ldrb	r3, [r3, #8]
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d901      	bls.n	8003754 <_ZNK10CANPayload7isValidEv+0x28>
 8003750:	2300      	movs	r3, #0
 8003752:	e01e      	b.n	8003792 <_ZNK10CANPayload7isValidEv+0x66>
	if (bitLength <= 32)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7a1b      	ldrb	r3, [r3, #8]
 8003758:	2b20      	cmp	r3, #32
 800375a:	d80e      	bhi.n	800377a <_ZNK10CANPayload7isValidEv+0x4e>
	{
		if (data.uint32[1]) return false;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <_ZNK10CANPayload7isValidEv+0x3c>
 8003764:	2300      	movs	r3, #0
 8003766:	e014      	b.n	8003792 <_ZNK10CANPayload7isValidEv+0x66>
		if (data.uint32[0] >> bitLength) return false;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	7a12      	ldrb	r2, [r2, #8]
 8003770:	40d3      	lsrs	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00c      	beq.n	8003790 <_ZNK10CANPayload7isValidEv+0x64>
 8003776:	2300      	movs	r3, #0
 8003778:	e00b      	b.n	8003792 <_ZNK10CANPayload7isValidEv+0x66>
	}
	else if (data.uint32[1] >> (bitLength - 32)) return false;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7a1b      	ldrb	r3, [r3, #8]
 8003782:	3b20      	subs	r3, #32
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <_ZNK10CANPayload7isValidEv+0x64>
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <_ZNK10CANPayload7isValidEv+0x66>
	return true;
 8003790:	2301      	movs	r3, #1
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80037d4:	bf00      	nop
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037e4:	f000 fce3 	bl	80041ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037e8:	f000 f828 	bl	800383c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037ec:	f000 f932 	bl	8003a54 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80037f0:	f000 f900 	bl	80039f4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80037f4:	f000 f8ae 	bl	8003954 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80037f8:	f003 feca 	bl	8007590 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80037fc:	4a09      	ldr	r2, [pc, #36]	; (8003824 <main+0x44>)
 80037fe:	2100      	movs	r1, #0
 8003800:	4809      	ldr	r0, [pc, #36]	; (8003828 <main+0x48>)
 8003802:	f003 ff2f 	bl	8007664 <osThreadNew>
 8003806:	4603      	mov	r3, r0
 8003808:	4a08      	ldr	r2, [pc, #32]	; (800382c <main+0x4c>)
 800380a:	6013      	str	r3, [r2, #0]

  /* creation of vThreadSystemAl */
  vThreadSystemAlHandle = osThreadNew(vThreadSystemAlive, NULL, &vThreadSystemAl_attributes);
 800380c:	4a08      	ldr	r2, [pc, #32]	; (8003830 <main+0x50>)
 800380e:	2100      	movs	r1, #0
 8003810:	4808      	ldr	r0, [pc, #32]	; (8003834 <main+0x54>)
 8003812:	f003 ff27 	bl	8007664 <osThreadNew>
 8003816:	4603      	mov	r3, r0
 8003818:	4a07      	ldr	r2, [pc, #28]	; (8003838 <main+0x58>)
 800381a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800381c:	f003 feec 	bl	80075f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003820:	e7fe      	b.n	8003820 <main+0x40>
 8003822:	bf00      	nop
 8003824:	0800bb6c 	.word	0x0800bb6c
 8003828:	08003c5d 	.word	0x08003c5d
 800382c:	20000f40 	.word	0x20000f40
 8003830:	0800bb90 	.word	0x0800bb90
 8003834:	08003c91 	.word	0x08003c91
 8003838:	20000f44 	.word	0x20000f44

0800383c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b0b8      	sub	sp, #224	; 0xe0
 8003840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003842:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003846:	2234      	movs	r2, #52	; 0x34
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f007 fbcc 	bl	800afe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003850:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003860:	f107 0308 	add.w	r3, r7, #8
 8003864:	2290      	movs	r2, #144	; 0x90
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f007 fbbd 	bl	800afe8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800386e:	f001 fe77 	bl	8005560 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <SystemClock_Config+0x110>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a35      	ldr	r2, [pc, #212]	; (800394c <SystemClock_Config+0x110>)
 8003878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
 800387e:	4b33      	ldr	r3, [pc, #204]	; (800394c <SystemClock_Config+0x110>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	607b      	str	r3, [r7, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800388a:	4b31      	ldr	r3, [pc, #196]	; (8003950 <SystemClock_Config+0x114>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003892:	4a2f      	ldr	r2, [pc, #188]	; (8003950 <SystemClock_Config+0x114>)
 8003894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <SystemClock_Config+0x114>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80038ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80038b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038b4:	2302      	movs	r3, #2
 80038b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80038c2:	2304      	movs	r3, #4
 80038c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 80038c8:	2390      	movs	r3, #144	; 0x90
 80038ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038ce:	2302      	movs	r3, #2
 80038d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80038d4:	2306      	movs	r3, #6
 80038d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fe4e 	bl	8005580 <HAL_RCC_OscConfig>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80038ea:	f000 f9fb 	bl	8003ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ee:	230f      	movs	r3, #15
 80038f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038f4:	2302      	movs	r3, #2
 80038f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003900:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800390c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003910:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003914:	2104      	movs	r1, #4
 8003916:	4618      	mov	r0, r3
 8003918:	f002 f8e0 	bl	8005adc <HAL_RCC_ClockConfig>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003922:	f000 f9df 	bl	8003ce4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800392a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800392c:	2300      	movs	r3, #0
 800392e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003930:	f107 0308 	add.w	r3, r7, #8
 8003934:	4618      	mov	r0, r3
 8003936:	f002 fb05 	bl	8005f44 <HAL_RCCEx_PeriphCLKConfig>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8003940:	f000 f9d0 	bl	8003ce4 <Error_Handler>
  }
}
 8003944:	bf00      	nop
 8003946:	37e0      	adds	r7, #224	; 0xe0
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	40007000 	.word	0x40007000

08003954 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	; 0x28
 8003958:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <MX_CAN1_Init+0x98>)
 800395c:	4a24      	ldr	r2, [pc, #144]	; (80039f0 <MX_CAN1_Init+0x9c>)
 800395e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8003960:	4b22      	ldr	r3, [pc, #136]	; (80039ec <MX_CAN1_Init+0x98>)
 8003962:	2204      	movs	r2, #4
 8003964:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003966:	4b21      	ldr	r3, [pc, #132]	; (80039ec <MX_CAN1_Init+0x98>)
 8003968:	2200      	movs	r2, #0
 800396a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <MX_CAN1_Init+0x98>)
 800396e:	2200      	movs	r2, #0
 8003970:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8003972:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <MX_CAN1_Init+0x98>)
 8003974:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8003978:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <MX_CAN1_Init+0x98>)
 800397c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003980:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <MX_CAN1_Init+0x98>)
 8003984:	2200      	movs	r2, #0
 8003986:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003988:	4b18      	ldr	r3, [pc, #96]	; (80039ec <MX_CAN1_Init+0x98>)
 800398a:	2200      	movs	r2, #0
 800398c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800398e:	4b17      	ldr	r3, [pc, #92]	; (80039ec <MX_CAN1_Init+0x98>)
 8003990:	2200      	movs	r2, #0
 8003992:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003994:	4b15      	ldr	r3, [pc, #84]	; (80039ec <MX_CAN1_Init+0x98>)
 8003996:	2200      	movs	r2, #0
 8003998:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800399a:	4b14      	ldr	r3, [pc, #80]	; (80039ec <MX_CAN1_Init+0x98>)
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <MX_CAN1_Init+0x98>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80039a6:	4811      	ldr	r0, [pc, #68]	; (80039ec <MX_CAN1_Init+0x98>)
 80039a8:	f000 fc2e 	bl	8004208 <HAL_CAN_Init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80039b2:	f000 f997 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef s_filter_can;

  	  s_filter_can.FilterMaskIdHigh = 0x0000;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
  	  s_filter_can.FilterIdLow = 0x0000;
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
  	  s_filter_can.FilterMaskIdHigh = 0x0000;
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
  	  s_filter_can.FilterMaskIdLow = 0x0000;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
  	  s_filter_can.FilterFIFOAssignment = CAN_RX_FIFO0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
  	  s_filter_can.FilterBank = 13;
 80039ca:	230d      	movs	r3, #13
 80039cc:	617b      	str	r3, [r7, #20]
  	  s_filter_can.FilterMode = CAN_FILTERMODE_IDMASK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
  	  s_filter_can.FilterScale = CAN_FILTERSCALE_16BIT;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
  	  s_filter_can.FilterActivation = CAN_FILTER_ENABLE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	623b      	str	r3, [r7, #32]

  	  HAL_CAN_ConfigFilter(&hcan1, &s_filter_can);
 80039da:	463b      	mov	r3, r7
 80039dc:	4619      	mov	r1, r3
 80039de:	4803      	ldr	r0, [pc, #12]	; (80039ec <MX_CAN1_Init+0x98>)
 80039e0:	f000 fd0e 	bl	8004400 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80039e4:	bf00      	nop
 80039e6:	3728      	adds	r7, #40	; 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000fcc 	.word	0x20000fcc
 80039f0:	40006400 	.word	0x40006400

080039f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <MX_USART3_UART_Init+0x58>)
 80039fa:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <MX_USART3_UART_Init+0x5c>)
 80039fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80039fe:	4b13      	ldr	r3, [pc, #76]	; (8003a4c <MX_USART3_UART_Init+0x58>)
 8003a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <MX_USART3_UART_Init+0x58>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <MX_USART3_UART_Init+0x58>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a12:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <MX_USART3_UART_Init+0x58>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <MX_USART3_UART_Init+0x58>)
 8003a1a:	220c      	movs	r2, #12
 8003a1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <MX_USART3_UART_Init+0x58>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a24:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <MX_USART3_UART_Init+0x58>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <MX_USART3_UART_Init+0x58>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <MX_USART3_UART_Init+0x58>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a36:	4805      	ldr	r0, [pc, #20]	; (8003a4c <MX_USART3_UART_Init+0x58>)
 8003a38:	f003 f98c 	bl	8006d54 <HAL_UART_Init>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003a42:	f000 f94f 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000f48 	.word	0x20000f48
 8003a50:	40004800 	.word	0x40004800

08003a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5a:	f107 031c 	add.w	r3, r7, #28
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	609a      	str	r2, [r3, #8]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a6a:	4b76      	ldr	r3, [pc, #472]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a75      	ldr	r2, [pc, #468]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b73      	ldr	r3, [pc, #460]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a82:	4b70      	ldr	r3, [pc, #448]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a6f      	ldr	r2, [pc, #444]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b6d      	ldr	r3, [pc, #436]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9a:	4b6a      	ldr	r3, [pc, #424]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	4a69      	ldr	r2, [pc, #420]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa6:	4b67      	ldr	r3, [pc, #412]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab2:	4b64      	ldr	r3, [pc, #400]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a63      	ldr	r2, [pc, #396]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003ab8:	f043 0302 	orr.w	r3, r3, #2
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b61      	ldr	r3, [pc, #388]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aca:	4b5e      	ldr	r3, [pc, #376]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a5d      	ldr	r2, [pc, #372]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b5b      	ldr	r3, [pc, #364]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ae2:	4b58      	ldr	r3, [pc, #352]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a57      	ldr	r2, [pc, #348]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b55      	ldr	r3, [pc, #340]	; (8003c44 <MX_GPIO_Init+0x1f0>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003afa:	2200      	movs	r2, #0
 8003afc:	f244 0181 	movw	r1, #16513	; 0x4081
 8003b00:	4851      	ldr	r0, [pc, #324]	; (8003c48 <MX_GPIO_Init+0x1f4>)
 8003b02:	f001 fcf9 	bl	80054f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2140      	movs	r1, #64	; 0x40
 8003b0a:	4850      	ldr	r0, [pc, #320]	; (8003c4c <MX_GPIO_Init+0x1f8>)
 8003b0c:	f001 fcf4 	bl	80054f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b16:	4b4e      	ldr	r3, [pc, #312]	; (8003c50 <MX_GPIO_Init+0x1fc>)
 8003b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003b1e:	f107 031c 	add.w	r3, r7, #28
 8003b22:	4619      	mov	r1, r3
 8003b24:	484b      	ldr	r0, [pc, #300]	; (8003c54 <MX_GPIO_Init+0x200>)
 8003b26:	f001 fb23 	bl	8005170 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003b2a:	2332      	movs	r3, #50	; 0x32
 8003b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b36:	2303      	movs	r3, #3
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b3a:	230b      	movs	r3, #11
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b3e:	f107 031c 	add.w	r3, r7, #28
 8003b42:	4619      	mov	r1, r3
 8003b44:	4843      	ldr	r0, [pc, #268]	; (8003c54 <MX_GPIO_Init+0x200>)
 8003b46:	f001 fb13 	bl	8005170 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003b4a:	2386      	movs	r3, #134	; 0x86
 8003b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b56:	2303      	movs	r3, #3
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b5a:	230b      	movs	r3, #11
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4619      	mov	r1, r3
 8003b64:	483c      	ldr	r0, [pc, #240]	; (8003c58 <MX_GPIO_Init+0x204>)
 8003b66:	f001 fb03 	bl	8005170 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003b6a:	f244 0381 	movw	r3, #16513	; 0x4081
 8003b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b70:	2301      	movs	r3, #1
 8003b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7c:	f107 031c 	add.w	r3, r7, #28
 8003b80:	4619      	mov	r1, r3
 8003b82:	4831      	ldr	r0, [pc, #196]	; (8003c48 <MX_GPIO_Init+0x1f4>)
 8003b84:	f001 faf4 	bl	8005170 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8e:	2302      	movs	r3, #2
 8003b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b96:	2303      	movs	r3, #3
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b9a:	230b      	movs	r3, #11
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003b9e:	f107 031c 	add.w	r3, r7, #28
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4828      	ldr	r0, [pc, #160]	; (8003c48 <MX_GPIO_Init+0x1f4>)
 8003ba6:	f001 fae3 	bl	8005170 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003baa:	2340      	movs	r3, #64	; 0x40
 8003bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003bba:	f107 031c 	add.w	r3, r7, #28
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4822      	ldr	r0, [pc, #136]	; (8003c4c <MX_GPIO_Init+0x1f8>)
 8003bc2:	f001 fad5 	bl	8005170 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003bd2:	f107 031c 	add.w	r3, r7, #28
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	481c      	ldr	r0, [pc, #112]	; (8003c4c <MX_GPIO_Init+0x1f8>)
 8003bda:	f001 fac9 	bl	8005170 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003bde:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bec:	2303      	movs	r3, #3
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003bf0:	230a      	movs	r3, #10
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf4:	f107 031c 	add.w	r3, r7, #28
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4817      	ldr	r0, [pc, #92]	; (8003c58 <MX_GPIO_Init+0x204>)
 8003bfc:	f001 fab8 	bl	8005170 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003c0e:	f107 031c 	add.w	r3, r7, #28
 8003c12:	4619      	mov	r1, r3
 8003c14:	4810      	ldr	r0, [pc, #64]	; (8003c58 <MX_GPIO_Init+0x204>)
 8003c16:	f001 faab 	bl	8005170 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003c1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	2302      	movs	r3, #2
 8003c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c2c:	230b      	movs	r3, #11
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c30:	f107 031c 	add.w	r3, r7, #28
 8003c34:	4619      	mov	r1, r3
 8003c36:	4805      	ldr	r0, [pc, #20]	; (8003c4c <MX_GPIO_Init+0x1f8>)
 8003c38:	f001 fa9a 	bl	8005170 <HAL_GPIO_Init>

}
 8003c3c:	bf00      	nop
 8003c3e:	3730      	adds	r7, #48	; 0x30
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40020400 	.word	0x40020400
 8003c4c:	40021800 	.word	0x40021800
 8003c50:	10110000 	.word	0x10110000
 8003c54:	40020800 	.word	0x40020800
 8003c58:	40020000 	.word	0x40020000

08003c5c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// TODO: used for testing if malloc now works with the FreeRTOS bugfix, remove this when no longer needed.
   TickType_t xPreviousWakeTime = xTaskGetTickCount();
 8003c64:	f004 ff00 	bl	8008a68 <xTaskGetTickCount>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	60bb      	str	r3, [r7, #8]
   const uint32_t cu32Delay = 250u;
 8003c6c:	23fa      	movs	r3, #250	; 0xfa
 8003c6e:	60fb      	str	r3, [r7, #12]
    /* Infinite loop */
   while(1)
   {
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003c70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c74:	4805      	ldr	r0, [pc, #20]	; (8003c8c <StartDefaultTask+0x30>)
 8003c76:	f001 fc58 	bl	800552a <HAL_GPIO_TogglePin>
      vtestCAN();
 8003c7a:	f7fd fe71 	bl	8001960 <vtestCAN>
      vTaskDelayUntil(&xPreviousWakeTime, cu32Delay/portTICK_RATE_MS);
 8003c7e:	f107 0308 	add.w	r3, r7, #8
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 fd49 	bl	800871c <vTaskDelayUntil>
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003c8a:	e7f1      	b.n	8003c70 <StartDefaultTask+0x14>
 8003c8c:	40020400 	.word	0x40020400

08003c90 <vThreadSystemAlive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vThreadSystemAlive */
void vThreadSystemAlive(void *argument)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vThreadSystemAlive */
   TickType_t xPreviousWakeTime = xTaskGetTickCount();
 8003c98:	f004 fee6 	bl	8008a68 <xTaskGetTickCount>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	60bb      	str	r3, [r7, #8]
   const uint32_t cu32Delay = 250u;
 8003ca0:	23fa      	movs	r3, #250	; 0xfa
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
   while(1)
   {
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4805      	ldr	r0, [pc, #20]	; (8003cbc <vThreadSystemAlive+0x2c>)
 8003ca8:	f001 fc3f 	bl	800552a <HAL_GPIO_TogglePin>
      vTaskDelayUntil(&xPreviousWakeTime, cu32Delay/portTICK_RATE_MS);
 8003cac:	f107 0308 	add.w	r3, r7, #8
 8003cb0:	68f9      	ldr	r1, [r7, #12]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f004 fd32 	bl	800871c <vTaskDelayUntil>
      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003cb8:	e7f4      	b.n	8003ca4 <vThreadSystemAlive+0x14>
 8003cba:	bf00      	nop
 8003cbc:	40020400 	.word	0x40020400

08003cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003cd2:	f000 fa79 	bl	80041c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000

08003ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1)
	{
		puts("error");
 8003ce8:	4801      	ldr	r0, [pc, #4]	; (8003cf0 <Error_Handler+0xc>)
 8003cea:	f007 fa9d 	bl	800b228 <puts>
	{
 8003cee:	e7fb      	b.n	8003ce8 <Error_Handler+0x4>
 8003cf0:	0800bac0 	.word	0x0800bac0

08003cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <HAL_MspInit+0x4c>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	4a10      	ldr	r2, [pc, #64]	; (8003d40 <HAL_MspInit+0x4c>)
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6413      	str	r3, [r2, #64]	; 0x40
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <HAL_MspInit+0x4c>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_MspInit+0x4c>)
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <HAL_MspInit+0x4c>)
 8003d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_MspInit+0x4c>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	210f      	movs	r1, #15
 8003d2e:	f06f 0001 	mvn.w	r0, #1
 8003d32:	f001 f9f3 	bl	800511c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023800 	.word	0x40023800

08003d44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	; 0x28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4c:	f107 0314 	add.w	r3, r7, #20
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2f      	ldr	r2, [pc, #188]	; (8003e20 <HAL_CAN_MspInit+0xdc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d157      	bne.n	8003e16 <HAL_CAN_MspInit+0xd2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003d66:	4b2f      	ldr	r3, [pc, #188]	; (8003e24 <HAL_CAN_MspInit+0xe0>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	4a2e      	ldr	r2, [pc, #184]	; (8003e24 <HAL_CAN_MspInit+0xe0>)
 8003d6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d70:	6413      	str	r3, [r2, #64]	; 0x40
 8003d72:	4b2c      	ldr	r3, [pc, #176]	; (8003e24 <HAL_CAN_MspInit+0xe0>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d7e:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <HAL_CAN_MspInit+0xe0>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a28      	ldr	r2, [pc, #160]	; (8003e24 <HAL_CAN_MspInit+0xe0>)
 8003d84:	f043 0308 	orr.w	r3, r3, #8
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <HAL_CAN_MspInit+0xe0>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d96:	2301      	movs	r3, #1
 8003d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da2:	2303      	movs	r3, #3
 8003da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003da6:	2309      	movs	r3, #9
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003daa:	f107 0314 	add.w	r3, r7, #20
 8003dae:	4619      	mov	r1, r3
 8003db0:	481d      	ldr	r0, [pc, #116]	; (8003e28 <HAL_CAN_MspInit+0xe4>)
 8003db2:	f001 f9dd 	bl	8005170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003db6:	2302      	movs	r3, #2
 8003db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003dc6:	2309      	movs	r3, #9
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dca:	f107 0314 	add.w	r3, r7, #20
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4815      	ldr	r0, [pc, #84]	; (8003e28 <HAL_CAN_MspInit+0xe4>)
 8003dd2:	f001 f9cd 	bl	8005170 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2105      	movs	r1, #5
 8003dda:	2013      	movs	r0, #19
 8003ddc:	f001 f99e 	bl	800511c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003de0:	2013      	movs	r0, #19
 8003de2:	f001 f9b7 	bl	8005154 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003de6:	2200      	movs	r2, #0
 8003de8:	2105      	movs	r1, #5
 8003dea:	2014      	movs	r0, #20
 8003dec:	f001 f996 	bl	800511c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003df0:	2014      	movs	r0, #20
 8003df2:	f001 f9af 	bl	8005154 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8003df6:	2200      	movs	r2, #0
 8003df8:	2105      	movs	r1, #5
 8003dfa:	2015      	movs	r0, #21
 8003dfc:	f001 f98e 	bl	800511c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003e00:	2015      	movs	r0, #21
 8003e02:	f001 f9a7 	bl	8005154 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8003e06:	2200      	movs	r2, #0
 8003e08:	2105      	movs	r1, #5
 8003e0a:	2016      	movs	r0, #22
 8003e0c:	f001 f986 	bl	800511c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003e10:	2016      	movs	r0, #22
 8003e12:	f001 f99f 	bl	8005154 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003e16:	bf00      	nop
 8003e18:	3728      	adds	r7, #40	; 0x28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40006400 	.word	0x40006400
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40020c00 	.word	0x40020c00

08003e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <HAL_UART_MspInit+0x7c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d128      	bne.n	8003ea0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e4e:	4b17      	ldr	r3, [pc, #92]	; (8003eac <HAL_UART_MspInit+0x80>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	4a16      	ldr	r2, [pc, #88]	; (8003eac <HAL_UART_MspInit+0x80>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5a:	4b14      	ldr	r3, [pc, #80]	; (8003eac <HAL_UART_MspInit+0x80>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e66:	4b11      	ldr	r3, [pc, #68]	; (8003eac <HAL_UART_MspInit+0x80>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a10      	ldr	r2, [pc, #64]	; (8003eac <HAL_UART_MspInit+0x80>)
 8003e6c:	f043 0308 	orr.w	r3, r3, #8
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <HAL_UART_MspInit+0x80>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003e7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e84:	2302      	movs	r3, #2
 8003e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e90:	2307      	movs	r3, #7
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e94:	f107 0314 	add.w	r3, r7, #20
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4805      	ldr	r0, [pc, #20]	; (8003eb0 <HAL_UART_MspInit+0x84>)
 8003e9c:	f001 f968 	bl	8005170 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ea0:	bf00      	nop
 8003ea2:	3728      	adds	r7, #40	; 0x28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40004800 	.word	0x40004800
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40020c00 	.word	0x40020c00

08003eb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08c      	sub	sp, #48	; 0x30
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	2019      	movs	r0, #25
 8003eca:	f001 f927 	bl	800511c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003ece:	2019      	movs	r0, #25
 8003ed0:	f001 f940 	bl	8005154 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ed4:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <HAL_InitTick+0xa0>)
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed8:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <HAL_InitTick+0xa0>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6453      	str	r3, [r2, #68]	; 0x44
 8003ee0:	4b1c      	ldr	r3, [pc, #112]	; (8003f54 <HAL_InitTick+0xa0>)
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003eec:	f107 0210 	add.w	r2, r7, #16
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 fff2 	bl	8005ee0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003efc:	f001 ffdc 	bl	8005eb8 <HAL_RCC_GetPCLK2Freq>
 8003f00:	4603      	mov	r3, r0
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <HAL_InitTick+0xa4>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	0c9b      	lsrs	r3, r3, #18
 8003f10:	3b01      	subs	r3, #1
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003f14:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <HAL_InitTick+0xa8>)
 8003f16:	4a12      	ldr	r2, [pc, #72]	; (8003f60 <HAL_InitTick+0xac>)
 8003f18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <HAL_InitTick+0xa8>)
 8003f1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003f22:	4a0e      	ldr	r2, [pc, #56]	; (8003f5c <HAL_InitTick+0xa8>)
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <HAL_InitTick+0xa8>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_InitTick+0xa8>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003f34:	4809      	ldr	r0, [pc, #36]	; (8003f5c <HAL_InitTick+0xa8>)
 8003f36:	f002 fc2d 	bl	8006794 <HAL_TIM_Base_Init>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003f40:	4806      	ldr	r0, [pc, #24]	; (8003f5c <HAL_InitTick+0xa8>)
 8003f42:	f002 fc89 	bl	8006858 <HAL_TIM_Base_Start_IT>
 8003f46:	4603      	mov	r3, r0
 8003f48:	e000      	b.n	8003f4c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3730      	adds	r7, #48	; 0x30
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	431bde83 	.word	0x431bde83
 8003f5c:	20000ff4 	.word	0x20000ff4
 8003f60:	40010000 	.word	0x40010000

08003f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f76:	e7fe      	b.n	8003f76 <HardFault_Handler+0x4>

08003f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f7c:	e7fe      	b.n	8003f7c <MemManage_Handler+0x4>

08003f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f82:	e7fe      	b.n	8003f82 <BusFault_Handler+0x4>

08003f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f88:	e7fe      	b.n	8003f88 <UsageFault_Handler+0x4>

08003f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f9c:	4802      	ldr	r0, [pc, #8]	; (8003fa8 <CAN1_TX_IRQHandler+0x10>)
 8003f9e:	f000 fdcb 	bl	8004b38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000fcc 	.word	0x20000fcc

08003fac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003fb2:	4807      	ldr	r0, [pc, #28]	; (8003fd0 <CAN1_RX0_IRQHandler+0x24>)
 8003fb4:	f000 fdc0 	bl	8004b38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  //CAN1_irq_receive();
  CAN_RxHeaderTypeDef header;
  char data[8];
  if (HAL_CAN_GetRxMessage(&hcan1, 0, &header, data) != HAL_OK)
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	f107 020c 	add.w	r2, r7, #12
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4803      	ldr	r0, [pc, #12]	; (8003fd0 <CAN1_RX0_IRQHandler+0x24>)
 8003fc2:	f000 fc81 	bl	80048c8 <HAL_CAN_GetRxMessage>
  {

  }
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	3728      	adds	r7, #40	; 0x28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000fcc 	.word	0x20000fcc

08003fd4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003fd8:	4802      	ldr	r0, [pc, #8]	; (8003fe4 <CAN1_RX1_IRQHandler+0x10>)
 8003fda:	f000 fdad 	bl	8004b38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
  //CAN1_irq_receive();
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000fcc 	.word	0x20000fcc

08003fe8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003fec:	4802      	ldr	r0, [pc, #8]	; (8003ff8 <CAN1_SCE_IRQHandler+0x10>)
 8003fee:	f000 fda3 	bl	8004b38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000fcc 	.word	0x20000fcc

08003ffc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004000:	4802      	ldr	r0, [pc, #8]	; (800400c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004002:	f002 fca1 	bl	8006948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000ff4 	.word	0x20000ff4

08004010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
	return 1;
 8004014:	2301      	movs	r3, #1
}
 8004016:	4618      	mov	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <_kill>:

int _kill(int pid, int sig)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800402a:	f006 fe81 	bl	800ad30 <__errno>
 800402e:	4603      	mov	r3, r0
 8004030:	2216      	movs	r2, #22
 8004032:	601a      	str	r2, [r3, #0]
	return -1;
 8004034:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <_exit>:

void _exit (int status)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004048:	f04f 31ff 	mov.w	r1, #4294967295
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ffe7 	bl	8004020 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004052:	e7fe      	b.n	8004052 <_exit+0x12>

08004054 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e00a      	b.n	800407c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004066:	f3af 8000 	nop.w
 800406a:	4601      	mov	r1, r0
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	60ba      	str	r2, [r7, #8]
 8004072:	b2ca      	uxtb	r2, r1
 8004074:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	3301      	adds	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	dbf0      	blt.n	8004066 <_read+0x12>
	}

return len;
 8004084:	687b      	ldr	r3, [r7, #4]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e009      	b.n	80040b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	60ba      	str	r2, [r7, #8]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	3301      	adds	r3, #1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	dbf1      	blt.n	80040a0 <_write+0x12>
	}
	return len;
 80040bc:	687b      	ldr	r3, [r7, #4]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <_close>:

int _close(int file)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
	return -1;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040ee:	605a      	str	r2, [r3, #4]
	return 0;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <_isatty>:

int _isatty(int file)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
	return 1;
 8004106:	2301      	movs	r3, #1
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
	return 0;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004134:	4b08      	ldr	r3, [pc, #32]	; (8004158 <SystemInit+0x28>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	4a07      	ldr	r2, [pc, #28]	; (8004158 <SystemInit+0x28>)
 800413c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004144:	4b04      	ldr	r3, [pc, #16]	; (8004158 <SystemInit+0x28>)
 8004146:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800414a:	609a      	str	r2, [r3, #8]
#endif
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	e000ed00 	.word	0xe000ed00

0800415c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800415c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004194 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004160:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004162:	e003      	b.n	800416c <LoopCopyDataInit>

08004164 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004166:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004168:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800416a:	3104      	adds	r1, #4

0800416c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800416c:	480b      	ldr	r0, [pc, #44]	; (800419c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004170:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004172:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004174:	d3f6      	bcc.n	8004164 <CopyDataInit>
  ldr  r2, =_sbss
 8004176:	4a0b      	ldr	r2, [pc, #44]	; (80041a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004178:	e002      	b.n	8004180 <LoopFillZerobss>

0800417a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800417a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800417c:	f842 3b04 	str.w	r3, [r2], #4

08004180 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004182:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004184:	d3f9      	bcc.n	800417a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004186:	f7ff ffd3 	bl	8004130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800418a:	f006 fecd 	bl	800af28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800418e:	f7ff fb27 	bl	80037e0 <main>
  bx  lr    
 8004192:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004194:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004198:	0800c4fc 	.word	0x0800c4fc
  ldr  r0, =_sdata
 800419c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041a0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80041a4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80041a8:	20001094 	.word	0x20001094

080041ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041ac:	e7fe      	b.n	80041ac <ADC_IRQHandler>

080041ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041b2:	2003      	movs	r0, #3
 80041b4:	f000 ffa7 	bl	8005106 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041b8:	2000      	movs	r0, #0
 80041ba:	f7ff fe7b 	bl	8003eb4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80041be:	f7ff fd99 	bl	8003cf4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_IncTick+0x20>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_IncTick+0x24>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4413      	add	r3, r2
 80041d8:	4a04      	ldr	r2, [pc, #16]	; (80041ec <HAL_IncTick+0x24>)
 80041da:	6013      	str	r3, [r2, #0]
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	2000000c 	.word	0x2000000c
 80041ec:	20001040 	.word	0x20001040

080041f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return uwTick;
 80041f4:	4b03      	ldr	r3, [pc, #12]	; (8004204 <HAL_GetTick+0x14>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20001040 	.word	0x20001040

08004208 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0ed      	b.n	80043f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fd8c 	bl	8003d44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0202 	bic.w	r2, r2, #2
 800423a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800423c:	f7ff ffd8 	bl	80041f0 <HAL_GetTick>
 8004240:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004242:	e012      	b.n	800426a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004244:	f7ff ffd4 	bl	80041f0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b0a      	cmp	r3, #10
 8004250:	d90b      	bls.n	800426a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2205      	movs	r2, #5
 8004262:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e0c5      	b.n	80043f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004288:	f7ff ffb2 	bl	80041f0 <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800428e:	e012      	b.n	80042b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004290:	f7ff ffae 	bl	80041f0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b0a      	cmp	r3, #10
 800429c:	d90b      	bls.n	80042b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2205      	movs	r2, #5
 80042ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e09f      	b.n	80043f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0e5      	beq.n	8004290 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	7e1b      	ldrb	r3, [r3, #24]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d108      	bne.n	80042de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e007      	b.n	80042ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	7e5b      	ldrb	r3, [r3, #25]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d108      	bne.n	8004308 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e007      	b.n	8004318 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004316:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	7e9b      	ldrb	r3, [r3, #26]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d108      	bne.n	8004332 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0220 	orr.w	r2, r2, #32
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	e007      	b.n	8004342 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0220 	bic.w	r2, r2, #32
 8004340:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	7edb      	ldrb	r3, [r3, #27]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d108      	bne.n	800435c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0210 	bic.w	r2, r2, #16
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e007      	b.n	800436c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0210 	orr.w	r2, r2, #16
 800436a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7f1b      	ldrb	r3, [r3, #28]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d108      	bne.n	8004386 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0208 	orr.w	r2, r2, #8
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e007      	b.n	8004396 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0208 	bic.w	r2, r2, #8
 8004394:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	7f5b      	ldrb	r3, [r3, #29]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d108      	bne.n	80043b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0204 	orr.w	r2, r2, #4
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e007      	b.n	80043c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0204 	bic.w	r2, r2, #4
 80043be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	ea42 0103 	orr.w	r1, r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	1e5a      	subs	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004416:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004418:	7cfb      	ldrb	r3, [r7, #19]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d003      	beq.n	8004426 <HAL_CAN_ConfigFilter+0x26>
 800441e:	7cfb      	ldrb	r3, [r7, #19]
 8004420:	2b02      	cmp	r3, #2
 8004422:	f040 80c7 	bne.w	80045b4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a69      	ldr	r2, [pc, #420]	; (80045d0 <HAL_CAN_ConfigFilter+0x1d0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d001      	beq.n	8004434 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8004430:	4b68      	ldr	r3, [pc, #416]	; (80045d4 <HAL_CAN_ConfigFilter+0x1d4>)
 8004432:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800443a:	f043 0201 	orr.w	r2, r3, #1
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4a63      	ldr	r2, [pc, #396]	; (80045d4 <HAL_CAN_ConfigFilter+0x1d4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d111      	bne.n	8004470 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004452:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	431a      	orrs	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	2201      	movs	r2, #1
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	43db      	mvns	r3, r3
 800448a:	401a      	ands	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d123      	bne.n	80044e2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	401a      	ands	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80044bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	3248      	adds	r2, #72	; 0x48
 80044c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044d8:	6979      	ldr	r1, [r7, #20]
 80044da:	3348      	adds	r3, #72	; 0x48
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	440b      	add	r3, r1
 80044e0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d122      	bne.n	8004530 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800450a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	3248      	adds	r2, #72	; 0x48
 8004510:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004524:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004526:	6979      	ldr	r1, [r7, #20]
 8004528:	3348      	adds	r3, #72	; 0x48
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	440b      	add	r3, r1
 800452e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	43db      	mvns	r3, r3
 8004542:	401a      	ands	r2, r3
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800454a:	e007      	b.n	800455c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	431a      	orrs	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	43db      	mvns	r3, r3
 800456e:	401a      	ands	r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004576:	e007      	b.n	8004588 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	431a      	orrs	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d107      	bne.n	80045a0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	431a      	orrs	r2, r3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045a6:	f023 0201 	bic.w	r2, r3, #1
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e006      	b.n	80045c2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
  }
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40003400 	.word	0x40003400
 80045d4:	40006400 	.word	0x40006400

080045d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d12e      	bne.n	800464a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004604:	f7ff fdf4 	bl	80041f0 <HAL_GetTick>
 8004608:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800460a:	e012      	b.n	8004632 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800460c:	f7ff fdf0 	bl	80041f0 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b0a      	cmp	r3, #10
 8004618:	d90b      	bls.n	8004632 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2205      	movs	r2, #5
 800462a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e012      	b.n	8004658 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e5      	bne.n	800460c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	e006      	b.n	8004658 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
  }
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004674:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800467e:	7ffb      	ldrb	r3, [r7, #31]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d003      	beq.n	800468c <HAL_CAN_AddTxMessage+0x2c>
 8004684:	7ffb      	ldrb	r3, [r7, #31]
 8004686:	2b02      	cmp	r3, #2
 8004688:	f040 80b8 	bne.w	80047fc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80a0 	beq.w	80047ec <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	0e1b      	lsrs	r3, r3, #24
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d907      	bls.n	80046cc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e09e      	b.n	800480a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80046cc:	2201      	movs	r2, #1
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	409a      	lsls	r2, r3
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10d      	bne.n	80046fa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	6809      	ldr	r1, [r1, #0]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	3318      	adds	r3, #24
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	440b      	add	r3, r1
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	e00f      	b.n	800471a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004704:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800470e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	3318      	adds	r3, #24
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	440b      	add	r3, r1
 8004718:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6819      	ldr	r1, [r3, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	3318      	adds	r3, #24
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	440b      	add	r3, r1
 800472a:	3304      	adds	r3, #4
 800472c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	7d1b      	ldrb	r3, [r3, #20]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d111      	bne.n	800475a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	3318      	adds	r3, #24
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	4413      	add	r3, r2
 8004742:	3304      	adds	r3, #4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	6811      	ldr	r1, [r2, #0]
 800474a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	3318      	adds	r3, #24
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	440b      	add	r3, r1
 8004756:	3304      	adds	r3, #4
 8004758:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3307      	adds	r3, #7
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	061a      	lsls	r2, r3, #24
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3306      	adds	r3, #6
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3305      	adds	r3, #5
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	4313      	orrs	r3, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	3204      	adds	r2, #4
 800477a:	7812      	ldrb	r2, [r2, #0]
 800477c:	4610      	mov	r0, r2
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	6811      	ldr	r1, [r2, #0]
 8004782:	ea43 0200 	orr.w	r2, r3, r0
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	440b      	add	r3, r1
 800478c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004790:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3303      	adds	r3, #3
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	061a      	lsls	r2, r3, #24
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3302      	adds	r3, #2
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3301      	adds	r3, #1
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	4313      	orrs	r3, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	7812      	ldrb	r2, [r2, #0]
 80047b2:	4610      	mov	r0, r2
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	6811      	ldr	r1, [r2, #0]
 80047b8:	ea43 0200 	orr.w	r2, r3, r0
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	440b      	add	r3, r1
 80047c2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80047c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	3318      	adds	r3, #24
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	4413      	add	r3, r2
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	6811      	ldr	r1, [r2, #0]
 80047da:	f043 0201 	orr.w	r2, r3, #1
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	3318      	adds	r3, #24
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	440b      	add	r3, r1
 80047e6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e00e      	b.n	800480a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e006      	b.n	800480a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	3724      	adds	r7, #36	; 0x24
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004828:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800482a:	7afb      	ldrb	r3, [r7, #11]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d002      	beq.n	8004836 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004830:	7afb      	ldrb	r3, [r7, #11]
 8004832:	2b02      	cmp	r3, #2
 8004834:	d11d      	bne.n	8004872 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3301      	adds	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3301      	adds	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004872:	68fb      	ldr	r3, [r7, #12]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004894:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8004896:	7afb      	ldrb	r3, [r7, #11]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d002      	beq.n	80048a2 <HAL_CAN_IsTxMessagePending+0x22>
 800489c:	7afb      	ldrb	r3, [r7, #11]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d10b      	bne.n	80048ba <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	069b      	lsls	r3, r3, #26
 80048ac:	401a      	ands	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	069b      	lsls	r3, r3, #26
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d001      	beq.n	80048ba <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80048b6:	2301      	movs	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80048ba:	68fb      	ldr	r3, [r7, #12]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048dc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80048de:	7dfb      	ldrb	r3, [r7, #23]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d003      	beq.n	80048ec <HAL_CAN_GetRxMessage+0x24>
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	f040 80f3 	bne.w	8004ad2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10e      	bne.n	8004910 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d116      	bne.n	800492e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0e7      	b.n	8004ae0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d107      	bne.n	800492e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e0d8      	b.n	8004ae0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	331b      	adds	r3, #27
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	4413      	add	r3, r2
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0204 	and.w	r2, r3, #4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10c      	bne.n	8004966 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	331b      	adds	r3, #27
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	4413      	add	r3, r2
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	0d5b      	lsrs	r3, r3, #21
 800495c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e00b      	b.n	800497e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	331b      	adds	r3, #27
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	4413      	add	r3, r2
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	08db      	lsrs	r3, r3, #3
 8004976:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	331b      	adds	r3, #27
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	4413      	add	r3, r2
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0202 	and.w	r2, r3, #2
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	331b      	adds	r3, #27
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	4413      	add	r3, r2
 80049a0:	3304      	adds	r3, #4
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 020f 	and.w	r2, r3, #15
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	331b      	adds	r3, #27
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	4413      	add	r3, r2
 80049b8:	3304      	adds	r3, #4
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	331b      	adds	r3, #27
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	4413      	add	r3, r2
 80049d0:	3304      	adds	r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	0a1a      	lsrs	r2, r3, #8
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0c1a      	lsrs	r2, r3, #16
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	3302      	adds	r3, #2
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	0e1a      	lsrs	r2, r3, #24
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	3303      	adds	r3, #3
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	3304      	adds	r3, #4
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0a1a      	lsrs	r2, r3, #8
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	3305      	adds	r3, #5
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	0c1a      	lsrs	r2, r3, #16
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	3306      	adds	r3, #6
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	0e1a      	lsrs	r2, r3, #24
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	3307      	adds	r3, #7
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d108      	bne.n	8004abe <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0220 	orr.w	r2, r2, #32
 8004aba:	60da      	str	r2, [r3, #12]
 8004abc:	e007      	b.n	8004ace <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0220 	orr.w	r2, r2, #32
 8004acc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e006      	b.n	8004ae0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
  }
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004afc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d002      	beq.n	8004b0a <HAL_CAN_ActivateNotification+0x1e>
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d109      	bne.n	8004b1e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6959      	ldr	r1, [r3, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e006      	b.n	8004b2c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
  }
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	; 0x28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d07c      	beq.n	8004c78 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d023      	beq.n	8004bd0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f983 	bl	8004ea6 <HAL_CAN_TxMailbox0CompleteCallback>
 8004ba0:	e016      	b.n	8004bd0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb4:	e00c      	b.n	8004bd0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc8:	e002      	b.n	8004bd0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f989 	bl	8004ee2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d024      	beq.n	8004c24 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004be2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f963 	bl	8004eba <HAL_CAN_TxMailbox1CompleteCallback>
 8004bf4:	e016      	b.n	8004c24 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d004      	beq.n	8004c0a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
 8004c08:	e00c      	b.n	8004c24 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1c:	e002      	b.n	8004c24 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f969 	bl	8004ef6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d024      	beq.n	8004c78 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f943 	bl	8004ece <HAL_CAN_TxMailbox2CompleteCallback>
 8004c48:	e016      	b.n	8004c78 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5c:	e00c      	b.n	8004c78 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d004      	beq.n	8004c72 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	e002      	b.n	8004c78 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f949 	bl	8004f0a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00c      	beq.n	8004c9c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2210      	movs	r2, #16
 8004c9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2208      	movs	r2, #8
 8004cb6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f93a 	bl	8004f32 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d009      	beq.n	8004cdc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f921 	bl	8004f1e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2210      	movs	r2, #16
 8004cfe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d006      	beq.n	8004d22 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f91c 	bl	8004f5a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f903 	bl	8004f46 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00b      	beq.n	8004d62 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d006      	beq.n	8004d62 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2210      	movs	r2, #16
 8004d5a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f906 	bl	8004f6e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00b      	beq.n	8004d84 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d006      	beq.n	8004d84 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f8ff 	bl	8004f82 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d07b      	beq.n	8004e86 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d072      	beq.n	8004e7e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	f043 0302 	orr.w	r3, r3, #2
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f043 0304 	orr.w	r3, r3, #4
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d043      	beq.n	8004e7e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d03e      	beq.n	8004e7e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e06:	2b60      	cmp	r3, #96	; 0x60
 8004e08:	d02b      	beq.n	8004e62 <HAL_CAN_IRQHandler+0x32a>
 8004e0a:	2b60      	cmp	r3, #96	; 0x60
 8004e0c:	d82e      	bhi.n	8004e6c <HAL_CAN_IRQHandler+0x334>
 8004e0e:	2b50      	cmp	r3, #80	; 0x50
 8004e10:	d022      	beq.n	8004e58 <HAL_CAN_IRQHandler+0x320>
 8004e12:	2b50      	cmp	r3, #80	; 0x50
 8004e14:	d82a      	bhi.n	8004e6c <HAL_CAN_IRQHandler+0x334>
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d019      	beq.n	8004e4e <HAL_CAN_IRQHandler+0x316>
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d826      	bhi.n	8004e6c <HAL_CAN_IRQHandler+0x334>
 8004e1e:	2b30      	cmp	r3, #48	; 0x30
 8004e20:	d010      	beq.n	8004e44 <HAL_CAN_IRQHandler+0x30c>
 8004e22:	2b30      	cmp	r3, #48	; 0x30
 8004e24:	d822      	bhi.n	8004e6c <HAL_CAN_IRQHandler+0x334>
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d002      	beq.n	8004e30 <HAL_CAN_IRQHandler+0x2f8>
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d005      	beq.n	8004e3a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004e2e:	e01d      	b.n	8004e6c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	f043 0308 	orr.w	r3, r3, #8
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e38:	e019      	b.n	8004e6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	f043 0310 	orr.w	r3, r3, #16
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e42:	e014      	b.n	8004e6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	f043 0320 	orr.w	r3, r3, #32
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e4c:	e00f      	b.n	8004e6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e56:	e00a      	b.n	8004e6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e60:	e005      	b.n	8004e6e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e6a:	e000      	b.n	8004e6e <HAL_CAN_IRQHandler+0x336>
            break;
 8004e6c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e7c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2204      	movs	r2, #4
 8004e84:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f87c 	bl	8004f96 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	3728      	adds	r7, #40	; 0x28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <__NVIC_SetPriorityGrouping+0x40>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004fd4:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fda:	4a04      	ldr	r2, [pc, #16]	; (8004fec <__NVIC_SetPriorityGrouping+0x40>)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	60d3      	str	r3, [r2, #12]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	e000ed00 	.word	0xe000ed00
 8004ff0:	05fa0000 	.word	0x05fa0000

08004ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <__NVIC_GetPriorityGrouping+0x18>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	0a1b      	lsrs	r3, r3, #8
 8004ffe:	f003 0307 	and.w	r3, r3, #7
}
 8005002:	4618      	mov	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	e000ed00 	.word	0xe000ed00

08005010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	2b00      	cmp	r3, #0
 8005020:	db0b      	blt.n	800503a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	f003 021f 	and.w	r2, r3, #31
 8005028:	4907      	ldr	r1, [pc, #28]	; (8005048 <__NVIC_EnableIRQ+0x38>)
 800502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	2001      	movs	r0, #1
 8005032:	fa00 f202 	lsl.w	r2, r0, r2
 8005036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	e000e100 	.word	0xe000e100

0800504c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	6039      	str	r1, [r7, #0]
 8005056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505c:	2b00      	cmp	r3, #0
 800505e:	db0a      	blt.n	8005076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	b2da      	uxtb	r2, r3
 8005064:	490c      	ldr	r1, [pc, #48]	; (8005098 <__NVIC_SetPriority+0x4c>)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	0112      	lsls	r2, r2, #4
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	440b      	add	r3, r1
 8005070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005074:	e00a      	b.n	800508c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	4908      	ldr	r1, [pc, #32]	; (800509c <__NVIC_SetPriority+0x50>)
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	3b04      	subs	r3, #4
 8005084:	0112      	lsls	r2, r2, #4
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	440b      	add	r3, r1
 800508a:	761a      	strb	r2, [r3, #24]
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	e000e100 	.word	0xe000e100
 800509c:	e000ed00 	.word	0xe000ed00

080050a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b089      	sub	sp, #36	; 0x24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f1c3 0307 	rsb	r3, r3, #7
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	bf28      	it	cs
 80050be:	2304      	movcs	r3, #4
 80050c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3304      	adds	r3, #4
 80050c6:	2b06      	cmp	r3, #6
 80050c8:	d902      	bls.n	80050d0 <NVIC_EncodePriority+0x30>
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3b03      	subs	r3, #3
 80050ce:	e000      	b.n	80050d2 <NVIC_EncodePriority+0x32>
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d4:	f04f 32ff 	mov.w	r2, #4294967295
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43da      	mvns	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	401a      	ands	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050e8:	f04f 31ff 	mov.w	r1, #4294967295
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	fa01 f303 	lsl.w	r3, r1, r3
 80050f2:	43d9      	mvns	r1, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f8:	4313      	orrs	r3, r2
         );
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3724      	adds	r7, #36	; 0x24
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff ff4c 	bl	8004fac <__NVIC_SetPriorityGrouping>
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800512e:	f7ff ff61 	bl	8004ff4 <__NVIC_GetPriorityGrouping>
 8005132:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	6978      	ldr	r0, [r7, #20]
 800513a:	f7ff ffb1 	bl	80050a0 <NVIC_EncodePriority>
 800513e:	4602      	mov	r2, r0
 8005140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ff80 	bl	800504c <__NVIC_SetPriority>
}
 800514c:	bf00      	nop
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800515e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff ff54 	bl	8005010 <__NVIC_EnableIRQ>
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005170:	b480      	push	{r7}
 8005172:	b089      	sub	sp, #36	; 0x24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005182:	2300      	movs	r3, #0
 8005184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	e175      	b.n	800547c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005190:	2201      	movs	r2, #1
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4013      	ands	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	f040 8164 	bne.w	8005476 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d00b      	beq.n	80051ce <HAL_GPIO_Init+0x5e>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d007      	beq.n	80051ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051c2:	2b11      	cmp	r3, #17
 80051c4:	d003      	beq.n	80051ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b12      	cmp	r3, #18
 80051cc:	d130      	bne.n	8005230 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	2203      	movs	r2, #3
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4013      	ands	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005204:	2201      	movs	r2, #1
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	43db      	mvns	r3, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4013      	ands	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 0201 	and.w	r2, r3, #1
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	2203      	movs	r2, #3
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4313      	orrs	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d003      	beq.n	8005270 <HAL_GPIO_Init+0x100>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b12      	cmp	r3, #18
 800526e:	d123      	bne.n	80052b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	08da      	lsrs	r2, r3, #3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3208      	adds	r2, #8
 8005278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	220f      	movs	r2, #15
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	43db      	mvns	r3, r3
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4013      	ands	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	691a      	ldr	r2, [r3, #16]
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	08da      	lsrs	r2, r3, #3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3208      	adds	r2, #8
 80052b2:	69b9      	ldr	r1, [r7, #24]
 80052b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	2203      	movs	r2, #3
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	43db      	mvns	r3, r3
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	4013      	ands	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f003 0203 	and.w	r2, r3, #3
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 80be 	beq.w	8005476 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052fa:	4b66      	ldr	r3, [pc, #408]	; (8005494 <HAL_GPIO_Init+0x324>)
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	4a65      	ldr	r2, [pc, #404]	; (8005494 <HAL_GPIO_Init+0x324>)
 8005300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005304:	6453      	str	r3, [r2, #68]	; 0x44
 8005306:	4b63      	ldr	r3, [pc, #396]	; (8005494 <HAL_GPIO_Init+0x324>)
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005312:	4a61      	ldr	r2, [pc, #388]	; (8005498 <HAL_GPIO_Init+0x328>)
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	089b      	lsrs	r3, r3, #2
 8005318:	3302      	adds	r3, #2
 800531a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	220f      	movs	r2, #15
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	43db      	mvns	r3, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4013      	ands	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a58      	ldr	r2, [pc, #352]	; (800549c <HAL_GPIO_Init+0x32c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d037      	beq.n	80053ae <HAL_GPIO_Init+0x23e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a57      	ldr	r2, [pc, #348]	; (80054a0 <HAL_GPIO_Init+0x330>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d031      	beq.n	80053aa <HAL_GPIO_Init+0x23a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a56      	ldr	r2, [pc, #344]	; (80054a4 <HAL_GPIO_Init+0x334>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d02b      	beq.n	80053a6 <HAL_GPIO_Init+0x236>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a55      	ldr	r2, [pc, #340]	; (80054a8 <HAL_GPIO_Init+0x338>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d025      	beq.n	80053a2 <HAL_GPIO_Init+0x232>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a54      	ldr	r2, [pc, #336]	; (80054ac <HAL_GPIO_Init+0x33c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01f      	beq.n	800539e <HAL_GPIO_Init+0x22e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a53      	ldr	r2, [pc, #332]	; (80054b0 <HAL_GPIO_Init+0x340>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d019      	beq.n	800539a <HAL_GPIO_Init+0x22a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a52      	ldr	r2, [pc, #328]	; (80054b4 <HAL_GPIO_Init+0x344>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <HAL_GPIO_Init+0x226>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a51      	ldr	r2, [pc, #324]	; (80054b8 <HAL_GPIO_Init+0x348>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00d      	beq.n	8005392 <HAL_GPIO_Init+0x222>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a50      	ldr	r2, [pc, #320]	; (80054bc <HAL_GPIO_Init+0x34c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d007      	beq.n	800538e <HAL_GPIO_Init+0x21e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a4f      	ldr	r2, [pc, #316]	; (80054c0 <HAL_GPIO_Init+0x350>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d101      	bne.n	800538a <HAL_GPIO_Init+0x21a>
 8005386:	2309      	movs	r3, #9
 8005388:	e012      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 800538a:	230a      	movs	r3, #10
 800538c:	e010      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 800538e:	2308      	movs	r3, #8
 8005390:	e00e      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 8005392:	2307      	movs	r3, #7
 8005394:	e00c      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 8005396:	2306      	movs	r3, #6
 8005398:	e00a      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 800539a:	2305      	movs	r3, #5
 800539c:	e008      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 800539e:	2304      	movs	r3, #4
 80053a0:	e006      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 80053a2:	2303      	movs	r3, #3
 80053a4:	e004      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e002      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <HAL_GPIO_Init+0x240>
 80053ae:	2300      	movs	r3, #0
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	f002 0203 	and.w	r2, r2, #3
 80053b6:	0092      	lsls	r2, r2, #2
 80053b8:	4093      	lsls	r3, r2
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4313      	orrs	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80053c0:	4935      	ldr	r1, [pc, #212]	; (8005498 <HAL_GPIO_Init+0x328>)
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	089b      	lsrs	r3, r3, #2
 80053c6:	3302      	adds	r3, #2
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053ce:	4b3d      	ldr	r3, [pc, #244]	; (80054c4 <HAL_GPIO_Init+0x354>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4013      	ands	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053f2:	4a34      	ldr	r2, [pc, #208]	; (80054c4 <HAL_GPIO_Init+0x354>)
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80053f8:	4b32      	ldr	r3, [pc, #200]	; (80054c4 <HAL_GPIO_Init+0x354>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	43db      	mvns	r3, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4013      	ands	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800541c:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <HAL_GPIO_Init+0x354>)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005422:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <HAL_GPIO_Init+0x354>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	43db      	mvns	r3, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4013      	ands	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005446:	4a1f      	ldr	r2, [pc, #124]	; (80054c4 <HAL_GPIO_Init+0x354>)
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800544c:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <HAL_GPIO_Init+0x354>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	43db      	mvns	r3, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005470:	4a14      	ldr	r2, [pc, #80]	; (80054c4 <HAL_GPIO_Init+0x354>)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	3301      	adds	r3, #1
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b0f      	cmp	r3, #15
 8005480:	f67f ae86 	bls.w	8005190 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	3724      	adds	r7, #36	; 0x24
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40023800 	.word	0x40023800
 8005498:	40013800 	.word	0x40013800
 800549c:	40020000 	.word	0x40020000
 80054a0:	40020400 	.word	0x40020400
 80054a4:	40020800 	.word	0x40020800
 80054a8:	40020c00 	.word	0x40020c00
 80054ac:	40021000 	.word	0x40021000
 80054b0:	40021400 	.word	0x40021400
 80054b4:	40021800 	.word	0x40021800
 80054b8:	40021c00 	.word	0x40021c00
 80054bc:	40022000 	.word	0x40022000
 80054c0:	40022400 	.word	0x40022400
 80054c4:	40013c00 	.word	0x40013c00

080054c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	887b      	ldrh	r3, [r7, #2]
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054e0:	2301      	movs	r3, #1
 80054e2:	73fb      	strb	r3, [r7, #15]
 80054e4:	e001      	b.n	80054ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054e6:	2300      	movs	r3, #0
 80054e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	807b      	strh	r3, [r7, #2]
 8005504:	4613      	mov	r3, r2
 8005506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005508:	787b      	ldrb	r3, [r7, #1]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800550e:	887a      	ldrh	r2, [r7, #2]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005514:	e003      	b.n	800551e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005516:	887b      	ldrh	r3, [r7, #2]
 8005518:	041a      	lsls	r2, r3, #16
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	619a      	str	r2, [r3, #24]
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	460b      	mov	r3, r1
 8005534:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800553c:	887a      	ldrh	r2, [r7, #2]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4013      	ands	r3, r2
 8005542:	041a      	lsls	r2, r3, #16
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	43d9      	mvns	r1, r3
 8005548:	887b      	ldrh	r3, [r7, #2]
 800554a:	400b      	ands	r3, r1
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	619a      	str	r2, [r3, #24]
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
	...

08005560 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a04      	ldr	r2, [pc, #16]	; (800557c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800556a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556e:	6013      	str	r3, [r2, #0]
}
 8005570:	bf00      	nop
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40007000 	.word	0x40007000

08005580 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005588:	2300      	movs	r3, #0
 800558a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e29b      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8087 	beq.w	80056b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055a4:	4b96      	ldr	r3, [pc, #600]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d00c      	beq.n	80055ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055b0:	4b93      	ldr	r3, [pc, #588]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d112      	bne.n	80055e2 <HAL_RCC_OscConfig+0x62>
 80055bc:	4b90      	ldr	r3, [pc, #576]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c8:	d10b      	bne.n	80055e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ca:	4b8d      	ldr	r3, [pc, #564]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d06c      	beq.n	80056b0 <HAL_RCC_OscConfig+0x130>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d168      	bne.n	80056b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e275      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ea:	d106      	bne.n	80055fa <HAL_RCC_OscConfig+0x7a>
 80055ec:	4b84      	ldr	r3, [pc, #528]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a83      	ldr	r2, [pc, #524]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80055f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	e02e      	b.n	8005658 <HAL_RCC_OscConfig+0xd8>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10c      	bne.n	800561c <HAL_RCC_OscConfig+0x9c>
 8005602:	4b7f      	ldr	r3, [pc, #508]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a7e      	ldr	r2, [pc, #504]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	4b7c      	ldr	r3, [pc, #496]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a7b      	ldr	r2, [pc, #492]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	e01d      	b.n	8005658 <HAL_RCC_OscConfig+0xd8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005624:	d10c      	bne.n	8005640 <HAL_RCC_OscConfig+0xc0>
 8005626:	4b76      	ldr	r3, [pc, #472]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a75      	ldr	r2, [pc, #468]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800562c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	4b73      	ldr	r3, [pc, #460]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a72      	ldr	r2, [pc, #456]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	e00b      	b.n	8005658 <HAL_RCC_OscConfig+0xd8>
 8005640:	4b6f      	ldr	r3, [pc, #444]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a6e      	ldr	r2, [pc, #440]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	4b6c      	ldr	r3, [pc, #432]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a6b      	ldr	r2, [pc, #428]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d013      	beq.n	8005688 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005660:	f7fe fdc6 	bl	80041f0 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005668:	f7fe fdc2 	bl	80041f0 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	; 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e229      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	4b61      	ldr	r3, [pc, #388]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0xe8>
 8005686:	e014      	b.n	80056b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fe fdb2 	bl	80041f0 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005690:	f7fe fdae 	bl	80041f0 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	; 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e215      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056a2:	4b57      	ldr	r3, [pc, #348]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x110>
 80056ae:	e000      	b.n	80056b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d069      	beq.n	8005792 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056be:	4b50      	ldr	r3, [pc, #320]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00b      	beq.n	80056e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ca:	4b4d      	ldr	r3, [pc, #308]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 030c 	and.w	r3, r3, #12
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d11c      	bne.n	8005710 <HAL_RCC_OscConfig+0x190>
 80056d6:	4b4a      	ldr	r3, [pc, #296]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d116      	bne.n	8005710 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056e2:	4b47      	ldr	r3, [pc, #284]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_RCC_OscConfig+0x17a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d001      	beq.n	80056fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e1e9      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fa:	4b41      	ldr	r3, [pc, #260]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	493d      	ldr	r1, [pc, #244]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570e:	e040      	b.n	8005792 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d023      	beq.n	8005760 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005718:	4b39      	ldr	r3, [pc, #228]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a38      	ldr	r2, [pc, #224]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fe fd64 	bl	80041f0 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800572c:	f7fe fd60 	bl	80041f0 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e1c7      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800573e:	4b30      	ldr	r3, [pc, #192]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800574a:	4b2d      	ldr	r3, [pc, #180]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4929      	ldr	r1, [pc, #164]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 800575a:	4313      	orrs	r3, r2
 800575c:	600b      	str	r3, [r1, #0]
 800575e:	e018      	b.n	8005792 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005760:	4b27      	ldr	r3, [pc, #156]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a26      	ldr	r2, [pc, #152]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005766:	f023 0301 	bic.w	r3, r3, #1
 800576a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fe fd40 	bl	80041f0 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005774:	f7fe fd3c 	bl	80041f0 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e1a3      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005786:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d038      	beq.n	8005810 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d019      	beq.n	80057da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057a6:	4b16      	ldr	r3, [pc, #88]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80057a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057aa:	4a15      	ldr	r2, [pc, #84]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b2:	f7fe fd1d 	bl	80041f0 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ba:	f7fe fd19 	bl	80041f0 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e180      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057cc:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80057ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x23a>
 80057d8:	e01a      	b.n	8005810 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80057dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057de:	4a08      	ldr	r2, [pc, #32]	; (8005800 <HAL_RCC_OscConfig+0x280>)
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e6:	f7fe fd03 	bl	80041f0 <HAL_GetTick>
 80057ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057ec:	e00a      	b.n	8005804 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ee:	f7fe fcff 	bl	80041f0 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d903      	bls.n	8005804 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e166      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
 8005800:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005804:	4b92      	ldr	r3, [pc, #584]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1ee      	bne.n	80057ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80a4 	beq.w	8005966 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800581e:	4b8c      	ldr	r3, [pc, #560]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10d      	bne.n	8005846 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800582a:	4b89      	ldr	r3, [pc, #548]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	4a88      	ldr	r2, [pc, #544]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005834:	6413      	str	r3, [r2, #64]	; 0x40
 8005836:	4b86      	ldr	r3, [pc, #536]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583e:	60bb      	str	r3, [r7, #8]
 8005840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005842:	2301      	movs	r3, #1
 8005844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005846:	4b83      	ldr	r3, [pc, #524]	; (8005a54 <HAL_RCC_OscConfig+0x4d4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d118      	bne.n	8005884 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005852:	4b80      	ldr	r3, [pc, #512]	; (8005a54 <HAL_RCC_OscConfig+0x4d4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a7f      	ldr	r2, [pc, #508]	; (8005a54 <HAL_RCC_OscConfig+0x4d4>)
 8005858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800585e:	f7fe fcc7 	bl	80041f0 <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005866:	f7fe fcc3 	bl	80041f0 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b64      	cmp	r3, #100	; 0x64
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e12a      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005878:	4b76      	ldr	r3, [pc, #472]	; (8005a54 <HAL_RCC_OscConfig+0x4d4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d106      	bne.n	800589a <HAL_RCC_OscConfig+0x31a>
 800588c:	4b70      	ldr	r3, [pc, #448]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	4a6f      	ldr	r2, [pc, #444]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005892:	f043 0301 	orr.w	r3, r3, #1
 8005896:	6713      	str	r3, [r2, #112]	; 0x70
 8005898:	e02d      	b.n	80058f6 <HAL_RCC_OscConfig+0x376>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10c      	bne.n	80058bc <HAL_RCC_OscConfig+0x33c>
 80058a2:	4b6b      	ldr	r3, [pc, #428]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a6:	4a6a      	ldr	r2, [pc, #424]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	6713      	str	r3, [r2, #112]	; 0x70
 80058ae:	4b68      	ldr	r3, [pc, #416]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	4a67      	ldr	r2, [pc, #412]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058b4:	f023 0304 	bic.w	r3, r3, #4
 80058b8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ba:	e01c      	b.n	80058f6 <HAL_RCC_OscConfig+0x376>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d10c      	bne.n	80058de <HAL_RCC_OscConfig+0x35e>
 80058c4:	4b62      	ldr	r3, [pc, #392]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	4a61      	ldr	r2, [pc, #388]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058ca:	f043 0304 	orr.w	r3, r3, #4
 80058ce:	6713      	str	r3, [r2, #112]	; 0x70
 80058d0:	4b5f      	ldr	r3, [pc, #380]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	4a5e      	ldr	r2, [pc, #376]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	6713      	str	r3, [r2, #112]	; 0x70
 80058dc:	e00b      	b.n	80058f6 <HAL_RCC_OscConfig+0x376>
 80058de:	4b5c      	ldr	r3, [pc, #368]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e2:	4a5b      	ldr	r2, [pc, #364]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ea:	4b59      	ldr	r3, [pc, #356]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	4a58      	ldr	r2, [pc, #352]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80058f0:	f023 0304 	bic.w	r3, r3, #4
 80058f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d015      	beq.n	800592a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fe:	f7fe fc77 	bl	80041f0 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005904:	e00a      	b.n	800591c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005906:	f7fe fc73 	bl	80041f0 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f241 3288 	movw	r2, #5000	; 0x1388
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e0d8      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591c:	4b4c      	ldr	r3, [pc, #304]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0ee      	beq.n	8005906 <HAL_RCC_OscConfig+0x386>
 8005928:	e014      	b.n	8005954 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592a:	f7fe fc61 	bl	80041f0 <HAL_GetTick>
 800592e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005930:	e00a      	b.n	8005948 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005932:	f7fe fc5d 	bl	80041f0 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e0c2      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005948:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1ee      	bne.n	8005932 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005954:	7dfb      	ldrb	r3, [r7, #23]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d105      	bne.n	8005966 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800595a:	4b3d      	ldr	r3, [pc, #244]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	4a3c      	ldr	r2, [pc, #240]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005964:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 80ae 	beq.w	8005acc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005970:	4b37      	ldr	r3, [pc, #220]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 030c 	and.w	r3, r3, #12
 8005978:	2b08      	cmp	r3, #8
 800597a:	d06d      	beq.n	8005a58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d14b      	bne.n	8005a1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005984:	4b32      	ldr	r3, [pc, #200]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a31      	ldr	r2, [pc, #196]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 800598a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800598e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fe fc2e 	bl	80041f0 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005998:	f7fe fc2a 	bl	80041f0 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e091      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059aa:	4b29      	ldr	r3, [pc, #164]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	019b      	lsls	r3, r3, #6
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	3b01      	subs	r3, #1
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	071b      	lsls	r3, r3, #28
 80059e2:	491b      	ldr	r1, [pc, #108]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059e8:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a18      	ldr	r2, [pc, #96]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 80059ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f4:	f7fe fbfc 	bl	80041f0 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059fc:	f7fe fbf8 	bl	80041f0 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e05f      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f0      	beq.n	80059fc <HAL_RCC_OscConfig+0x47c>
 8005a1a:	e057      	b.n	8005acc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a0b      	ldr	r2, [pc, #44]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005a22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7fe fbe2 	bl	80041f0 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a30:	f7fe fbde 	bl	80041f0 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e045      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a42:	4b03      	ldr	r3, [pc, #12]	; (8005a50 <HAL_RCC_OscConfig+0x4d0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <HAL_RCC_OscConfig+0x4b0>
 8005a4e:	e03d      	b.n	8005acc <HAL_RCC_OscConfig+0x54c>
 8005a50:	40023800 	.word	0x40023800
 8005a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a58:	4b1f      	ldr	r3, [pc, #124]	; (8005ad8 <HAL_RCC_OscConfig+0x558>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d030      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d129      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d122      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a88:	4013      	ands	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d119      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d10f      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d001      	beq.n	8005acc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40023800 	.word	0x40023800

08005adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0d0      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af4:	4b6a      	ldr	r3, [pc, #424]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d910      	bls.n	8005b24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b67      	ldr	r3, [pc, #412]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 020f 	bic.w	r2, r3, #15
 8005b0a:	4965      	ldr	r1, [pc, #404]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	4b63      	ldr	r3, [pc, #396]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0b8      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d020      	beq.n	8005b72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b3c:	4b59      	ldr	r3, [pc, #356]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	4a58      	ldr	r2, [pc, #352]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b54:	4b53      	ldr	r3, [pc, #332]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4a52      	ldr	r2, [pc, #328]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b60:	4b50      	ldr	r3, [pc, #320]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	494d      	ldr	r1, [pc, #308]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d040      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d107      	bne.n	8005b96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b86:	4b47      	ldr	r3, [pc, #284]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d115      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e07f      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d107      	bne.n	8005bae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9e:	4b41      	ldr	r3, [pc, #260]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e073      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bae:	4b3d      	ldr	r3, [pc, #244]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e06b      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bbe:	4b39      	ldr	r3, [pc, #228]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f023 0203 	bic.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4936      	ldr	r1, [pc, #216]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd0:	f7fe fb0e 	bl	80041f0 <HAL_GetTick>
 8005bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd6:	e00a      	b.n	8005bee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd8:	f7fe fb0a 	bl	80041f0 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e053      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bee:	4b2d      	ldr	r3, [pc, #180]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 020c 	and.w	r2, r3, #12
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1eb      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c00:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d210      	bcs.n	8005c30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0e:	4b24      	ldr	r3, [pc, #144]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f023 020f 	bic.w	r2, r3, #15
 8005c16:	4922      	ldr	r1, [pc, #136]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1e:	4b20      	ldr	r3, [pc, #128]	; (8005ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	683a      	ldr	r2, [r7, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e032      	b.n	8005c96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c3c:	4b19      	ldr	r3, [pc, #100]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4916      	ldr	r1, [pc, #88]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c5a:	4b12      	ldr	r3, [pc, #72]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	490e      	ldr	r1, [pc, #56]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c6e:	f000 f821 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8005c72:	4602      	mov	r2, r0
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	f003 030f 	and.w	r3, r3, #15
 8005c7e:	490a      	ldr	r1, [pc, #40]	; (8005ca8 <HAL_RCC_ClockConfig+0x1cc>)
 8005c80:	5ccb      	ldrb	r3, [r1, r3]
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	4a09      	ldr	r2, [pc, #36]	; (8005cac <HAL_RCC_ClockConfig+0x1d0>)
 8005c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c8a:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_RCC_ClockConfig+0x1d4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe f910 	bl	8003eb4 <HAL_InitTick>

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40023c00 	.word	0x40023c00
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	0800bbb4 	.word	0x0800bbb4
 8005cac:	20000004 	.word	0x20000004
 8005cb0:	20000008 	.word	0x20000008

08005cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	607b      	str	r3, [r7, #4]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ccc:	4b67      	ldr	r3, [pc, #412]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 030c 	and.w	r3, r3, #12
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d00d      	beq.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	f200 80bd 	bhi.w	8005e58 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d002      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d003      	beq.n	8005cee <HAL_RCC_GetSysClockFreq+0x3a>
 8005ce6:	e0b7      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ce8:	4b61      	ldr	r3, [pc, #388]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005cea:	60bb      	str	r3, [r7, #8]
      break;
 8005cec:	e0b7      	b.n	8005e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cee:	4b61      	ldr	r3, [pc, #388]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005cf0:	60bb      	str	r3, [r7, #8]
      break;
 8005cf2:	e0b4      	b.n	8005e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cf4:	4b5d      	ldr	r3, [pc, #372]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cfc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005cfe:	4b5b      	ldr	r3, [pc, #364]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d04d      	beq.n	8005da6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d0a:	4b58      	ldr	r3, [pc, #352]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	099b      	lsrs	r3, r3, #6
 8005d10:	461a      	mov	r2, r3
 8005d12:	f04f 0300 	mov.w	r3, #0
 8005d16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d1a:	f04f 0100 	mov.w	r1, #0
 8005d1e:	ea02 0800 	and.w	r8, r2, r0
 8005d22:	ea03 0901 	and.w	r9, r3, r1
 8005d26:	4640      	mov	r0, r8
 8005d28:	4649      	mov	r1, r9
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	f04f 0300 	mov.w	r3, #0
 8005d32:	014b      	lsls	r3, r1, #5
 8005d34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d38:	0142      	lsls	r2, r0, #5
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	ebb0 0008 	subs.w	r0, r0, r8
 8005d42:	eb61 0109 	sbc.w	r1, r1, r9
 8005d46:	f04f 0200 	mov.w	r2, #0
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	018b      	lsls	r3, r1, #6
 8005d50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d54:	0182      	lsls	r2, r0, #6
 8005d56:	1a12      	subs	r2, r2, r0
 8005d58:	eb63 0301 	sbc.w	r3, r3, r1
 8005d5c:	f04f 0000 	mov.w	r0, #0
 8005d60:	f04f 0100 	mov.w	r1, #0
 8005d64:	00d9      	lsls	r1, r3, #3
 8005d66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d6a:	00d0      	lsls	r0, r2, #3
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	eb12 0208 	adds.w	r2, r2, r8
 8005d74:	eb43 0309 	adc.w	r3, r3, r9
 8005d78:	f04f 0000 	mov.w	r0, #0
 8005d7c:	f04f 0100 	mov.w	r1, #0
 8005d80:	0259      	lsls	r1, r3, #9
 8005d82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005d86:	0250      	lsls	r0, r2, #9
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4619      	mov	r1, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	461a      	mov	r2, r3
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	f7fa fa5c 	bl	8000254 <__aeabi_uldivmod>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4613      	mov	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	e04a      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005da6:	4b31      	ldr	r3, [pc, #196]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	099b      	lsrs	r3, r3, #6
 8005dac:	461a      	mov	r2, r3
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005db6:	f04f 0100 	mov.w	r1, #0
 8005dba:	ea02 0400 	and.w	r4, r2, r0
 8005dbe:	ea03 0501 	and.w	r5, r3, r1
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	014b      	lsls	r3, r1, #5
 8005dd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005dd4:	0142      	lsls	r2, r0, #5
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	1b00      	subs	r0, r0, r4
 8005ddc:	eb61 0105 	sbc.w	r1, r1, r5
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	018b      	lsls	r3, r1, #6
 8005dea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005dee:	0182      	lsls	r2, r0, #6
 8005df0:	1a12      	subs	r2, r2, r0
 8005df2:	eb63 0301 	sbc.w	r3, r3, r1
 8005df6:	f04f 0000 	mov.w	r0, #0
 8005dfa:	f04f 0100 	mov.w	r1, #0
 8005dfe:	00d9      	lsls	r1, r3, #3
 8005e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e04:	00d0      	lsls	r0, r2, #3
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	1912      	adds	r2, r2, r4
 8005e0c:	eb45 0303 	adc.w	r3, r5, r3
 8005e10:	f04f 0000 	mov.w	r0, #0
 8005e14:	f04f 0100 	mov.w	r1, #0
 8005e18:	0299      	lsls	r1, r3, #10
 8005e1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e1e:	0290      	lsls	r0, r2, #10
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	f7fa fa10 	bl	8000254 <__aeabi_uldivmod>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4613      	mov	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005e3c:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	f003 0303 	and.w	r3, r3, #3
 8005e46:	3301      	adds	r3, #1
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e54:	60bb      	str	r3, [r7, #8]
      break;
 8005e56:	e002      	b.n	8005e5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e5a:	60bb      	str	r3, [r7, #8]
      break;
 8005e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	00f42400 	.word	0x00f42400
 8005e74:	007a1200 	.word	0x007a1200

08005e78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e7c:	4b03      	ldr	r3, [pc, #12]	; (8005e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20000004 	.word	0x20000004

08005e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e94:	f7ff fff0 	bl	8005e78 <HAL_RCC_GetHCLKFreq>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	0a9b      	lsrs	r3, r3, #10
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	4903      	ldr	r1, [pc, #12]	; (8005eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ea6:	5ccb      	ldrb	r3, [r1, r3]
 8005ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	0800bbc4 	.word	0x0800bbc4

08005eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ebc:	f7ff ffdc 	bl	8005e78 <HAL_RCC_GetHCLKFreq>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	0b5b      	lsrs	r3, r3, #13
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	4903      	ldr	r1, [pc, #12]	; (8005edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ece:	5ccb      	ldrb	r3, [r1, r3]
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	0800bbc4 	.word	0x0800bbc4

08005ee0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	220f      	movs	r2, #15
 8005eee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ef0:	4b12      	ldr	r3, [pc, #72]	; (8005f3c <HAL_RCC_GetClockConfig+0x5c>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0203 	and.w	r2, r3, #3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <HAL_RCC_GetClockConfig+0x5c>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <HAL_RCC_GetClockConfig+0x5c>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005f14:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <HAL_RCC_GetClockConfig+0x5c>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	08db      	lsrs	r3, r3, #3
 8005f1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f22:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <HAL_RCC_GetClockConfig+0x60>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 020f 	and.w	r2, r3, #15
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	601a      	str	r2, [r3, #0]
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	40023c00 	.word	0x40023c00

08005f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d012      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f6c:	4b69      	ldr	r3, [pc, #420]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4a68      	ldr	r2, [pc, #416]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f76:	6093      	str	r3, [r2, #8]
 8005f78:	4b66      	ldr	r3, [pc, #408]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f80:	4964      	ldr	r1, [pc, #400]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d017      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f9e:	4b5d      	ldr	r3, [pc, #372]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	4959      	ldr	r1, [pc, #356]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fbc:	d101      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d017      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005fda:	4b4e      	ldr	r3, [pc, #312]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fe0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	494a      	ldr	r1, [pc, #296]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ff8:	d101      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006006:	2301      	movs	r3, #1
 8006008:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006016:	2301      	movs	r3, #1
 8006018:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 808b 	beq.w	800613e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006028:	4b3a      	ldr	r3, [pc, #232]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602c:	4a39      	ldr	r2, [pc, #228]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006032:	6413      	str	r3, [r2, #64]	; 0x40
 8006034:	4b37      	ldr	r3, [pc, #220]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006040:	4b35      	ldr	r3, [pc, #212]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a34      	ldr	r2, [pc, #208]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800604a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800604c:	f7fe f8d0 	bl	80041f0 <HAL_GetTick>
 8006050:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006052:	e008      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006054:	f7fe f8cc 	bl	80041f0 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b64      	cmp	r3, #100	; 0x64
 8006060:	d901      	bls.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e38f      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006066:	4b2c      	ldr	r3, [pc, #176]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f0      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006072:	4b28      	ldr	r3, [pc, #160]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d035      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	429a      	cmp	r2, r3
 800608e:	d02e      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006090:	4b20      	ldr	r3, [pc, #128]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006098:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800609a:	4b1e      	ldr	r3, [pc, #120]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609e:	4a1d      	ldr	r2, [pc, #116]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060a6:	4b1b      	ldr	r3, [pc, #108]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060aa:	4a1a      	ldr	r2, [pc, #104]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80060b2:	4a18      	ldr	r2, [pc, #96]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060b8:	4b16      	ldr	r3, [pc, #88]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d114      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c4:	f7fe f894 	bl	80041f0 <HAL_GetTick>
 80060c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ca:	e00a      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060cc:	f7fe f890 	bl	80041f0 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e351      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e2:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d0ee      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060fa:	d111      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80060fc:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006108:	4b04      	ldr	r3, [pc, #16]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800610a:	400b      	ands	r3, r1
 800610c:	4901      	ldr	r1, [pc, #4]	; (8006114 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800610e:	4313      	orrs	r3, r2
 8006110:	608b      	str	r3, [r1, #8]
 8006112:	e00b      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006114:	40023800 	.word	0x40023800
 8006118:	40007000 	.word	0x40007000
 800611c:	0ffffcff 	.word	0x0ffffcff
 8006120:	4bb3      	ldr	r3, [pc, #716]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4ab2      	ldr	r2, [pc, #712]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006126:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800612a:	6093      	str	r3, [r2, #8]
 800612c:	4bb0      	ldr	r3, [pc, #704]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800612e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006138:	49ad      	ldr	r1, [pc, #692]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800613a:	4313      	orrs	r3, r2
 800613c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0310 	and.w	r3, r3, #16
 8006146:	2b00      	cmp	r3, #0
 8006148:	d010      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800614a:	4ba9      	ldr	r3, [pc, #676]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800614c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006150:	4aa7      	ldr	r2, [pc, #668]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006156:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800615a:	4ba5      	ldr	r3, [pc, #660]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800615c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006164:	49a2      	ldr	r1, [pc, #648]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006166:	4313      	orrs	r3, r2
 8006168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006178:	4b9d      	ldr	r3, [pc, #628]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800617a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006186:	499a      	ldr	r1, [pc, #616]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006188:	4313      	orrs	r3, r2
 800618a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800619a:	4b95      	ldr	r3, [pc, #596]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800619c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061a8:	4991      	ldr	r1, [pc, #580]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061bc:	4b8c      	ldr	r3, [pc, #560]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ca:	4989      	ldr	r1, [pc, #548]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061de:	4b84      	ldr	r3, [pc, #528]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ec:	4980      	ldr	r1, [pc, #512]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006200:	4b7b      	ldr	r3, [pc, #492]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006206:	f023 0203 	bic.w	r2, r3, #3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	4978      	ldr	r1, [pc, #480]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006210:	4313      	orrs	r3, r2
 8006212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006222:	4b73      	ldr	r3, [pc, #460]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006228:	f023 020c 	bic.w	r2, r3, #12
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006230:	496f      	ldr	r1, [pc, #444]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006232:	4313      	orrs	r3, r2
 8006234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006244:	4b6a      	ldr	r3, [pc, #424]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006252:	4967      	ldr	r1, [pc, #412]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006254:	4313      	orrs	r3, r2
 8006256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006266:	4b62      	ldr	r3, [pc, #392]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006274:	495e      	ldr	r1, [pc, #376]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006276:	4313      	orrs	r3, r2
 8006278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006288:	4b59      	ldr	r3, [pc, #356]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800628a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006296:	4956      	ldr	r1, [pc, #344]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80062aa:	4b51      	ldr	r3, [pc, #324]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b8:	494d      	ldr	r1, [pc, #308]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80062cc:	4b48      	ldr	r3, [pc, #288]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062da:	4945      	ldr	r1, [pc, #276]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80062ee:	4b40      	ldr	r3, [pc, #256]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fc:	493c      	ldr	r1, [pc, #240]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006310:	4b37      	ldr	r3, [pc, #220]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006316:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800631e:	4934      	ldr	r1, [pc, #208]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d011      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006332:	4b2f      	ldr	r3, [pc, #188]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006338:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006340:	492b      	ldr	r1, [pc, #172]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800634c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006350:	d101      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006352:	2301      	movs	r3, #1
 8006354:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006362:	2301      	movs	r3, #1
 8006364:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006372:	4b1f      	ldr	r3, [pc, #124]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006378:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006380:	491b      	ldr	r1, [pc, #108]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006394:	4b16      	ldr	r3, [pc, #88]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063a4:	4912      	ldr	r1, [pc, #72]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80063b8:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c8:	4909      	ldr	r1, [pc, #36]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00f      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ec:	e002      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80063ee:	bf00      	nop
 80063f0:	40023800 	.word	0x40023800
 80063f4:	4986      	ldr	r1, [pc, #536]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00b      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006408:	4b81      	ldr	r3, [pc, #516]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800640a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800640e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006418:	497d      	ldr	r1, [pc, #500]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800641a:	4313      	orrs	r3, r2
 800641c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d006      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 80d6 	beq.w	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006434:	4b76      	ldr	r3, [pc, #472]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a75      	ldr	r2, [pc, #468]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800643a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800643e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006440:	f7fd fed6 	bl	80041f0 <HAL_GetTick>
 8006444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006446:	e008      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006448:	f7fd fed2 	bl	80041f0 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b64      	cmp	r3, #100	; 0x64
 8006454:	d901      	bls.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e195      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800645a:	4b6d      	ldr	r3, [pc, #436]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1f0      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d021      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d11d      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800647a:	4b65      	ldr	r3, [pc, #404]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800647c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006480:	0c1b      	lsrs	r3, r3, #16
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006488:	4b61      	ldr	r3, [pc, #388]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800648a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800648e:	0e1b      	lsrs	r3, r3, #24
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	019a      	lsls	r2, r3, #6
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	041b      	lsls	r3, r3, #16
 80064a0:	431a      	orrs	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	061b      	lsls	r3, r3, #24
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	071b      	lsls	r3, r3, #28
 80064ae:	4958      	ldr	r1, [pc, #352]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ca:	d00a      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d02e      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064e0:	d129      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80064e2:	4b4b      	ldr	r3, [pc, #300]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064e8:	0c1b      	lsrs	r3, r3, #16
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064f0:	4b47      	ldr	r3, [pc, #284]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f6:	0f1b      	lsrs	r3, r3, #28
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	019a      	lsls	r2, r3, #6
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	041b      	lsls	r3, r3, #16
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	061b      	lsls	r3, r3, #24
 8006510:	431a      	orrs	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	071b      	lsls	r3, r3, #28
 8006516:	493e      	ldr	r1, [pc, #248]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006518:	4313      	orrs	r3, r2
 800651a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800651e:	4b3c      	ldr	r3, [pc, #240]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006524:	f023 021f 	bic.w	r2, r3, #31
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	3b01      	subs	r3, #1
 800652e:	4938      	ldr	r1, [pc, #224]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d01d      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006542:	4b33      	ldr	r3, [pc, #204]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006548:	0e1b      	lsrs	r3, r3, #24
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006550:	4b2f      	ldr	r3, [pc, #188]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006556:	0f1b      	lsrs	r3, r3, #28
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	019a      	lsls	r2, r3, #6
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	041b      	lsls	r3, r3, #16
 800656a:	431a      	orrs	r2, r3
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	061b      	lsls	r3, r3, #24
 8006570:	431a      	orrs	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	071b      	lsls	r3, r3, #28
 8006576:	4926      	ldr	r1, [pc, #152]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d011      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	019a      	lsls	r2, r3, #6
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	041b      	lsls	r3, r3, #16
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	061b      	lsls	r3, r3, #24
 800659e:	431a      	orrs	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	071b      	lsls	r3, r3, #28
 80065a6:	491a      	ldr	r1, [pc, #104]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065ae:	4b18      	ldr	r3, [pc, #96]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a17      	ldr	r2, [pc, #92]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ba:	f7fd fe19 	bl	80041f0 <HAL_GetTick>
 80065be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065c0:	e008      	b.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065c2:	f7fd fe15 	bl	80041f0 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b64      	cmp	r3, #100	; 0x64
 80065ce:	d901      	bls.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e0d8      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065d4:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	f040 80ce 	bne.w	8006784 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80065e8:	4b09      	ldr	r3, [pc, #36]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a08      	ldr	r2, [pc, #32]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065f4:	f7fd fdfc 	bl	80041f0 <HAL_GetTick>
 80065f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065fa:	e00b      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065fc:	f7fd fdf8 	bl	80041f0 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b64      	cmp	r3, #100	; 0x64
 8006608:	d904      	bls.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e0bb      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800660e:	bf00      	nop
 8006610:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006614:	4b5e      	ldr	r3, [pc, #376]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800661c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006620:	d0ec      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800663e:	2b00      	cmp	r3, #0
 8006640:	d02e      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d12a      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800664a:	4b51      	ldr	r3, [pc, #324]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800664c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006650:	0c1b      	lsrs	r3, r3, #16
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006658:	4b4d      	ldr	r3, [pc, #308]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665e:	0f1b      	lsrs	r3, r3, #28
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	019a      	lsls	r2, r3, #6
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	061b      	lsls	r3, r3, #24
 8006678:	431a      	orrs	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	071b      	lsls	r3, r3, #28
 800667e:	4944      	ldr	r1, [pc, #272]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006686:	4b42      	ldr	r3, [pc, #264]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800668c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006694:	3b01      	subs	r3, #1
 8006696:	021b      	lsls	r3, r3, #8
 8006698:	493d      	ldr	r1, [pc, #244]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d022      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066b4:	d11d      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066b6:	4b36      	ldr	r3, [pc, #216]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066bc:	0e1b      	lsrs	r3, r3, #24
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80066c4:	4b32      	ldr	r3, [pc, #200]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ca:	0f1b      	lsrs	r3, r3, #28
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	019a      	lsls	r2, r3, #6
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	041b      	lsls	r3, r3, #16
 80066de:	431a      	orrs	r2, r3
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	061b      	lsls	r3, r3, #24
 80066e4:	431a      	orrs	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	071b      	lsls	r3, r3, #28
 80066ea:	4929      	ldr	r1, [pc, #164]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d028      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066fe:	4b24      	ldr	r3, [pc, #144]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006704:	0e1b      	lsrs	r3, r3, #24
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800670c:	4b20      	ldr	r3, [pc, #128]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006712:	0c1b      	lsrs	r3, r3, #16
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	019a      	lsls	r2, r3, #6
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	041b      	lsls	r3, r3, #16
 8006724:	431a      	orrs	r2, r3
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	061b      	lsls	r3, r3, #24
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	071b      	lsls	r3, r3, #28
 8006732:	4917      	ldr	r1, [pc, #92]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006734:	4313      	orrs	r3, r2
 8006736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800673a:	4b15      	ldr	r3, [pc, #84]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800673c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	4911      	ldr	r1, [pc, #68]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800674a:	4313      	orrs	r3, r2
 800674c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006750:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a0e      	ldr	r2, [pc, #56]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800675c:	f7fd fd48 	bl	80041f0 <HAL_GetTick>
 8006760:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006762:	e008      	b.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006764:	f7fd fd44 	bl	80041f0 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b64      	cmp	r3, #100	; 0x64
 8006770:	d901      	bls.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e007      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006776:	4b06      	ldr	r3, [pc, #24]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800677e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006782:	d1ef      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3720      	adds	r7, #32
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40023800 	.word	0x40023800

08006794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e049      	b.n	800683a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d106      	bne.n	80067c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f841 	bl	8006842 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f000 fa00 	bl	8006bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
	...

08006858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	d001      	beq.n	8006870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e054      	b.n	800691a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a26      	ldr	r2, [pc, #152]	; (8006928 <HAL_TIM_Base_Start_IT+0xd0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d022      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689a:	d01d      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a22      	ldr	r2, [pc, #136]	; (800692c <HAL_TIM_Base_Start_IT+0xd4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d018      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a21      	ldr	r2, [pc, #132]	; (8006930 <HAL_TIM_Base_Start_IT+0xd8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d013      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a1f      	ldr	r2, [pc, #124]	; (8006934 <HAL_TIM_Base_Start_IT+0xdc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00e      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1e      	ldr	r2, [pc, #120]	; (8006938 <HAL_TIM_Base_Start_IT+0xe0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d009      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1c      	ldr	r2, [pc, #112]	; (800693c <HAL_TIM_Base_Start_IT+0xe4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d004      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x80>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1b      	ldr	r2, [pc, #108]	; (8006940 <HAL_TIM_Base_Start_IT+0xe8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d115      	bne.n	8006904 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	4b19      	ldr	r3, [pc, #100]	; (8006944 <HAL_TIM_Base_Start_IT+0xec>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b06      	cmp	r3, #6
 80068e8:	d015      	beq.n	8006916 <HAL_TIM_Base_Start_IT+0xbe>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f0:	d011      	beq.n	8006916 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0201 	orr.w	r2, r2, #1
 8006900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006902:	e008      	b.n	8006916 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e000      	b.n	8006918 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006916:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40010000 	.word	0x40010000
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40010400 	.word	0x40010400
 800693c:	40014000 	.word	0x40014000
 8006940:	40001800 	.word	0x40001800
 8006944:	00010007 	.word	0x00010007

08006948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d122      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b02      	cmp	r3, #2
 800696a:	d11b      	bne.n	80069a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0202 	mvn.w	r2, #2
 8006974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f905 	bl	8006b9a <HAL_TIM_IC_CaptureCallback>
 8006990:	e005      	b.n	800699e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f8f7 	bl	8006b86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f908 	bl	8006bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d122      	bne.n	80069f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d11b      	bne.n	80069f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0204 	mvn.w	r2, #4
 80069c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f8db 	bl	8006b9a <HAL_TIM_IC_CaptureCallback>
 80069e4:	e005      	b.n	80069f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f8cd 	bl	8006b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f8de 	bl	8006bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d122      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d11b      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0208 	mvn.w	r2, #8
 8006a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2204      	movs	r2, #4
 8006a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8b1 	bl	8006b9a <HAL_TIM_IC_CaptureCallback>
 8006a38:	e005      	b.n	8006a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f8a3 	bl	8006b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f8b4 	bl	8006bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	2b10      	cmp	r3, #16
 8006a58:	d122      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b10      	cmp	r3, #16
 8006a66:	d11b      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0210 	mvn.w	r2, #16
 8006a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2208      	movs	r2, #8
 8006a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f887 	bl	8006b9a <HAL_TIM_IC_CaptureCallback>
 8006a8c:	e005      	b.n	8006a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f879 	bl	8006b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f88a 	bl	8006bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d10e      	bne.n	8006acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d107      	bne.n	8006acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0201 	mvn.w	r2, #1
 8006ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fd f8fa 	bl	8003cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad6:	2b80      	cmp	r3, #128	; 0x80
 8006ad8:	d10e      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae4:	2b80      	cmp	r3, #128	; 0x80
 8006ae6:	d107      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f91a 	bl	8006d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b06:	d10e      	bne.n	8006b26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	2b80      	cmp	r3, #128	; 0x80
 8006b14:	d107      	bne.n	8006b26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 f90d 	bl	8006d40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b30:	2b40      	cmp	r3, #64	; 0x40
 8006b32:	d10e      	bne.n	8006b52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3e:	2b40      	cmp	r3, #64	; 0x40
 8006b40:	d107      	bne.n	8006b52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f838 	bl	8006bc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d10e      	bne.n	8006b7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d107      	bne.n	8006b7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f06f 0220 	mvn.w	r2, #32
 8006b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f8cd 	bl	8006d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
	...

08006bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a40      	ldr	r2, [pc, #256]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf6:	d00f      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a3d      	ldr	r2, [pc, #244]	; (8006cf0 <TIM_Base_SetConfig+0x118>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00b      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a3c      	ldr	r2, [pc, #240]	; (8006cf4 <TIM_Base_SetConfig+0x11c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d007      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a3b      	ldr	r2, [pc, #236]	; (8006cf8 <TIM_Base_SetConfig+0x120>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a3a      	ldr	r2, [pc, #232]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d108      	bne.n	8006c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a2f      	ldr	r2, [pc, #188]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d02b      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c38:	d027      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a2c      	ldr	r2, [pc, #176]	; (8006cf0 <TIM_Base_SetConfig+0x118>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d023      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a2b      	ldr	r2, [pc, #172]	; (8006cf4 <TIM_Base_SetConfig+0x11c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d01f      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a2a      	ldr	r2, [pc, #168]	; (8006cf8 <TIM_Base_SetConfig+0x120>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01b      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a29      	ldr	r2, [pc, #164]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d017      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a28      	ldr	r2, [pc, #160]	; (8006d00 <TIM_Base_SetConfig+0x128>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d013      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a27      	ldr	r2, [pc, #156]	; (8006d04 <TIM_Base_SetConfig+0x12c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00f      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a26      	ldr	r2, [pc, #152]	; (8006d08 <TIM_Base_SetConfig+0x130>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00b      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a25      	ldr	r2, [pc, #148]	; (8006d0c <TIM_Base_SetConfig+0x134>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d007      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a24      	ldr	r2, [pc, #144]	; (8006d10 <TIM_Base_SetConfig+0x138>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d003      	beq.n	8006c8a <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a23      	ldr	r2, [pc, #140]	; (8006d14 <TIM_Base_SetConfig+0x13c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d108      	bne.n	8006c9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <TIM_Base_SetConfig+0x114>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_Base_SetConfig+0xf8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <TIM_Base_SetConfig+0x124>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d103      	bne.n	8006cd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	615a      	str	r2, [r3, #20]
}
 8006cde:	bf00      	nop
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00
 8006cfc:	40010400 	.word	0x40010400
 8006d00:	40014000 	.word	0x40014000
 8006d04:	40014400 	.word	0x40014400
 8006d08:	40014800 	.word	0x40014800
 8006d0c:	40001800 	.word	0x40001800
 8006d10:	40001c00 	.word	0x40001c00
 8006d14:	40002000 	.word	0x40002000

08006d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e040      	b.n	8006de8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fd f858 	bl	8003e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2224      	movs	r2, #36	; 0x24
 8006d80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0201 	bic.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f82c 	bl	8006df0 <UART_SetConfig>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d101      	bne.n	8006da2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e022      	b.n	8006de8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa82 	bl	80072b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fb09 	bl	80073f8 <UART_CheckIdleState>
 8006de6:	4603      	mov	r3, r0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4ba7      	ldr	r3, [pc, #668]	; (80070b8 <UART_SetConfig+0x2c8>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	6979      	ldr	r1, [r7, #20]
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a1b      	ldr	r3, [r3, #32]
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a95      	ldr	r2, [pc, #596]	; (80070bc <UART_SetConfig+0x2cc>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d120      	bne.n	8006eae <UART_SetConfig+0xbe>
 8006e6c:	4b94      	ldr	r3, [pc, #592]	; (80070c0 <UART_SetConfig+0x2d0>)
 8006e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d816      	bhi.n	8006ea8 <UART_SetConfig+0xb8>
 8006e7a:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <UART_SetConfig+0x90>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006e91 	.word	0x08006e91
 8006e84:	08006e9d 	.word	0x08006e9d
 8006e88:	08006e97 	.word	0x08006e97
 8006e8c:	08006ea3 	.word	0x08006ea3
 8006e90:	2301      	movs	r3, #1
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e14f      	b.n	8007136 <UART_SetConfig+0x346>
 8006e96:	2302      	movs	r3, #2
 8006e98:	77fb      	strb	r3, [r7, #31]
 8006e9a:	e14c      	b.n	8007136 <UART_SetConfig+0x346>
 8006e9c:	2304      	movs	r3, #4
 8006e9e:	77fb      	strb	r3, [r7, #31]
 8006ea0:	e149      	b.n	8007136 <UART_SetConfig+0x346>
 8006ea2:	2308      	movs	r3, #8
 8006ea4:	77fb      	strb	r3, [r7, #31]
 8006ea6:	e146      	b.n	8007136 <UART_SetConfig+0x346>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	77fb      	strb	r3, [r7, #31]
 8006eac:	e143      	b.n	8007136 <UART_SetConfig+0x346>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a84      	ldr	r2, [pc, #528]	; (80070c4 <UART_SetConfig+0x2d4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d132      	bne.n	8006f1e <UART_SetConfig+0x12e>
 8006eb8:	4b81      	ldr	r3, [pc, #516]	; (80070c0 <UART_SetConfig+0x2d0>)
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebe:	f003 030c 	and.w	r3, r3, #12
 8006ec2:	2b0c      	cmp	r3, #12
 8006ec4:	d828      	bhi.n	8006f18 <UART_SetConfig+0x128>
 8006ec6:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <UART_SetConfig+0xdc>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006f01 	.word	0x08006f01
 8006ed0:	08006f19 	.word	0x08006f19
 8006ed4:	08006f19 	.word	0x08006f19
 8006ed8:	08006f19 	.word	0x08006f19
 8006edc:	08006f0d 	.word	0x08006f0d
 8006ee0:	08006f19 	.word	0x08006f19
 8006ee4:	08006f19 	.word	0x08006f19
 8006ee8:	08006f19 	.word	0x08006f19
 8006eec:	08006f07 	.word	0x08006f07
 8006ef0:	08006f19 	.word	0x08006f19
 8006ef4:	08006f19 	.word	0x08006f19
 8006ef8:	08006f19 	.word	0x08006f19
 8006efc:	08006f13 	.word	0x08006f13
 8006f00:	2300      	movs	r3, #0
 8006f02:	77fb      	strb	r3, [r7, #31]
 8006f04:	e117      	b.n	8007136 <UART_SetConfig+0x346>
 8006f06:	2302      	movs	r3, #2
 8006f08:	77fb      	strb	r3, [r7, #31]
 8006f0a:	e114      	b.n	8007136 <UART_SetConfig+0x346>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	77fb      	strb	r3, [r7, #31]
 8006f10:	e111      	b.n	8007136 <UART_SetConfig+0x346>
 8006f12:	2308      	movs	r3, #8
 8006f14:	77fb      	strb	r3, [r7, #31]
 8006f16:	e10e      	b.n	8007136 <UART_SetConfig+0x346>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	77fb      	strb	r3, [r7, #31]
 8006f1c:	e10b      	b.n	8007136 <UART_SetConfig+0x346>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a69      	ldr	r2, [pc, #420]	; (80070c8 <UART_SetConfig+0x2d8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d120      	bne.n	8006f6a <UART_SetConfig+0x17a>
 8006f28:	4b65      	ldr	r3, [pc, #404]	; (80070c0 <UART_SetConfig+0x2d0>)
 8006f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f32:	2b30      	cmp	r3, #48	; 0x30
 8006f34:	d013      	beq.n	8006f5e <UART_SetConfig+0x16e>
 8006f36:	2b30      	cmp	r3, #48	; 0x30
 8006f38:	d814      	bhi.n	8006f64 <UART_SetConfig+0x174>
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d009      	beq.n	8006f52 <UART_SetConfig+0x162>
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d810      	bhi.n	8006f64 <UART_SetConfig+0x174>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <UART_SetConfig+0x15c>
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	d006      	beq.n	8006f58 <UART_SetConfig+0x168>
 8006f4a:	e00b      	b.n	8006f64 <UART_SetConfig+0x174>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	77fb      	strb	r3, [r7, #31]
 8006f50:	e0f1      	b.n	8007136 <UART_SetConfig+0x346>
 8006f52:	2302      	movs	r3, #2
 8006f54:	77fb      	strb	r3, [r7, #31]
 8006f56:	e0ee      	b.n	8007136 <UART_SetConfig+0x346>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	77fb      	strb	r3, [r7, #31]
 8006f5c:	e0eb      	b.n	8007136 <UART_SetConfig+0x346>
 8006f5e:	2308      	movs	r3, #8
 8006f60:	77fb      	strb	r3, [r7, #31]
 8006f62:	e0e8      	b.n	8007136 <UART_SetConfig+0x346>
 8006f64:	2310      	movs	r3, #16
 8006f66:	77fb      	strb	r3, [r7, #31]
 8006f68:	e0e5      	b.n	8007136 <UART_SetConfig+0x346>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a57      	ldr	r2, [pc, #348]	; (80070cc <UART_SetConfig+0x2dc>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d120      	bne.n	8006fb6 <UART_SetConfig+0x1c6>
 8006f74:	4b52      	ldr	r3, [pc, #328]	; (80070c0 <UART_SetConfig+0x2d0>)
 8006f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f80:	d013      	beq.n	8006faa <UART_SetConfig+0x1ba>
 8006f82:	2bc0      	cmp	r3, #192	; 0xc0
 8006f84:	d814      	bhi.n	8006fb0 <UART_SetConfig+0x1c0>
 8006f86:	2b80      	cmp	r3, #128	; 0x80
 8006f88:	d009      	beq.n	8006f9e <UART_SetConfig+0x1ae>
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d810      	bhi.n	8006fb0 <UART_SetConfig+0x1c0>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <UART_SetConfig+0x1a8>
 8006f92:	2b40      	cmp	r3, #64	; 0x40
 8006f94:	d006      	beq.n	8006fa4 <UART_SetConfig+0x1b4>
 8006f96:	e00b      	b.n	8006fb0 <UART_SetConfig+0x1c0>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e0cb      	b.n	8007136 <UART_SetConfig+0x346>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e0c8      	b.n	8007136 <UART_SetConfig+0x346>
 8006fa4:	2304      	movs	r3, #4
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e0c5      	b.n	8007136 <UART_SetConfig+0x346>
 8006faa:	2308      	movs	r3, #8
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e0c2      	b.n	8007136 <UART_SetConfig+0x346>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e0bf      	b.n	8007136 <UART_SetConfig+0x346>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a45      	ldr	r2, [pc, #276]	; (80070d0 <UART_SetConfig+0x2e0>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d125      	bne.n	800700c <UART_SetConfig+0x21c>
 8006fc0:	4b3f      	ldr	r3, [pc, #252]	; (80070c0 <UART_SetConfig+0x2d0>)
 8006fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fce:	d017      	beq.n	8007000 <UART_SetConfig+0x210>
 8006fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd4:	d817      	bhi.n	8007006 <UART_SetConfig+0x216>
 8006fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fda:	d00b      	beq.n	8006ff4 <UART_SetConfig+0x204>
 8006fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe0:	d811      	bhi.n	8007006 <UART_SetConfig+0x216>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <UART_SetConfig+0x1fe>
 8006fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fea:	d006      	beq.n	8006ffa <UART_SetConfig+0x20a>
 8006fec:	e00b      	b.n	8007006 <UART_SetConfig+0x216>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	77fb      	strb	r3, [r7, #31]
 8006ff2:	e0a0      	b.n	8007136 <UART_SetConfig+0x346>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	77fb      	strb	r3, [r7, #31]
 8006ff8:	e09d      	b.n	8007136 <UART_SetConfig+0x346>
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	e09a      	b.n	8007136 <UART_SetConfig+0x346>
 8007000:	2308      	movs	r3, #8
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e097      	b.n	8007136 <UART_SetConfig+0x346>
 8007006:	2310      	movs	r3, #16
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e094      	b.n	8007136 <UART_SetConfig+0x346>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a30      	ldr	r2, [pc, #192]	; (80070d4 <UART_SetConfig+0x2e4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d125      	bne.n	8007062 <UART_SetConfig+0x272>
 8007016:	4b2a      	ldr	r3, [pc, #168]	; (80070c0 <UART_SetConfig+0x2d0>)
 8007018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007024:	d017      	beq.n	8007056 <UART_SetConfig+0x266>
 8007026:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800702a:	d817      	bhi.n	800705c <UART_SetConfig+0x26c>
 800702c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007030:	d00b      	beq.n	800704a <UART_SetConfig+0x25a>
 8007032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007036:	d811      	bhi.n	800705c <UART_SetConfig+0x26c>
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <UART_SetConfig+0x254>
 800703c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007040:	d006      	beq.n	8007050 <UART_SetConfig+0x260>
 8007042:	e00b      	b.n	800705c <UART_SetConfig+0x26c>
 8007044:	2301      	movs	r3, #1
 8007046:	77fb      	strb	r3, [r7, #31]
 8007048:	e075      	b.n	8007136 <UART_SetConfig+0x346>
 800704a:	2302      	movs	r3, #2
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e072      	b.n	8007136 <UART_SetConfig+0x346>
 8007050:	2304      	movs	r3, #4
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e06f      	b.n	8007136 <UART_SetConfig+0x346>
 8007056:	2308      	movs	r3, #8
 8007058:	77fb      	strb	r3, [r7, #31]
 800705a:	e06c      	b.n	8007136 <UART_SetConfig+0x346>
 800705c:	2310      	movs	r3, #16
 800705e:	77fb      	strb	r3, [r7, #31]
 8007060:	e069      	b.n	8007136 <UART_SetConfig+0x346>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1c      	ldr	r2, [pc, #112]	; (80070d8 <UART_SetConfig+0x2e8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d137      	bne.n	80070dc <UART_SetConfig+0x2ec>
 800706c:	4b14      	ldr	r3, [pc, #80]	; (80070c0 <UART_SetConfig+0x2d0>)
 800706e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007072:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007076:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800707a:	d017      	beq.n	80070ac <UART_SetConfig+0x2bc>
 800707c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007080:	d817      	bhi.n	80070b2 <UART_SetConfig+0x2c2>
 8007082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007086:	d00b      	beq.n	80070a0 <UART_SetConfig+0x2b0>
 8007088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800708c:	d811      	bhi.n	80070b2 <UART_SetConfig+0x2c2>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <UART_SetConfig+0x2aa>
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007096:	d006      	beq.n	80070a6 <UART_SetConfig+0x2b6>
 8007098:	e00b      	b.n	80070b2 <UART_SetConfig+0x2c2>
 800709a:	2300      	movs	r3, #0
 800709c:	77fb      	strb	r3, [r7, #31]
 800709e:	e04a      	b.n	8007136 <UART_SetConfig+0x346>
 80070a0:	2302      	movs	r3, #2
 80070a2:	77fb      	strb	r3, [r7, #31]
 80070a4:	e047      	b.n	8007136 <UART_SetConfig+0x346>
 80070a6:	2304      	movs	r3, #4
 80070a8:	77fb      	strb	r3, [r7, #31]
 80070aa:	e044      	b.n	8007136 <UART_SetConfig+0x346>
 80070ac:	2308      	movs	r3, #8
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	e041      	b.n	8007136 <UART_SetConfig+0x346>
 80070b2:	2310      	movs	r3, #16
 80070b4:	77fb      	strb	r3, [r7, #31]
 80070b6:	e03e      	b.n	8007136 <UART_SetConfig+0x346>
 80070b8:	efff69f3 	.word	0xefff69f3
 80070bc:	40011000 	.word	0x40011000
 80070c0:	40023800 	.word	0x40023800
 80070c4:	40004400 	.word	0x40004400
 80070c8:	40004800 	.word	0x40004800
 80070cc:	40004c00 	.word	0x40004c00
 80070d0:	40005000 	.word	0x40005000
 80070d4:	40011400 	.word	0x40011400
 80070d8:	40007800 	.word	0x40007800
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a71      	ldr	r2, [pc, #452]	; (80072a8 <UART_SetConfig+0x4b8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d125      	bne.n	8007132 <UART_SetConfig+0x342>
 80070e6:	4b71      	ldr	r3, [pc, #452]	; (80072ac <UART_SetConfig+0x4bc>)
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070f4:	d017      	beq.n	8007126 <UART_SetConfig+0x336>
 80070f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070fa:	d817      	bhi.n	800712c <UART_SetConfig+0x33c>
 80070fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007100:	d00b      	beq.n	800711a <UART_SetConfig+0x32a>
 8007102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007106:	d811      	bhi.n	800712c <UART_SetConfig+0x33c>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <UART_SetConfig+0x324>
 800710c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007110:	d006      	beq.n	8007120 <UART_SetConfig+0x330>
 8007112:	e00b      	b.n	800712c <UART_SetConfig+0x33c>
 8007114:	2300      	movs	r3, #0
 8007116:	77fb      	strb	r3, [r7, #31]
 8007118:	e00d      	b.n	8007136 <UART_SetConfig+0x346>
 800711a:	2302      	movs	r3, #2
 800711c:	77fb      	strb	r3, [r7, #31]
 800711e:	e00a      	b.n	8007136 <UART_SetConfig+0x346>
 8007120:	2304      	movs	r3, #4
 8007122:	77fb      	strb	r3, [r7, #31]
 8007124:	e007      	b.n	8007136 <UART_SetConfig+0x346>
 8007126:	2308      	movs	r3, #8
 8007128:	77fb      	strb	r3, [r7, #31]
 800712a:	e004      	b.n	8007136 <UART_SetConfig+0x346>
 800712c:	2310      	movs	r3, #16
 800712e:	77fb      	strb	r3, [r7, #31]
 8007130:	e001      	b.n	8007136 <UART_SetConfig+0x346>
 8007132:	2310      	movs	r3, #16
 8007134:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800713e:	d15b      	bne.n	80071f8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007140:	7ffb      	ldrb	r3, [r7, #31]
 8007142:	2b08      	cmp	r3, #8
 8007144:	d827      	bhi.n	8007196 <UART_SetConfig+0x3a6>
 8007146:	a201      	add	r2, pc, #4	; (adr r2, 800714c <UART_SetConfig+0x35c>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	08007171 	.word	0x08007171
 8007150:	08007179 	.word	0x08007179
 8007154:	08007181 	.word	0x08007181
 8007158:	08007197 	.word	0x08007197
 800715c:	08007187 	.word	0x08007187
 8007160:	08007197 	.word	0x08007197
 8007164:	08007197 	.word	0x08007197
 8007168:	08007197 	.word	0x08007197
 800716c:	0800718f 	.word	0x0800718f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007170:	f7fe fe8e 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 8007174:	61b8      	str	r0, [r7, #24]
        break;
 8007176:	e013      	b.n	80071a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007178:	f7fe fe9e 	bl	8005eb8 <HAL_RCC_GetPCLK2Freq>
 800717c:	61b8      	str	r0, [r7, #24]
        break;
 800717e:	e00f      	b.n	80071a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007180:	4b4b      	ldr	r3, [pc, #300]	; (80072b0 <UART_SetConfig+0x4c0>)
 8007182:	61bb      	str	r3, [r7, #24]
        break;
 8007184:	e00c      	b.n	80071a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007186:	f7fe fd95 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 800718a:	61b8      	str	r0, [r7, #24]
        break;
 800718c:	e008      	b.n	80071a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800718e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007192:	61bb      	str	r3, [r7, #24]
        break;
 8007194:	e004      	b.n	80071a0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	77bb      	strb	r3, [r7, #30]
        break;
 800719e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d074      	beq.n	8007290 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	005a      	lsls	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	085b      	lsrs	r3, r3, #1
 80071b0:	441a      	add	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b0f      	cmp	r3, #15
 80071c2:	d916      	bls.n	80071f2 <UART_SetConfig+0x402>
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ca:	d212      	bcs.n	80071f2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	f023 030f 	bic.w	r3, r3, #15
 80071d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	085b      	lsrs	r3, r3, #1
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	89fb      	ldrh	r3, [r7, #14]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	89fa      	ldrh	r2, [r7, #14]
 80071ee:	60da      	str	r2, [r3, #12]
 80071f0:	e04e      	b.n	8007290 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	77bb      	strb	r3, [r7, #30]
 80071f6:	e04b      	b.n	8007290 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071f8:	7ffb      	ldrb	r3, [r7, #31]
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	d827      	bhi.n	800724e <UART_SetConfig+0x45e>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <UART_SetConfig+0x414>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007229 	.word	0x08007229
 8007208:	08007231 	.word	0x08007231
 800720c:	08007239 	.word	0x08007239
 8007210:	0800724f 	.word	0x0800724f
 8007214:	0800723f 	.word	0x0800723f
 8007218:	0800724f 	.word	0x0800724f
 800721c:	0800724f 	.word	0x0800724f
 8007220:	0800724f 	.word	0x0800724f
 8007224:	08007247 	.word	0x08007247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007228:	f7fe fe32 	bl	8005e90 <HAL_RCC_GetPCLK1Freq>
 800722c:	61b8      	str	r0, [r7, #24]
        break;
 800722e:	e013      	b.n	8007258 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007230:	f7fe fe42 	bl	8005eb8 <HAL_RCC_GetPCLK2Freq>
 8007234:	61b8      	str	r0, [r7, #24]
        break;
 8007236:	e00f      	b.n	8007258 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007238:	4b1d      	ldr	r3, [pc, #116]	; (80072b0 <UART_SetConfig+0x4c0>)
 800723a:	61bb      	str	r3, [r7, #24]
        break;
 800723c:	e00c      	b.n	8007258 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800723e:	f7fe fd39 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8007242:	61b8      	str	r0, [r7, #24]
        break;
 8007244:	e008      	b.n	8007258 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800724a:	61bb      	str	r3, [r7, #24]
        break;
 800724c:	e004      	b.n	8007258 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	77bb      	strb	r3, [r7, #30]
        break;
 8007256:	bf00      	nop
    }

    if (pclk != 0U)
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d018      	beq.n	8007290 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	085a      	lsrs	r2, r3, #1
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	441a      	add	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007270:	b29b      	uxth	r3, r3
 8007272:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	2b0f      	cmp	r3, #15
 8007278:	d908      	bls.n	800728c <UART_SetConfig+0x49c>
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007280:	d204      	bcs.n	800728c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	60da      	str	r2, [r3, #12]
 800728a:	e001      	b.n	8007290 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800729c:	7fbb      	ldrb	r3, [r7, #30]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3720      	adds	r7, #32
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	40007c00 	.word	0x40007c00
 80072ac:	40023800 	.word	0x40023800
 80072b0:	00f42400 	.word	0x00f42400

080072b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00a      	beq.n	80072de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00a      	beq.n	8007366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00a      	beq.n	8007388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01a      	beq.n	80073ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073b2:	d10a      	bne.n	80073ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	605a      	str	r2, [r3, #4]
  }
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af02      	add	r7, sp, #8
 80073fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007408:	f7fc fef2 	bl	80041f0 <HAL_GetTick>
 800740c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0308 	and.w	r3, r3, #8
 8007418:	2b08      	cmp	r3, #8
 800741a:	d10e      	bne.n	800743a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800741c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f82d 	bl	800748a <UART_WaitOnFlagUntilTimeout>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e023      	b.n	8007482 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b04      	cmp	r3, #4
 8007446:	d10e      	bne.n	8007466 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f817 	bl	800748a <UART_WaitOnFlagUntilTimeout>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e00d      	b.n	8007482 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	603b      	str	r3, [r7, #0]
 8007496:	4613      	mov	r3, r2
 8007498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800749a:	e05e      	b.n	800755a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a2:	d05a      	beq.n	800755a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a4:	f7fc fea4 	bl	80041f0 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d302      	bcc.n	80074ba <UART_WaitOnFlagUntilTimeout+0x30>
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d11b      	bne.n	80074f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0201 	bic.w	r2, r2, #1
 80074d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2220      	movs	r2, #32
 80074de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e043      	b.n	800757a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d02c      	beq.n	800755a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800750a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800750e:	d124      	bne.n	800755a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007518:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007528:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0201 	bic.w	r2, r2, #1
 8007538:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2220      	movs	r2, #32
 800753e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2220      	movs	r2, #32
 800754a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e00f      	b.n	800757a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69da      	ldr	r2, [r3, #28]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4013      	ands	r3, r2
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	429a      	cmp	r2, r3
 8007568:	bf0c      	ite	eq
 800756a:	2301      	moveq	r3, #1
 800756c:	2300      	movne	r3, #0
 800756e:	b2db      	uxtb	r3, r3
 8007570:	461a      	mov	r2, r3
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	429a      	cmp	r2, r3
 8007576:	d091      	beq.n	800749c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007582:	b480      	push	{r7}
 8007584:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007586:	bf00      	nop
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007596:	f3ef 8305 	mrs	r3, IPSR
 800759a:	60bb      	str	r3, [r7, #8]
  return(result);
 800759c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10f      	bne.n	80075c2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a2:	f3ef 8310 	mrs	r3, PRIMASK
 80075a6:	607b      	str	r3, [r7, #4]
  return(result);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d105      	bne.n	80075ba <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075ae:	f3ef 8311 	mrs	r3, BASEPRI
 80075b2:	603b      	str	r3, [r7, #0]
  return(result);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d007      	beq.n	80075ca <osKernelInitialize+0x3a>
 80075ba:	4b0e      	ldr	r3, [pc, #56]	; (80075f4 <osKernelInitialize+0x64>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d103      	bne.n	80075ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80075c2:	f06f 0305 	mvn.w	r3, #5
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e00c      	b.n	80075e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80075ca:	4b0a      	ldr	r3, [pc, #40]	; (80075f4 <osKernelInitialize+0x64>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80075d2:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <osKernelInitialize+0x64>)
 80075d4:	2201      	movs	r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80075d8:	2300      	movs	r3, #0
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	e002      	b.n	80075e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80075de:	f04f 33ff 	mov.w	r3, #4294967295
 80075e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80075e4:	68fb      	ldr	r3, [r7, #12]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000154 	.word	0x20000154

080075f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075fe:	f3ef 8305 	mrs	r3, IPSR
 8007602:	60bb      	str	r3, [r7, #8]
  return(result);
 8007604:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10f      	bne.n	800762a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800760a:	f3ef 8310 	mrs	r3, PRIMASK
 800760e:	607b      	str	r3, [r7, #4]
  return(result);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d105      	bne.n	8007622 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007616:	f3ef 8311 	mrs	r3, BASEPRI
 800761a:	603b      	str	r3, [r7, #0]
  return(result);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d007      	beq.n	8007632 <osKernelStart+0x3a>
 8007622:	4b0f      	ldr	r3, [pc, #60]	; (8007660 <osKernelStart+0x68>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b02      	cmp	r3, #2
 8007628:	d103      	bne.n	8007632 <osKernelStart+0x3a>
    stat = osErrorISR;
 800762a:	f06f 0305 	mvn.w	r3, #5
 800762e:	60fb      	str	r3, [r7, #12]
 8007630:	e010      	b.n	8007654 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007632:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <osKernelStart+0x68>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d109      	bne.n	800764e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800763a:	f7ff ffa2 	bl	8007582 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800763e:	4b08      	ldr	r3, [pc, #32]	; (8007660 <osKernelStart+0x68>)
 8007640:	2202      	movs	r2, #2
 8007642:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007644:	f001 f8ee 	bl	8008824 <vTaskStartScheduler>
      stat = osOK;
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	e002      	b.n	8007654 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800764e:	f04f 33ff 	mov.w	r3, #4294967295
 8007652:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007654:	68fb      	ldr	r3, [r7, #12]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000154 	.word	0x20000154

08007664 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007664:	b580      	push	{r7, lr}
 8007666:	b090      	sub	sp, #64	; 0x40
 8007668:	af04      	add	r7, sp, #16
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007670:	2300      	movs	r3, #0
 8007672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007674:	f3ef 8305 	mrs	r3, IPSR
 8007678:	61fb      	str	r3, [r7, #28]
  return(result);
 800767a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800767c:	2b00      	cmp	r3, #0
 800767e:	f040 808f 	bne.w	80077a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007682:	f3ef 8310 	mrs	r3, PRIMASK
 8007686:	61bb      	str	r3, [r7, #24]
  return(result);
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d105      	bne.n	800769a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800768e:	f3ef 8311 	mrs	r3, BASEPRI
 8007692:	617b      	str	r3, [r7, #20]
  return(result);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <osThreadNew+0x3e>
 800769a:	4b44      	ldr	r3, [pc, #272]	; (80077ac <osThreadNew+0x148>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d07e      	beq.n	80077a0 <osThreadNew+0x13c>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d07b      	beq.n	80077a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80076a8:	2380      	movs	r3, #128	; 0x80
 80076aa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80076ac:	2318      	movs	r3, #24
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80076b0:	2300      	movs	r3, #0
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80076b4:	f04f 33ff 	mov.w	r3, #4294967295
 80076b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d045      	beq.n	800774c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <osThreadNew+0x6a>
        name = attr->name;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d008      	beq.n	80076f4 <osThreadNew+0x90>
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	2b38      	cmp	r3, #56	; 0x38
 80076e6:	d805      	bhi.n	80076f4 <osThreadNew+0x90>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <osThreadNew+0x94>
        return (NULL);
 80076f4:	2300      	movs	r3, #0
 80076f6:	e054      	b.n	80077a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	089b      	lsrs	r3, r3, #2
 8007706:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00e      	beq.n	800772e <osThreadNew+0xca>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	2bbf      	cmp	r3, #191	; 0xbf
 8007716:	d90a      	bls.n	800772e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800771c:	2b00      	cmp	r3, #0
 800771e:	d006      	beq.n	800772e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <osThreadNew+0xca>
        mem = 1;
 8007728:	2301      	movs	r3, #1
 800772a:	623b      	str	r3, [r7, #32]
 800772c:	e010      	b.n	8007750 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10c      	bne.n	8007750 <osThreadNew+0xec>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d108      	bne.n	8007750 <osThreadNew+0xec>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <osThreadNew+0xec>
          mem = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	623b      	str	r3, [r7, #32]
 800774a:	e001      	b.n	8007750 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d110      	bne.n	8007778 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800775e:	9202      	str	r2, [sp, #8]
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800776a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fe11 	bl	8008394 <xTaskCreateStatic>
 8007772:	4603      	mov	r3, r0
 8007774:	613b      	str	r3, [r7, #16]
 8007776:	e013      	b.n	80077a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d110      	bne.n	80077a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	b29a      	uxth	r2, r3
 8007782:	f107 0310 	add.w	r3, r7, #16
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fe62 	bl	800845a <xTaskCreate>
 8007796:	4603      	mov	r3, r0
 8007798:	2b01      	cmp	r3, #1
 800779a:	d001      	beq.n	80077a0 <osThreadNew+0x13c>
          hTask = NULL;
 800779c:	2300      	movs	r3, #0
 800779e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80077a0:	693b      	ldr	r3, [r7, #16]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3730      	adds	r7, #48	; 0x30
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000154 	.word	0x20000154

080077b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4a07      	ldr	r2, [pc, #28]	; (80077dc <vApplicationGetIdleTaskMemory+0x2c>)
 80077c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	4a06      	ldr	r2, [pc, #24]	; (80077e0 <vApplicationGetIdleTaskMemory+0x30>)
 80077c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2280      	movs	r2, #128	; 0x80
 80077cc:	601a      	str	r2, [r3, #0]
}
 80077ce:	bf00      	nop
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	20000158 	.word	0x20000158
 80077e0:	20000218 	.word	0x20000218

080077e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4a07      	ldr	r2, [pc, #28]	; (8007810 <vApplicationGetTimerTaskMemory+0x2c>)
 80077f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	4a06      	ldr	r2, [pc, #24]	; (8007814 <vApplicationGetTimerTaskMemory+0x30>)
 80077fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007802:	601a      	str	r2, [r3, #0]
}
 8007804:	bf00      	nop
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	20000418 	.word	0x20000418
 8007814:	200004d8 	.word	0x200004d8

08007818 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f103 0208 	add.w	r2, r3, #8
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f04f 32ff 	mov.w	r2, #4294967295
 8007830:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f103 0208 	add.w	r2, r3, #8
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f103 0208 	add.w	r2, r3, #8
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007872:	b480      	push	{r7}
 8007874:	b085      	sub	sp, #20
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	601a      	str	r2, [r3, #0]
}
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d103      	bne.n	80078da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	e00c      	b.n	80078f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3308      	adds	r3, #8
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	e002      	b.n	80078e8 <vListInsert+0x2e>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d2f6      	bcs.n	80078e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	601a      	str	r2, [r3, #0]
}
 8007920:	bf00      	nop
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6892      	ldr	r2, [r2, #8]
 8007942:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6852      	ldr	r2, [r2, #4]
 800794c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	429a      	cmp	r2, r3
 8007956:	d103      	bne.n	8007960 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	1e5a      	subs	r2, r3, #1
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10c      	bne.n	80079ae <xQueueGenericReset+0x2e>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	b672      	cpsid	i
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	b662      	cpsie	i
 80079a8:	60bb      	str	r3, [r7, #8]
}
 80079aa:	bf00      	nop
 80079ac:	e7fe      	b.n	80079ac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80079ae:	f002 f925 	bl	8009bfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079be:	fb01 f303 	mul.w	r3, r1, r3
 80079c2:	441a      	add	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079de:	3b01      	subs	r3, #1
 80079e0:	68f9      	ldr	r1, [r7, #12]
 80079e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079e4:	fb01 f303 	mul.w	r3, r1, r3
 80079e8:	441a      	add	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	22ff      	movs	r2, #255	; 0xff
 80079f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	22ff      	movs	r2, #255	; 0xff
 80079fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d114      	bne.n	8007a2e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01a      	beq.n	8007a42 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3310      	adds	r3, #16
 8007a10:	4618      	mov	r0, r3
 8007a12:	f001 f9dd 	bl	8008dd0 <xTaskRemoveFromEventList>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d012      	beq.n	8007a42 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a1c:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <xQueueGenericReset+0xd0>)
 8007a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	e009      	b.n	8007a42 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3310      	adds	r3, #16
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff fef0 	bl	8007818 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3324      	adds	r3, #36	; 0x24
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff feeb 	bl	8007818 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a42:	f002 f90f 	bl	8009c64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a46:	2301      	movs	r3, #1
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08e      	sub	sp, #56	; 0x38
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10c      	bne.n	8007a82 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	b672      	cpsid	i
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	b662      	cpsie	i
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a7e:	bf00      	nop
 8007a80:	e7fe      	b.n	8007a80 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10c      	bne.n	8007aa2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8c:	b672      	cpsid	i
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	b662      	cpsie	i
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <xQueueGenericCreateStatic+0x5a>
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <xQueueGenericCreateStatic+0x5e>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <xQueueGenericCreateStatic+0x60>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10c      	bne.n	8007ad2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	b672      	cpsid	i
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	b662      	cpsie	i
 8007acc:	623b      	str	r3, [r7, #32]
}
 8007ace:	bf00      	nop
 8007ad0:	e7fe      	b.n	8007ad0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d102      	bne.n	8007ade <xQueueGenericCreateStatic+0x8a>
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <xQueueGenericCreateStatic+0x8e>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <xQueueGenericCreateStatic+0x90>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10c      	bne.n	8007b02 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	b672      	cpsid	i
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	b662      	cpsie	i
 8007afc:	61fb      	str	r3, [r7, #28]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b02:	2350      	movs	r3, #80	; 0x50
 8007b04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b50      	cmp	r3, #80	; 0x50
 8007b0a:	d00c      	beq.n	8007b26 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	b672      	cpsid	i
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	b662      	cpsie	i
 8007b20:	61bb      	str	r3, [r7, #24]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00d      	beq.n	8007b4e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	4613      	mov	r3, r2
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	68b9      	ldr	r1, [r7, #8]
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 f805 	bl	8007b58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3730      	adds	r7, #48	; 0x30
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d103      	bne.n	8007b74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	69ba      	ldr	r2, [r7, #24]
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	e002      	b.n	8007b7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b86:	2101      	movs	r1, #1
 8007b88:	69b8      	ldr	r0, [r7, #24]
 8007b8a:	f7ff fef9 	bl	8007980 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	78fa      	ldrb	r2, [r7, #3]
 8007b92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b96:	bf00      	nop
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08e      	sub	sp, #56	; 0x38
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
 8007bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10c      	bne.n	8007bd6 <xQueueGenericSend+0x36>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	b672      	cpsid	i
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	b662      	cpsie	i
 8007bd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007bd2:	bf00      	nop
 8007bd4:	e7fe      	b.n	8007bd4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d103      	bne.n	8007be4 <xQueueGenericSend+0x44>
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <xQueueGenericSend+0x48>
 8007be4:	2301      	movs	r3, #1
 8007be6:	e000      	b.n	8007bea <xQueueGenericSend+0x4a>
 8007be8:	2300      	movs	r3, #0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10c      	bne.n	8007c08 <xQueueGenericSend+0x68>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	b672      	cpsid	i
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	b662      	cpsie	i
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d103      	bne.n	8007c16 <xQueueGenericSend+0x76>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <xQueueGenericSend+0x7a>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <xQueueGenericSend+0x7c>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10c      	bne.n	8007c3a <xQueueGenericSend+0x9a>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	b672      	cpsid	i
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	b662      	cpsie	i
 8007c34:	623b      	str	r3, [r7, #32]
}
 8007c36:	bf00      	nop
 8007c38:	e7fe      	b.n	8007c38 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c3a:	f001 fa95 	bl	8009168 <xTaskGetSchedulerState>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <xQueueGenericSend+0xaa>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <xQueueGenericSend+0xae>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e000      	b.n	8007c50 <xQueueGenericSend+0xb0>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10c      	bne.n	8007c6e <xQueueGenericSend+0xce>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	b672      	cpsid	i
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	b662      	cpsie	i
 8007c68:	61fb      	str	r3, [r7, #28]
}
 8007c6a:	bf00      	nop
 8007c6c:	e7fe      	b.n	8007c6c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c6e:	f001 ffc5 	bl	8009bfc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d302      	bcc.n	8007c84 <xQueueGenericSend+0xe4>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d129      	bne.n	8007cd8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	68b9      	ldr	r1, [r7, #8]
 8007c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c8a:	f000 fa15 	bl	80080b8 <prvCopyDataToQueue>
 8007c8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d010      	beq.n	8007cba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	3324      	adds	r3, #36	; 0x24
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f001 f897 	bl	8008dd0 <xTaskRemoveFromEventList>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d013      	beq.n	8007cd0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ca8:	4b3f      	ldr	r3, [pc, #252]	; (8007da8 <xQueueGenericSend+0x208>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	e00a      	b.n	8007cd0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d007      	beq.n	8007cd0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007cc0:	4b39      	ldr	r3, [pc, #228]	; (8007da8 <xQueueGenericSend+0x208>)
 8007cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007cd0:	f001 ffc8 	bl	8009c64 <vPortExitCritical>
				return pdPASS;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e063      	b.n	8007da0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d103      	bne.n	8007ce6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cde:	f001 ffc1 	bl	8009c64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e05c      	b.n	8007da0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d106      	bne.n	8007cfa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cec:	f107 0314 	add.w	r3, r7, #20
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 f8d3 	bl	8008e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cfa:	f001 ffb3 	bl	8009c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cfe:	f000 fe05 	bl	800890c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d02:	f001 ff7b 	bl	8009bfc <vPortEnterCritical>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d0c:	b25b      	sxtb	r3, r3
 8007d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d12:	d103      	bne.n	8007d1c <xQueueGenericSend+0x17c>
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d22:	b25b      	sxtb	r3, r3
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d28:	d103      	bne.n	8007d32 <xQueueGenericSend+0x192>
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d32:	f001 ff97 	bl	8009c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d36:	1d3a      	adds	r2, r7, #4
 8007d38:	f107 0314 	add.w	r3, r7, #20
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 f8c2 	bl	8008ec8 <xTaskCheckForTimeOut>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d124      	bne.n	8007d94 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d4c:	f000 faac 	bl	80082a8 <prvIsQueueFull>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d018      	beq.n	8007d88 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	3310      	adds	r3, #16
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 ffe2 	bl	8008d28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d66:	f000 fa37 	bl	80081d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d6a:	f000 fddd 	bl	8008928 <xTaskResumeAll>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f47f af7c 	bne.w	8007c6e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007d76:	4b0c      	ldr	r3, [pc, #48]	; (8007da8 <xQueueGenericSend+0x208>)
 8007d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	e772      	b.n	8007c6e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d8a:	f000 fa25 	bl	80081d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d8e:	f000 fdcb 	bl	8008928 <xTaskResumeAll>
 8007d92:	e76c      	b.n	8007c6e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d96:	f000 fa1f 	bl	80081d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d9a:	f000 fdc5 	bl	8008928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3738      	adds	r7, #56	; 0x38
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08e      	sub	sp, #56	; 0x38
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
 8007db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10c      	bne.n	8007dde <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	b672      	cpsid	i
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	b662      	cpsie	i
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <xQueueGenericSendFromISR+0x40>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <xQueueGenericSendFromISR+0x44>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <xQueueGenericSendFromISR+0x46>
 8007df0:	2300      	movs	r3, #0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10c      	bne.n	8007e10 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	b672      	cpsid	i
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	b662      	cpsie	i
 8007e0a:	623b      	str	r3, [r7, #32]
}
 8007e0c:	bf00      	nop
 8007e0e:	e7fe      	b.n	8007e0e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d103      	bne.n	8007e1e <xQueueGenericSendFromISR+0x72>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d101      	bne.n	8007e22 <xQueueGenericSendFromISR+0x76>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <xQueueGenericSendFromISR+0x78>
 8007e22:	2300      	movs	r3, #0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10c      	bne.n	8007e42 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	b672      	cpsid	i
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	b662      	cpsie	i
 8007e3c:	61fb      	str	r3, [r7, #28]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e42:	f001 ffc3 	bl	8009dcc <vPortValidateInterruptPriority>
	__asm volatile
 8007e46:	f3ef 8211 	mrs	r2, BASEPRI
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	b672      	cpsid	i
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	b662      	cpsie	i
 8007e5e:	61ba      	str	r2, [r7, #24]
 8007e60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007e62:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d302      	bcc.n	8007e78 <xQueueGenericSendFromISR+0xcc>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d12c      	bne.n	8007ed2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e88:	f000 f916 	bl	80080b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e8c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e94:	d112      	bne.n	8007ebc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d016      	beq.n	8007ecc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	3324      	adds	r3, #36	; 0x24
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 ff94 	bl	8008dd0 <xTaskRemoveFromEventList>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00e      	beq.n	8007ecc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00b      	beq.n	8007ecc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	e007      	b.n	8007ecc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ebc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	b25a      	sxtb	r2, r3
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007ed0:	e001      	b.n	8007ed6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f383 8811 	msr	BASEPRI, r3
}
 8007ee0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3738      	adds	r7, #56	; 0x38
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08c      	sub	sp, #48	; 0x30
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10c      	bne.n	8007f20 <xQueueReceive+0x34>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	b672      	cpsid	i
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	b662      	cpsie	i
 8007f1a:	623b      	str	r3, [r7, #32]
}
 8007f1c:	bf00      	nop
 8007f1e:	e7fe      	b.n	8007f1e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d103      	bne.n	8007f2e <xQueueReceive+0x42>
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <xQueueReceive+0x46>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e000      	b.n	8007f34 <xQueueReceive+0x48>
 8007f32:	2300      	movs	r3, #0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10c      	bne.n	8007f52 <xQueueReceive+0x66>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	b672      	cpsid	i
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	b662      	cpsie	i
 8007f4c:	61fb      	str	r3, [r7, #28]
}
 8007f4e:	bf00      	nop
 8007f50:	e7fe      	b.n	8007f50 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f52:	f001 f909 	bl	8009168 <xTaskGetSchedulerState>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d102      	bne.n	8007f62 <xQueueReceive+0x76>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <xQueueReceive+0x7a>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <xQueueReceive+0x7c>
 8007f66:	2300      	movs	r3, #0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10c      	bne.n	8007f86 <xQueueReceive+0x9a>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	b672      	cpsid	i
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	b662      	cpsie	i
 8007f80:	61bb      	str	r3, [r7, #24]
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f86:	f001 fe39 	bl	8009bfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d01f      	beq.n	8007fd6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f9a:	f000 f8f7 	bl	800818c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	1e5a      	subs	r2, r3, #1
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00f      	beq.n	8007fce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	3310      	adds	r3, #16
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 ff0c 	bl	8008dd0 <xTaskRemoveFromEventList>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d007      	beq.n	8007fce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fbe:	4b3d      	ldr	r3, [pc, #244]	; (80080b4 <xQueueReceive+0x1c8>)
 8007fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fce:	f001 fe49 	bl	8009c64 <vPortExitCritical>
				return pdPASS;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e069      	b.n	80080aa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fdc:	f001 fe42 	bl	8009c64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e062      	b.n	80080aa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fea:	f107 0310 	add.w	r3, r7, #16
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f000 ff54 	bl	8008e9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ff8:	f001 fe34 	bl	8009c64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ffc:	f000 fc86 	bl	800890c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008000:	f001 fdfc 	bl	8009bfc <vPortEnterCritical>
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800800a:	b25b      	sxtb	r3, r3
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d103      	bne.n	800801a <xQueueReceive+0x12e>
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008020:	b25b      	sxtb	r3, r3
 8008022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008026:	d103      	bne.n	8008030 <xQueueReceive+0x144>
 8008028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008030:	f001 fe18 	bl	8009c64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008034:	1d3a      	adds	r2, r7, #4
 8008036:	f107 0310 	add.w	r3, r7, #16
 800803a:	4611      	mov	r1, r2
 800803c:	4618      	mov	r0, r3
 800803e:	f000 ff43 	bl	8008ec8 <xTaskCheckForTimeOut>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d123      	bne.n	8008090 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800804a:	f000 f917 	bl	800827c <prvIsQueueEmpty>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d017      	beq.n	8008084 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	3324      	adds	r3, #36	; 0x24
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fe63 	bl	8008d28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008064:	f000 f8b8 	bl	80081d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008068:	f000 fc5e 	bl	8008928 <xTaskResumeAll>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d189      	bne.n	8007f86 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008072:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <xQueueReceive+0x1c8>)
 8008074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	e780      	b.n	8007f86 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008086:	f000 f8a7 	bl	80081d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800808a:	f000 fc4d 	bl	8008928 <xTaskResumeAll>
 800808e:	e77a      	b.n	8007f86 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008092:	f000 f8a1 	bl	80081d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008096:	f000 fc47 	bl	8008928 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800809a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800809c:	f000 f8ee 	bl	800827c <prvIsQueueEmpty>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f43f af6f 	beq.w	8007f86 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3730      	adds	r7, #48	; 0x30
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	e000ed04 	.word	0xe000ed04

080080b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10d      	bne.n	80080f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d14d      	bne.n	800817a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 f85e 	bl	80091a4 <xTaskPriorityDisinherit>
 80080e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	609a      	str	r2, [r3, #8]
 80080f0:	e043      	b.n	800817a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d119      	bne.n	800812c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6858      	ldr	r0, [r3, #4]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	461a      	mov	r2, r3
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	f002 ff48 	bl	800af98 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008110:	441a      	add	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	d32b      	bcc.n	800817a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	605a      	str	r2, [r3, #4]
 800812a:	e026      	b.n	800817a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	68d8      	ldr	r0, [r3, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008134:	461a      	mov	r2, r3
 8008136:	68b9      	ldr	r1, [r7, #8]
 8008138:	f002 ff2e 	bl	800af98 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	68da      	ldr	r2, [r3, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008144:	425b      	negs	r3, r3
 8008146:	441a      	add	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d207      	bcs.n	8008168 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008160:	425b      	negs	r3, r3
 8008162:	441a      	add	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b02      	cmp	r3, #2
 800816c:	d105      	bne.n	800817a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	3b01      	subs	r3, #1
 8008178:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008182:	697b      	ldr	r3, [r7, #20]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	2b00      	cmp	r3, #0
 800819c:	d018      	beq.n	80081d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	441a      	add	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68da      	ldr	r2, [r3, #12]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d303      	bcc.n	80081c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68d9      	ldr	r1, [r3, #12]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	461a      	mov	r2, r3
 80081ca:	6838      	ldr	r0, [r7, #0]
 80081cc:	f002 fee4 	bl	800af98 <memcpy>
	}
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081e0:	f001 fd0c 	bl	8009bfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081ec:	e011      	b.n	8008212 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d012      	beq.n	800821c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3324      	adds	r3, #36	; 0x24
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fde8 	bl	8008dd0 <xTaskRemoveFromEventList>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008206:	f000 fec5 	bl	8008f94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	3b01      	subs	r3, #1
 800820e:	b2db      	uxtb	r3, r3
 8008210:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008216:	2b00      	cmp	r3, #0
 8008218:	dce9      	bgt.n	80081ee <prvUnlockQueue+0x16>
 800821a:	e000      	b.n	800821e <prvUnlockQueue+0x46>
					break;
 800821c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	22ff      	movs	r2, #255	; 0xff
 8008222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008226:	f001 fd1d 	bl	8009c64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800822a:	f001 fce7 	bl	8009bfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008234:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008236:	e011      	b.n	800825c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d012      	beq.n	8008266 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3310      	adds	r3, #16
 8008244:	4618      	mov	r0, r3
 8008246:	f000 fdc3 	bl	8008dd0 <xTaskRemoveFromEventList>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008250:	f000 fea0 	bl	8008f94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	3b01      	subs	r3, #1
 8008258:	b2db      	uxtb	r3, r3
 800825a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800825c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008260:	2b00      	cmp	r3, #0
 8008262:	dce9      	bgt.n	8008238 <prvUnlockQueue+0x60>
 8008264:	e000      	b.n	8008268 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008266:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	22ff      	movs	r2, #255	; 0xff
 800826c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008270:	f001 fcf8 	bl	8009c64 <vPortExitCritical>
}
 8008274:	bf00      	nop
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008284:	f001 fcba 	bl	8009bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	2b00      	cmp	r3, #0
 800828e:	d102      	bne.n	8008296 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008290:	2301      	movs	r3, #1
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	e001      	b.n	800829a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800829a:	f001 fce3 	bl	8009c64 <vPortExitCritical>

	return xReturn;
 800829e:	68fb      	ldr	r3, [r7, #12]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082b0:	f001 fca4 	bl	8009bfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082bc:	429a      	cmp	r2, r3
 80082be:	d102      	bne.n	80082c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80082c0:	2301      	movs	r3, #1
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	e001      	b.n	80082ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082ca:	f001 fccb 	bl	8009c64 <vPortExitCritical>

	return xReturn;
 80082ce:	68fb      	ldr	r3, [r7, #12]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
 80082e6:	e014      	b.n	8008312 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80082e8:	4a0f      	ldr	r2, [pc, #60]	; (8008328 <vQueueAddToRegistry+0x50>)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10b      	bne.n	800830c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082f4:	490c      	ldr	r1, [pc, #48]	; (8008328 <vQueueAddToRegistry+0x50>)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082fe:	4a0a      	ldr	r2, [pc, #40]	; (8008328 <vQueueAddToRegistry+0x50>)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	4413      	add	r3, r2
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800830a:	e006      	b.n	800831a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3301      	adds	r3, #1
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b07      	cmp	r3, #7
 8008316:	d9e7      	bls.n	80082e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	20001044 	.word	0x20001044

0800832c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800833c:	f001 fc5e 	bl	8009bfc <vPortEnterCritical>
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008346:	b25b      	sxtb	r3, r3
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d103      	bne.n	8008356 <vQueueWaitForMessageRestricted+0x2a>
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800835c:	b25b      	sxtb	r3, r3
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d103      	bne.n	800836c <vQueueWaitForMessageRestricted+0x40>
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800836c:	f001 fc7a 	bl	8009c64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	2b00      	cmp	r3, #0
 8008376:	d106      	bne.n	8008386 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	3324      	adds	r3, #36	; 0x24
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fcf7 	bl	8008d74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008386:	6978      	ldr	r0, [r7, #20]
 8008388:	f7ff ff26 	bl	80081d8 <prvUnlockQueue>
	}
 800838c:	bf00      	nop
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08e      	sub	sp, #56	; 0x38
 8008398:	af04      	add	r7, sp, #16
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10c      	bne.n	80083c2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	b672      	cpsid	i
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	b662      	cpsie	i
 80083bc:	623b      	str	r3, [r7, #32]
}
 80083be:	bf00      	nop
 80083c0:	e7fe      	b.n	80083c0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10c      	bne.n	80083e2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	b672      	cpsid	i
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	b662      	cpsie	i
 80083dc:	61fb      	str	r3, [r7, #28]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083e2:	23c0      	movs	r3, #192	; 0xc0
 80083e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	2bc0      	cmp	r3, #192	; 0xc0
 80083ea:	d00c      	beq.n	8008406 <xTaskCreateStatic+0x72>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	b672      	cpsid	i
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	b662      	cpsie	i
 8008400:	61bb      	str	r3, [r7, #24]
}
 8008402:	bf00      	nop
 8008404:	e7fe      	b.n	8008404 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008406:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	2b00      	cmp	r3, #0
 800840c:	d01e      	beq.n	800844c <xTaskCreateStatic+0xb8>
 800840e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008410:	2b00      	cmp	r3, #0
 8008412:	d01b      	beq.n	800844c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800841c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	2202      	movs	r2, #2
 8008422:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008426:	2300      	movs	r3, #0
 8008428:	9303      	str	r3, [sp, #12]
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	9302      	str	r3, [sp, #8]
 800842e:	f107 0314 	add.w	r3, r7, #20
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 f850 	bl	80084e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008446:	f000 f8f9 	bl	800863c <prvAddNewTaskToReadyList>
 800844a:	e001      	b.n	8008450 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008450:	697b      	ldr	r3, [r7, #20]
	}
 8008452:	4618      	mov	r0, r3
 8008454:	3728      	adds	r7, #40	; 0x28
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800845a:	b580      	push	{r7, lr}
 800845c:	b08c      	sub	sp, #48	; 0x30
 800845e:	af04      	add	r7, sp, #16
 8008460:	60f8      	str	r0, [r7, #12]
 8008462:	60b9      	str	r1, [r7, #8]
 8008464:	603b      	str	r3, [r7, #0]
 8008466:	4613      	mov	r3, r2
 8008468:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800846a:	88fb      	ldrh	r3, [r7, #6]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4618      	mov	r0, r3
 8008470:	f7f9 f892 	bl	8001598 <pvPortMalloc>
 8008474:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00e      	beq.n	800849a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800847c:	20c0      	movs	r0, #192	; 0xc0
 800847e:	f7f9 f88b 	bl	8001598 <pvPortMalloc>
 8008482:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	631a      	str	r2, [r3, #48]	; 0x30
 8008490:	e005      	b.n	800849e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008492:	6978      	ldr	r0, [r7, #20]
 8008494:	f7f9 f88e 	bl	80015b4 <vPortFree>
 8008498:	e001      	b.n	800849e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800849a:	2300      	movs	r3, #0
 800849c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d017      	beq.n	80084d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084ac:	88fa      	ldrh	r2, [r7, #6]
 80084ae:	2300      	movs	r3, #0
 80084b0:	9303      	str	r3, [sp, #12]
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	9302      	str	r3, [sp, #8]
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	68b9      	ldr	r1, [r7, #8]
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 f80e 	bl	80084e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084c8:	69f8      	ldr	r0, [r7, #28]
 80084ca:	f000 f8b7 	bl	800863c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084ce:	2301      	movs	r3, #1
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	e002      	b.n	80084da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084d4:	f04f 33ff 	mov.w	r3, #4294967295
 80084d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084da:	69bb      	ldr	r3, [r7, #24]
	}
 80084dc:	4618      	mov	r0, r3
 80084de:	3720      	adds	r7, #32
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	461a      	mov	r2, r3
 80084fc:	21a5      	movs	r1, #165	; 0xa5
 80084fe:	f002 fd73 	bl	800afe8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800850c:	440b      	add	r3, r1
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	4413      	add	r3, r2
 8008512:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	f023 0307 	bic.w	r3, r3, #7
 800851a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	f003 0307 	and.w	r3, r3, #7
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00c      	beq.n	8008540 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852a:	b672      	cpsid	i
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	b662      	cpsie	i
 800853a:	617b      	str	r3, [r7, #20]
}
 800853c:	bf00      	nop
 800853e:	e7fe      	b.n	800853e <prvInitialiseNewTask+0x5a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01f      	beq.n	800858c <prvInitialiseNewTask+0xa8>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800854c:	2300      	movs	r3, #0
 800854e:	61fb      	str	r3, [r7, #28]
 8008550:	e012      	b.n	8008578 <prvInitialiseNewTask+0x94>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	4413      	add	r3, r2
 8008558:	7819      	ldrb	r1, [r3, #0]
 800855a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	4413      	add	r3, r2
 8008560:	3334      	adds	r3, #52	; 0x34
 8008562:	460a      	mov	r2, r1
 8008564:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	4413      	add	r3, r2
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d006      	beq.n	8008580 <prvInitialiseNewTask+0x9c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	3301      	adds	r3, #1
 8008576:	61fb      	str	r3, [r7, #28]
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	2b0f      	cmp	r3, #15
 800857c:	d9e9      	bls.n	8008552 <prvInitialiseNewTask+0x6e>
 800857e:	e000      	b.n	8008582 <prvInitialiseNewTask+0x9e>
			{
				break;
 8008580:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800858a:	e003      	b.n	8008594 <prvInitialiseNewTask+0xb0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	2b37      	cmp	r3, #55	; 0x37
 8008598:	d901      	bls.n	800859e <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800859a:	2337      	movs	r3, #55	; 0x37
 800859c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	2200      	movs	r2, #0
 80085ae:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	3304      	adds	r3, #4
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7ff f94f 	bl	8007858 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	3318      	adds	r3, #24
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff f94a 	bl	8007858 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	2200      	movs	r2, #0
 80085de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	3358      	adds	r3, #88	; 0x58
 80085ee:	2260      	movs	r2, #96	; 0x60
 80085f0:	2100      	movs	r1, #0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f002 fcf8 	bl	800afe8 <memset>
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	4a0d      	ldr	r2, [pc, #52]	; (8008630 <prvInitialiseNewTask+0x14c>)
 80085fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	4a0c      	ldr	r2, [pc, #48]	; (8008634 <prvInitialiseNewTask+0x150>)
 8008602:	661a      	str	r2, [r3, #96]	; 0x60
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	4a0c      	ldr	r2, [pc, #48]	; (8008638 <prvInitialiseNewTask+0x154>)
 8008608:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	68f9      	ldr	r1, [r7, #12]
 800860e:	69b8      	ldr	r0, [r7, #24]
 8008610:	f001 f9ea 	bl	80099e8 <pxPortInitialiseStack>
 8008614:	4602      	mov	r2, r0
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008626:	bf00      	nop
 8008628:	3720      	adds	r7, #32
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	0800be8c 	.word	0x0800be8c
 8008634:	0800beac 	.word	0x0800beac
 8008638:	0800be6c 	.word	0x0800be6c

0800863c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008644:	f001 fada 	bl	8009bfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008648:	4b2d      	ldr	r3, [pc, #180]	; (8008700 <prvAddNewTaskToReadyList+0xc4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3301      	adds	r3, #1
 800864e:	4a2c      	ldr	r2, [pc, #176]	; (8008700 <prvAddNewTaskToReadyList+0xc4>)
 8008650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008652:	4b2c      	ldr	r3, [pc, #176]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800865a:	4a2a      	ldr	r2, [pc, #168]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008660:	4b27      	ldr	r3, [pc, #156]	; (8008700 <prvAddNewTaskToReadyList+0xc4>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d110      	bne.n	800868a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008668:	f000 fcba 	bl	8008fe0 <prvInitialiseTaskLists>
 800866c:	e00d      	b.n	800868a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800866e:	4b26      	ldr	r3, [pc, #152]	; (8008708 <prvAddNewTaskToReadyList+0xcc>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d109      	bne.n	800868a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008676:	4b23      	ldr	r3, [pc, #140]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008680:	429a      	cmp	r2, r3
 8008682:	d802      	bhi.n	800868a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008684:	4a1f      	ldr	r2, [pc, #124]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800868a:	4b20      	ldr	r3, [pc, #128]	; (800870c <prvAddNewTaskToReadyList+0xd0>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3301      	adds	r3, #1
 8008690:	4a1e      	ldr	r2, [pc, #120]	; (800870c <prvAddNewTaskToReadyList+0xd0>)
 8008692:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008694:	4b1d      	ldr	r3, [pc, #116]	; (800870c <prvAddNewTaskToReadyList+0xd0>)
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a0:	4b1b      	ldr	r3, [pc, #108]	; (8008710 <prvAddNewTaskToReadyList+0xd4>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d903      	bls.n	80086b0 <prvAddNewTaskToReadyList+0x74>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	4a18      	ldr	r2, [pc, #96]	; (8008710 <prvAddNewTaskToReadyList+0xd4>)
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4a15      	ldr	r2, [pc, #84]	; (8008714 <prvAddNewTaskToReadyList+0xd8>)
 80086be:	441a      	add	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	4610      	mov	r0, r2
 80086c8:	f7ff f8d3 	bl	8007872 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086cc:	f001 faca 	bl	8009c64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086d0:	4b0d      	ldr	r3, [pc, #52]	; (8008708 <prvAddNewTaskToReadyList+0xcc>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00e      	beq.n	80086f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086d8:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <prvAddNewTaskToReadyList+0xc8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d207      	bcs.n	80086f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <prvAddNewTaskToReadyList+0xdc>)
 80086e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086f6:	bf00      	nop
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20000dac 	.word	0x20000dac
 8008704:	200008d8 	.word	0x200008d8
 8008708:	20000db8 	.word	0x20000db8
 800870c:	20000dc8 	.word	0x20000dc8
 8008710:	20000db4 	.word	0x20000db4
 8008714:	200008dc 	.word	0x200008dc
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08a      	sub	sp, #40	; 0x28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008726:	2300      	movs	r3, #0
 8008728:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10c      	bne.n	800874a <vTaskDelayUntil+0x2e>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	b672      	cpsid	i
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	b662      	cpsie	i
 8008744:	617b      	str	r3, [r7, #20]
}
 8008746:	bf00      	nop
 8008748:	e7fe      	b.n	8008748 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10c      	bne.n	800876a <vTaskDelayUntil+0x4e>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	b672      	cpsid	i
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	b662      	cpsie	i
 8008764:	613b      	str	r3, [r7, #16]
}
 8008766:	bf00      	nop
 8008768:	e7fe      	b.n	8008768 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800876a:	4b2b      	ldr	r3, [pc, #172]	; (8008818 <vTaskDelayUntil+0xfc>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00c      	beq.n	800878c <vTaskDelayUntil+0x70>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	b672      	cpsid	i
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	b662      	cpsie	i
 8008786:	60fb      	str	r3, [r7, #12]
}
 8008788:	bf00      	nop
 800878a:	e7fe      	b.n	800878a <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800878c:	f000 f8be 	bl	800890c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008790:	4b22      	ldr	r3, [pc, #136]	; (800881c <vTaskDelayUntil+0x100>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	4413      	add	r3, r2
 800879e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6a3a      	ldr	r2, [r7, #32]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d20b      	bcs.n	80087c2 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d211      	bcs.n	80087d8 <vTaskDelayUntil+0xbc>
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d90d      	bls.n	80087d8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80087bc:	2301      	movs	r3, #1
 80087be:	627b      	str	r3, [r7, #36]	; 0x24
 80087c0:	e00a      	b.n	80087d8 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d303      	bcc.n	80087d4 <vTaskDelayUntil+0xb8>
 80087cc:	69fa      	ldr	r2, [r7, #28]
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d901      	bls.n	80087d8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80087d4:	2301      	movs	r3, #1
 80087d6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d006      	beq.n	80087f2 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 fd4b 	bl	8009288 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80087f2:	f000 f899 	bl	8008928 <xTaskResumeAll>
 80087f6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d107      	bne.n	800880e <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 80087fe:	4b08      	ldr	r3, [pc, #32]	; (8008820 <vTaskDelayUntil+0x104>)
 8008800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800880e:	bf00      	nop
 8008810:	3728      	adds	r7, #40	; 0x28
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	20000dd4 	.word	0x20000dd4
 800881c:	20000db0 	.word	0x20000db0
 8008820:	e000ed04 	.word	0xe000ed04

08008824 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08a      	sub	sp, #40	; 0x28
 8008828:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800882a:	2300      	movs	r3, #0
 800882c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800882e:	2300      	movs	r3, #0
 8008830:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008832:	463a      	mov	r2, r7
 8008834:	1d39      	adds	r1, r7, #4
 8008836:	f107 0308 	add.w	r3, r7, #8
 800883a:	4618      	mov	r0, r3
 800883c:	f7fe ffb8 	bl	80077b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	9202      	str	r2, [sp, #8]
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	2300      	movs	r3, #0
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	2300      	movs	r3, #0
 8008850:	460a      	mov	r2, r1
 8008852:	4926      	ldr	r1, [pc, #152]	; (80088ec <vTaskStartScheduler+0xc8>)
 8008854:	4826      	ldr	r0, [pc, #152]	; (80088f0 <vTaskStartScheduler+0xcc>)
 8008856:	f7ff fd9d 	bl	8008394 <xTaskCreateStatic>
 800885a:	4603      	mov	r3, r0
 800885c:	4a25      	ldr	r2, [pc, #148]	; (80088f4 <vTaskStartScheduler+0xd0>)
 800885e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008860:	4b24      	ldr	r3, [pc, #144]	; (80088f4 <vTaskStartScheduler+0xd0>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008868:	2301      	movs	r3, #1
 800886a:	617b      	str	r3, [r7, #20]
 800886c:	e001      	b.n	8008872 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800886e:	2300      	movs	r3, #0
 8008870:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d102      	bne.n	800887e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008878:	f000 fd5a 	bl	8009330 <xTimerCreateTimerTask>
 800887c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d11d      	bne.n	80088c0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008888:	b672      	cpsid	i
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	b662      	cpsie	i
 8008898:	613b      	str	r3, [r7, #16]
}
 800889a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800889c:	4b16      	ldr	r3, [pc, #88]	; (80088f8 <vTaskStartScheduler+0xd4>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3358      	adds	r3, #88	; 0x58
 80088a2:	4a16      	ldr	r2, [pc, #88]	; (80088fc <vTaskStartScheduler+0xd8>)
 80088a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088a6:	4b16      	ldr	r3, [pc, #88]	; (8008900 <vTaskStartScheduler+0xdc>)
 80088a8:	f04f 32ff 	mov.w	r2, #4294967295
 80088ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088ae:	4b15      	ldr	r3, [pc, #84]	; (8008904 <vTaskStartScheduler+0xe0>)
 80088b0:	2201      	movs	r2, #1
 80088b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088b4:	4b14      	ldr	r3, [pc, #80]	; (8008908 <vTaskStartScheduler+0xe4>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088ba:	f001 f921 	bl	8009b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088be:	e010      	b.n	80088e2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c6:	d10c      	bne.n	80088e2 <vTaskStartScheduler+0xbe>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088cc:	b672      	cpsid	i
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	b662      	cpsie	i
 80088dc:	60fb      	str	r3, [r7, #12]
}
 80088de:	bf00      	nop
 80088e0:	e7fe      	b.n	80088e0 <vTaskStartScheduler+0xbc>
}
 80088e2:	bf00      	nop
 80088e4:	3718      	adds	r7, #24
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	0800bac8 	.word	0x0800bac8
 80088f0:	08008fad 	.word	0x08008fad
 80088f4:	20000dd0 	.word	0x20000dd0
 80088f8:	200008d8 	.word	0x200008d8
 80088fc:	2000001c 	.word	0x2000001c
 8008900:	20000dcc 	.word	0x20000dcc
 8008904:	20000db8 	.word	0x20000db8
 8008908:	20000db0 	.word	0x20000db0

0800890c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008910:	4b04      	ldr	r3, [pc, #16]	; (8008924 <vTaskSuspendAll+0x18>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	4a03      	ldr	r2, [pc, #12]	; (8008924 <vTaskSuspendAll+0x18>)
 8008918:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800891a:	bf00      	nop
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr
 8008924:	20000dd4 	.word	0x20000dd4

08008928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008932:	2300      	movs	r3, #0
 8008934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008936:	4b43      	ldr	r3, [pc, #268]	; (8008a44 <xTaskResumeAll+0x11c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10c      	bne.n	8008958 <xTaskResumeAll+0x30>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	b672      	cpsid	i
 8008944:	f383 8811 	msr	BASEPRI, r3
 8008948:	f3bf 8f6f 	isb	sy
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	b662      	cpsie	i
 8008952:	603b      	str	r3, [r7, #0]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008958:	f001 f950 	bl	8009bfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800895c:	4b39      	ldr	r3, [pc, #228]	; (8008a44 <xTaskResumeAll+0x11c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3b01      	subs	r3, #1
 8008962:	4a38      	ldr	r2, [pc, #224]	; (8008a44 <xTaskResumeAll+0x11c>)
 8008964:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008966:	4b37      	ldr	r3, [pc, #220]	; (8008a44 <xTaskResumeAll+0x11c>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d162      	bne.n	8008a34 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800896e:	4b36      	ldr	r3, [pc, #216]	; (8008a48 <xTaskResumeAll+0x120>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d05e      	beq.n	8008a34 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008976:	e02f      	b.n	80089d8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008978:	4b34      	ldr	r3, [pc, #208]	; (8008a4c <xTaskResumeAll+0x124>)
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3318      	adds	r3, #24
 8008984:	4618      	mov	r0, r3
 8008986:	f7fe ffd1 	bl	800792c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3304      	adds	r3, #4
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe ffcc 	bl	800792c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008998:	4b2d      	ldr	r3, [pc, #180]	; (8008a50 <xTaskResumeAll+0x128>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d903      	bls.n	80089a8 <xTaskResumeAll+0x80>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	4a2a      	ldr	r2, [pc, #168]	; (8008a50 <xTaskResumeAll+0x128>)
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ac:	4613      	mov	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4a27      	ldr	r2, [pc, #156]	; (8008a54 <xTaskResumeAll+0x12c>)
 80089b6:	441a      	add	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f7fe ff57 	bl	8007872 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c8:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <xTaskResumeAll+0x130>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d302      	bcc.n	80089d8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80089d2:	4b22      	ldr	r3, [pc, #136]	; (8008a5c <xTaskResumeAll+0x134>)
 80089d4:	2201      	movs	r2, #1
 80089d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089d8:	4b1c      	ldr	r3, [pc, #112]	; (8008a4c <xTaskResumeAll+0x124>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1cb      	bne.n	8008978 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089e6:	f000 fb9f 	bl	8009128 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80089ea:	4b1d      	ldr	r3, [pc, #116]	; (8008a60 <xTaskResumeAll+0x138>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d010      	beq.n	8008a18 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089f6:	f000 f847 	bl	8008a88 <xTaskIncrementTick>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008a00:	4b16      	ldr	r3, [pc, #88]	; (8008a5c <xTaskResumeAll+0x134>)
 8008a02:	2201      	movs	r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1f1      	bne.n	80089f6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008a12:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <xTaskResumeAll+0x138>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a18:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <xTaskResumeAll+0x134>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d009      	beq.n	8008a34 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a20:	2301      	movs	r3, #1
 8008a22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a24:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <xTaskResumeAll+0x13c>)
 8008a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a34:	f001 f916 	bl	8009c64 <vPortExitCritical>

	return xAlreadyYielded;
 8008a38:	68bb      	ldr	r3, [r7, #8]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000dd4 	.word	0x20000dd4
 8008a48:	20000dac 	.word	0x20000dac
 8008a4c:	20000d6c 	.word	0x20000d6c
 8008a50:	20000db4 	.word	0x20000db4
 8008a54:	200008dc 	.word	0x200008dc
 8008a58:	200008d8 	.word	0x200008d8
 8008a5c:	20000dc0 	.word	0x20000dc0
 8008a60:	20000dbc 	.word	0x20000dbc
 8008a64:	e000ed04 	.word	0xe000ed04

08008a68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a6e:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <xTaskGetTickCount+0x1c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a74:	687b      	ldr	r3, [r7, #4]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20000db0 	.word	0x20000db0

08008a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a92:	4b54      	ldr	r3, [pc, #336]	; (8008be4 <xTaskIncrementTick+0x15c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f040 8091 	bne.w	8008bbe <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a9c:	4b52      	ldr	r3, [pc, #328]	; (8008be8 <xTaskIncrementTick+0x160>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008aa4:	4a50      	ldr	r2, [pc, #320]	; (8008be8 <xTaskIncrementTick+0x160>)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d122      	bne.n	8008af6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ab0:	4b4e      	ldr	r3, [pc, #312]	; (8008bec <xTaskIncrementTick+0x164>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00c      	beq.n	8008ad4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	b672      	cpsid	i
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	b662      	cpsie	i
 8008ace:	603b      	str	r3, [r7, #0]
}
 8008ad0:	bf00      	nop
 8008ad2:	e7fe      	b.n	8008ad2 <xTaskIncrementTick+0x4a>
 8008ad4:	4b45      	ldr	r3, [pc, #276]	; (8008bec <xTaskIncrementTick+0x164>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	4b45      	ldr	r3, [pc, #276]	; (8008bf0 <xTaskIncrementTick+0x168>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a43      	ldr	r2, [pc, #268]	; (8008bec <xTaskIncrementTick+0x164>)
 8008ae0:	6013      	str	r3, [r2, #0]
 8008ae2:	4a43      	ldr	r2, [pc, #268]	; (8008bf0 <xTaskIncrementTick+0x168>)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	4b42      	ldr	r3, [pc, #264]	; (8008bf4 <xTaskIncrementTick+0x16c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3301      	adds	r3, #1
 8008aee:	4a41      	ldr	r2, [pc, #260]	; (8008bf4 <xTaskIncrementTick+0x16c>)
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	f000 fb19 	bl	8009128 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008af6:	4b40      	ldr	r3, [pc, #256]	; (8008bf8 <xTaskIncrementTick+0x170>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d349      	bcc.n	8008b94 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b00:	4b3a      	ldr	r3, [pc, #232]	; (8008bec <xTaskIncrementTick+0x164>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d104      	bne.n	8008b14 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b0a:	4b3b      	ldr	r3, [pc, #236]	; (8008bf8 <xTaskIncrementTick+0x170>)
 8008b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b10:	601a      	str	r2, [r3, #0]
					break;
 8008b12:	e03f      	b.n	8008b94 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b14:	4b35      	ldr	r3, [pc, #212]	; (8008bec <xTaskIncrementTick+0x164>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d203      	bcs.n	8008b34 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b2c:	4a32      	ldr	r2, [pc, #200]	; (8008bf8 <xTaskIncrementTick+0x170>)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b32:	e02f      	b.n	8008b94 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	3304      	adds	r3, #4
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe fef7 	bl	800792c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d004      	beq.n	8008b50 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	3318      	adds	r3, #24
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe feee 	bl	800792c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b54:	4b29      	ldr	r3, [pc, #164]	; (8008bfc <xTaskIncrementTick+0x174>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d903      	bls.n	8008b64 <xTaskIncrementTick+0xdc>
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	4a26      	ldr	r2, [pc, #152]	; (8008bfc <xTaskIncrementTick+0x174>)
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4a23      	ldr	r2, [pc, #140]	; (8008c00 <xTaskIncrementTick+0x178>)
 8008b72:	441a      	add	r2, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	3304      	adds	r3, #4
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	f7fe fe79 	bl	8007872 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b84:	4b1f      	ldr	r3, [pc, #124]	; (8008c04 <xTaskIncrementTick+0x17c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d3b8      	bcc.n	8008b00 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b92:	e7b5      	b.n	8008b00 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b94:	4b1b      	ldr	r3, [pc, #108]	; (8008c04 <xTaskIncrementTick+0x17c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9a:	4919      	ldr	r1, [pc, #100]	; (8008c00 <xTaskIncrementTick+0x178>)
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d901      	bls.n	8008bb0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8008bac:	2301      	movs	r3, #1
 8008bae:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8008bb0:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <xTaskIncrementTick+0x180>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d109      	bne.n	8008bcc <xTaskIncrementTick+0x144>
			{
				vApplicationTickHook();
 8008bb8:	f7fa fdf8 	bl	80037ac <vApplicationTickHook>
 8008bbc:	e006      	b.n	8008bcc <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bbe:	4b12      	ldr	r3, [pc, #72]	; (8008c08 <xTaskIncrementTick+0x180>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	4a10      	ldr	r2, [pc, #64]	; (8008c08 <xTaskIncrementTick+0x180>)
 8008bc6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8008bc8:	f7fa fdf0 	bl	80037ac <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008bcc:	4b0f      	ldr	r3, [pc, #60]	; (8008c0c <xTaskIncrementTick+0x184>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <xTaskIncrementTick+0x150>
		{
			xSwitchRequired = pdTRUE;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008bd8:	697b      	ldr	r3, [r7, #20]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000dd4 	.word	0x20000dd4
 8008be8:	20000db0 	.word	0x20000db0
 8008bec:	20000d64 	.word	0x20000d64
 8008bf0:	20000d68 	.word	0x20000d68
 8008bf4:	20000dc4 	.word	0x20000dc4
 8008bf8:	20000dcc 	.word	0x20000dcc
 8008bfc:	20000db4 	.word	0x20000db4
 8008c00:	200008dc 	.word	0x200008dc
 8008c04:	200008d8 	.word	0x200008d8
 8008c08:	20000dbc 	.word	0x20000dbc
 8008c0c:	20000dc0 	.word	0x20000dc0

08008c10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c16:	4b3e      	ldr	r3, [pc, #248]	; (8008d10 <vTaskSwitchContext+0x100>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c1e:	4b3d      	ldr	r3, [pc, #244]	; (8008d14 <vTaskSwitchContext+0x104>)
 8008c20:	2201      	movs	r2, #1
 8008c22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c24:	e06f      	b.n	8008d06 <vTaskSwitchContext+0xf6>
		xYieldPending = pdFALSE;
 8008c26:	4b3b      	ldr	r3, [pc, #236]	; (8008d14 <vTaskSwitchContext+0x104>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008c2c:	4b3a      	ldr	r3, [pc, #232]	; (8008d18 <vTaskSwitchContext+0x108>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	613b      	str	r3, [r7, #16]
 8008c34:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d111      	bne.n	8008c68 <vTaskSwitchContext+0x58>
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	3304      	adds	r3, #4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d10b      	bne.n	8008c68 <vTaskSwitchContext+0x58>
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	3308      	adds	r3, #8
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d105      	bne.n	8008c68 <vTaskSwitchContext+0x58>
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	330c      	adds	r3, #12
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d008      	beq.n	8008c7a <vTaskSwitchContext+0x6a>
 8008c68:	4b2b      	ldr	r3, [pc, #172]	; (8008d18 <vTaskSwitchContext+0x108>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	4b2a      	ldr	r3, [pc, #168]	; (8008d18 <vTaskSwitchContext+0x108>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3334      	adds	r3, #52	; 0x34
 8008c72:	4619      	mov	r1, r3
 8008c74:	4610      	mov	r0, r2
 8008c76:	f7fa fda0 	bl	80037ba <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c7a:	4b28      	ldr	r3, [pc, #160]	; (8008d1c <vTaskSwitchContext+0x10c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	e012      	b.n	8008ca8 <vTaskSwitchContext+0x98>
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10c      	bne.n	8008ca2 <vTaskSwitchContext+0x92>
	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	b672      	cpsid	i
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	b662      	cpsie	i
 8008c9c:	607b      	str	r3, [r7, #4]
}
 8008c9e:	bf00      	nop
 8008ca0:	e7fe      	b.n	8008ca0 <vTaskSwitchContext+0x90>
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	491d      	ldr	r1, [pc, #116]	; (8008d20 <vTaskSwitchContext+0x110>)
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	4613      	mov	r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d0e2      	beq.n	8008c82 <vTaskSwitchContext+0x72>
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4a16      	ldr	r2, [pc, #88]	; (8008d20 <vTaskSwitchContext+0x110>)
 8008cc8:	4413      	add	r3, r2
 8008cca:	60bb      	str	r3, [r7, #8]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d104      	bne.n	8008cec <vTaskSwitchContext+0xdc>
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	605a      	str	r2, [r3, #4]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	4a09      	ldr	r2, [pc, #36]	; (8008d18 <vTaskSwitchContext+0x108>)
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	4a09      	ldr	r2, [pc, #36]	; (8008d1c <vTaskSwitchContext+0x10c>)
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <vTaskSwitchContext+0x108>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3358      	adds	r3, #88	; 0x58
 8008d02:	4a08      	ldr	r2, [pc, #32]	; (8008d24 <vTaskSwitchContext+0x114>)
 8008d04:	6013      	str	r3, [r2, #0]
}
 8008d06:	bf00      	nop
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20000dd4 	.word	0x20000dd4
 8008d14:	20000dc0 	.word	0x20000dc0
 8008d18:	200008d8 	.word	0x200008d8
 8008d1c:	20000db4 	.word	0x20000db4
 8008d20:	200008dc 	.word	0x200008dc
 8008d24:	2000001c 	.word	0x2000001c

08008d28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10c      	bne.n	8008d52 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	b672      	cpsid	i
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	b662      	cpsie	i
 8008d4c:	60fb      	str	r3, [r7, #12]
}
 8008d4e:	bf00      	nop
 8008d50:	e7fe      	b.n	8008d50 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d52:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <vTaskPlaceOnEventList+0x48>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3318      	adds	r3, #24
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7fe fdad 	bl	80078ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d60:	2101      	movs	r1, #1
 8008d62:	6838      	ldr	r0, [r7, #0]
 8008d64:	f000 fa90 	bl	8009288 <prvAddCurrentTaskToDelayedList>
}
 8008d68:	bf00      	nop
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	200008d8 	.word	0x200008d8

08008d74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10c      	bne.n	8008da0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	b672      	cpsid	i
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	b662      	cpsie	i
 8008d9a:	617b      	str	r3, [r7, #20]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008da0:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <vTaskPlaceOnEventListRestricted+0x58>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3318      	adds	r3, #24
 8008da6:	4619      	mov	r1, r3
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7fe fd62 	bl	8007872 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008db4:	f04f 33ff 	mov.w	r3, #4294967295
 8008db8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	68b8      	ldr	r0, [r7, #8]
 8008dbe:	f000 fa63 	bl	8009288 <prvAddCurrentTaskToDelayedList>
	}
 8008dc2:	bf00      	nop
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	200008d8 	.word	0x200008d8

08008dd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10c      	bne.n	8008e00 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dea:	b672      	cpsid	i
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	b662      	cpsie	i
 8008dfa:	60fb      	str	r3, [r7, #12]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	3318      	adds	r3, #24
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fe fd91 	bl	800792c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e0a:	4b1e      	ldr	r3, [pc, #120]	; (8008e84 <xTaskRemoveFromEventList+0xb4>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d11d      	bne.n	8008e4e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3304      	adds	r3, #4
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe fd88 	bl	800792c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e20:	4b19      	ldr	r3, [pc, #100]	; (8008e88 <xTaskRemoveFromEventList+0xb8>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d903      	bls.n	8008e30 <xTaskRemoveFromEventList+0x60>
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	4a16      	ldr	r2, [pc, #88]	; (8008e88 <xTaskRemoveFromEventList+0xb8>)
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e34:	4613      	mov	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4a13      	ldr	r2, [pc, #76]	; (8008e8c <xTaskRemoveFromEventList+0xbc>)
 8008e3e:	441a      	add	r2, r3
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f7fe fd13 	bl	8007872 <vListInsertEnd>
 8008e4c:	e005      	b.n	8008e5a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	3318      	adds	r3, #24
 8008e52:	4619      	mov	r1, r3
 8008e54:	480e      	ldr	r0, [pc, #56]	; (8008e90 <xTaskRemoveFromEventList+0xc0>)
 8008e56:	f7fe fd0c 	bl	8007872 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5e:	4b0d      	ldr	r3, [pc, #52]	; (8008e94 <xTaskRemoveFromEventList+0xc4>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d905      	bls.n	8008e74 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <xTaskRemoveFromEventList+0xc8>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	e001      	b.n	8008e78 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008e74:	2300      	movs	r3, #0
 8008e76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e78:	697b      	ldr	r3, [r7, #20]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20000dd4 	.word	0x20000dd4
 8008e88:	20000db4 	.word	0x20000db4
 8008e8c:	200008dc 	.word	0x200008dc
 8008e90:	20000d6c 	.word	0x20000d6c
 8008e94:	200008d8 	.word	0x200008d8
 8008e98:	20000dc0 	.word	0x20000dc0

08008e9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <vTaskInternalSetTimeOutState+0x24>)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008eac:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <vTaskInternalSetTimeOutState+0x28>)
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	605a      	str	r2, [r3, #4]
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	20000dc4 	.word	0x20000dc4
 8008ec4:	20000db0 	.word	0x20000db0

08008ec8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10c      	bne.n	8008ef2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	b672      	cpsid	i
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	b662      	cpsie	i
 8008eec:	613b      	str	r3, [r7, #16]
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10c      	bne.n	8008f12 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	b672      	cpsid	i
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	b662      	cpsie	i
 8008f0c:	60fb      	str	r3, [r7, #12]
}
 8008f0e:	bf00      	nop
 8008f10:	e7fe      	b.n	8008f10 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008f12:	f000 fe73 	bl	8009bfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f16:	4b1d      	ldr	r3, [pc, #116]	; (8008f8c <xTaskCheckForTimeOut+0xc4>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2e:	d102      	bne.n	8008f36 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f30:	2300      	movs	r3, #0
 8008f32:	61fb      	str	r3, [r7, #28]
 8008f34:	e023      	b.n	8008f7e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	4b15      	ldr	r3, [pc, #84]	; (8008f90 <xTaskCheckForTimeOut+0xc8>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d007      	beq.n	8008f52 <xTaskCheckForTimeOut+0x8a>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d302      	bcc.n	8008f52 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	61fb      	str	r3, [r7, #28]
 8008f50:	e015      	b.n	8008f7e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d20b      	bcs.n	8008f74 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	1ad2      	subs	r2, r2, r3
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff ff97 	bl	8008e9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61fb      	str	r3, [r7, #28]
 8008f72:	e004      	b.n	8008f7e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f7e:	f000 fe71 	bl	8009c64 <vPortExitCritical>

	return xReturn;
 8008f82:	69fb      	ldr	r3, [r7, #28]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3720      	adds	r7, #32
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000db0 	.word	0x20000db0
 8008f90:	20000dc4 	.word	0x20000dc4

08008f94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f94:	b480      	push	{r7}
 8008f96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f98:	4b03      	ldr	r3, [pc, #12]	; (8008fa8 <vTaskMissedYield+0x14>)
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]
}
 8008f9e:	bf00      	nop
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	20000dc0 	.word	0x20000dc0

08008fac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fb4:	f000 f854 	bl	8009060 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fb8:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <prvIdleTask+0x2c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d907      	bls.n	8008fd0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008fc0:	4b06      	ldr	r3, [pc, #24]	; (8008fdc <prvIdleTask+0x30>)
 8008fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008fd0:	f7fa fbe5 	bl	800379e <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008fd4:	e7ee      	b.n	8008fb4 <prvIdleTask+0x8>
 8008fd6:	bf00      	nop
 8008fd8:	200008dc 	.word	0x200008dc
 8008fdc:	e000ed04 	.word	0xe000ed04

08008fe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	607b      	str	r3, [r7, #4]
 8008fea:	e00c      	b.n	8009006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4a12      	ldr	r2, [pc, #72]	; (8009040 <prvInitialiseTaskLists+0x60>)
 8008ff8:	4413      	add	r3, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe fc0c 	bl	8007818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	3301      	adds	r3, #1
 8009004:	607b      	str	r3, [r7, #4]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b37      	cmp	r3, #55	; 0x37
 800900a:	d9ef      	bls.n	8008fec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800900c:	480d      	ldr	r0, [pc, #52]	; (8009044 <prvInitialiseTaskLists+0x64>)
 800900e:	f7fe fc03 	bl	8007818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009012:	480d      	ldr	r0, [pc, #52]	; (8009048 <prvInitialiseTaskLists+0x68>)
 8009014:	f7fe fc00 	bl	8007818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009018:	480c      	ldr	r0, [pc, #48]	; (800904c <prvInitialiseTaskLists+0x6c>)
 800901a:	f7fe fbfd 	bl	8007818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800901e:	480c      	ldr	r0, [pc, #48]	; (8009050 <prvInitialiseTaskLists+0x70>)
 8009020:	f7fe fbfa 	bl	8007818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009024:	480b      	ldr	r0, [pc, #44]	; (8009054 <prvInitialiseTaskLists+0x74>)
 8009026:	f7fe fbf7 	bl	8007818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800902a:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <prvInitialiseTaskLists+0x78>)
 800902c:	4a05      	ldr	r2, [pc, #20]	; (8009044 <prvInitialiseTaskLists+0x64>)
 800902e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <prvInitialiseTaskLists+0x7c>)
 8009032:	4a05      	ldr	r2, [pc, #20]	; (8009048 <prvInitialiseTaskLists+0x68>)
 8009034:	601a      	str	r2, [r3, #0]
}
 8009036:	bf00      	nop
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	200008dc 	.word	0x200008dc
 8009044:	20000d3c 	.word	0x20000d3c
 8009048:	20000d50 	.word	0x20000d50
 800904c:	20000d6c 	.word	0x20000d6c
 8009050:	20000d80 	.word	0x20000d80
 8009054:	20000d98 	.word	0x20000d98
 8009058:	20000d64 	.word	0x20000d64
 800905c:	20000d68 	.word	0x20000d68

08009060 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009066:	e019      	b.n	800909c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009068:	f000 fdc8 	bl	8009bfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906c:	4b10      	ldr	r3, [pc, #64]	; (80090b0 <prvCheckTasksWaitingTermination+0x50>)
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3304      	adds	r3, #4
 8009078:	4618      	mov	r0, r3
 800907a:	f7fe fc57 	bl	800792c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800907e:	4b0d      	ldr	r3, [pc, #52]	; (80090b4 <prvCheckTasksWaitingTermination+0x54>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3b01      	subs	r3, #1
 8009084:	4a0b      	ldr	r2, [pc, #44]	; (80090b4 <prvCheckTasksWaitingTermination+0x54>)
 8009086:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009088:	4b0b      	ldr	r3, [pc, #44]	; (80090b8 <prvCheckTasksWaitingTermination+0x58>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3b01      	subs	r3, #1
 800908e:	4a0a      	ldr	r2, [pc, #40]	; (80090b8 <prvCheckTasksWaitingTermination+0x58>)
 8009090:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009092:	f000 fde7 	bl	8009c64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f810 	bl	80090bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800909c:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <prvCheckTasksWaitingTermination+0x58>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e1      	bne.n	8009068 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000d80 	.word	0x20000d80
 80090b4:	20000dac 	.word	0x20000dac
 80090b8:	20000d94 	.word	0x20000d94

080090bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3358      	adds	r3, #88	; 0x58
 80090c8:	4618      	mov	r0, r3
 80090ca:	f002 f8c3 	bl	800b254 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d108      	bne.n	80090ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090dc:	4618      	mov	r0, r3
 80090de:	f7f8 fa69 	bl	80015b4 <vPortFree>
				vPortFree( pxTCB );
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7f8 fa66 	bl	80015b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090e8:	e01a      	b.n	8009120 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d103      	bne.n	80090fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7f8 fa5d 	bl	80015b4 <vPortFree>
	}
 80090fa:	e011      	b.n	8009120 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009102:	2b02      	cmp	r3, #2
 8009104:	d00c      	beq.n	8009120 <prvDeleteTCB+0x64>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	b672      	cpsid	i
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	b662      	cpsie	i
 800911a:	60fb      	str	r3, [r7, #12]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <prvDeleteTCB+0x62>
	}
 8009120:	bf00      	nop
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800912e:	4b0c      	ldr	r3, [pc, #48]	; (8009160 <prvResetNextTaskUnblockTime+0x38>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d104      	bne.n	8009142 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009138:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <prvResetNextTaskUnblockTime+0x3c>)
 800913a:	f04f 32ff 	mov.w	r2, #4294967295
 800913e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009140:	e008      	b.n	8009154 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009142:	4b07      	ldr	r3, [pc, #28]	; (8009160 <prvResetNextTaskUnblockTime+0x38>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	4a04      	ldr	r2, [pc, #16]	; (8009164 <prvResetNextTaskUnblockTime+0x3c>)
 8009152:	6013      	str	r3, [r2, #0]
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	20000d64 	.word	0x20000d64
 8009164:	20000dcc 	.word	0x20000dcc

08009168 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800916e:	4b0b      	ldr	r3, [pc, #44]	; (800919c <xTaskGetSchedulerState+0x34>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d102      	bne.n	800917c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009176:	2301      	movs	r3, #1
 8009178:	607b      	str	r3, [r7, #4]
 800917a:	e008      	b.n	800918e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800917c:	4b08      	ldr	r3, [pc, #32]	; (80091a0 <xTaskGetSchedulerState+0x38>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009184:	2302      	movs	r3, #2
 8009186:	607b      	str	r3, [r7, #4]
 8009188:	e001      	b.n	800918e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800918a:	2300      	movs	r3, #0
 800918c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800918e:	687b      	ldr	r3, [r7, #4]
	}
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	20000db8 	.word	0x20000db8
 80091a0:	20000dd4 	.word	0x20000dd4

080091a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d05a      	beq.n	8009270 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80091ba:	4b30      	ldr	r3, [pc, #192]	; (800927c <xTaskPriorityDisinherit+0xd8>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d00c      	beq.n	80091de <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80091c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c8:	b672      	cpsid	i
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	b662      	cpsie	i
 80091d8:	60fb      	str	r3, [r7, #12]
}
 80091da:	bf00      	nop
 80091dc:	e7fe      	b.n	80091dc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10c      	bne.n	8009200 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	b672      	cpsid	i
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	b662      	cpsie	i
 80091fa:	60bb      	str	r3, [r7, #8]
}
 80091fc:	bf00      	nop
 80091fe:	e7fe      	b.n	80091fe <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009204:	1e5a      	subs	r2, r3, #1
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009212:	429a      	cmp	r2, r3
 8009214:	d02c      	beq.n	8009270 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921a:	2b00      	cmp	r3, #0
 800921c:	d128      	bne.n	8009270 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	3304      	adds	r3, #4
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe fb82 	bl	800792c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009240:	4b0f      	ldr	r3, [pc, #60]	; (8009280 <xTaskPriorityDisinherit+0xdc>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d903      	bls.n	8009250 <xTaskPriorityDisinherit+0xac>
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	4a0c      	ldr	r2, [pc, #48]	; (8009280 <xTaskPriorityDisinherit+0xdc>)
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4a09      	ldr	r2, [pc, #36]	; (8009284 <xTaskPriorityDisinherit+0xe0>)
 800925e:	441a      	add	r2, r3
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	3304      	adds	r3, #4
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7fe fb03 	bl	8007872 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800926c:	2301      	movs	r3, #1
 800926e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009270:	697b      	ldr	r3, [r7, #20]
	}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	200008d8 	.word	0x200008d8
 8009280:	20000db4 	.word	0x20000db4
 8009284:	200008dc 	.word	0x200008dc

08009288 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009292:	4b21      	ldr	r3, [pc, #132]	; (8009318 <prvAddCurrentTaskToDelayedList+0x90>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009298:	4b20      	ldr	r3, [pc, #128]	; (800931c <prvAddCurrentTaskToDelayedList+0x94>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3304      	adds	r3, #4
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fb44 	bl	800792c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092aa:	d10a      	bne.n	80092c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d007      	beq.n	80092c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092b2:	4b1a      	ldr	r3, [pc, #104]	; (800931c <prvAddCurrentTaskToDelayedList+0x94>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3304      	adds	r3, #4
 80092b8:	4619      	mov	r1, r3
 80092ba:	4819      	ldr	r0, [pc, #100]	; (8009320 <prvAddCurrentTaskToDelayedList+0x98>)
 80092bc:	f7fe fad9 	bl	8007872 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092c0:	e026      	b.n	8009310 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4413      	add	r3, r2
 80092c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092ca:	4b14      	ldr	r3, [pc, #80]	; (800931c <prvAddCurrentTaskToDelayedList+0x94>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d209      	bcs.n	80092ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092da:	4b12      	ldr	r3, [pc, #72]	; (8009324 <prvAddCurrentTaskToDelayedList+0x9c>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	4b0f      	ldr	r3, [pc, #60]	; (800931c <prvAddCurrentTaskToDelayedList+0x94>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3304      	adds	r3, #4
 80092e4:	4619      	mov	r1, r3
 80092e6:	4610      	mov	r0, r2
 80092e8:	f7fe fae7 	bl	80078ba <vListInsert>
}
 80092ec:	e010      	b.n	8009310 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092ee:	4b0e      	ldr	r3, [pc, #56]	; (8009328 <prvAddCurrentTaskToDelayedList+0xa0>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	4b0a      	ldr	r3, [pc, #40]	; (800931c <prvAddCurrentTaskToDelayedList+0x94>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3304      	adds	r3, #4
 80092f8:	4619      	mov	r1, r3
 80092fa:	4610      	mov	r0, r2
 80092fc:	f7fe fadd 	bl	80078ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009300:	4b0a      	ldr	r3, [pc, #40]	; (800932c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	429a      	cmp	r2, r3
 8009308:	d202      	bcs.n	8009310 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800930a:	4a08      	ldr	r2, [pc, #32]	; (800932c <prvAddCurrentTaskToDelayedList+0xa4>)
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	6013      	str	r3, [r2, #0]
}
 8009310:	bf00      	nop
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20000db0 	.word	0x20000db0
 800931c:	200008d8 	.word	0x200008d8
 8009320:	20000d98 	.word	0x20000d98
 8009324:	20000d68 	.word	0x20000d68
 8009328:	20000d64 	.word	0x20000d64
 800932c:	20000dcc 	.word	0x20000dcc

08009330 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08a      	sub	sp, #40	; 0x28
 8009334:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800933a:	f000 fb15 	bl	8009968 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800933e:	4b1d      	ldr	r3, [pc, #116]	; (80093b4 <xTimerCreateTimerTask+0x84>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d021      	beq.n	800938a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009346:	2300      	movs	r3, #0
 8009348:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800934e:	1d3a      	adds	r2, r7, #4
 8009350:	f107 0108 	add.w	r1, r7, #8
 8009354:	f107 030c 	add.w	r3, r7, #12
 8009358:	4618      	mov	r0, r3
 800935a:	f7fe fa43 	bl	80077e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	9202      	str	r2, [sp, #8]
 8009366:	9301      	str	r3, [sp, #4]
 8009368:	2302      	movs	r3, #2
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	2300      	movs	r3, #0
 800936e:	460a      	mov	r2, r1
 8009370:	4911      	ldr	r1, [pc, #68]	; (80093b8 <xTimerCreateTimerTask+0x88>)
 8009372:	4812      	ldr	r0, [pc, #72]	; (80093bc <xTimerCreateTimerTask+0x8c>)
 8009374:	f7ff f80e 	bl	8008394 <xTaskCreateStatic>
 8009378:	4603      	mov	r3, r0
 800937a:	4a11      	ldr	r2, [pc, #68]	; (80093c0 <xTimerCreateTimerTask+0x90>)
 800937c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800937e:	4b10      	ldr	r3, [pc, #64]	; (80093c0 <xTimerCreateTimerTask+0x90>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009386:	2301      	movs	r3, #1
 8009388:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10c      	bne.n	80093aa <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	b672      	cpsid	i
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	b662      	cpsie	i
 80093a4:	613b      	str	r3, [r7, #16]
}
 80093a6:	bf00      	nop
 80093a8:	e7fe      	b.n	80093a8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80093aa:	697b      	ldr	r3, [r7, #20]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20000e08 	.word	0x20000e08
 80093b8:	0800bad0 	.word	0x0800bad0
 80093bc:	08009501 	.word	0x08009501
 80093c0:	20000e0c 	.word	0x20000e0c

080093c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08a      	sub	sp, #40	; 0x28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10c      	bne.n	80093f6 <xTimerGenericCommand+0x32>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	b672      	cpsid	i
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	b662      	cpsie	i
 80093f0:	623b      	str	r3, [r7, #32]
}
 80093f2:	bf00      	nop
 80093f4:	e7fe      	b.n	80093f4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80093f6:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <xTimerGenericCommand+0x9c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d02a      	beq.n	8009454 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b05      	cmp	r3, #5
 800940e:	dc18      	bgt.n	8009442 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009410:	f7ff feaa 	bl	8009168 <xTaskGetSchedulerState>
 8009414:	4603      	mov	r3, r0
 8009416:	2b02      	cmp	r3, #2
 8009418:	d109      	bne.n	800942e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800941a:	4b11      	ldr	r3, [pc, #68]	; (8009460 <xTimerGenericCommand+0x9c>)
 800941c:	6818      	ldr	r0, [r3, #0]
 800941e:	f107 0110 	add.w	r1, r7, #16
 8009422:	2300      	movs	r3, #0
 8009424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009426:	f7fe fbbb 	bl	8007ba0 <xQueueGenericSend>
 800942a:	6278      	str	r0, [r7, #36]	; 0x24
 800942c:	e012      	b.n	8009454 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800942e:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <xTimerGenericCommand+0x9c>)
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	f107 0110 	add.w	r1, r7, #16
 8009436:	2300      	movs	r3, #0
 8009438:	2200      	movs	r2, #0
 800943a:	f7fe fbb1 	bl	8007ba0 <xQueueGenericSend>
 800943e:	6278      	str	r0, [r7, #36]	; 0x24
 8009440:	e008      	b.n	8009454 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009442:	4b07      	ldr	r3, [pc, #28]	; (8009460 <xTimerGenericCommand+0x9c>)
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	f107 0110 	add.w	r1, r7, #16
 800944a:	2300      	movs	r3, #0
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	f7fe fcad 	bl	8007dac <xQueueGenericSendFromISR>
 8009452:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009456:	4618      	mov	r0, r3
 8009458:	3728      	adds	r7, #40	; 0x28
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20000e08 	.word	0x20000e08

08009464 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af02      	add	r7, sp, #8
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946e:	4b23      	ldr	r3, [pc, #140]	; (80094fc <prvProcessExpiredTimer+0x98>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	3304      	adds	r3, #4
 800947c:	4618      	mov	r0, r3
 800947e:	f7fe fa55 	bl	800792c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b00      	cmp	r3, #0
 800948e:	d024      	beq.n	80094da <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	699a      	ldr	r2, [r3, #24]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	18d1      	adds	r1, r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	6978      	ldr	r0, [r7, #20]
 800949e:	f000 f8d3 	bl	8009648 <prvInsertTimerInActiveList>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d021      	beq.n	80094ec <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094a8:	2300      	movs	r3, #0
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	2300      	movs	r3, #0
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	2100      	movs	r1, #0
 80094b2:	6978      	ldr	r0, [r7, #20]
 80094b4:	f7ff ff86 	bl	80093c4 <xTimerGenericCommand>
 80094b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d115      	bne.n	80094ec <prvProcessExpiredTimer+0x88>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	b672      	cpsid	i
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	b662      	cpsie	i
 80094d4:	60fb      	str	r3, [r7, #12]
}
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e0:	f023 0301 	bic.w	r3, r3, #1
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	6978      	ldr	r0, [r7, #20]
 80094f2:	4798      	blx	r3
}
 80094f4:	bf00      	nop
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	20000e00 	.word	0x20000e00

08009500 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009508:	f107 0308 	add.w	r3, r7, #8
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f857 	bl	80095c0 <prvGetNextExpireTime>
 8009512:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	4619      	mov	r1, r3
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 f803 	bl	8009524 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800951e:	f000 f8d5 	bl	80096cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009522:	e7f1      	b.n	8009508 <prvTimerTask+0x8>

08009524 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800952e:	f7ff f9ed 	bl	800890c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009532:	f107 0308 	add.w	r3, r7, #8
 8009536:	4618      	mov	r0, r3
 8009538:	f000 f866 	bl	8009608 <prvSampleTimeNow>
 800953c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d130      	bne.n	80095a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10a      	bne.n	8009560 <prvProcessTimerOrBlockTask+0x3c>
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	429a      	cmp	r2, r3
 8009550:	d806      	bhi.n	8009560 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009552:	f7ff f9e9 	bl	8008928 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009556:	68f9      	ldr	r1, [r7, #12]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff ff83 	bl	8009464 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800955e:	e024      	b.n	80095aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d008      	beq.n	8009578 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009566:	4b13      	ldr	r3, [pc, #76]	; (80095b4 <prvProcessTimerOrBlockTask+0x90>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <prvProcessTimerOrBlockTask+0x50>
 8009570:	2301      	movs	r3, #1
 8009572:	e000      	b.n	8009576 <prvProcessTimerOrBlockTask+0x52>
 8009574:	2300      	movs	r3, #0
 8009576:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009578:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <prvProcessTimerOrBlockTask+0x94>)
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	4619      	mov	r1, r3
 8009586:	f7fe fed1 	bl	800832c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800958a:	f7ff f9cd 	bl	8008928 <xTaskResumeAll>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009594:	4b09      	ldr	r3, [pc, #36]	; (80095bc <prvProcessTimerOrBlockTask+0x98>)
 8009596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	f3bf 8f6f 	isb	sy
}
 80095a4:	e001      	b.n	80095aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80095a6:	f7ff f9bf 	bl	8008928 <xTaskResumeAll>
}
 80095aa:	bf00      	nop
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	20000e04 	.word	0x20000e04
 80095b8:	20000e08 	.word	0x20000e08
 80095bc:	e000ed04 	.word	0xe000ed04

080095c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095c8:	4b0e      	ldr	r3, [pc, #56]	; (8009604 <prvGetNextExpireTime+0x44>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <prvGetNextExpireTime+0x16>
 80095d2:	2201      	movs	r2, #1
 80095d4:	e000      	b.n	80095d8 <prvGetNextExpireTime+0x18>
 80095d6:	2200      	movs	r2, #0
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d105      	bne.n	80095f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095e4:	4b07      	ldr	r3, [pc, #28]	; (8009604 <prvGetNextExpireTime+0x44>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	60fb      	str	r3, [r7, #12]
 80095ee:	e001      	b.n	80095f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095f4:	68fb      	ldr	r3, [r7, #12]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20000e00 	.word	0x20000e00

08009608 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009610:	f7ff fa2a 	bl	8008a68 <xTaskGetTickCount>
 8009614:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009616:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <prvSampleTimeNow+0x3c>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	429a      	cmp	r2, r3
 800961e:	d205      	bcs.n	800962c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009620:	f000 f93c 	bl	800989c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	e002      	b.n	8009632 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009632:	4a04      	ldr	r2, [pc, #16]	; (8009644 <prvSampleTimeNow+0x3c>)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009638:	68fb      	ldr	r3, [r7, #12]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000e10 	.word	0x20000e10

08009648 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	429a      	cmp	r2, r3
 800966c:	d812      	bhi.n	8009694 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	1ad2      	subs	r2, r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	429a      	cmp	r2, r3
 800967a:	d302      	bcc.n	8009682 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800967c:	2301      	movs	r3, #1
 800967e:	617b      	str	r3, [r7, #20]
 8009680:	e01b      	b.n	80096ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009682:	4b10      	ldr	r3, [pc, #64]	; (80096c4 <prvInsertTimerInActiveList+0x7c>)
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3304      	adds	r3, #4
 800968a:	4619      	mov	r1, r3
 800968c:	4610      	mov	r0, r2
 800968e:	f7fe f914 	bl	80078ba <vListInsert>
 8009692:	e012      	b.n	80096ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	429a      	cmp	r2, r3
 800969a:	d206      	bcs.n	80096aa <prvInsertTimerInActiveList+0x62>
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d302      	bcc.n	80096aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80096a4:	2301      	movs	r3, #1
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	e007      	b.n	80096ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096aa:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <prvInsertTimerInActiveList+0x80>)
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	3304      	adds	r3, #4
 80096b2:	4619      	mov	r1, r3
 80096b4:	4610      	mov	r0, r2
 80096b6:	f7fe f900 	bl	80078ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80096ba:	697b      	ldr	r3, [r7, #20]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20000e04 	.word	0x20000e04
 80096c8:	20000e00 	.word	0x20000e00

080096cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b08e      	sub	sp, #56	; 0x38
 80096d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096d2:	e0d0      	b.n	8009876 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	da1a      	bge.n	8009710 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80096da:	1d3b      	adds	r3, r7, #4
 80096dc:	3304      	adds	r3, #4
 80096de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10c      	bne.n	8009700 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	b672      	cpsid	i
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	b662      	cpsie	i
 80096fa:	61fb      	str	r3, [r7, #28]
}
 80096fc:	bf00      	nop
 80096fe:	e7fe      	b.n	80096fe <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009706:	6850      	ldr	r0, [r2, #4]
 8009708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800970a:	6892      	ldr	r2, [r2, #8]
 800970c:	4611      	mov	r1, r2
 800970e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	f2c0 80ae 	blt.w	8009874 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d004      	beq.n	800972e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009726:	3304      	adds	r3, #4
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe f8ff 	bl	800792c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800972e:	463b      	mov	r3, r7
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff ff69 	bl	8009608 <prvSampleTimeNow>
 8009736:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b09      	cmp	r3, #9
 800973c:	f200 809b 	bhi.w	8009876 <prvProcessReceivedCommands+0x1aa>
 8009740:	a201      	add	r2, pc, #4	; (adr r2, 8009748 <prvProcessReceivedCommands+0x7c>)
 8009742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009746:	bf00      	nop
 8009748:	08009771 	.word	0x08009771
 800974c:	08009771 	.word	0x08009771
 8009750:	08009771 	.word	0x08009771
 8009754:	080097e9 	.word	0x080097e9
 8009758:	080097fd 	.word	0x080097fd
 800975c:	0800984b 	.word	0x0800984b
 8009760:	08009771 	.word	0x08009771
 8009764:	08009771 	.word	0x08009771
 8009768:	080097e9 	.word	0x080097e9
 800976c:	080097fd 	.word	0x080097fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009776:	f043 0301 	orr.w	r3, r3, #1
 800977a:	b2da      	uxtb	r2, r3
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	18d1      	adds	r1, r2, r3
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800978e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009790:	f7ff ff5a 	bl	8009648 <prvInsertTimerInActiveList>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d06d      	beq.n	8009876 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097a8:	f003 0304 	and.w	r3, r3, #4
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d062      	beq.n	8009876 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	441a      	add	r2, r3
 80097b8:	2300      	movs	r3, #0
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	2300      	movs	r3, #0
 80097be:	2100      	movs	r1, #0
 80097c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097c2:	f7ff fdff 	bl	80093c4 <xTimerGenericCommand>
 80097c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d153      	bne.n	8009876 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	b672      	cpsid	i
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	b662      	cpsie	i
 80097e2:	61bb      	str	r3, [r7, #24]
}
 80097e4:	bf00      	nop
 80097e6:	e7fe      	b.n	80097e6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ee:	f023 0301 	bic.w	r3, r3, #1
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80097fa:	e03c      	b.n	8009876 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009802:	f043 0301 	orr.w	r3, r3, #1
 8009806:	b2da      	uxtb	r2, r3
 8009808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10c      	bne.n	8009836 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	b672      	cpsid	i
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	b662      	cpsie	i
 8009830:	617b      	str	r3, [r7, #20]
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009838:	699a      	ldr	r2, [r3, #24]
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	18d1      	adds	r1, r2, r3
 800983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009844:	f7ff ff00 	bl	8009648 <prvInsertTimerInActiveList>
					break;
 8009848:	e015      	b.n	8009876 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800984a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009850:	f003 0302 	and.w	r3, r3, #2
 8009854:	2b00      	cmp	r3, #0
 8009856:	d103      	bne.n	8009860 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800985a:	f7f7 feab 	bl	80015b4 <vPortFree>
 800985e:	e00a      	b.n	8009876 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009866:	f023 0301 	bic.w	r3, r3, #1
 800986a:	b2da      	uxtb	r2, r3
 800986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009872:	e000      	b.n	8009876 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009874:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009876:	4b08      	ldr	r3, [pc, #32]	; (8009898 <prvProcessReceivedCommands+0x1cc>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	1d39      	adds	r1, r7, #4
 800987c:	2200      	movs	r2, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f7fe fb34 	bl	8007eec <xQueueReceive>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	f47f af24 	bne.w	80096d4 <prvProcessReceivedCommands+0x8>
	}
}
 800988c:	bf00      	nop
 800988e:	bf00      	nop
 8009890:	3730      	adds	r7, #48	; 0x30
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20000e08 	.word	0x20000e08

0800989c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098a2:	e04a      	b.n	800993a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098a4:	4b2e      	ldr	r3, [pc, #184]	; (8009960 <prvSwitchTimerLists+0xc4>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ae:	4b2c      	ldr	r3, [pc, #176]	; (8009960 <prvSwitchTimerLists+0xc4>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3304      	adds	r3, #4
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fe f835 	bl	800792c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d030      	beq.n	800993a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	4413      	add	r3, r2
 80098e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d90e      	bls.n	8009908 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098f6:	4b1a      	ldr	r3, [pc, #104]	; (8009960 <prvSwitchTimerLists+0xc4>)
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3304      	adds	r3, #4
 80098fe:	4619      	mov	r1, r3
 8009900:	4610      	mov	r0, r2
 8009902:	f7fd ffda 	bl	80078ba <vListInsert>
 8009906:	e018      	b.n	800993a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009908:	2300      	movs	r3, #0
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	2300      	movs	r3, #0
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	2100      	movs	r1, #0
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff fd56 	bl	80093c4 <xTimerGenericCommand>
 8009918:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10c      	bne.n	800993a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	b672      	cpsid	i
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	b662      	cpsie	i
 8009934:	603b      	str	r3, [r7, #0]
}
 8009936:	bf00      	nop
 8009938:	e7fe      	b.n	8009938 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800993a:	4b09      	ldr	r3, [pc, #36]	; (8009960 <prvSwitchTimerLists+0xc4>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1af      	bne.n	80098a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009944:	4b06      	ldr	r3, [pc, #24]	; (8009960 <prvSwitchTimerLists+0xc4>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800994a:	4b06      	ldr	r3, [pc, #24]	; (8009964 <prvSwitchTimerLists+0xc8>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a04      	ldr	r2, [pc, #16]	; (8009960 <prvSwitchTimerLists+0xc4>)
 8009950:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009952:	4a04      	ldr	r2, [pc, #16]	; (8009964 <prvSwitchTimerLists+0xc8>)
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	6013      	str	r3, [r2, #0]
}
 8009958:	bf00      	nop
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	20000e00 	.word	0x20000e00
 8009964:	20000e04 	.word	0x20000e04

08009968 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800996e:	f000 f945 	bl	8009bfc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009972:	4b15      	ldr	r3, [pc, #84]	; (80099c8 <prvCheckForValidListAndQueue+0x60>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d120      	bne.n	80099bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800997a:	4814      	ldr	r0, [pc, #80]	; (80099cc <prvCheckForValidListAndQueue+0x64>)
 800997c:	f7fd ff4c 	bl	8007818 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009980:	4813      	ldr	r0, [pc, #76]	; (80099d0 <prvCheckForValidListAndQueue+0x68>)
 8009982:	f7fd ff49 	bl	8007818 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009986:	4b13      	ldr	r3, [pc, #76]	; (80099d4 <prvCheckForValidListAndQueue+0x6c>)
 8009988:	4a10      	ldr	r2, [pc, #64]	; (80099cc <prvCheckForValidListAndQueue+0x64>)
 800998a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800998c:	4b12      	ldr	r3, [pc, #72]	; (80099d8 <prvCheckForValidListAndQueue+0x70>)
 800998e:	4a10      	ldr	r2, [pc, #64]	; (80099d0 <prvCheckForValidListAndQueue+0x68>)
 8009990:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009992:	2300      	movs	r3, #0
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	4b11      	ldr	r3, [pc, #68]	; (80099dc <prvCheckForValidListAndQueue+0x74>)
 8009998:	4a11      	ldr	r2, [pc, #68]	; (80099e0 <prvCheckForValidListAndQueue+0x78>)
 800999a:	2110      	movs	r1, #16
 800999c:	200a      	movs	r0, #10
 800999e:	f7fe f859 	bl	8007a54 <xQueueGenericCreateStatic>
 80099a2:	4603      	mov	r3, r0
 80099a4:	4a08      	ldr	r2, [pc, #32]	; (80099c8 <prvCheckForValidListAndQueue+0x60>)
 80099a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099a8:	4b07      	ldr	r3, [pc, #28]	; (80099c8 <prvCheckForValidListAndQueue+0x60>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099b0:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <prvCheckForValidListAndQueue+0x60>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	490b      	ldr	r1, [pc, #44]	; (80099e4 <prvCheckForValidListAndQueue+0x7c>)
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fc8e 	bl	80082d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099bc:	f000 f952 	bl	8009c64 <vPortExitCritical>
}
 80099c0:	bf00      	nop
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20000e08 	.word	0x20000e08
 80099cc:	20000dd8 	.word	0x20000dd8
 80099d0:	20000dec 	.word	0x20000dec
 80099d4:	20000e00 	.word	0x20000e00
 80099d8:	20000e04 	.word	0x20000e04
 80099dc:	20000eb4 	.word	0x20000eb4
 80099e0:	20000e14 	.word	0x20000e14
 80099e4:	0800bad8 	.word	0x0800bad8

080099e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	3b04      	subs	r3, #4
 80099f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3b04      	subs	r3, #4
 8009a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	f023 0201 	bic.w	r2, r3, #1
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3b04      	subs	r3, #4
 8009a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a18:	4a0c      	ldr	r2, [pc, #48]	; (8009a4c <pxPortInitialiseStack+0x64>)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3b14      	subs	r3, #20
 8009a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3b04      	subs	r3, #4
 8009a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f06f 0202 	mvn.w	r2, #2
 8009a36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	3b20      	subs	r3, #32
 8009a3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	08009a51 	.word	0x08009a51

08009a50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a5a:	4b14      	ldr	r3, [pc, #80]	; (8009aac <prvTaskExitError+0x5c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a62:	d00c      	beq.n	8009a7e <prvTaskExitError+0x2e>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	b672      	cpsid	i
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	b662      	cpsie	i
 8009a78:	60fb      	str	r3, [r7, #12]
}
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <prvTaskExitError+0x2c>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	b672      	cpsid	i
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	b662      	cpsie	i
 8009a92:	60bb      	str	r3, [r7, #8]
}
 8009a94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a96:	bf00      	nop
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d0fc      	beq.n	8009a98 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a9e:	bf00      	nop
 8009aa0:	bf00      	nop
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	20000010 	.word	0x20000010

08009ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ab0:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <pxCurrentTCBConst2>)
 8009ab2:	6819      	ldr	r1, [r3, #0]
 8009ab4:	6808      	ldr	r0, [r1, #0]
 8009ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aba:	f380 8809 	msr	PSP, r0
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f04f 0000 	mov.w	r0, #0
 8009ac6:	f380 8811 	msr	BASEPRI, r0
 8009aca:	4770      	bx	lr
 8009acc:	f3af 8000 	nop.w

08009ad0 <pxCurrentTCBConst2>:
 8009ad0:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ad4:	bf00      	nop
 8009ad6:	bf00      	nop

08009ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ad8:	4808      	ldr	r0, [pc, #32]	; (8009afc <prvPortStartFirstTask+0x24>)
 8009ada:	6800      	ldr	r0, [r0, #0]
 8009adc:	6800      	ldr	r0, [r0, #0]
 8009ade:	f380 8808 	msr	MSP, r0
 8009ae2:	f04f 0000 	mov.w	r0, #0
 8009ae6:	f380 8814 	msr	CONTROL, r0
 8009aea:	b662      	cpsie	i
 8009aec:	b661      	cpsie	f
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	df00      	svc	0
 8009af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009afa:	bf00      	nop
 8009afc:	e000ed08 	.word	0xe000ed08

08009b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b06:	4b37      	ldr	r3, [pc, #220]	; (8009be4 <xPortStartScheduler+0xe4>)
 8009b08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	22ff      	movs	r2, #255	; 0xff
 8009b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b20:	78fb      	ldrb	r3, [r7, #3]
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	4b2f      	ldr	r3, [pc, #188]	; (8009be8 <xPortStartScheduler+0xe8>)
 8009b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b2e:	4b2f      	ldr	r3, [pc, #188]	; (8009bec <xPortStartScheduler+0xec>)
 8009b30:	2207      	movs	r2, #7
 8009b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b34:	e009      	b.n	8009b4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009b36:	4b2d      	ldr	r3, [pc, #180]	; (8009bec <xPortStartScheduler+0xec>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	4a2b      	ldr	r2, [pc, #172]	; (8009bec <xPortStartScheduler+0xec>)
 8009b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b40:	78fb      	ldrb	r3, [r7, #3]
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	005b      	lsls	r3, r3, #1
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b4a:	78fb      	ldrb	r3, [r7, #3]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b52:	2b80      	cmp	r3, #128	; 0x80
 8009b54:	d0ef      	beq.n	8009b36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b56:	4b25      	ldr	r3, [pc, #148]	; (8009bec <xPortStartScheduler+0xec>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f1c3 0307 	rsb	r3, r3, #7
 8009b5e:	2b04      	cmp	r3, #4
 8009b60:	d00c      	beq.n	8009b7c <xPortStartScheduler+0x7c>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	b672      	cpsid	i
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	b662      	cpsie	i
 8009b76:	60bb      	str	r3, [r7, #8]
}
 8009b78:	bf00      	nop
 8009b7a:	e7fe      	b.n	8009b7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b7c:	4b1b      	ldr	r3, [pc, #108]	; (8009bec <xPortStartScheduler+0xec>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	021b      	lsls	r3, r3, #8
 8009b82:	4a1a      	ldr	r2, [pc, #104]	; (8009bec <xPortStartScheduler+0xec>)
 8009b84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b86:	4b19      	ldr	r3, [pc, #100]	; (8009bec <xPortStartScheduler+0xec>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b8e:	4a17      	ldr	r2, [pc, #92]	; (8009bec <xPortStartScheduler+0xec>)
 8009b90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b9a:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <xPortStartScheduler+0xf0>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a14      	ldr	r2, [pc, #80]	; (8009bf0 <xPortStartScheduler+0xf0>)
 8009ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ba4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ba6:	4b12      	ldr	r3, [pc, #72]	; (8009bf0 <xPortStartScheduler+0xf0>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a11      	ldr	r2, [pc, #68]	; (8009bf0 <xPortStartScheduler+0xf0>)
 8009bac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009bb0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009bb2:	f000 f8dd 	bl	8009d70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009bb6:	4b0f      	ldr	r3, [pc, #60]	; (8009bf4 <xPortStartScheduler+0xf4>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009bbc:	f000 f8fc 	bl	8009db8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009bc0:	4b0d      	ldr	r3, [pc, #52]	; (8009bf8 <xPortStartScheduler+0xf8>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a0c      	ldr	r2, [pc, #48]	; (8009bf8 <xPortStartScheduler+0xf8>)
 8009bc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009bca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bcc:	f7ff ff84 	bl	8009ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bd0:	f7ff f81e 	bl	8008c10 <vTaskSwitchContext>
	prvTaskExitError();
 8009bd4:	f7ff ff3c 	bl	8009a50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	e000e400 	.word	0xe000e400
 8009be8:	20000f04 	.word	0x20000f04
 8009bec:	20000f08 	.word	0x20000f08
 8009bf0:	e000ed20 	.word	0xe000ed20
 8009bf4:	20000010 	.word	0x20000010
 8009bf8:	e000ef34 	.word	0xe000ef34

08009bfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	b672      	cpsid	i
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	b662      	cpsie	i
 8009c16:	607b      	str	r3, [r7, #4]
}
 8009c18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c1a:	4b10      	ldr	r3, [pc, #64]	; (8009c5c <vPortEnterCritical+0x60>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	4a0e      	ldr	r2, [pc, #56]	; (8009c5c <vPortEnterCritical+0x60>)
 8009c22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c24:	4b0d      	ldr	r3, [pc, #52]	; (8009c5c <vPortEnterCritical+0x60>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d111      	bne.n	8009c50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c2c:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <vPortEnterCritical+0x64>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00c      	beq.n	8009c50 <vPortEnterCritical+0x54>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3a:	b672      	cpsid	i
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	b662      	cpsie	i
 8009c4a:	603b      	str	r3, [r7, #0]
}
 8009c4c:	bf00      	nop
 8009c4e:	e7fe      	b.n	8009c4e <vPortEnterCritical+0x52>
	}
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	20000010 	.word	0x20000010
 8009c60:	e000ed04 	.word	0xe000ed04

08009c64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c6a:	4b13      	ldr	r3, [pc, #76]	; (8009cb8 <vPortExitCritical+0x54>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10c      	bne.n	8009c8c <vPortExitCritical+0x28>
	__asm volatile
 8009c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c76:	b672      	cpsid	i
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	b662      	cpsie	i
 8009c86:	607b      	str	r3, [r7, #4]
}
 8009c88:	bf00      	nop
 8009c8a:	e7fe      	b.n	8009c8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <vPortExitCritical+0x54>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	4a09      	ldr	r2, [pc, #36]	; (8009cb8 <vPortExitCritical+0x54>)
 8009c94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c96:	4b08      	ldr	r3, [pc, #32]	; (8009cb8 <vPortExitCritical+0x54>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d105      	bne.n	8009caa <vPortExitCritical+0x46>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	f383 8811 	msr	BASEPRI, r3
}
 8009ca8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009caa:	bf00      	nop
 8009cac:	370c      	adds	r7, #12
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	20000010 	.word	0x20000010
 8009cbc:	00000000 	.word	0x00000000

08009cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009cc0:	f3ef 8009 	mrs	r0, PSP
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <pxCurrentTCBConst>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	f01e 0f10 	tst.w	lr, #16
 8009cd0:	bf08      	it	eq
 8009cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cda:	6010      	str	r0, [r2, #0]
 8009cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ce4:	b672      	cpsid	i
 8009ce6:	f380 8811 	msr	BASEPRI, r0
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	b662      	cpsie	i
 8009cf4:	f7fe ff8c 	bl	8008c10 <vTaskSwitchContext>
 8009cf8:	f04f 0000 	mov.w	r0, #0
 8009cfc:	f380 8811 	msr	BASEPRI, r0
 8009d00:	bc09      	pop	{r0, r3}
 8009d02:	6819      	ldr	r1, [r3, #0]
 8009d04:	6808      	ldr	r0, [r1, #0]
 8009d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0a:	f01e 0f10 	tst.w	lr, #16
 8009d0e:	bf08      	it	eq
 8009d10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d14:	f380 8809 	msr	PSP, r0
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop

08009d20 <pxCurrentTCBConst>:
 8009d20:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop

08009d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d32:	b672      	cpsid	i
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	b662      	cpsie	i
 8009d42:	607b      	str	r3, [r7, #4]
}
 8009d44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d46:	f7fe fe9f 	bl	8008a88 <xTaskIncrementTick>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d50:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <SysTick_Handler+0x44>)
 8009d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	f383 8811 	msr	BASEPRI, r3
}
 8009d62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d64:	bf00      	nop
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	e000ed04 	.word	0xe000ed04

08009d70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d74:	4b0b      	ldr	r3, [pc, #44]	; (8009da4 <vPortSetupTimerInterrupt+0x34>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d7a:	4b0b      	ldr	r3, [pc, #44]	; (8009da8 <vPortSetupTimerInterrupt+0x38>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d80:	4b0a      	ldr	r3, [pc, #40]	; (8009dac <vPortSetupTimerInterrupt+0x3c>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a0a      	ldr	r2, [pc, #40]	; (8009db0 <vPortSetupTimerInterrupt+0x40>)
 8009d86:	fba2 2303 	umull	r2, r3, r2, r3
 8009d8a:	099b      	lsrs	r3, r3, #6
 8009d8c:	4a09      	ldr	r2, [pc, #36]	; (8009db4 <vPortSetupTimerInterrupt+0x44>)
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d92:	4b04      	ldr	r3, [pc, #16]	; (8009da4 <vPortSetupTimerInterrupt+0x34>)
 8009d94:	2207      	movs	r2, #7
 8009d96:	601a      	str	r2, [r3, #0]
}
 8009d98:	bf00      	nop
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	e000e010 	.word	0xe000e010
 8009da8:	e000e018 	.word	0xe000e018
 8009dac:	20000004 	.word	0x20000004
 8009db0:	10624dd3 	.word	0x10624dd3
 8009db4:	e000e014 	.word	0xe000e014

08009db8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009db8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009dc8 <vPortEnableVFP+0x10>
 8009dbc:	6801      	ldr	r1, [r0, #0]
 8009dbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009dc2:	6001      	str	r1, [r0, #0]
 8009dc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009dc6:	bf00      	nop
 8009dc8:	e000ed88 	.word	0xe000ed88

08009dcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009dd2:	f3ef 8305 	mrs	r3, IPSR
 8009dd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b0f      	cmp	r3, #15
 8009ddc:	d916      	bls.n	8009e0c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009dde:	4a19      	ldr	r2, [pc, #100]	; (8009e44 <vPortValidateInterruptPriority+0x78>)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009de8:	4b17      	ldr	r3, [pc, #92]	; (8009e48 <vPortValidateInterruptPriority+0x7c>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	7afa      	ldrb	r2, [r7, #11]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d20c      	bcs.n	8009e0c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df6:	b672      	cpsid	i
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	b662      	cpsie	i
 8009e06:	607b      	str	r3, [r7, #4]
}
 8009e08:	bf00      	nop
 8009e0a:	e7fe      	b.n	8009e0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e0c:	4b0f      	ldr	r3, [pc, #60]	; (8009e4c <vPortValidateInterruptPriority+0x80>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e14:	4b0e      	ldr	r3, [pc, #56]	; (8009e50 <vPortValidateInterruptPriority+0x84>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d90c      	bls.n	8009e36 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	b672      	cpsid	i
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	b662      	cpsie	i
 8009e30:	603b      	str	r3, [r7, #0]
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <vPortValidateInterruptPriority+0x68>
	}
 8009e36:	bf00      	nop
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	e000e3f0 	.word	0xe000e3f0
 8009e48:	20000f04 	.word	0x20000f04
 8009e4c:	e000ed0c 	.word	0xe000ed0c
 8009e50:	20000f08 	.word	0x20000f08

08009e54 <_ZdlPv>:
 8009e54:	f001 b898 	b.w	800af88 <free>

08009e58 <_ZdlPvj>:
 8009e58:	f7ff bffc 	b.w	8009e54 <_ZdlPv>

08009e5c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 8009e5c:	4a1a      	ldr	r2, [pc, #104]	; (8009ec8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6c>)
 8009e5e:	6853      	ldr	r3, [r2, #4]
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	f1a0 0408 	sub.w	r4, r0, #8
 8009e66:	4616      	mov	r6, r2
 8009e68:	b123      	cbz	r3, 8009e74 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x18>
 8009e6a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009e6e:	1865      	adds	r5, r4, r1
 8009e70:	42ab      	cmp	r3, r5
 8009e72:	d903      	bls.n	8009e7c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x20>
 8009e74:	f840 3c04 	str.w	r3, [r0, #-4]
 8009e78:	6074      	str	r4, [r6, #4]
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	d106      	bne.n	8009e8c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 8009e7e:	e9d3 3500 	ldrd	r3, r5, [r3]
 8009e82:	4419      	add	r1, r3
 8009e84:	e940 1502 	strd	r1, r5, [r0, #-8]
 8009e88:	6054      	str	r4, [r2, #4]
 8009e8a:	e7f6      	b.n	8009e7a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 8009e8c:	3204      	adds	r2, #4
 8009e8e:	685e      	ldr	r6, [r3, #4]
 8009e90:	b14e      	cbz	r6, 8009ea6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x4a>
 8009e92:	42b5      	cmp	r5, r6
 8009e94:	d202      	bcs.n	8009e9c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x40>
 8009e96:	1d1a      	adds	r2, r3, #4
 8009e98:	4633      	mov	r3, r6
 8009e9a:	e7f8      	b.n	8009e8e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x32>
 8009e9c:	bf01      	itttt	eq
 8009e9e:	682e      	ldreq	r6, [r5, #0]
 8009ea0:	686d      	ldreq	r5, [r5, #4]
 8009ea2:	605d      	streq	r5, [r3, #4]
 8009ea4:	1989      	addeq	r1, r1, r6
 8009ea6:	6813      	ldr	r3, [r2, #0]
 8009ea8:	681d      	ldr	r5, [r3, #0]
 8009eaa:	195e      	adds	r6, r3, r5
 8009eac:	42b4      	cmp	r4, r6
 8009eae:	bf1f      	itttt	ne
 8009eb0:	685b      	ldrne	r3, [r3, #4]
 8009eb2:	f840 3c04 	strne.w	r3, [r0, #-4]
 8009eb6:	6813      	ldrne	r3, [r2, #0]
 8009eb8:	f840 1c08 	strne.w	r1, [r0, #-8]
 8009ebc:	bf06      	itte	eq
 8009ebe:	1949      	addeq	r1, r1, r5
 8009ec0:	6019      	streq	r1, [r3, #0]
 8009ec2:	605c      	strne	r4, [r3, #4]
 8009ec4:	e7d9      	b.n	8009e7a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 8009ec6:	bf00      	nop
 8009ec8:	20000f0c 	.word	0x20000f0c

08009ecc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 8009ecc:	f100 0308 	add.w	r3, r0, #8
 8009ed0:	b530      	push	{r4, r5, lr}
 8009ed2:	2b08      	cmp	r3, #8
 8009ed4:	4a0e      	ldr	r2, [pc, #56]	; (8009f10 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 8009ed6:	bf38      	it	cc
 8009ed8:	2308      	movcc	r3, #8
 8009eda:	3307      	adds	r3, #7
 8009edc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009ee0:	f023 0307 	bic.w	r3, r3, #7
 8009ee4:	b168      	cbz	r0, 8009f02 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x36>
 8009ee6:	e9d0 1400 	ldrd	r1, r4, [r0]
 8009eea:	428b      	cmp	r3, r1
 8009eec:	d90a      	bls.n	8009f04 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x38>
 8009eee:	1d02      	adds	r2, r0, #4
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	e7f7      	b.n	8009ee4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x18>
 8009ef4:	18c5      	adds	r5, r0, r3
 8009ef6:	606c      	str	r4, [r5, #4]
 8009ef8:	50c1      	str	r1, [r0, r3]
 8009efa:	6810      	ldr	r0, [r2, #0]
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	6015      	str	r5, [r2, #0]
 8009f00:	3008      	adds	r0, #8
 8009f02:	bd30      	pop	{r4, r5, pc}
 8009f04:	1ac9      	subs	r1, r1, r3
 8009f06:	2907      	cmp	r1, #7
 8009f08:	d8f4      	bhi.n	8009ef4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x28>
 8009f0a:	6014      	str	r4, [r2, #0]
 8009f0c:	e7f8      	b.n	8009f00 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
 8009f0e:	bf00      	nop
 8009f10:	20000f0c 	.word	0x20000f0c

08009f14 <__cxa_allocate_exception>:
 8009f14:	b510      	push	{r4, lr}
 8009f16:	f100 0480 	add.w	r4, r0, #128	; 0x80
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f001 f82c 	bl	800af78 <malloc>
 8009f20:	4603      	mov	r3, r0
 8009f22:	b930      	cbnz	r0, 8009f32 <__cxa_allocate_exception+0x1e>
 8009f24:	4620      	mov	r0, r4
 8009f26:	f7ff ffd1 	bl	8009ecc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	b908      	cbnz	r0, 8009f32 <__cxa_allocate_exception+0x1e>
 8009f2e:	f000 fbe3 	bl	800a6f8 <_ZSt9terminatev>
 8009f32:	2280      	movs	r2, #128	; 0x80
 8009f34:	2100      	movs	r1, #0
 8009f36:	4618      	mov	r0, r3
 8009f38:	f001 f856 	bl	800afe8 <memset>
 8009f3c:	3080      	adds	r0, #128	; 0x80
 8009f3e:	bd10      	pop	{r4, pc}

08009f40 <__cxa_free_exception>:
 8009f40:	4a06      	ldr	r2, [pc, #24]	; (8009f5c <__cxa_free_exception+0x1c>)
 8009f42:	6893      	ldr	r3, [r2, #8]
 8009f44:	3880      	subs	r0, #128	; 0x80
 8009f46:	4298      	cmp	r0, r3
 8009f48:	d905      	bls.n	8009f56 <__cxa_free_exception+0x16>
 8009f4a:	68d2      	ldr	r2, [r2, #12]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	4298      	cmp	r0, r3
 8009f50:	d201      	bcs.n	8009f56 <__cxa_free_exception+0x16>
 8009f52:	f7ff bf83 	b.w	8009e5c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 8009f56:	f001 b817 	b.w	800af88 <free>
 8009f5a:	bf00      	nop
 8009f5c:	20000f0c 	.word	0x20000f0c

08009f60 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4c08      	ldr	r4, [pc, #32]	; (8009f84 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8009f64:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8009f68:	4628      	mov	r0, r5
 8009f6a:	60e5      	str	r5, [r4, #12]
 8009f6c:	f001 f804 	bl	800af78 <malloc>
 8009f70:	60a0      	str	r0, [r4, #8]
 8009f72:	b910      	cbnz	r0, 8009f7a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8009f74:	60e0      	str	r0, [r4, #12]
 8009f76:	6060      	str	r0, [r4, #4]
 8009f78:	bd38      	pop	{r3, r4, r5, pc}
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	6060      	str	r0, [r4, #4]
 8009f7e:	6005      	str	r5, [r0, #0]
 8009f80:	6043      	str	r3, [r0, #4]
 8009f82:	e7f9      	b.n	8009f78 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8009f84:	20000f0c 	.word	0x20000f0c

08009f88 <__cxa_end_cleanup>:
 8009f88:	b41e      	push	{r1, r2, r3, r4}
 8009f8a:	f000 f89c 	bl	800a0c6 <__gnu_end_cleanup>
 8009f8e:	bc1e      	pop	{r1, r2, r3, r4}
 8009f90:	f7f7 f844 	bl	800101c <_Unwind_Resume>

08009f94 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8009f94:	7803      	ldrb	r3, [r0, #0]
 8009f96:	2b47      	cmp	r3, #71	; 0x47
 8009f98:	d117      	bne.n	8009fca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009f9a:	7843      	ldrb	r3, [r0, #1]
 8009f9c:	2b4e      	cmp	r3, #78	; 0x4e
 8009f9e:	d114      	bne.n	8009fca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fa0:	7883      	ldrb	r3, [r0, #2]
 8009fa2:	2b55      	cmp	r3, #85	; 0x55
 8009fa4:	d111      	bne.n	8009fca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fa6:	78c3      	ldrb	r3, [r0, #3]
 8009fa8:	2b43      	cmp	r3, #67	; 0x43
 8009faa:	d10e      	bne.n	8009fca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fac:	7903      	ldrb	r3, [r0, #4]
 8009fae:	2b43      	cmp	r3, #67	; 0x43
 8009fb0:	d10b      	bne.n	8009fca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fb2:	7943      	ldrb	r3, [r0, #5]
 8009fb4:	2b2b      	cmp	r3, #43	; 0x2b
 8009fb6:	d108      	bne.n	8009fca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fb8:	7983      	ldrb	r3, [r0, #6]
 8009fba:	2b2b      	cmp	r3, #43	; 0x2b
 8009fbc:	d105      	bne.n	8009fca <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fbe:	79c0      	ldrb	r0, [r0, #7]
 8009fc0:	2801      	cmp	r0, #1
 8009fc2:	bf8c      	ite	hi
 8009fc4:	2000      	movhi	r0, #0
 8009fc6:	2001      	movls	r0, #1
 8009fc8:	4770      	bx	lr
 8009fca:	2000      	movs	r0, #0
 8009fcc:	4770      	bx	lr
	...

08009fd0 <__cxa_type_match>:
 8009fd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009fd4:	461d      	mov	r5, r3
 8009fd6:	7803      	ldrb	r3, [r0, #0]
 8009fd8:	2b47      	cmp	r3, #71	; 0x47
 8009fda:	460e      	mov	r6, r1
 8009fdc:	4602      	mov	r2, r0
 8009fde:	79c1      	ldrb	r1, [r0, #7]
 8009fe0:	d113      	bne.n	800a00a <__cxa_type_match+0x3a>
 8009fe2:	7843      	ldrb	r3, [r0, #1]
 8009fe4:	2b4e      	cmp	r3, #78	; 0x4e
 8009fe6:	d110      	bne.n	800a00a <__cxa_type_match+0x3a>
 8009fe8:	7883      	ldrb	r3, [r0, #2]
 8009fea:	2b55      	cmp	r3, #85	; 0x55
 8009fec:	d10d      	bne.n	800a00a <__cxa_type_match+0x3a>
 8009fee:	78c3      	ldrb	r3, [r0, #3]
 8009ff0:	2b43      	cmp	r3, #67	; 0x43
 8009ff2:	d10a      	bne.n	800a00a <__cxa_type_match+0x3a>
 8009ff4:	7903      	ldrb	r3, [r0, #4]
 8009ff6:	2b46      	cmp	r3, #70	; 0x46
 8009ff8:	d107      	bne.n	800a00a <__cxa_type_match+0x3a>
 8009ffa:	7943      	ldrb	r3, [r0, #5]
 8009ffc:	2b4f      	cmp	r3, #79	; 0x4f
 8009ffe:	d104      	bne.n	800a00a <__cxa_type_match+0x3a>
 800a000:	7983      	ldrb	r3, [r0, #6]
 800a002:	2b52      	cmp	r3, #82	; 0x52
 800a004:	d101      	bne.n	800a00a <__cxa_type_match+0x3a>
 800a006:	2900      	cmp	r1, #0
 800a008:	d031      	beq.n	800a06e <__cxa_type_match+0x9e>
 800a00a:	4610      	mov	r0, r2
 800a00c:	f7ff ffc2 	bl	8009f94 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a010:	f080 0001 	eor.w	r0, r0, #1
 800a014:	b2c0      	uxtb	r0, r0
 800a016:	2300      	movs	r3, #0
 800a018:	2400      	movs	r4, #0
 800a01a:	9401      	str	r4, [sp, #4]
 800a01c:	bb53      	cbnz	r3, 800a074 <__cxa_type_match+0xa4>
 800a01e:	bb58      	cbnz	r0, 800a078 <__cxa_type_match+0xa8>
 800a020:	2901      	cmp	r1, #1
 800a022:	bf0a      	itet	eq
 800a024:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 800a028:	f1a2 0320 	subne.w	r3, r2, #32
 800a02c:	3b78      	subeq	r3, #120	; 0x78
 800a02e:	2901      	cmp	r1, #1
 800a030:	bf08      	it	eq
 800a032:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 800a036:	681c      	ldr	r4, [r3, #0]
 800a038:	bf18      	it	ne
 800a03a:	3258      	addne	r2, #88	; 0x58
 800a03c:	9201      	str	r2, [sp, #4]
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	4620      	mov	r0, r4
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	4798      	blx	r3
 800a046:	b1c8      	cbz	r0, 800a07c <__cxa_type_match+0xac>
 800a048:	9b01      	ldr	r3, [sp, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	2702      	movs	r7, #2
 800a050:	6833      	ldr	r3, [r6, #0]
 800a052:	aa01      	add	r2, sp, #4
 800a054:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800a058:	4621      	mov	r1, r4
 800a05a:	2301      	movs	r3, #1
 800a05c:	4630      	mov	r0, r6
 800a05e:	47c0      	blx	r8
 800a060:	b170      	cbz	r0, 800a080 <__cxa_type_match+0xb0>
 800a062:	9b01      	ldr	r3, [sp, #4]
 800a064:	602b      	str	r3, [r5, #0]
 800a066:	4638      	mov	r0, r7
 800a068:	b002      	add	sp, #8
 800a06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a06e:	2301      	movs	r3, #1
 800a070:	4608      	mov	r0, r1
 800a072:	e7d1      	b.n	800a018 <__cxa_type_match+0x48>
 800a074:	4c03      	ldr	r4, [pc, #12]	; (800a084 <__cxa_type_match+0xb4>)
 800a076:	e7e2      	b.n	800a03e <__cxa_type_match+0x6e>
 800a078:	4c03      	ldr	r4, [pc, #12]	; (800a088 <__cxa_type_match+0xb8>)
 800a07a:	e7e0      	b.n	800a03e <__cxa_type_match+0x6e>
 800a07c:	2701      	movs	r7, #1
 800a07e:	e7e7      	b.n	800a050 <__cxa_type_match+0x80>
 800a080:	4607      	mov	r7, r0
 800a082:	e7f0      	b.n	800a066 <__cxa_type_match+0x96>
 800a084:	0800bbcc 	.word	0x0800bbcc
 800a088:	0800bbd4 	.word	0x0800bbd4

0800a08c <__cxa_begin_cleanup>:
 800a08c:	b510      	push	{r4, lr}
 800a08e:	4604      	mov	r4, r0
 800a090:	f000 f8a0 	bl	800a1d4 <__cxa_get_globals>
 800a094:	4602      	mov	r2, r0
 800a096:	4620      	mov	r0, r4
 800a098:	f1a4 0120 	sub.w	r1, r4, #32
 800a09c:	f7ff ff7a 	bl	8009f94 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a0a0:	b160      	cbz	r0, 800a0bc <__cxa_begin_cleanup+0x30>
 800a0a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0ae:	d103      	bne.n	800a0b8 <__cxa_begin_cleanup+0x2c>
 800a0b0:	6893      	ldr	r3, [r2, #8]
 800a0b2:	f844 3c08 	str.w	r3, [r4, #-8]
 800a0b6:	6091      	str	r1, [r2, #8]
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	bd10      	pop	{r4, pc}
 800a0bc:	6893      	ldr	r3, [r2, #8]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0f9      	beq.n	800a0b6 <__cxa_begin_cleanup+0x2a>
 800a0c2:	f000 fb19 	bl	800a6f8 <_ZSt9terminatev>

0800a0c6 <__gnu_end_cleanup>:
 800a0c6:	b510      	push	{r4, lr}
 800a0c8:	f000 f884 	bl	800a1d4 <__cxa_get_globals>
 800a0cc:	6882      	ldr	r2, [r0, #8]
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	b90a      	cbnz	r2, 800a0d6 <__gnu_end_cleanup+0x10>
 800a0d2:	f000 fb11 	bl	800a6f8 <_ZSt9terminatev>
 800a0d6:	f102 0420 	add.w	r4, r2, #32
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f7ff ff5a 	bl	8009f94 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a0e0:	b140      	cbz	r0, 800a0f4 <__gnu_end_cleanup+0x2e>
 800a0e2:	69d3      	ldr	r3, [r2, #28]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	61d3      	str	r3, [r2, #28]
 800a0e8:	b913      	cbnz	r3, 800a0f0 <__gnu_end_cleanup+0x2a>
 800a0ea:	6990      	ldr	r0, [r2, #24]
 800a0ec:	6088      	str	r0, [r1, #8]
 800a0ee:	6193      	str	r3, [r2, #24]
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	bd10      	pop	{r4, pc}
 800a0f4:	6088      	str	r0, [r1, #8]
 800a0f6:	e7fb      	b.n	800a0f0 <__gnu_end_cleanup+0x2a>

0800a0f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800a0f8:	7803      	ldrb	r3, [r0, #0]
 800a0fa:	2b47      	cmp	r3, #71	; 0x47
 800a0fc:	d117      	bne.n	800a12e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a0fe:	7843      	ldrb	r3, [r0, #1]
 800a100:	2b4e      	cmp	r3, #78	; 0x4e
 800a102:	d114      	bne.n	800a12e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a104:	7883      	ldrb	r3, [r0, #2]
 800a106:	2b55      	cmp	r3, #85	; 0x55
 800a108:	d111      	bne.n	800a12e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a10a:	78c3      	ldrb	r3, [r0, #3]
 800a10c:	2b43      	cmp	r3, #67	; 0x43
 800a10e:	d10e      	bne.n	800a12e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a110:	7903      	ldrb	r3, [r0, #4]
 800a112:	2b43      	cmp	r3, #67	; 0x43
 800a114:	d10b      	bne.n	800a12e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a116:	7943      	ldrb	r3, [r0, #5]
 800a118:	2b2b      	cmp	r3, #43	; 0x2b
 800a11a:	d108      	bne.n	800a12e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a11c:	7983      	ldrb	r3, [r0, #6]
 800a11e:	2b2b      	cmp	r3, #43	; 0x2b
 800a120:	d105      	bne.n	800a12e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a122:	79c0      	ldrb	r0, [r0, #7]
 800a124:	2801      	cmp	r0, #1
 800a126:	bf8c      	ite	hi
 800a128:	2000      	movhi	r0, #0
 800a12a:	2001      	movls	r0, #1
 800a12c:	4770      	bx	lr
 800a12e:	2000      	movs	r0, #0
 800a130:	4770      	bx	lr

0800a132 <__cxa_begin_catch>:
 800a132:	b538      	push	{r3, r4, r5, lr}
 800a134:	4604      	mov	r4, r0
 800a136:	f000 f84d 	bl	800a1d4 <__cxa_get_globals>
 800a13a:	6805      	ldr	r5, [r0, #0]
 800a13c:	4602      	mov	r2, r0
 800a13e:	4620      	mov	r0, r4
 800a140:	f1a4 0120 	sub.w	r1, r4, #32
 800a144:	f7ff ffd8 	bl	800a0f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a148:	b928      	cbnz	r0, 800a156 <__cxa_begin_catch+0x24>
 800a14a:	b10d      	cbz	r5, 800a150 <__cxa_begin_catch+0x1e>
 800a14c:	f000 fad4 	bl	800a6f8 <_ZSt9terminatev>
 800a150:	6011      	str	r1, [r2, #0]
 800a152:	4628      	mov	r0, r5
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	bfb4      	ite	lt
 800a15e:	f1c3 0301 	rsblt	r3, r3, #1
 800a162:	3301      	addge	r3, #1
 800a164:	f844 3c0c 	str.w	r3, [r4, #-12]
 800a168:	6853      	ldr	r3, [r2, #4]
 800a16a:	428d      	cmp	r5, r1
 800a16c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a170:	6053      	str	r3, [r2, #4]
 800a172:	4620      	mov	r0, r4
 800a174:	bf1c      	itt	ne
 800a176:	f844 5c10 	strne.w	r5, [r4, #-16]
 800a17a:	6011      	strne	r1, [r2, #0]
 800a17c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a17e:	f7f6 fb9d 	bl	80008bc <_Unwind_Complete>
 800a182:	e7e6      	b.n	800a152 <__cxa_begin_catch+0x20>

0800a184 <__cxa_end_catch>:
 800a184:	b510      	push	{r4, lr}
 800a186:	f000 f821 	bl	800a1cc <__cxa_get_globals_fast>
 800a18a:	6802      	ldr	r2, [r0, #0]
 800a18c:	4601      	mov	r1, r0
 800a18e:	b19a      	cbz	r2, 800a1b8 <__cxa_end_catch+0x34>
 800a190:	f102 0420 	add.w	r4, r2, #32
 800a194:	4620      	mov	r0, r4
 800a196:	f7ff ffaf 	bl	800a0f8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a19a:	b928      	cbnz	r0, 800a1a8 <__cxa_end_catch+0x24>
 800a19c:	6008      	str	r0, [r1, #0]
 800a19e:	4620      	mov	r0, r4
 800a1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1a4:	f7f6 bb8c 	b.w	80008c0 <_Unwind_DeleteException>
 800a1a8:	6953      	ldr	r3, [r2, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	da05      	bge.n	800a1ba <__cxa_end_catch+0x36>
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	d101      	bne.n	800a1b6 <__cxa_end_catch+0x32>
 800a1b2:	6910      	ldr	r0, [r2, #16]
 800a1b4:	6008      	str	r0, [r1, #0]
 800a1b6:	6153      	str	r3, [r2, #20]
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	d102      	bne.n	800a1c4 <__cxa_end_catch+0x40>
 800a1be:	6913      	ldr	r3, [r2, #16]
 800a1c0:	600b      	str	r3, [r1, #0]
 800a1c2:	e7ec      	b.n	800a19e <__cxa_end_catch+0x1a>
 800a1c4:	1c59      	adds	r1, r3, #1
 800a1c6:	d1f6      	bne.n	800a1b6 <__cxa_end_catch+0x32>
 800a1c8:	f000 fa96 	bl	800a6f8 <_ZSt9terminatev>

0800a1cc <__cxa_get_globals_fast>:
 800a1cc:	4800      	ldr	r0, [pc, #0]	; (800a1d0 <__cxa_get_globals_fast+0x4>)
 800a1ce:	4770      	bx	lr
 800a1d0:	20000f1c 	.word	0x20000f1c

0800a1d4 <__cxa_get_globals>:
 800a1d4:	4800      	ldr	r0, [pc, #0]	; (800a1d8 <__cxa_get_globals+0x4>)
 800a1d6:	4770      	bx	lr
 800a1d8:	20000f1c 	.word	0x20000f1c

0800a1dc <_ZL12read_uleb128PKhPm>:
 800a1dc:	b530      	push	{r4, r5, lr}
 800a1de:	2300      	movs	r3, #0
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	f810 5b01 	ldrb.w	r5, [r0], #1
 800a1e6:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 800a1ea:	4094      	lsls	r4, r2
 800a1ec:	4323      	orrs	r3, r4
 800a1ee:	062c      	lsls	r4, r5, #24
 800a1f0:	f102 0207 	add.w	r2, r2, #7
 800a1f4:	d4f5      	bmi.n	800a1e2 <_ZL12read_uleb128PKhPm+0x6>
 800a1f6:	600b      	str	r3, [r1, #0]
 800a1f8:	bd30      	pop	{r4, r5, pc}

0800a1fa <_ZL12read_sleb128PKhPl>:
 800a1fa:	b530      	push	{r4, r5, lr}
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	461a      	mov	r2, r3
 800a200:	f810 4b01 	ldrb.w	r4, [r0], #1
 800a204:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800a208:	4095      	lsls	r5, r2
 800a20a:	432b      	orrs	r3, r5
 800a20c:	0625      	lsls	r5, r4, #24
 800a20e:	f102 0207 	add.w	r2, r2, #7
 800a212:	d4f5      	bmi.n	800a200 <_ZL12read_sleb128PKhPl+0x6>
 800a214:	2a1f      	cmp	r2, #31
 800a216:	d806      	bhi.n	800a226 <_ZL12read_sleb128PKhPl+0x2c>
 800a218:	0664      	lsls	r4, r4, #25
 800a21a:	bf42      	ittt	mi
 800a21c:	f04f 34ff 	movmi.w	r4, #4294967295
 800a220:	fa04 f202 	lslmi.w	r2, r4, r2
 800a224:	4313      	orrmi	r3, r2
 800a226:	600b      	str	r3, [r1, #0]
 800a228:	bd30      	pop	{r4, r5, pc}

0800a22a <_ZL28read_encoded_value_with_basehjPKhPj>:
 800a22a:	2850      	cmp	r0, #80	; 0x50
 800a22c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a230:	4606      	mov	r6, r0
 800a232:	4688      	mov	r8, r1
 800a234:	4615      	mov	r5, r2
 800a236:	461f      	mov	r7, r3
 800a238:	d108      	bne.n	800a24c <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 800a23a:	3203      	adds	r2, #3
 800a23c:	f022 0003 	bic.w	r0, r2, #3
 800a240:	f850 4b04 	ldr.w	r4, [r0], #4
 800a244:	603c      	str	r4, [r7, #0]
 800a246:	b002      	add	sp, #8
 800a248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24c:	f000 030f 	and.w	r3, r0, #15
 800a250:	2b0c      	cmp	r3, #12
 800a252:	d82e      	bhi.n	800a2b2 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 800a254:	e8df f003 	tbb	[pc, r3]
 800a258:	251d0725 	.word	0x251d0725
 800a25c:	2d2d2d29 	.word	0x2d2d2d29
 800a260:	2521182d 	.word	0x2521182d
 800a264:	29          	.byte	0x29
 800a265:	00          	.byte	0x00
 800a266:	a901      	add	r1, sp, #4
 800a268:	4628      	mov	r0, r5
 800a26a:	f7ff ffb7 	bl	800a1dc <_ZL12read_uleb128PKhPm>
 800a26e:	9c01      	ldr	r4, [sp, #4]
 800a270:	2c00      	cmp	r4, #0
 800a272:	d0e7      	beq.n	800a244 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 800a274:	f006 0370 	and.w	r3, r6, #112	; 0x70
 800a278:	2b10      	cmp	r3, #16
 800a27a:	bf08      	it	eq
 800a27c:	46a8      	moveq	r8, r5
 800a27e:	4444      	add	r4, r8
 800a280:	0633      	lsls	r3, r6, #24
 800a282:	bf48      	it	mi
 800a284:	6824      	ldrmi	r4, [r4, #0]
 800a286:	e7dd      	b.n	800a244 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 800a288:	a901      	add	r1, sp, #4
 800a28a:	4628      	mov	r0, r5
 800a28c:	f7ff ffb5 	bl	800a1fa <_ZL12read_sleb128PKhPl>
 800a290:	e7ed      	b.n	800a26e <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 800a292:	4628      	mov	r0, r5
 800a294:	f830 4b02 	ldrh.w	r4, [r0], #2
 800a298:	e7ea      	b.n	800a270 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800a29a:	4628      	mov	r0, r5
 800a29c:	f930 4b02 	ldrsh.w	r4, [r0], #2
 800a2a0:	e7e6      	b.n	800a270 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	f850 4b04 	ldr.w	r4, [r0], #4
 800a2a8:	e7e2      	b.n	800a270 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f850 4b08 	ldr.w	r4, [r0], #8
 800a2b0:	e7de      	b.n	800a270 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800a2b2:	f000 fd36 	bl	800ad22 <abort>

0800a2b6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800a2b6:	b508      	push	{r3, lr}
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2bff      	cmp	r3, #255	; 0xff
 800a2bc:	4608      	mov	r0, r1
 800a2be:	d010      	beq.n	800a2e2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800a2c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a2c4:	2a30      	cmp	r2, #48	; 0x30
 800a2c6:	d012      	beq.n	800a2ee <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 800a2c8:	d807      	bhi.n	800a2da <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 800a2ca:	2a20      	cmp	r2, #32
 800a2cc:	d00b      	beq.n	800a2e6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 800a2ce:	d802      	bhi.n	800a2d6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800a2d0:	f013 0f60 	tst.w	r3, #96	; 0x60
 800a2d4:	d005      	beq.n	800a2e2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800a2d6:	f000 fd24 	bl	800ad22 <abort>
 800a2da:	2a40      	cmp	r2, #64	; 0x40
 800a2dc:	d00b      	beq.n	800a2f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 800a2de:	2a50      	cmp	r2, #80	; 0x50
 800a2e0:	d1f9      	bne.n	800a2d6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	bd08      	pop	{r3, pc}
 800a2e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a2ea:	f001 bae8 	b.w	800b8be <_Unwind_GetTextRelBase>
 800a2ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a2f2:	f001 bae1 	b.w	800b8b8 <_Unwind_GetDataRelBase>
 800a2f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a2fa:	f7f7 b867 	b.w	80013cc <_Unwind_GetRegionStart>

0800a2fe <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 800a2fe:	b513      	push	{r0, r1, r4, lr}
 800a300:	460c      	mov	r4, r1
 800a302:	4601      	mov	r1, r0
 800a304:	4620      	mov	r0, r4
 800a306:	e9cd 3200 	strd	r3, r2, [sp]
 800a30a:	f7ff ffd4 	bl	800a2b6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a30e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a312:	4601      	mov	r1, r0
 800a314:	4620      	mov	r0, r4
 800a316:	b002      	add	sp, #8
 800a318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a31c:	f7ff bf85 	b.w	800a22a <_ZL28read_encoded_value_with_basehjPKhPj>

0800a320 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800a320:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a322:	460c      	mov	r4, r1
 800a324:	4615      	mov	r5, r2
 800a326:	4606      	mov	r6, r0
 800a328:	b328      	cbz	r0, 800a376 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800a32a:	f7f7 f84f 	bl	80013cc <_Unwind_GetRegionStart>
 800a32e:	4603      	mov	r3, r0
 800a330:	4620      	mov	r0, r4
 800a332:	602b      	str	r3, [r5, #0]
 800a334:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a338:	29ff      	cmp	r1, #255	; 0xff
 800a33a:	d01e      	beq.n	800a37a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 800a33c:	4602      	mov	r2, r0
 800a33e:	1d2b      	adds	r3, r5, #4
 800a340:	4630      	mov	r0, r6
 800a342:	f7ff ffdc 	bl	800a2fe <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a346:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a34a:	752b      	strb	r3, [r5, #20]
 800a34c:	2bff      	cmp	r3, #255	; 0xff
 800a34e:	d016      	beq.n	800a37e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 800a350:	2310      	movs	r3, #16
 800a352:	752b      	strb	r3, [r5, #20]
 800a354:	a901      	add	r1, sp, #4
 800a356:	f7ff ff41 	bl	800a1dc <_ZL12read_uleb128PKhPm>
 800a35a:	9b01      	ldr	r3, [sp, #4]
 800a35c:	4403      	add	r3, r0
 800a35e:	60eb      	str	r3, [r5, #12]
 800a360:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a364:	756b      	strb	r3, [r5, #21]
 800a366:	a901      	add	r1, sp, #4
 800a368:	f7ff ff38 	bl	800a1dc <_ZL12read_uleb128PKhPm>
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	4403      	add	r3, r0
 800a370:	612b      	str	r3, [r5, #16]
 800a372:	b002      	add	sp, #8
 800a374:	bd70      	pop	{r4, r5, r6, pc}
 800a376:	4603      	mov	r3, r0
 800a378:	e7da      	b.n	800a330 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 800a37a:	606b      	str	r3, [r5, #4]
 800a37c:	e7e3      	b.n	800a346 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 800a37e:	2300      	movs	r3, #0
 800a380:	e7ed      	b.n	800a35e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

0800a382 <_Unwind_GetGR>:
 800a382:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a384:	ab03      	add	r3, sp, #12
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	2300      	movs	r3, #0
 800a38a:	460a      	mov	r2, r1
 800a38c:	4619      	mov	r1, r3
 800a38e:	f7f6 fa9d 	bl	80008cc <_Unwind_VRS_Get>
 800a392:	9803      	ldr	r0, [sp, #12]
 800a394:	b005      	add	sp, #20
 800a396:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a39c <__gxx_personality_v0>:
 800a39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a0:	b091      	sub	sp, #68	; 0x44
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9305      	str	r3, [sp, #20]
 800a3a6:	f000 0303 	and.w	r3, r0, #3
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	4617      	mov	r7, r2
 800a3b2:	d00e      	beq.n	800a3d2 <__gxx_personality_v0+0x36>
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d003      	beq.n	800a3c0 <__gxx_personality_v0+0x24>
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d13b      	bne.n	800a434 <__gxx_personality_v0+0x98>
 800a3bc:	0701      	lsls	r1, r0, #28
 800a3be:	d53b      	bpl.n	800a438 <__gxx_personality_v0+0x9c>
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f7f6 ffec 	bl	80013a0 <__gnu_unwind_frame>
 800a3c8:	b390      	cbz	r0, 800a430 <__gxx_personality_v0+0x94>
 800a3ca:	2009      	movs	r0, #9
 800a3cc:	b011      	add	sp, #68	; 0x44
 800a3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d2:	0702      	lsls	r2, r0, #28
 800a3d4:	d406      	bmi.n	800a3e4 <__gxx_personality_v0+0x48>
 800a3d6:	6a0d      	ldr	r5, [r1, #32]
 800a3d8:	4638      	mov	r0, r7
 800a3da:	210d      	movs	r1, #13
 800a3dc:	f7ff ffd1 	bl	800a382 <_Unwind_GetGR>
 800a3e0:	4285      	cmp	r5, r0
 800a3e2:	d02b      	beq.n	800a43c <__gxx_personality_v0+0xa0>
 800a3e4:	2002      	movs	r0, #2
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f006 0608 	and.w	r6, r6, #8
 800a3ec:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 800a3f0:	4306      	orrs	r6, r0
 800a3f2:	f8cd a000 	str.w	sl, [sp]
 800a3f6:	220c      	movs	r2, #12
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4638      	mov	r0, r7
 800a3fc:	940a      	str	r4, [sp, #40]	; 0x28
 800a3fe:	f7f6 fa89 	bl	8000914 <_Unwind_VRS_Set>
 800a402:	2e06      	cmp	r6, #6
 800a404:	d11c      	bne.n	800a440 <__gxx_personality_v0+0xa4>
 800a406:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800a40a:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 800a40e:	f1b8 0f00 	cmp.w	r8, #0
 800a412:	bf0c      	ite	eq
 800a414:	f04f 0b01 	moveq.w	fp, #1
 800a418:	f04f 0b03 	movne.w	fp, #3
 800a41c:	f016 0608 	ands.w	r6, r6, #8
 800a420:	f000 810c 	beq.w	800a63c <__gxx_personality_v0+0x2a0>
 800a424:	f1bb 0f01 	cmp.w	fp, #1
 800a428:	f040 8104 	bne.w	800a634 <__gxx_personality_v0+0x298>
 800a42c:	f000 f964 	bl	800a6f8 <_ZSt9terminatev>
 800a430:	2008      	movs	r0, #8
 800a432:	e7cb      	b.n	800a3cc <__gxx_personality_v0+0x30>
 800a434:	f000 fc75 	bl	800ad22 <abort>
 800a438:	2001      	movs	r0, #1
 800a43a:	e7d4      	b.n	800a3e6 <__gxx_personality_v0+0x4a>
 800a43c:	2006      	movs	r0, #6
 800a43e:	e7d2      	b.n	800a3e6 <__gxx_personality_v0+0x4a>
 800a440:	4638      	mov	r0, r7
 800a442:	f7f6 ffc9 	bl	80013d8 <_Unwind_GetLanguageSpecificData>
 800a446:	4681      	mov	r9, r0
 800a448:	2800      	cmp	r0, #0
 800a44a:	d0b9      	beq.n	800a3c0 <__gxx_personality_v0+0x24>
 800a44c:	4652      	mov	r2, sl
 800a44e:	4601      	mov	r1, r0
 800a450:	4638      	mov	r0, r7
 800a452:	f7ff ff65 	bl	800a320 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800a456:	4639      	mov	r1, r7
 800a458:	4605      	mov	r5, r0
 800a45a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800a45e:	f7ff ff2a 	bl	800a2b6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a462:	210f      	movs	r1, #15
 800a464:	900c      	str	r0, [sp, #48]	; 0x30
 800a466:	4638      	mov	r0, r7
 800a468:	f7ff ff8b 	bl	800a382 <_Unwind_GetGR>
 800a46c:	f020 0801 	bic.w	r8, r0, #1
 800a470:	f108 38ff 	add.w	r8, r8, #4294967295
 800a474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a476:	42ab      	cmp	r3, r5
 800a478:	f240 80c4 	bls.w	800a604 <__gxx_personality_v0+0x268>
 800a47c:	462a      	mov	r2, r5
 800a47e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a482:	ab06      	add	r3, sp, #24
 800a484:	2000      	movs	r0, #0
 800a486:	f7ff ff3a 	bl	800a2fe <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a48a:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a48e:	4602      	mov	r2, r0
 800a490:	ab07      	add	r3, sp, #28
 800a492:	2000      	movs	r0, #0
 800a494:	f7ff ff33 	bl	800a2fe <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a498:	ab08      	add	r3, sp, #32
 800a49a:	4602      	mov	r2, r0
 800a49c:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	f7ff ff2c 	bl	800a2fe <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a4a6:	a909      	add	r1, sp, #36	; 0x24
 800a4a8:	f7ff fe98 	bl	800a1dc <_ZL12read_uleb128PKhPm>
 800a4ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ae:	9a06      	ldr	r2, [sp, #24]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	4543      	cmp	r3, r8
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	d901      	bls.n	800a4bc <__gxx_personality_v0+0x120>
 800a4b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a4ba:	e7db      	b.n	800a474 <__gxx_personality_v0+0xd8>
 800a4bc:	9a07      	ldr	r2, [sp, #28]
 800a4be:	4413      	add	r3, r2
 800a4c0:	4543      	cmp	r3, r8
 800a4c2:	d9d7      	bls.n	800a474 <__gxx_personality_v0+0xd8>
 800a4c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4c8:	f1b8 0f00 	cmp.w	r8, #0
 800a4cc:	d001      	beq.n	800a4d2 <__gxx_personality_v0+0x136>
 800a4ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4d0:	4498      	add	r8, r3
 800a4d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a4d4:	b115      	cbz	r5, 800a4dc <__gxx_personality_v0+0x140>
 800a4d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a4d8:	3d01      	subs	r5, #1
 800a4da:	4405      	add	r5, r0
 800a4dc:	f1b8 0f00 	cmp.w	r8, #0
 800a4e0:	f43f af6e 	beq.w	800a3c0 <__gxx_personality_v0+0x24>
 800a4e4:	2d00      	cmp	r5, #0
 800a4e6:	f000 80f7 	beq.w	800a6d8 <__gxx_personality_v0+0x33c>
 800a4ea:	f016 0308 	ands.w	r3, r6, #8
 800a4ee:	9302      	str	r3, [sp, #8]
 800a4f0:	d034      	beq.n	800a55c <__gxx_personality_v0+0x1c0>
 800a4f2:	2347      	movs	r3, #71	; 0x47
 800a4f4:	7023      	strb	r3, [r4, #0]
 800a4f6:	234e      	movs	r3, #78	; 0x4e
 800a4f8:	7063      	strb	r3, [r4, #1]
 800a4fa:	2355      	movs	r3, #85	; 0x55
 800a4fc:	70a3      	strb	r3, [r4, #2]
 800a4fe:	2343      	movs	r3, #67	; 0x43
 800a500:	70e3      	strb	r3, [r4, #3]
 800a502:	2346      	movs	r3, #70	; 0x46
 800a504:	7123      	strb	r3, [r4, #4]
 800a506:	234f      	movs	r3, #79	; 0x4f
 800a508:	7163      	strb	r3, [r4, #5]
 800a50a:	2352      	movs	r3, #82	; 0x52
 800a50c:	71a3      	strb	r3, [r4, #6]
 800a50e:	2300      	movs	r3, #0
 800a510:	71e3      	strb	r3, [r4, #7]
 800a512:	f04f 0b00 	mov.w	fp, #0
 800a516:	a907      	add	r1, sp, #28
 800a518:	4628      	mov	r0, r5
 800a51a:	f7ff fe6e 	bl	800a1fa <_ZL12read_sleb128PKhPl>
 800a51e:	a908      	add	r1, sp, #32
 800a520:	9003      	str	r0, [sp, #12]
 800a522:	f7ff fe6a 	bl	800a1fa <_ZL12read_sleb128PKhPl>
 800a526:	9907      	ldr	r1, [sp, #28]
 800a528:	2900      	cmp	r1, #0
 800a52a:	d068      	beq.n	800a5fe <__gxx_personality_v0+0x262>
 800a52c:	dd3a      	ble.n	800a5a4 <__gxx_personality_v0+0x208>
 800a52e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800a532:	28ff      	cmp	r0, #255	; 0xff
 800a534:	d032      	beq.n	800a59c <__gxx_personality_v0+0x200>
 800a536:	f000 0307 	and.w	r3, r0, #7
 800a53a:	2b04      	cmp	r3, #4
 800a53c:	f63f af7a 	bhi.w	800a434 <__gxx_personality_v0+0x98>
 800a540:	a201      	add	r2, pc, #4	; (adr r2, 800a548 <__gxx_personality_v0+0x1ac>)
 800a542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a546:	bf00      	nop
 800a548:	0800a5a1 	.word	0x0800a5a1
 800a54c:	0800a435 	.word	0x0800a435
 800a550:	0800a56f 	.word	0x0800a56f
 800a554:	0800a5a1 	.word	0x0800a5a1
 800a558:	0800a599 	.word	0x0800a599
 800a55c:	79e3      	ldrb	r3, [r4, #7]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	bf0c      	ite	eq
 800a562:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 800a566:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 800a56a:	9305      	str	r3, [sp, #20]
 800a56c:	e7d1      	b.n	800a512 <__gxx_personality_v0+0x176>
 800a56e:	2502      	movs	r5, #2
 800a570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a572:	ab09      	add	r3, sp, #36	; 0x24
 800a574:	fb05 2211 	mls	r2, r5, r1, r2
 800a578:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a57a:	f7ff fe56 	bl	800a22a <_ZL28read_encoded_value_with_basehjPKhPj>
 800a57e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a580:	b131      	cbz	r1, 800a590 <__gxx_personality_v0+0x1f4>
 800a582:	b37c      	cbz	r4, 800a5e4 <__gxx_personality_v0+0x248>
 800a584:	ab05      	add	r3, sp, #20
 800a586:	2200      	movs	r2, #0
 800a588:	4620      	mov	r0, r4
 800a58a:	f7ff fd21 	bl	8009fd0 <__cxa_type_match>
 800a58e:	b348      	cbz	r0, 800a5e4 <__gxx_personality_v0+0x248>
 800a590:	9d07      	ldr	r5, [sp, #28]
 800a592:	f04f 0b03 	mov.w	fp, #3
 800a596:	e039      	b.n	800a60c <__gxx_personality_v0+0x270>
 800a598:	2508      	movs	r5, #8
 800a59a:	e7e9      	b.n	800a570 <__gxx_personality_v0+0x1d4>
 800a59c:	2500      	movs	r5, #0
 800a59e:	e7e7      	b.n	800a570 <__gxx_personality_v0+0x1d4>
 800a5a0:	2504      	movs	r5, #4
 800a5a2:	e7e5      	b.n	800a570 <__gxx_personality_v0+0x1d4>
 800a5a4:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 800a5a8:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 800a5ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5ae:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 800a5b2:	313f      	adds	r1, #63	; 0x3f
 800a5b4:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 800a5b8:	b1dc      	cbz	r4, 800a5f2 <__gxx_personality_v0+0x256>
 800a5ba:	9a02      	ldr	r2, [sp, #8]
 800a5bc:	b9ca      	cbnz	r2, 800a5f2 <__gxx_personality_v0+0x256>
 800a5be:	9b05      	ldr	r3, [sp, #20]
 800a5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c2:	3d04      	subs	r5, #4
 800a5c4:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800a5c8:	b141      	cbz	r1, 800a5dc <__gxx_personality_v0+0x240>
 800a5ca:	ab09      	add	r3, sp, #36	; 0x24
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	4429      	add	r1, r5
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f7ff fcfd 	bl	8009fd0 <__cxa_type_match>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d0f4      	beq.n	800a5c4 <__gxx_personality_v0+0x228>
 800a5da:	2101      	movs	r1, #1
 800a5dc:	f081 0101 	eor.w	r1, r1, #1
 800a5e0:	2900      	cmp	r1, #0
 800a5e2:	d1d5      	bne.n	800a590 <__gxx_personality_v0+0x1f4>
 800a5e4:	9d08      	ldr	r5, [sp, #32]
 800a5e6:	2d00      	cmp	r5, #0
 800a5e8:	d072      	beq.n	800a6d0 <__gxx_personality_v0+0x334>
 800a5ea:	9b03      	ldr	r3, [sp, #12]
 800a5ec:	442b      	add	r3, r5
 800a5ee:	461d      	mov	r5, r3
 800a5f0:	e791      	b.n	800a516 <__gxx_personality_v0+0x17a>
 800a5f2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800a5f6:	fab1 f181 	clz	r1, r1
 800a5fa:	0949      	lsrs	r1, r1, #5
 800a5fc:	e7f0      	b.n	800a5e0 <__gxx_personality_v0+0x244>
 800a5fe:	f04f 0b01 	mov.w	fp, #1
 800a602:	e7ef      	b.n	800a5e4 <__gxx_personality_v0+0x248>
 800a604:	2500      	movs	r5, #0
 800a606:	46a8      	mov	r8, r5
 800a608:	f04f 0b01 	mov.w	fp, #1
 800a60c:	07f3      	lsls	r3, r6, #31
 800a60e:	f57f af05 	bpl.w	800a41c <__gxx_personality_v0+0x80>
 800a612:	f1bb 0f02 	cmp.w	fp, #2
 800a616:	f43f aed3 	beq.w	800a3c0 <__gxx_personality_v0+0x24>
 800a61a:	210d      	movs	r1, #13
 800a61c:	4638      	mov	r0, r7
 800a61e:	9e05      	ldr	r6, [sp, #20]
 800a620:	f7ff feaf 	bl	800a382 <_Unwind_GetGR>
 800a624:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 800a628:	e9c4 0608 	strd	r0, r6, [r4, #32]
 800a62c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 800a630:	2006      	movs	r0, #6
 800a632:	e6cb      	b.n	800a3cc <__gxx_personality_v0+0x30>
 800a634:	2d00      	cmp	r5, #0
 800a636:	da22      	bge.n	800a67e <__gxx_personality_v0+0x2e2>
 800a638:	f000 f870 	bl	800a71c <_ZSt10unexpectedv>
 800a63c:	f1bb 0f01 	cmp.w	fp, #1
 800a640:	d102      	bne.n	800a648 <__gxx_personality_v0+0x2ac>
 800a642:	4620      	mov	r0, r4
 800a644:	f000 fab9 	bl	800abba <__cxa_call_terminate>
 800a648:	2d00      	cmp	r5, #0
 800a64a:	da18      	bge.n	800a67e <__gxx_personality_v0+0x2e2>
 800a64c:	4652      	mov	r2, sl
 800a64e:	4649      	mov	r1, r9
 800a650:	4638      	mov	r0, r7
 800a652:	f7ff fe65 	bl	800a320 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800a656:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800a65a:	4639      	mov	r1, r7
 800a65c:	f7ff fe2b 	bl	800a2b6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a662:	900c      	str	r0, [sp, #48]	; 0x30
 800a664:	43eb      	mvns	r3, r5
 800a666:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a66a:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 800a66e:	b10a      	cbz	r2, 800a674 <__gxx_personality_v0+0x2d8>
 800a670:	3601      	adds	r6, #1
 800a672:	e7fa      	b.n	800a66a <__gxx_personality_v0+0x2ce>
 800a674:	2204      	movs	r2, #4
 800a676:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 800a67a:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 800a67e:	2300      	movs	r3, #0
 800a680:	ae09      	add	r6, sp, #36	; 0x24
 800a682:	461a      	mov	r2, r3
 800a684:	4619      	mov	r1, r3
 800a686:	9600      	str	r6, [sp, #0]
 800a688:	4638      	mov	r0, r7
 800a68a:	9409      	str	r4, [sp, #36]	; 0x24
 800a68c:	f7f6 f942 	bl	8000914 <_Unwind_VRS_Set>
 800a690:	2300      	movs	r3, #0
 800a692:	4619      	mov	r1, r3
 800a694:	2201      	movs	r2, #1
 800a696:	9600      	str	r6, [sp, #0]
 800a698:	4638      	mov	r0, r7
 800a69a:	9509      	str	r5, [sp, #36]	; 0x24
 800a69c:	f7f6 f93a 	bl	8000914 <_Unwind_VRS_Set>
 800a6a0:	210f      	movs	r1, #15
 800a6a2:	4638      	mov	r0, r7
 800a6a4:	f7ff fe6d 	bl	800a382 <_Unwind_GetGR>
 800a6a8:	f000 0001 	and.w	r0, r0, #1
 800a6ac:	ea40 0008 	orr.w	r0, r0, r8
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9009      	str	r0, [sp, #36]	; 0x24
 800a6b4:	9600      	str	r6, [sp, #0]
 800a6b6:	220f      	movs	r2, #15
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	f7f6 f92a 	bl	8000914 <_Unwind_VRS_Set>
 800a6c0:	f1bb 0f02 	cmp.w	fp, #2
 800a6c4:	d102      	bne.n	800a6cc <__gxx_personality_v0+0x330>
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f7ff fce0 	bl	800a08c <__cxa_begin_cleanup>
 800a6cc:	2007      	movs	r0, #7
 800a6ce:	e67d      	b.n	800a3cc <__gxx_personality_v0+0x30>
 800a6d0:	f1bb 0f00 	cmp.w	fp, #0
 800a6d4:	f43f ae74 	beq.w	800a3c0 <__gxx_personality_v0+0x24>
 800a6d8:	f04f 0b02 	mov.w	fp, #2
 800a6dc:	e796      	b.n	800a60c <__gxx_personality_v0+0x270>
 800a6de:	bf00      	nop

0800a6e0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a6e0:	b508      	push	{r3, lr}
 800a6e2:	4780      	blx	r0
 800a6e4:	f000 fb1d 	bl	800ad22 <abort>

0800a6e8 <_ZSt13get_terminatev>:
 800a6e8:	4b02      	ldr	r3, [pc, #8]	; (800a6f4 <_ZSt13get_terminatev+0xc>)
 800a6ea:	6818      	ldr	r0, [r3, #0]
 800a6ec:	f3bf 8f5b 	dmb	ish
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	20000018 	.word	0x20000018

0800a6f8 <_ZSt9terminatev>:
 800a6f8:	b508      	push	{r3, lr}
 800a6fa:	f7ff fff5 	bl	800a6e8 <_ZSt13get_terminatev>
 800a6fe:	f7ff ffef 	bl	800a6e0 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a702 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800a702:	b508      	push	{r3, lr}
 800a704:	4780      	blx	r0
 800a706:	f7ff fff7 	bl	800a6f8 <_ZSt9terminatev>
	...

0800a70c <_ZSt14get_unexpectedv>:
 800a70c:	4b02      	ldr	r3, [pc, #8]	; (800a718 <_ZSt14get_unexpectedv+0xc>)
 800a70e:	6818      	ldr	r0, [r3, #0]
 800a710:	f3bf 8f5b 	dmb	ish
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	20000014 	.word	0x20000014

0800a71c <_ZSt10unexpectedv>:
 800a71c:	b508      	push	{r3, lr}
 800a71e:	f7ff fff5 	bl	800a70c <_ZSt14get_unexpectedv>
 800a722:	f7ff ffee 	bl	800a702 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800a726 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 800a726:	2801      	cmp	r0, #1
 800a728:	b507      	push	{r0, r1, r2, lr}
 800a72a:	d903      	bls.n	800a734 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 800a72c:	f851 0c14 	ldr.w	r0, [r1, #-20]
 800a730:	f7ff ffd6 	bl	800a6e0 <_ZN10__cxxabiv111__terminateEPFvvE>
 800a734:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 800a738:	f3bf 8f5b 	dmb	ish
 800a73c:	e853 2f00 	ldrex	r2, [r3]
 800a740:	3a01      	subs	r2, #1
 800a742:	e843 2000 	strex	r0, r2, [r3]
 800a746:	2800      	cmp	r0, #0
 800a748:	d1f8      	bne.n	800a73c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 800a74a:	f3bf 8f5b 	dmb	ish
 800a74e:	b962      	cbnz	r2, 800a76a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x44>
 800a750:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800a754:	f101 0058 	add.w	r0, r1, #88	; 0x58
 800a758:	b113      	cbz	r3, 800a760 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 800a75a:	9001      	str	r0, [sp, #4]
 800a75c:	4798      	blx	r3
 800a75e:	9801      	ldr	r0, [sp, #4]
 800a760:	b003      	add	sp, #12
 800a762:	f85d eb04 	ldr.w	lr, [sp], #4
 800a766:	f7ff bbeb 	b.w	8009f40 <__cxa_free_exception>
 800a76a:	b003      	add	sp, #12
 800a76c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a770 <__cxa_init_primary_exception>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	2500      	movs	r5, #0
 800a774:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 800a778:	f840 5c80 	str.w	r5, [r0, #-128]
 800a77c:	4604      	mov	r4, r0
 800a77e:	f7ff ffc5 	bl	800a70c <_ZSt14get_unexpectedv>
 800a782:	f844 0c70 	str.w	r0, [r4, #-112]
 800a786:	f7ff ffaf 	bl	800a6e8 <_ZSt13get_terminatev>
 800a78a:	2347      	movs	r3, #71	; 0x47
 800a78c:	f804 3c58 	strb.w	r3, [r4, #-88]
 800a790:	234e      	movs	r3, #78	; 0x4e
 800a792:	f804 3c57 	strb.w	r3, [r4, #-87]
 800a796:	2355      	movs	r3, #85	; 0x55
 800a798:	f804 3c56 	strb.w	r3, [r4, #-86]
 800a79c:	2343      	movs	r3, #67	; 0x43
 800a79e:	f804 3c55 	strb.w	r3, [r4, #-85]
 800a7a2:	f804 3c54 	strb.w	r3, [r4, #-84]
 800a7a6:	232b      	movs	r3, #43	; 0x2b
 800a7a8:	f804 3c53 	strb.w	r3, [r4, #-83]
 800a7ac:	f804 3c52 	strb.w	r3, [r4, #-82]
 800a7b0:	4b04      	ldr	r3, [pc, #16]	; (800a7c4 <__cxa_init_primary_exception+0x54>)
 800a7b2:	f844 0c6c 	str.w	r0, [r4, #-108]
 800a7b6:	f804 5c51 	strb.w	r5, [r4, #-81]
 800a7ba:	f844 3c50 	str.w	r3, [r4, #-80]
 800a7be:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
 800a7c4:	0800a727 	.word	0x0800a727

0800a7c8 <__cxa_throw>:
 800a7c8:	b507      	push	{r0, r1, r2, lr}
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	e9cd 2100 	strd	r2, r1, [sp]
 800a7d0:	f7ff fd00 	bl	800a1d4 <__cxa_get_globals>
 800a7d4:	6843      	ldr	r3, [r0, #4]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	e9dd 2100 	ldrd	r2, r1, [sp]
 800a7dc:	6043      	str	r3, [r0, #4]
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f7ff ffc6 	bl	800a770 <__cxa_init_primary_exception>
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	f844 3b28 	str.w	r3, [r4], #40
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f7f6 fc03 	bl	8000ff8 <_Unwind_RaiseException>
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f7ff fc9d 	bl	800a132 <__cxa_begin_catch>
 800a7f8:	f7ff ff7e 	bl	800a6f8 <_ZSt9terminatev>

0800a7fc <__cxa_rethrow>:
 800a7fc:	b508      	push	{r3, lr}
 800a7fe:	f7ff fce9 	bl	800a1d4 <__cxa_get_globals>
 800a802:	e9d0 4200 	ldrd	r4, r2, [r0]
 800a806:	3201      	adds	r2, #1
 800a808:	6042      	str	r2, [r0, #4]
 800a80a:	b34c      	cbz	r4, 800a860 <__cxa_rethrow+0x64>
 800a80c:	f894 2020 	ldrb.w	r2, [r4, #32]
 800a810:	2a47      	cmp	r2, #71	; 0x47
 800a812:	d127      	bne.n	800a864 <__cxa_rethrow+0x68>
 800a814:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800a818:	2a4e      	cmp	r2, #78	; 0x4e
 800a81a:	d123      	bne.n	800a864 <__cxa_rethrow+0x68>
 800a81c:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800a820:	2a55      	cmp	r2, #85	; 0x55
 800a822:	d11f      	bne.n	800a864 <__cxa_rethrow+0x68>
 800a824:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800a828:	2a43      	cmp	r2, #67	; 0x43
 800a82a:	d11b      	bne.n	800a864 <__cxa_rethrow+0x68>
 800a82c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800a830:	2a43      	cmp	r2, #67	; 0x43
 800a832:	d117      	bne.n	800a864 <__cxa_rethrow+0x68>
 800a834:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800a838:	2a2b      	cmp	r2, #43	; 0x2b
 800a83a:	d113      	bne.n	800a864 <__cxa_rethrow+0x68>
 800a83c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800a840:	2a2b      	cmp	r2, #43	; 0x2b
 800a842:	d10f      	bne.n	800a864 <__cxa_rethrow+0x68>
 800a844:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800a848:	2a01      	cmp	r2, #1
 800a84a:	d80b      	bhi.n	800a864 <__cxa_rethrow+0x68>
 800a84c:	6962      	ldr	r2, [r4, #20]
 800a84e:	4252      	negs	r2, r2
 800a850:	6162      	str	r2, [r4, #20]
 800a852:	3420      	adds	r4, #32
 800a854:	4620      	mov	r0, r4
 800a856:	f7f6 fbf3 	bl	8001040 <_Unwind_Resume_or_Rethrow>
 800a85a:	4620      	mov	r0, r4
 800a85c:	f7ff fc69 	bl	800a132 <__cxa_begin_catch>
 800a860:	f7ff ff4a 	bl	800a6f8 <_ZSt9terminatev>
 800a864:	2200      	movs	r2, #0
 800a866:	6002      	str	r2, [r0, #0]
 800a868:	e7f3      	b.n	800a852 <__cxa_rethrow+0x56>
	...

0800a86c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	4b03      	ldr	r3, [pc, #12]	; (800a87c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 800a870:	6003      	str	r3, [r0, #0]
 800a872:	4604      	mov	r4, r0
 800a874:	f000 f8ed 	bl	800aa52 <_ZNSt9type_infoD1Ev>
 800a878:	4620      	mov	r0, r4
 800a87a:	bd10      	pop	{r4, pc}
 800a87c:	0800bc90 	.word	0x0800bc90

0800a880 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 800a880:	b510      	push	{r4, lr}
 800a882:	4604      	mov	r4, r0
 800a884:	f7ff fff2 	bl	800a86c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 800a888:	4620      	mov	r0, r4
 800a88a:	2108      	movs	r1, #8
 800a88c:	f7ff fae4 	bl	8009e58 <_ZdlPvj>
 800a890:	4620      	mov	r0, r4
 800a892:	bd10      	pop	{r4, pc}

0800a894 <__cxa_guard_acquire>:
 800a894:	6803      	ldr	r3, [r0, #0]
 800a896:	07db      	lsls	r3, r3, #31
 800a898:	d406      	bmi.n	800a8a8 <__cxa_guard_acquire+0x14>
 800a89a:	7843      	ldrb	r3, [r0, #1]
 800a89c:	b103      	cbz	r3, 800a8a0 <__cxa_guard_acquire+0xc>
 800a89e:	deff      	udf	#255	; 0xff
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	7043      	strb	r3, [r0, #1]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	4770      	bx	lr
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	4770      	bx	lr

0800a8ac <__cxa_guard_abort>:
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	7043      	strb	r3, [r0, #1]
 800a8b0:	4770      	bx	lr

0800a8b2 <__cxa_guard_release>:
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	6003      	str	r3, [r0, #0]
 800a8b6:	4770      	bx	lr

0800a8b8 <_Znwj>:
 800a8b8:	2801      	cmp	r0, #1
 800a8ba:	bf38      	it	cc
 800a8bc:	2001      	movcc	r0, #1
 800a8be:	b510      	push	{r4, lr}
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fb58 	bl	800af78 <malloc>
 800a8c8:	b930      	cbnz	r0, 800a8d8 <_Znwj+0x20>
 800a8ca:	f000 f999 	bl	800ac00 <_ZSt15get_new_handlerv>
 800a8ce:	b908      	cbnz	r0, 800a8d4 <_Znwj+0x1c>
 800a8d0:	f000 fa27 	bl	800ad22 <abort>
 800a8d4:	4780      	blx	r0
 800a8d6:	e7f4      	b.n	800a8c2 <_Znwj+0xa>
 800a8d8:	bd10      	pop	{r4, pc}

0800a8da <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 800a8da:	2001      	movs	r0, #1
 800a8dc:	4770      	bx	lr
	...

0800a8e0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 800a8e0:	b510      	push	{r4, lr}
 800a8e2:	4b03      	ldr	r3, [pc, #12]	; (800a8f0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 800a8e4:	6003      	str	r3, [r0, #0]
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	f000 f99c 	bl	800ac24 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	bd10      	pop	{r4, pc}
 800a8f0:	0800bce0 	.word	0x0800bce0

0800a8f4 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	f7ff fff2 	bl	800a8e0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	2110      	movs	r1, #16
 800a900:	f7ff faaa 	bl	8009e58 <_ZdlPvj>
 800a904:	4620      	mov	r0, r4
 800a906:	bd10      	pop	{r4, pc}

0800a908 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 800a908:	2b01      	cmp	r3, #1
 800a90a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a90c:	4606      	mov	r6, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	461d      	mov	r5, r3
 800a912:	d80f      	bhi.n	800a934 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2c>
 800a914:	490c      	ldr	r1, [pc, #48]	; (800a948 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
 800a916:	68c0      	ldr	r0, [r0, #12]
 800a918:	9201      	str	r2, [sp, #4]
 800a91a:	f000 f89f 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800a91e:	9a01      	ldr	r2, [sp, #4]
 800a920:	b140      	cbz	r0, 800a934 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2c>
 800a922:	68e0      	ldr	r0, [r4, #12]
 800a924:	6803      	ldr	r3, [r0, #0]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	4798      	blx	r3
 800a92a:	f080 0001 	eor.w	r0, r0, #1
 800a92e:	b2c0      	uxtb	r0, r0
 800a930:	b002      	add	sp, #8
 800a932:	bd70      	pop	{r4, r5, r6, pc}
 800a934:	68f0      	ldr	r0, [r6, #12]
 800a936:	68e1      	ldr	r1, [r4, #12]
 800a938:	6803      	ldr	r3, [r0, #0]
 800a93a:	691e      	ldr	r6, [r3, #16]
 800a93c:	1cab      	adds	r3, r5, #2
 800a93e:	46b4      	mov	ip, r6
 800a940:	b002      	add	sp, #8
 800a942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a946:	4760      	bx	ip
 800a948:	0800bc4c 	.word	0x0800bc4c

0800a94c <__cxa_pure_virtual>:
 800a94c:	b508      	push	{r3, lr}
 800a94e:	f7ff fed3 	bl	800a6f8 <_ZSt9terminatev>
	...

0800a954 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800a954:	b510      	push	{r4, lr}
 800a956:	4b03      	ldr	r3, [pc, #12]	; (800a964 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800a958:	6003      	str	r3, [r0, #0]
 800a95a:	4604      	mov	r4, r0
 800a95c:	f000 f8bc 	bl	800aad8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800a960:	4620      	mov	r0, r4
 800a962:	bd10      	pop	{r4, pc}
 800a964:	0800bd38 	.word	0x0800bd38

0800a968 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800a968:	b510      	push	{r4, lr}
 800a96a:	4604      	mov	r4, r0
 800a96c:	f7ff fff2 	bl	800a954 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800a970:	4620      	mov	r0, r4
 800a972:	210c      	movs	r1, #12
 800a974:	f7ff fa70 	bl	8009e58 <_ZdlPvj>
 800a978:	4620      	mov	r0, r4
 800a97a:	bd10      	pop	{r4, pc}

0800a97c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800a97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a97e:	9f08      	ldr	r7, [sp, #32]
 800a980:	4297      	cmp	r7, r2
 800a982:	4605      	mov	r5, r0
 800a984:	460e      	mov	r6, r1
 800a986:	4614      	mov	r4, r2
 800a988:	d00a      	beq.n	800a9a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 800a98a:	68a8      	ldr	r0, [r5, #8]
 800a98c:	6802      	ldr	r2, [r0, #0]
 800a98e:	9708      	str	r7, [sp, #32]
 800a990:	6a15      	ldr	r5, [r2, #32]
 800a992:	4631      	mov	r1, r6
 800a994:	4622      	mov	r2, r4
 800a996:	46ac      	mov	ip, r5
 800a998:	b003      	add	sp, #12
 800a99a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a99e:	4760      	bx	ip
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	f000 f85a 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800a9a8:	9b01      	ldr	r3, [sp, #4]
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d0ed      	beq.n	800a98a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800a9ae:	2006      	movs	r0, #6
 800a9b0:	b003      	add	sp, #12
 800a9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800a9b4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	460d      	mov	r5, r1
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 800a9c0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 800a9c4:	4681      	mov	r9, r0
 800a9c6:	4617      	mov	r7, r2
 800a9c8:	4698      	mov	r8, r3
 800a9ca:	f000 f847 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800a9ce:	b190      	cbz	r0, 800a9f6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 800a9d0:	2d00      	cmp	r5, #0
 800a9d2:	6034      	str	r4, [r6, #0]
 800a9d4:	7137      	strb	r7, [r6, #4]
 800a9d6:	db09      	blt.n	800a9ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800a9d8:	1961      	adds	r1, r4, r5
 800a9da:	458a      	cmp	sl, r1
 800a9dc:	bf0c      	ite	eq
 800a9de:	2106      	moveq	r1, #6
 800a9e0:	2101      	movne	r1, #1
 800a9e2:	71b1      	strb	r1, [r6, #6]
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	b001      	add	sp, #4
 800a9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ec:	3502      	adds	r5, #2
 800a9ee:	d1f9      	bne.n	800a9e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	71b3      	strb	r3, [r6, #6]
 800a9f4:	e7f6      	b.n	800a9e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800a9f6:	4554      	cmp	r4, sl
 800a9f8:	d106      	bne.n	800aa08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800a9fa:	4659      	mov	r1, fp
 800a9fc:	4648      	mov	r0, r9
 800a9fe:	f000 f82d 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800aa02:	b108      	cbz	r0, 800aa08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800aa04:	7177      	strb	r7, [r6, #5]
 800aa06:	e7ed      	b.n	800a9e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800aa08:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800aa0c:	6803      	ldr	r3, [r0, #0]
 800aa0e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 800aa12:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 800aa16:	69dc      	ldr	r4, [r3, #28]
 800aa18:	463a      	mov	r2, r7
 800aa1a:	4643      	mov	r3, r8
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	46a4      	mov	ip, r4
 800aa20:	b001      	add	sp, #4
 800aa22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa26:	4760      	bx	ip

0800aa28 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800aa28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2c:	4607      	mov	r7, r0
 800aa2e:	460c      	mov	r4, r1
 800aa30:	4615      	mov	r5, r2
 800aa32:	461e      	mov	r6, r3
 800aa34:	f000 f883 	bl	800ab3e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800aa38:	b948      	cbnz	r0, 800aa4e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800aa3a:	68b8      	ldr	r0, [r7, #8]
 800aa3c:	6803      	ldr	r3, [r0, #0]
 800aa3e:	699f      	ldr	r7, [r3, #24]
 800aa40:	462a      	mov	r2, r5
 800aa42:	4633      	mov	r3, r6
 800aa44:	4621      	mov	r1, r4
 800aa46:	46bc      	mov	ip, r7
 800aa48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4c:	4760      	bx	ip
 800aa4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa52 <_ZNSt9type_infoD1Ev>:
 800aa52:	4770      	bx	lr

0800aa54 <_ZNKSt9type_info14__is_pointer_pEv>:
 800aa54:	2000      	movs	r0, #0
 800aa56:	4770      	bx	lr

0800aa58 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 800aa58:	2000      	movs	r0, #0
 800aa5a:	4770      	bx	lr

0800aa5c <_ZNKSt9type_infoeqERKS_>:
 800aa5c:	4281      	cmp	r1, r0
 800aa5e:	b508      	push	{r3, lr}
 800aa60:	d00e      	beq.n	800aa80 <_ZNKSt9type_infoeqERKS_+0x24>
 800aa62:	6840      	ldr	r0, [r0, #4]
 800aa64:	7803      	ldrb	r3, [r0, #0]
 800aa66:	2b2a      	cmp	r3, #42	; 0x2a
 800aa68:	d00c      	beq.n	800aa84 <_ZNKSt9type_infoeqERKS_+0x28>
 800aa6a:	6849      	ldr	r1, [r1, #4]
 800aa6c:	780b      	ldrb	r3, [r1, #0]
 800aa6e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa70:	bf08      	it	eq
 800aa72:	3101      	addeq	r1, #1
 800aa74:	f7f5 fbe4 	bl	8000240 <strcmp>
 800aa78:	fab0 f080 	clz	r0, r0
 800aa7c:	0940      	lsrs	r0, r0, #5
 800aa7e:	bd08      	pop	{r3, pc}
 800aa80:	2001      	movs	r0, #1
 800aa82:	e7fc      	b.n	800aa7e <_ZNKSt9type_infoeqERKS_+0x22>
 800aa84:	2000      	movs	r0, #0
 800aa86:	e7fa      	b.n	800aa7e <_ZNKSt9type_infoeqERKS_+0x22>

0800aa88 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 800aa88:	f7ff bfe8 	b.w	800aa5c <_ZNKSt9type_infoeqERKS_>

0800aa8c <_ZSt17__throw_bad_allocv>:
 800aa8c:	b508      	push	{r3, lr}
 800aa8e:	f000 f948 	bl	800ad22 <abort>

0800aa92 <_ZSt20__throw_length_errorPKc>:
 800aa92:	b508      	push	{r3, lr}
 800aa94:	f000 f945 	bl	800ad22 <abort>

0800aa98 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800aa98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800aa9a:	2400      	movs	r4, #0
 800aa9c:	2310      	movs	r3, #16
 800aa9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aaa2:	6803      	ldr	r3, [r0, #0]
 800aaa4:	9400      	str	r4, [sp, #0]
 800aaa6:	699e      	ldr	r6, [r3, #24]
 800aaa8:	f88d 4004 	strb.w	r4, [sp, #4]
 800aaac:	4615      	mov	r5, r2
 800aaae:	466b      	mov	r3, sp
 800aab0:	6812      	ldr	r2, [r2, #0]
 800aab2:	47b0      	blx	r6
 800aab4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aab8:	f003 0306 	and.w	r3, r3, #6
 800aabc:	2b06      	cmp	r3, #6
 800aabe:	bf03      	ittte	eq
 800aac0:	9b00      	ldreq	r3, [sp, #0]
 800aac2:	602b      	streq	r3, [r5, #0]
 800aac4:	2001      	moveq	r0, #1
 800aac6:	4620      	movne	r0, r4
 800aac8:	b004      	add	sp, #16
 800aaca:	bd70      	pop	{r4, r5, r6, pc}

0800aacc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800aacc:	9800      	ldr	r0, [sp, #0]
 800aace:	4290      	cmp	r0, r2
 800aad0:	bf14      	ite	ne
 800aad2:	2001      	movne	r0, #1
 800aad4:	2006      	moveq	r0, #6
 800aad6:	4770      	bx	lr

0800aad8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800aad8:	b510      	push	{r4, lr}
 800aada:	4b03      	ldr	r3, [pc, #12]	; (800aae8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800aadc:	6003      	str	r3, [r0, #0]
 800aade:	4604      	mov	r4, r0
 800aae0:	f7ff ffb7 	bl	800aa52 <_ZNSt9type_infoD1Ev>
 800aae4:	4620      	mov	r0, r4
 800aae6:	bd10      	pop	{r4, pc}
 800aae8:	0800bdac 	.word	0x0800bdac

0800aaec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800aaec:	b510      	push	{r4, lr}
 800aaee:	4604      	mov	r4, r0
 800aaf0:	f7ff fff2 	bl	800aad8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	2108      	movs	r1, #8
 800aaf8:	f7ff f9ae 	bl	8009e58 <_ZdlPvj>
 800aafc:	4620      	mov	r0, r4
 800aafe:	bd10      	pop	{r4, pc}

0800ab00 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800ab00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab04:	461f      	mov	r7, r3
 800ab06:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800ab0a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ab0e:	4598      	cmp	r8, r3
 800ab10:	4606      	mov	r6, r0
 800ab12:	4615      	mov	r5, r2
 800ab14:	d107      	bne.n	800ab26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800ab16:	9907      	ldr	r1, [sp, #28]
 800ab18:	f7ff ffa0 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800ab1c:	b118      	cbz	r0, 800ab26 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800ab1e:	7165      	strb	r5, [r4, #5]
 800ab20:	2000      	movs	r0, #0
 800ab22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab26:	4639      	mov	r1, r7
 800ab28:	4630      	mov	r0, r6
 800ab2a:	f7ff ff97 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	d0f6      	beq.n	800ab20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800ab32:	2301      	movs	r3, #1
 800ab34:	f8c4 8000 	str.w	r8, [r4]
 800ab38:	7125      	strb	r5, [r4, #4]
 800ab3a:	71a3      	strb	r3, [r4, #6]
 800ab3c:	e7f0      	b.n	800ab20 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0800ab3e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800ab3e:	b538      	push	{r3, r4, r5, lr}
 800ab40:	4615      	mov	r5, r2
 800ab42:	461c      	mov	r4, r3
 800ab44:	f7ff ff8a 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800ab48:	b120      	cbz	r0, 800ab54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800ab4a:	2308      	movs	r3, #8
 800ab4c:	60e3      	str	r3, [r4, #12]
 800ab4e:	2306      	movs	r3, #6
 800ab50:	6025      	str	r5, [r4, #0]
 800ab52:	7123      	strb	r3, [r4, #4]
 800ab54:	bd38      	pop	{r3, r4, r5, pc}

0800ab56 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800ab56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab58:	4605      	mov	r5, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	9201      	str	r2, [sp, #4]
 800ab5e:	461e      	mov	r6, r3
 800ab60:	f7ff ff7c 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800ab64:	b950      	cbnz	r0, 800ab7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800ab66:	2e03      	cmp	r6, #3
 800ab68:	d808      	bhi.n	800ab7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	9a01      	ldr	r2, [sp, #4]
 800ab6e:	695b      	ldr	r3, [r3, #20]
 800ab70:	4629      	mov	r1, r5
 800ab72:	4620      	mov	r0, r4
 800ab74:	b002      	add	sp, #8
 800ab76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab7a:	4718      	bx	r3
 800ab7c:	b002      	add	sp, #8
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}

0800ab80 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800ab80:	7803      	ldrb	r3, [r0, #0]
 800ab82:	2b47      	cmp	r3, #71	; 0x47
 800ab84:	d117      	bne.n	800abb6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ab86:	7843      	ldrb	r3, [r0, #1]
 800ab88:	2b4e      	cmp	r3, #78	; 0x4e
 800ab8a:	d114      	bne.n	800abb6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ab8c:	7883      	ldrb	r3, [r0, #2]
 800ab8e:	2b55      	cmp	r3, #85	; 0x55
 800ab90:	d111      	bne.n	800abb6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ab92:	78c3      	ldrb	r3, [r0, #3]
 800ab94:	2b43      	cmp	r3, #67	; 0x43
 800ab96:	d10e      	bne.n	800abb6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ab98:	7903      	ldrb	r3, [r0, #4]
 800ab9a:	2b43      	cmp	r3, #67	; 0x43
 800ab9c:	d10b      	bne.n	800abb6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ab9e:	7943      	ldrb	r3, [r0, #5]
 800aba0:	2b2b      	cmp	r3, #43	; 0x2b
 800aba2:	d108      	bne.n	800abb6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800aba4:	7983      	ldrb	r3, [r0, #6]
 800aba6:	2b2b      	cmp	r3, #43	; 0x2b
 800aba8:	d105      	bne.n	800abb6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800abaa:	79c0      	ldrb	r0, [r0, #7]
 800abac:	2801      	cmp	r0, #1
 800abae:	bf8c      	ite	hi
 800abb0:	2000      	movhi	r0, #0
 800abb2:	2001      	movls	r0, #1
 800abb4:	4770      	bx	lr
 800abb6:	2000      	movs	r0, #0
 800abb8:	4770      	bx	lr

0800abba <__cxa_call_terminate>:
 800abba:	b510      	push	{r4, lr}
 800abbc:	4604      	mov	r4, r0
 800abbe:	b148      	cbz	r0, 800abd4 <__cxa_call_terminate+0x1a>
 800abc0:	f7ff fab7 	bl	800a132 <__cxa_begin_catch>
 800abc4:	4620      	mov	r0, r4
 800abc6:	f7ff ffdb 	bl	800ab80 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800abca:	b118      	cbz	r0, 800abd4 <__cxa_call_terminate+0x1a>
 800abcc:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800abd0:	f7ff fd86 	bl	800a6e0 <_ZN10__cxxabiv111__terminateEPFvvE>
 800abd4:	f7ff fd90 	bl	800a6f8 <_ZSt9terminatev>

0800abd8 <__cxa_call_unexpected>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4602      	mov	r2, r0
 800abdc:	f7ff ffd0 	bl	800ab80 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800abe0:	b140      	cbz	r0, 800abf4 <__cxa_call_unexpected+0x1c>
 800abe2:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800abe6:	2500      	movs	r5, #0
 800abe8:	4610      	mov	r0, r2
 800abea:	f7ff faa2 	bl	800a132 <__cxa_begin_catch>
 800abee:	b125      	cbz	r5, 800abfa <__cxa_call_unexpected+0x22>
 800abf0:	f7ff fd94 	bl	800a71c <_ZSt10unexpectedv>
 800abf4:	4604      	mov	r4, r0
 800abf6:	2501      	movs	r5, #1
 800abf8:	e7f6      	b.n	800abe8 <__cxa_call_unexpected+0x10>
 800abfa:	4620      	mov	r0, r4
 800abfc:	f7ff fd81 	bl	800a702 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800ac00 <_ZSt15get_new_handlerv>:
 800ac00:	4b02      	ldr	r3, [pc, #8]	; (800ac0c <_ZSt15get_new_handlerv+0xc>)
 800ac02:	6818      	ldr	r0, [r3, #0]
 800ac04:	f3bf 8f5b 	dmb	ish
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	20000f28 	.word	0x20000f28

0800ac10 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 800ac10:	68c0      	ldr	r0, [r0, #12]
 800ac12:	68c9      	ldr	r1, [r1, #12]
 800ac14:	b410      	push	{r4}
 800ac16:	6804      	ldr	r4, [r0, #0]
 800ac18:	6924      	ldr	r4, [r4, #16]
 800ac1a:	3302      	adds	r3, #2
 800ac1c:	46a4      	mov	ip, r4
 800ac1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac22:	4760      	bx	ip

0800ac24 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 800ac24:	b510      	push	{r4, lr}
 800ac26:	4b03      	ldr	r3, [pc, #12]	; (800ac34 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 800ac28:	6003      	str	r3, [r0, #0]
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	f7ff ff11 	bl	800aa52 <_ZNSt9type_infoD1Ev>
 800ac30:	4620      	mov	r0, r4
 800ac32:	bd10      	pop	{r4, pc}
 800ac34:	0800be08 	.word	0x0800be08

0800ac38 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	f7ff fff2 	bl	800ac24 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800ac40:	4620      	mov	r0, r4
 800ac42:	2110      	movs	r1, #16
 800ac44:	f7ff f908 	bl	8009e58 <_ZdlPvj>
 800ac48:	4620      	mov	r0, r4
 800ac4a:	bd10      	pop	{r4, pc}

0800ac4c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 800ac4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	4605      	mov	r5, r0
 800ac52:	460e      	mov	r6, r1
 800ac54:	4617      	mov	r7, r2
 800ac56:	4698      	mov	r8, r3
 800ac58:	f7ff ff00 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	b9f0      	cbnz	r0, 800ac9e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800ac60:	4929      	ldr	r1, [pc, #164]	; (800ad08 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>)
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7ff fefa 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800ac68:	b300      	cbz	r0, 800acac <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800ac6a:	682b      	ldr	r3, [r5, #0]
 800ac6c:	4927      	ldr	r1, [pc, #156]	; (800ad0c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc0>)
 800ac6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac72:	f7ff fef3 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800ac76:	b110      	cbz	r0, 800ac7e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
 800ac78:	603c      	str	r4, [r7, #0]
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	e00f      	b.n	800ac9e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800ac7e:	682b      	ldr	r3, [r5, #0]
 800ac80:	4923      	ldr	r1, [pc, #140]	; (800ad10 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>)
 800ac82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac86:	f7ff fee9 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800ac8a:	4681      	mov	r9, r0
 800ac8c:	b170      	cbz	r0, 800acac <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800ac8e:	68e8      	ldr	r0, [r5, #12]
 800ac90:	6803      	ldr	r3, [r0, #0]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	4798      	blx	r3
 800ac96:	4604      	mov	r4, r0
 800ac98:	b120      	cbz	r0, 800aca4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 800ac9a:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc8>)
 800ac9c:	603b      	str	r3, [r7, #0]
 800ac9e:	4620      	mov	r0, r4
 800aca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca4:	4b1c      	ldr	r3, [pc, #112]	; (800ad18 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xcc>)
 800aca6:	603b      	str	r3, [r7, #0]
 800aca8:	464c      	mov	r4, r9
 800acaa:	e7f8      	b.n	800ac9e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800acb2:	b33e      	cbz	r6, 800ad04 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb8>
 800acb4:	6833      	ldr	r3, [r6, #0]
 800acb6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800acba:	f7ff fecf 	bl	800aa5c <_ZNKSt9type_infoeqERKS_>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d0db      	beq.n	800ac7a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x2e>
 800acc2:	f018 0f01 	tst.w	r8, #1
 800acc6:	d0ea      	beq.n	800ac9e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800acc8:	68b3      	ldr	r3, [r6, #8]
 800acca:	68a9      	ldr	r1, [r5, #8]
 800accc:	f003 0060 	and.w	r0, r3, #96	; 0x60
 800acd0:	f001 0260 	and.w	r2, r1, #96	; 0x60
 800acd4:	ea30 0c02 	bics.w	ip, r0, r2
 800acd8:	bf18      	it	ne
 800acda:	4013      	andne	r3, r2
 800acdc:	ea23 0301 	bic.w	r3, r3, r1
 800ace0:	ea22 0200 	bic.w	r2, r2, r0
 800ace4:	4313      	orrs	r3, r2
 800ace6:	d1da      	bne.n	800ac9e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800ace8:	07cb      	lsls	r3, r1, #31
 800acea:	682b      	ldr	r3, [r5, #0]
 800acec:	699c      	ldr	r4, [r3, #24]
 800acee:	bf58      	it	pl
 800acf0:	f028 0801 	bicpl.w	r8, r8, #1
 800acf4:	4643      	mov	r3, r8
 800acf6:	463a      	mov	r2, r7
 800acf8:	4631      	mov	r1, r6
 800acfa:	4628      	mov	r0, r5
 800acfc:	46a4      	mov	ip, r4
 800acfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad02:	4760      	bx	ip
 800ad04:	f000 f80a 	bl	800ad1c <__cxa_bad_typeid>
 800ad08:	0800bc2c 	.word	0x0800bc2c
 800ad0c:	0800bca8 	.word	0x0800bca8
 800ad10:	0800be30 	.word	0x0800be30
 800ad14:	0800be28 	.word	0x0800be28
 800ad18:	0800be24 	.word	0x0800be24

0800ad1c <__cxa_bad_typeid>:
 800ad1c:	b508      	push	{r3, lr}
 800ad1e:	f000 f800 	bl	800ad22 <abort>

0800ad22 <abort>:
 800ad22:	b508      	push	{r3, lr}
 800ad24:	2006      	movs	r0, #6
 800ad26:	f000 fb19 	bl	800b35c <raise>
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	f7f9 f988 	bl	8004040 <_exit>

0800ad30 <__errno>:
 800ad30:	4b01      	ldr	r3, [pc, #4]	; (800ad38 <__errno+0x8>)
 800ad32:	6818      	ldr	r0, [r3, #0]
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	2000001c 	.word	0x2000001c

0800ad3c <std>:
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	b510      	push	{r4, lr}
 800ad40:	4604      	mov	r4, r0
 800ad42:	e9c0 3300 	strd	r3, r3, [r0]
 800ad46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad4a:	6083      	str	r3, [r0, #8]
 800ad4c:	8181      	strh	r1, [r0, #12]
 800ad4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ad50:	81c2      	strh	r2, [r0, #14]
 800ad52:	6183      	str	r3, [r0, #24]
 800ad54:	4619      	mov	r1, r3
 800ad56:	2208      	movs	r2, #8
 800ad58:	305c      	adds	r0, #92	; 0x5c
 800ad5a:	f000 f945 	bl	800afe8 <memset>
 800ad5e:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <std+0x38>)
 800ad60:	6263      	str	r3, [r4, #36]	; 0x24
 800ad62:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <std+0x3c>)
 800ad64:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad66:	4b05      	ldr	r3, [pc, #20]	; (800ad7c <std+0x40>)
 800ad68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad6a:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <std+0x44>)
 800ad6c:	6224      	str	r4, [r4, #32]
 800ad6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ad70:	bd10      	pop	{r4, pc}
 800ad72:	bf00      	nop
 800ad74:	0800b395 	.word	0x0800b395
 800ad78:	0800b3b7 	.word	0x0800b3b7
 800ad7c:	0800b3ef 	.word	0x0800b3ef
 800ad80:	0800b413 	.word	0x0800b413

0800ad84 <_cleanup_r>:
 800ad84:	4901      	ldr	r1, [pc, #4]	; (800ad8c <_cleanup_r+0x8>)
 800ad86:	f000 b8af 	b.w	800aee8 <_fwalk_reent>
 800ad8a:	bf00      	nop
 800ad8c:	0800b6ed 	.word	0x0800b6ed

0800ad90 <__sfmoreglue>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	1e4a      	subs	r2, r1, #1
 800ad94:	2568      	movs	r5, #104	; 0x68
 800ad96:	4355      	muls	r5, r2
 800ad98:	460e      	mov	r6, r1
 800ad9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad9e:	f000 f97b 	bl	800b098 <_malloc_r>
 800ada2:	4604      	mov	r4, r0
 800ada4:	b140      	cbz	r0, 800adb8 <__sfmoreglue+0x28>
 800ada6:	2100      	movs	r1, #0
 800ada8:	e9c0 1600 	strd	r1, r6, [r0]
 800adac:	300c      	adds	r0, #12
 800adae:	60a0      	str	r0, [r4, #8]
 800adb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800adb4:	f000 f918 	bl	800afe8 <memset>
 800adb8:	4620      	mov	r0, r4
 800adba:	bd70      	pop	{r4, r5, r6, pc}

0800adbc <__sfp_lock_acquire>:
 800adbc:	4801      	ldr	r0, [pc, #4]	; (800adc4 <__sfp_lock_acquire+0x8>)
 800adbe:	f000 b8d8 	b.w	800af72 <__retarget_lock_acquire_recursive>
 800adc2:	bf00      	nop
 800adc4:	2000108c 	.word	0x2000108c

0800adc8 <__sfp_lock_release>:
 800adc8:	4801      	ldr	r0, [pc, #4]	; (800add0 <__sfp_lock_release+0x8>)
 800adca:	f000 b8d3 	b.w	800af74 <__retarget_lock_release_recursive>
 800adce:	bf00      	nop
 800add0:	2000108c 	.word	0x2000108c

0800add4 <__sinit_lock_acquire>:
 800add4:	4801      	ldr	r0, [pc, #4]	; (800addc <__sinit_lock_acquire+0x8>)
 800add6:	f000 b8cc 	b.w	800af72 <__retarget_lock_acquire_recursive>
 800adda:	bf00      	nop
 800addc:	20001087 	.word	0x20001087

0800ade0 <__sinit_lock_release>:
 800ade0:	4801      	ldr	r0, [pc, #4]	; (800ade8 <__sinit_lock_release+0x8>)
 800ade2:	f000 b8c7 	b.w	800af74 <__retarget_lock_release_recursive>
 800ade6:	bf00      	nop
 800ade8:	20001087 	.word	0x20001087

0800adec <__sinit>:
 800adec:	b510      	push	{r4, lr}
 800adee:	4604      	mov	r4, r0
 800adf0:	f7ff fff0 	bl	800add4 <__sinit_lock_acquire>
 800adf4:	69a3      	ldr	r3, [r4, #24]
 800adf6:	b11b      	cbz	r3, 800ae00 <__sinit+0x14>
 800adf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adfc:	f7ff bff0 	b.w	800ade0 <__sinit_lock_release>
 800ae00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae04:	6523      	str	r3, [r4, #80]	; 0x50
 800ae06:	4b13      	ldr	r3, [pc, #76]	; (800ae54 <__sinit+0x68>)
 800ae08:	4a13      	ldr	r2, [pc, #76]	; (800ae58 <__sinit+0x6c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae0e:	42a3      	cmp	r3, r4
 800ae10:	bf04      	itt	eq
 800ae12:	2301      	moveq	r3, #1
 800ae14:	61a3      	streq	r3, [r4, #24]
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 f820 	bl	800ae5c <__sfp>
 800ae1c:	6060      	str	r0, [r4, #4]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 f81c 	bl	800ae5c <__sfp>
 800ae24:	60a0      	str	r0, [r4, #8]
 800ae26:	4620      	mov	r0, r4
 800ae28:	f000 f818 	bl	800ae5c <__sfp>
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	60e0      	str	r0, [r4, #12]
 800ae30:	2104      	movs	r1, #4
 800ae32:	6860      	ldr	r0, [r4, #4]
 800ae34:	f7ff ff82 	bl	800ad3c <std>
 800ae38:	68a0      	ldr	r0, [r4, #8]
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	2109      	movs	r1, #9
 800ae3e:	f7ff ff7d 	bl	800ad3c <std>
 800ae42:	68e0      	ldr	r0, [r4, #12]
 800ae44:	2202      	movs	r2, #2
 800ae46:	2112      	movs	r1, #18
 800ae48:	f7ff ff78 	bl	800ad3c <std>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	61a3      	str	r3, [r4, #24]
 800ae50:	e7d2      	b.n	800adf8 <__sinit+0xc>
 800ae52:	bf00      	nop
 800ae54:	0800becc 	.word	0x0800becc
 800ae58:	0800ad85 	.word	0x0800ad85

0800ae5c <__sfp>:
 800ae5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5e:	4607      	mov	r7, r0
 800ae60:	f7ff ffac 	bl	800adbc <__sfp_lock_acquire>
 800ae64:	4b1e      	ldr	r3, [pc, #120]	; (800aee0 <__sfp+0x84>)
 800ae66:	681e      	ldr	r6, [r3, #0]
 800ae68:	69b3      	ldr	r3, [r6, #24]
 800ae6a:	b913      	cbnz	r3, 800ae72 <__sfp+0x16>
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	f7ff ffbd 	bl	800adec <__sinit>
 800ae72:	3648      	adds	r6, #72	; 0x48
 800ae74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	d503      	bpl.n	800ae84 <__sfp+0x28>
 800ae7c:	6833      	ldr	r3, [r6, #0]
 800ae7e:	b30b      	cbz	r3, 800aec4 <__sfp+0x68>
 800ae80:	6836      	ldr	r6, [r6, #0]
 800ae82:	e7f7      	b.n	800ae74 <__sfp+0x18>
 800ae84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae88:	b9d5      	cbnz	r5, 800aec0 <__sfp+0x64>
 800ae8a:	4b16      	ldr	r3, [pc, #88]	; (800aee4 <__sfp+0x88>)
 800ae8c:	60e3      	str	r3, [r4, #12]
 800ae8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae92:	6665      	str	r5, [r4, #100]	; 0x64
 800ae94:	f000 f86c 	bl	800af70 <__retarget_lock_init_recursive>
 800ae98:	f7ff ff96 	bl	800adc8 <__sfp_lock_release>
 800ae9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aea4:	6025      	str	r5, [r4, #0]
 800aea6:	61a5      	str	r5, [r4, #24]
 800aea8:	2208      	movs	r2, #8
 800aeaa:	4629      	mov	r1, r5
 800aeac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aeb0:	f000 f89a 	bl	800afe8 <memset>
 800aeb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aeb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aebc:	4620      	mov	r0, r4
 800aebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec0:	3468      	adds	r4, #104	; 0x68
 800aec2:	e7d9      	b.n	800ae78 <__sfp+0x1c>
 800aec4:	2104      	movs	r1, #4
 800aec6:	4638      	mov	r0, r7
 800aec8:	f7ff ff62 	bl	800ad90 <__sfmoreglue>
 800aecc:	4604      	mov	r4, r0
 800aece:	6030      	str	r0, [r6, #0]
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d1d5      	bne.n	800ae80 <__sfp+0x24>
 800aed4:	f7ff ff78 	bl	800adc8 <__sfp_lock_release>
 800aed8:	230c      	movs	r3, #12
 800aeda:	603b      	str	r3, [r7, #0]
 800aedc:	e7ee      	b.n	800aebc <__sfp+0x60>
 800aede:	bf00      	nop
 800aee0:	0800becc 	.word	0x0800becc
 800aee4:	ffff0001 	.word	0xffff0001

0800aee8 <_fwalk_reent>:
 800aee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeec:	4606      	mov	r6, r0
 800aeee:	4688      	mov	r8, r1
 800aef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aef4:	2700      	movs	r7, #0
 800aef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aefa:	f1b9 0901 	subs.w	r9, r9, #1
 800aefe:	d505      	bpl.n	800af0c <_fwalk_reent+0x24>
 800af00:	6824      	ldr	r4, [r4, #0]
 800af02:	2c00      	cmp	r4, #0
 800af04:	d1f7      	bne.n	800aef6 <_fwalk_reent+0xe>
 800af06:	4638      	mov	r0, r7
 800af08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af0c:	89ab      	ldrh	r3, [r5, #12]
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d907      	bls.n	800af22 <_fwalk_reent+0x3a>
 800af12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af16:	3301      	adds	r3, #1
 800af18:	d003      	beq.n	800af22 <_fwalk_reent+0x3a>
 800af1a:	4629      	mov	r1, r5
 800af1c:	4630      	mov	r0, r6
 800af1e:	47c0      	blx	r8
 800af20:	4307      	orrs	r7, r0
 800af22:	3568      	adds	r5, #104	; 0x68
 800af24:	e7e9      	b.n	800aefa <_fwalk_reent+0x12>
	...

0800af28 <__libc_init_array>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	4d0d      	ldr	r5, [pc, #52]	; (800af60 <__libc_init_array+0x38>)
 800af2c:	4c0d      	ldr	r4, [pc, #52]	; (800af64 <__libc_init_array+0x3c>)
 800af2e:	1b64      	subs	r4, r4, r5
 800af30:	10a4      	asrs	r4, r4, #2
 800af32:	2600      	movs	r6, #0
 800af34:	42a6      	cmp	r6, r4
 800af36:	d109      	bne.n	800af4c <__libc_init_array+0x24>
 800af38:	4d0b      	ldr	r5, [pc, #44]	; (800af68 <__libc_init_array+0x40>)
 800af3a:	4c0c      	ldr	r4, [pc, #48]	; (800af6c <__libc_init_array+0x44>)
 800af3c:	f000 fcc2 	bl	800b8c4 <_init>
 800af40:	1b64      	subs	r4, r4, r5
 800af42:	10a4      	asrs	r4, r4, #2
 800af44:	2600      	movs	r6, #0
 800af46:	42a6      	cmp	r6, r4
 800af48:	d105      	bne.n	800af56 <__libc_init_array+0x2e>
 800af4a:	bd70      	pop	{r4, r5, r6, pc}
 800af4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af50:	4798      	blx	r3
 800af52:	3601      	adds	r6, #1
 800af54:	e7ee      	b.n	800af34 <__libc_init_array+0xc>
 800af56:	f855 3b04 	ldr.w	r3, [r5], #4
 800af5a:	4798      	blx	r3
 800af5c:	3601      	adds	r6, #1
 800af5e:	e7f2      	b.n	800af46 <__libc_init_array+0x1e>
 800af60:	0800c4e4 	.word	0x0800c4e4
 800af64:	0800c4e4 	.word	0x0800c4e4
 800af68:	0800c4e4 	.word	0x0800c4e4
 800af6c:	0800c4f4 	.word	0x0800c4f4

0800af70 <__retarget_lock_init_recursive>:
 800af70:	4770      	bx	lr

0800af72 <__retarget_lock_acquire_recursive>:
 800af72:	4770      	bx	lr

0800af74 <__retarget_lock_release_recursive>:
 800af74:	4770      	bx	lr
	...

0800af78 <malloc>:
 800af78:	4b02      	ldr	r3, [pc, #8]	; (800af84 <malloc+0xc>)
 800af7a:	4601      	mov	r1, r0
 800af7c:	6818      	ldr	r0, [r3, #0]
 800af7e:	f000 b88b 	b.w	800b098 <_malloc_r>
 800af82:	bf00      	nop
 800af84:	2000001c 	.word	0x2000001c

0800af88 <free>:
 800af88:	4b02      	ldr	r3, [pc, #8]	; (800af94 <free+0xc>)
 800af8a:	4601      	mov	r1, r0
 800af8c:	6818      	ldr	r0, [r3, #0]
 800af8e:	f000 b833 	b.w	800aff8 <_free_r>
 800af92:	bf00      	nop
 800af94:	2000001c 	.word	0x2000001c

0800af98 <memcpy>:
 800af98:	440a      	add	r2, r1
 800af9a:	4291      	cmp	r1, r2
 800af9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800afa0:	d100      	bne.n	800afa4 <memcpy+0xc>
 800afa2:	4770      	bx	lr
 800afa4:	b510      	push	{r4, lr}
 800afa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afae:	4291      	cmp	r1, r2
 800afb0:	d1f9      	bne.n	800afa6 <memcpy+0xe>
 800afb2:	bd10      	pop	{r4, pc}

0800afb4 <memmove>:
 800afb4:	4288      	cmp	r0, r1
 800afb6:	b510      	push	{r4, lr}
 800afb8:	eb01 0402 	add.w	r4, r1, r2
 800afbc:	d902      	bls.n	800afc4 <memmove+0x10>
 800afbe:	4284      	cmp	r4, r0
 800afc0:	4623      	mov	r3, r4
 800afc2:	d807      	bhi.n	800afd4 <memmove+0x20>
 800afc4:	1e43      	subs	r3, r0, #1
 800afc6:	42a1      	cmp	r1, r4
 800afc8:	d008      	beq.n	800afdc <memmove+0x28>
 800afca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afd2:	e7f8      	b.n	800afc6 <memmove+0x12>
 800afd4:	4402      	add	r2, r0
 800afd6:	4601      	mov	r1, r0
 800afd8:	428a      	cmp	r2, r1
 800afda:	d100      	bne.n	800afde <memmove+0x2a>
 800afdc:	bd10      	pop	{r4, pc}
 800afde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afe6:	e7f7      	b.n	800afd8 <memmove+0x24>

0800afe8 <memset>:
 800afe8:	4402      	add	r2, r0
 800afea:	4603      	mov	r3, r0
 800afec:	4293      	cmp	r3, r2
 800afee:	d100      	bne.n	800aff2 <memset+0xa>
 800aff0:	4770      	bx	lr
 800aff2:	f803 1b01 	strb.w	r1, [r3], #1
 800aff6:	e7f9      	b.n	800afec <memset+0x4>

0800aff8 <_free_r>:
 800aff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800affa:	2900      	cmp	r1, #0
 800affc:	d048      	beq.n	800b090 <_free_r+0x98>
 800affe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b002:	9001      	str	r0, [sp, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f1a1 0404 	sub.w	r4, r1, #4
 800b00a:	bfb8      	it	lt
 800b00c:	18e4      	addlt	r4, r4, r3
 800b00e:	f7f6 fa91 	bl	8001534 <__malloc_lock>
 800b012:	4a20      	ldr	r2, [pc, #128]	; (800b094 <_free_r+0x9c>)
 800b014:	9801      	ldr	r0, [sp, #4]
 800b016:	6813      	ldr	r3, [r2, #0]
 800b018:	4615      	mov	r5, r2
 800b01a:	b933      	cbnz	r3, 800b02a <_free_r+0x32>
 800b01c:	6063      	str	r3, [r4, #4]
 800b01e:	6014      	str	r4, [r2, #0]
 800b020:	b003      	add	sp, #12
 800b022:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b026:	f7f6 baa3 	b.w	8001570 <__malloc_unlock>
 800b02a:	42a3      	cmp	r3, r4
 800b02c:	d90b      	bls.n	800b046 <_free_r+0x4e>
 800b02e:	6821      	ldr	r1, [r4, #0]
 800b030:	1862      	adds	r2, r4, r1
 800b032:	4293      	cmp	r3, r2
 800b034:	bf04      	itt	eq
 800b036:	681a      	ldreq	r2, [r3, #0]
 800b038:	685b      	ldreq	r3, [r3, #4]
 800b03a:	6063      	str	r3, [r4, #4]
 800b03c:	bf04      	itt	eq
 800b03e:	1852      	addeq	r2, r2, r1
 800b040:	6022      	streq	r2, [r4, #0]
 800b042:	602c      	str	r4, [r5, #0]
 800b044:	e7ec      	b.n	800b020 <_free_r+0x28>
 800b046:	461a      	mov	r2, r3
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	b10b      	cbz	r3, 800b050 <_free_r+0x58>
 800b04c:	42a3      	cmp	r3, r4
 800b04e:	d9fa      	bls.n	800b046 <_free_r+0x4e>
 800b050:	6811      	ldr	r1, [r2, #0]
 800b052:	1855      	adds	r5, r2, r1
 800b054:	42a5      	cmp	r5, r4
 800b056:	d10b      	bne.n	800b070 <_free_r+0x78>
 800b058:	6824      	ldr	r4, [r4, #0]
 800b05a:	4421      	add	r1, r4
 800b05c:	1854      	adds	r4, r2, r1
 800b05e:	42a3      	cmp	r3, r4
 800b060:	6011      	str	r1, [r2, #0]
 800b062:	d1dd      	bne.n	800b020 <_free_r+0x28>
 800b064:	681c      	ldr	r4, [r3, #0]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	6053      	str	r3, [r2, #4]
 800b06a:	4421      	add	r1, r4
 800b06c:	6011      	str	r1, [r2, #0]
 800b06e:	e7d7      	b.n	800b020 <_free_r+0x28>
 800b070:	d902      	bls.n	800b078 <_free_r+0x80>
 800b072:	230c      	movs	r3, #12
 800b074:	6003      	str	r3, [r0, #0]
 800b076:	e7d3      	b.n	800b020 <_free_r+0x28>
 800b078:	6825      	ldr	r5, [r4, #0]
 800b07a:	1961      	adds	r1, r4, r5
 800b07c:	428b      	cmp	r3, r1
 800b07e:	bf04      	itt	eq
 800b080:	6819      	ldreq	r1, [r3, #0]
 800b082:	685b      	ldreq	r3, [r3, #4]
 800b084:	6063      	str	r3, [r4, #4]
 800b086:	bf04      	itt	eq
 800b088:	1949      	addeq	r1, r1, r5
 800b08a:	6021      	streq	r1, [r4, #0]
 800b08c:	6054      	str	r4, [r2, #4]
 800b08e:	e7c7      	b.n	800b020 <_free_r+0x28>
 800b090:	b003      	add	sp, #12
 800b092:	bd30      	pop	{r4, r5, pc}
 800b094:	20000f2c 	.word	0x20000f2c

0800b098 <_malloc_r>:
 800b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09a:	1ccd      	adds	r5, r1, #3
 800b09c:	f025 0503 	bic.w	r5, r5, #3
 800b0a0:	3508      	adds	r5, #8
 800b0a2:	2d0c      	cmp	r5, #12
 800b0a4:	bf38      	it	cc
 800b0a6:	250c      	movcc	r5, #12
 800b0a8:	2d00      	cmp	r5, #0
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	db01      	blt.n	800b0b2 <_malloc_r+0x1a>
 800b0ae:	42a9      	cmp	r1, r5
 800b0b0:	d903      	bls.n	800b0ba <_malloc_r+0x22>
 800b0b2:	230c      	movs	r3, #12
 800b0b4:	6033      	str	r3, [r6, #0]
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ba:	f7f6 fa3b 	bl	8001534 <__malloc_lock>
 800b0be:	4921      	ldr	r1, [pc, #132]	; (800b144 <_malloc_r+0xac>)
 800b0c0:	680a      	ldr	r2, [r1, #0]
 800b0c2:	4614      	mov	r4, r2
 800b0c4:	b99c      	cbnz	r4, 800b0ee <_malloc_r+0x56>
 800b0c6:	4f20      	ldr	r7, [pc, #128]	; (800b148 <_malloc_r+0xb0>)
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	b923      	cbnz	r3, 800b0d6 <_malloc_r+0x3e>
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	f7f6 f9be 	bl	8001450 <_sbrk_r>
 800b0d4:	6038      	str	r0, [r7, #0]
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	4630      	mov	r0, r6
 800b0da:	f7f6 f9b9 	bl	8001450 <_sbrk_r>
 800b0de:	1c43      	adds	r3, r0, #1
 800b0e0:	d123      	bne.n	800b12a <_malloc_r+0x92>
 800b0e2:	230c      	movs	r3, #12
 800b0e4:	6033      	str	r3, [r6, #0]
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f7f6 fa42 	bl	8001570 <__malloc_unlock>
 800b0ec:	e7e3      	b.n	800b0b6 <_malloc_r+0x1e>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	1b5b      	subs	r3, r3, r5
 800b0f2:	d417      	bmi.n	800b124 <_malloc_r+0x8c>
 800b0f4:	2b0b      	cmp	r3, #11
 800b0f6:	d903      	bls.n	800b100 <_malloc_r+0x68>
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	441c      	add	r4, r3
 800b0fc:	6025      	str	r5, [r4, #0]
 800b0fe:	e004      	b.n	800b10a <_malloc_r+0x72>
 800b100:	6863      	ldr	r3, [r4, #4]
 800b102:	42a2      	cmp	r2, r4
 800b104:	bf0c      	ite	eq
 800b106:	600b      	streq	r3, [r1, #0]
 800b108:	6053      	strne	r3, [r2, #4]
 800b10a:	4630      	mov	r0, r6
 800b10c:	f7f6 fa30 	bl	8001570 <__malloc_unlock>
 800b110:	f104 000b 	add.w	r0, r4, #11
 800b114:	1d23      	adds	r3, r4, #4
 800b116:	f020 0007 	bic.w	r0, r0, #7
 800b11a:	1ac2      	subs	r2, r0, r3
 800b11c:	d0cc      	beq.n	800b0b8 <_malloc_r+0x20>
 800b11e:	1a1b      	subs	r3, r3, r0
 800b120:	50a3      	str	r3, [r4, r2]
 800b122:	e7c9      	b.n	800b0b8 <_malloc_r+0x20>
 800b124:	4622      	mov	r2, r4
 800b126:	6864      	ldr	r4, [r4, #4]
 800b128:	e7cc      	b.n	800b0c4 <_malloc_r+0x2c>
 800b12a:	1cc4      	adds	r4, r0, #3
 800b12c:	f024 0403 	bic.w	r4, r4, #3
 800b130:	42a0      	cmp	r0, r4
 800b132:	d0e3      	beq.n	800b0fc <_malloc_r+0x64>
 800b134:	1a21      	subs	r1, r4, r0
 800b136:	4630      	mov	r0, r6
 800b138:	f7f6 f98a 	bl	8001450 <_sbrk_r>
 800b13c:	3001      	adds	r0, #1
 800b13e:	d1dd      	bne.n	800b0fc <_malloc_r+0x64>
 800b140:	e7cf      	b.n	800b0e2 <_malloc_r+0x4a>
 800b142:	bf00      	nop
 800b144:	20000f2c 	.word	0x20000f2c
 800b148:	20000f30 	.word	0x20000f30

0800b14c <_puts_r>:
 800b14c:	b570      	push	{r4, r5, r6, lr}
 800b14e:	460e      	mov	r6, r1
 800b150:	4605      	mov	r5, r0
 800b152:	b118      	cbz	r0, 800b15c <_puts_r+0x10>
 800b154:	6983      	ldr	r3, [r0, #24]
 800b156:	b90b      	cbnz	r3, 800b15c <_puts_r+0x10>
 800b158:	f7ff fe48 	bl	800adec <__sinit>
 800b15c:	69ab      	ldr	r3, [r5, #24]
 800b15e:	68ac      	ldr	r4, [r5, #8]
 800b160:	b913      	cbnz	r3, 800b168 <_puts_r+0x1c>
 800b162:	4628      	mov	r0, r5
 800b164:	f7ff fe42 	bl	800adec <__sinit>
 800b168:	4b2c      	ldr	r3, [pc, #176]	; (800b21c <_puts_r+0xd0>)
 800b16a:	429c      	cmp	r4, r3
 800b16c:	d120      	bne.n	800b1b0 <_puts_r+0x64>
 800b16e:	686c      	ldr	r4, [r5, #4]
 800b170:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b172:	07db      	lsls	r3, r3, #31
 800b174:	d405      	bmi.n	800b182 <_puts_r+0x36>
 800b176:	89a3      	ldrh	r3, [r4, #12]
 800b178:	0598      	lsls	r0, r3, #22
 800b17a:	d402      	bmi.n	800b182 <_puts_r+0x36>
 800b17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b17e:	f7ff fef8 	bl	800af72 <__retarget_lock_acquire_recursive>
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	0719      	lsls	r1, r3, #28
 800b186:	d51d      	bpl.n	800b1c4 <_puts_r+0x78>
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	b1db      	cbz	r3, 800b1c4 <_puts_r+0x78>
 800b18c:	3e01      	subs	r6, #1
 800b18e:	68a3      	ldr	r3, [r4, #8]
 800b190:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b194:	3b01      	subs	r3, #1
 800b196:	60a3      	str	r3, [r4, #8]
 800b198:	bb39      	cbnz	r1, 800b1ea <_puts_r+0x9e>
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	da38      	bge.n	800b210 <_puts_r+0xc4>
 800b19e:	4622      	mov	r2, r4
 800b1a0:	210a      	movs	r1, #10
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f000 f93a 	bl	800b41c <__swbuf_r>
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	d011      	beq.n	800b1d0 <_puts_r+0x84>
 800b1ac:	250a      	movs	r5, #10
 800b1ae:	e011      	b.n	800b1d4 <_puts_r+0x88>
 800b1b0:	4b1b      	ldr	r3, [pc, #108]	; (800b220 <_puts_r+0xd4>)
 800b1b2:	429c      	cmp	r4, r3
 800b1b4:	d101      	bne.n	800b1ba <_puts_r+0x6e>
 800b1b6:	68ac      	ldr	r4, [r5, #8]
 800b1b8:	e7da      	b.n	800b170 <_puts_r+0x24>
 800b1ba:	4b1a      	ldr	r3, [pc, #104]	; (800b224 <_puts_r+0xd8>)
 800b1bc:	429c      	cmp	r4, r3
 800b1be:	bf08      	it	eq
 800b1c0:	68ec      	ldreq	r4, [r5, #12]
 800b1c2:	e7d5      	b.n	800b170 <_puts_r+0x24>
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f000 f98c 	bl	800b4e4 <__swsetup_r>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d0dd      	beq.n	800b18c <_puts_r+0x40>
 800b1d0:	f04f 35ff 	mov.w	r5, #4294967295
 800b1d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1d6:	07da      	lsls	r2, r3, #31
 800b1d8:	d405      	bmi.n	800b1e6 <_puts_r+0x9a>
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	059b      	lsls	r3, r3, #22
 800b1de:	d402      	bmi.n	800b1e6 <_puts_r+0x9a>
 800b1e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1e2:	f7ff fec7 	bl	800af74 <__retarget_lock_release_recursive>
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	bd70      	pop	{r4, r5, r6, pc}
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	da04      	bge.n	800b1f8 <_puts_r+0xac>
 800b1ee:	69a2      	ldr	r2, [r4, #24]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	dc06      	bgt.n	800b202 <_puts_r+0xb6>
 800b1f4:	290a      	cmp	r1, #10
 800b1f6:	d004      	beq.n	800b202 <_puts_r+0xb6>
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	6022      	str	r2, [r4, #0]
 800b1fe:	7019      	strb	r1, [r3, #0]
 800b200:	e7c5      	b.n	800b18e <_puts_r+0x42>
 800b202:	4622      	mov	r2, r4
 800b204:	4628      	mov	r0, r5
 800b206:	f000 f909 	bl	800b41c <__swbuf_r>
 800b20a:	3001      	adds	r0, #1
 800b20c:	d1bf      	bne.n	800b18e <_puts_r+0x42>
 800b20e:	e7df      	b.n	800b1d0 <_puts_r+0x84>
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	250a      	movs	r5, #10
 800b214:	1c5a      	adds	r2, r3, #1
 800b216:	6022      	str	r2, [r4, #0]
 800b218:	701d      	strb	r5, [r3, #0]
 800b21a:	e7db      	b.n	800b1d4 <_puts_r+0x88>
 800b21c:	0800be8c 	.word	0x0800be8c
 800b220:	0800beac 	.word	0x0800beac
 800b224:	0800be6c 	.word	0x0800be6c

0800b228 <puts>:
 800b228:	4b02      	ldr	r3, [pc, #8]	; (800b234 <puts+0xc>)
 800b22a:	4601      	mov	r1, r0
 800b22c:	6818      	ldr	r0, [r3, #0]
 800b22e:	f7ff bf8d 	b.w	800b14c <_puts_r>
 800b232:	bf00      	nop
 800b234:	2000001c 	.word	0x2000001c

0800b238 <cleanup_glue>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	460c      	mov	r4, r1
 800b23c:	6809      	ldr	r1, [r1, #0]
 800b23e:	4605      	mov	r5, r0
 800b240:	b109      	cbz	r1, 800b246 <cleanup_glue+0xe>
 800b242:	f7ff fff9 	bl	800b238 <cleanup_glue>
 800b246:	4621      	mov	r1, r4
 800b248:	4628      	mov	r0, r5
 800b24a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b24e:	f7ff bed3 	b.w	800aff8 <_free_r>
	...

0800b254 <_reclaim_reent>:
 800b254:	4b2c      	ldr	r3, [pc, #176]	; (800b308 <_reclaim_reent+0xb4>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4283      	cmp	r3, r0
 800b25a:	b570      	push	{r4, r5, r6, lr}
 800b25c:	4604      	mov	r4, r0
 800b25e:	d051      	beq.n	800b304 <_reclaim_reent+0xb0>
 800b260:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b262:	b143      	cbz	r3, 800b276 <_reclaim_reent+0x22>
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d14a      	bne.n	800b300 <_reclaim_reent+0xac>
 800b26a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b26c:	6819      	ldr	r1, [r3, #0]
 800b26e:	b111      	cbz	r1, 800b276 <_reclaim_reent+0x22>
 800b270:	4620      	mov	r0, r4
 800b272:	f7ff fec1 	bl	800aff8 <_free_r>
 800b276:	6961      	ldr	r1, [r4, #20]
 800b278:	b111      	cbz	r1, 800b280 <_reclaim_reent+0x2c>
 800b27a:	4620      	mov	r0, r4
 800b27c:	f7ff febc 	bl	800aff8 <_free_r>
 800b280:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b282:	b111      	cbz	r1, 800b28a <_reclaim_reent+0x36>
 800b284:	4620      	mov	r0, r4
 800b286:	f7ff feb7 	bl	800aff8 <_free_r>
 800b28a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b28c:	b111      	cbz	r1, 800b294 <_reclaim_reent+0x40>
 800b28e:	4620      	mov	r0, r4
 800b290:	f7ff feb2 	bl	800aff8 <_free_r>
 800b294:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b296:	b111      	cbz	r1, 800b29e <_reclaim_reent+0x4a>
 800b298:	4620      	mov	r0, r4
 800b29a:	f7ff fead 	bl	800aff8 <_free_r>
 800b29e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b2a0:	b111      	cbz	r1, 800b2a8 <_reclaim_reent+0x54>
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	f7ff fea8 	bl	800aff8 <_free_r>
 800b2a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b2aa:	b111      	cbz	r1, 800b2b2 <_reclaim_reent+0x5e>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f7ff fea3 	bl	800aff8 <_free_r>
 800b2b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b2b4:	b111      	cbz	r1, 800b2bc <_reclaim_reent+0x68>
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f7ff fe9e 	bl	800aff8 <_free_r>
 800b2bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2be:	b111      	cbz	r1, 800b2c6 <_reclaim_reent+0x72>
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	f7ff fe99 	bl	800aff8 <_free_r>
 800b2c6:	69a3      	ldr	r3, [r4, #24]
 800b2c8:	b1e3      	cbz	r3, 800b304 <_reclaim_reent+0xb0>
 800b2ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	4798      	blx	r3
 800b2d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b2d2:	b1b9      	cbz	r1, 800b304 <_reclaim_reent+0xb0>
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2da:	f7ff bfad 	b.w	800b238 <cleanup_glue>
 800b2de:	5949      	ldr	r1, [r1, r5]
 800b2e0:	b941      	cbnz	r1, 800b2f4 <_reclaim_reent+0xa0>
 800b2e2:	3504      	adds	r5, #4
 800b2e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2e6:	2d80      	cmp	r5, #128	; 0x80
 800b2e8:	68d9      	ldr	r1, [r3, #12]
 800b2ea:	d1f8      	bne.n	800b2de <_reclaim_reent+0x8a>
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f7ff fe83 	bl	800aff8 <_free_r>
 800b2f2:	e7ba      	b.n	800b26a <_reclaim_reent+0x16>
 800b2f4:	680e      	ldr	r6, [r1, #0]
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f7ff fe7e 	bl	800aff8 <_free_r>
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	e7ef      	b.n	800b2e0 <_reclaim_reent+0x8c>
 800b300:	2500      	movs	r5, #0
 800b302:	e7ef      	b.n	800b2e4 <_reclaim_reent+0x90>
 800b304:	bd70      	pop	{r4, r5, r6, pc}
 800b306:	bf00      	nop
 800b308:	2000001c 	.word	0x2000001c

0800b30c <_raise_r>:
 800b30c:	291f      	cmp	r1, #31
 800b30e:	b538      	push	{r3, r4, r5, lr}
 800b310:	4604      	mov	r4, r0
 800b312:	460d      	mov	r5, r1
 800b314:	d904      	bls.n	800b320 <_raise_r+0x14>
 800b316:	2316      	movs	r3, #22
 800b318:	6003      	str	r3, [r0, #0]
 800b31a:	f04f 30ff 	mov.w	r0, #4294967295
 800b31e:	bd38      	pop	{r3, r4, r5, pc}
 800b320:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b322:	b112      	cbz	r2, 800b32a <_raise_r+0x1e>
 800b324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b328:	b94b      	cbnz	r3, 800b33e <_raise_r+0x32>
 800b32a:	4620      	mov	r0, r4
 800b32c:	f000 f830 	bl	800b390 <_getpid_r>
 800b330:	462a      	mov	r2, r5
 800b332:	4601      	mov	r1, r0
 800b334:	4620      	mov	r0, r4
 800b336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b33a:	f000 b817 	b.w	800b36c <_kill_r>
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d00a      	beq.n	800b358 <_raise_r+0x4c>
 800b342:	1c59      	adds	r1, r3, #1
 800b344:	d103      	bne.n	800b34e <_raise_r+0x42>
 800b346:	2316      	movs	r3, #22
 800b348:	6003      	str	r3, [r0, #0]
 800b34a:	2001      	movs	r0, #1
 800b34c:	e7e7      	b.n	800b31e <_raise_r+0x12>
 800b34e:	2400      	movs	r4, #0
 800b350:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b354:	4628      	mov	r0, r5
 800b356:	4798      	blx	r3
 800b358:	2000      	movs	r0, #0
 800b35a:	e7e0      	b.n	800b31e <_raise_r+0x12>

0800b35c <raise>:
 800b35c:	4b02      	ldr	r3, [pc, #8]	; (800b368 <raise+0xc>)
 800b35e:	4601      	mov	r1, r0
 800b360:	6818      	ldr	r0, [r3, #0]
 800b362:	f7ff bfd3 	b.w	800b30c <_raise_r>
 800b366:	bf00      	nop
 800b368:	2000001c 	.word	0x2000001c

0800b36c <_kill_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d07      	ldr	r5, [pc, #28]	; (800b38c <_kill_r+0x20>)
 800b370:	2300      	movs	r3, #0
 800b372:	4604      	mov	r4, r0
 800b374:	4608      	mov	r0, r1
 800b376:	4611      	mov	r1, r2
 800b378:	602b      	str	r3, [r5, #0]
 800b37a:	f7f8 fe51 	bl	8004020 <_kill>
 800b37e:	1c43      	adds	r3, r0, #1
 800b380:	d102      	bne.n	800b388 <_kill_r+0x1c>
 800b382:	682b      	ldr	r3, [r5, #0]
 800b384:	b103      	cbz	r3, 800b388 <_kill_r+0x1c>
 800b386:	6023      	str	r3, [r4, #0]
 800b388:	bd38      	pop	{r3, r4, r5, pc}
 800b38a:	bf00      	nop
 800b38c:	20001090 	.word	0x20001090

0800b390 <_getpid_r>:
 800b390:	f7f8 be3e 	b.w	8004010 <_getpid>

0800b394 <__sread>:
 800b394:	b510      	push	{r4, lr}
 800b396:	460c      	mov	r4, r1
 800b398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39c:	f000 fa58 	bl	800b850 <_read_r>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	bfab      	itete	ge
 800b3a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3a6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3a8:	181b      	addge	r3, r3, r0
 800b3aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3ae:	bfac      	ite	ge
 800b3b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3b2:	81a3      	strhlt	r3, [r4, #12]
 800b3b4:	bd10      	pop	{r4, pc}

0800b3b6 <__swrite>:
 800b3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ba:	461f      	mov	r7, r3
 800b3bc:	898b      	ldrh	r3, [r1, #12]
 800b3be:	05db      	lsls	r3, r3, #23
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	4616      	mov	r6, r2
 800b3c6:	d505      	bpl.n	800b3d4 <__swrite+0x1e>
 800b3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f000 f9c8 	bl	800b764 <_lseek_r>
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	463b      	mov	r3, r7
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ea:	f000 b869 	b.w	800b4c0 <_write_r>

0800b3ee <__sseek>:
 800b3ee:	b510      	push	{r4, lr}
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f6:	f000 f9b5 	bl	800b764 <_lseek_r>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	bf15      	itete	ne
 800b400:	6560      	strne	r0, [r4, #84]	; 0x54
 800b402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b40a:	81a3      	strheq	r3, [r4, #12]
 800b40c:	bf18      	it	ne
 800b40e:	81a3      	strhne	r3, [r4, #12]
 800b410:	bd10      	pop	{r4, pc}

0800b412 <__sclose>:
 800b412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b416:	f000 b8d3 	b.w	800b5c0 <_close_r>
	...

0800b41c <__swbuf_r>:
 800b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41e:	460e      	mov	r6, r1
 800b420:	4614      	mov	r4, r2
 800b422:	4605      	mov	r5, r0
 800b424:	b118      	cbz	r0, 800b42e <__swbuf_r+0x12>
 800b426:	6983      	ldr	r3, [r0, #24]
 800b428:	b90b      	cbnz	r3, 800b42e <__swbuf_r+0x12>
 800b42a:	f7ff fcdf 	bl	800adec <__sinit>
 800b42e:	4b21      	ldr	r3, [pc, #132]	; (800b4b4 <__swbuf_r+0x98>)
 800b430:	429c      	cmp	r4, r3
 800b432:	d12b      	bne.n	800b48c <__swbuf_r+0x70>
 800b434:	686c      	ldr	r4, [r5, #4]
 800b436:	69a3      	ldr	r3, [r4, #24]
 800b438:	60a3      	str	r3, [r4, #8]
 800b43a:	89a3      	ldrh	r3, [r4, #12]
 800b43c:	071a      	lsls	r2, r3, #28
 800b43e:	d52f      	bpl.n	800b4a0 <__swbuf_r+0x84>
 800b440:	6923      	ldr	r3, [r4, #16]
 800b442:	b36b      	cbz	r3, 800b4a0 <__swbuf_r+0x84>
 800b444:	6923      	ldr	r3, [r4, #16]
 800b446:	6820      	ldr	r0, [r4, #0]
 800b448:	1ac0      	subs	r0, r0, r3
 800b44a:	6963      	ldr	r3, [r4, #20]
 800b44c:	b2f6      	uxtb	r6, r6
 800b44e:	4283      	cmp	r3, r0
 800b450:	4637      	mov	r7, r6
 800b452:	dc04      	bgt.n	800b45e <__swbuf_r+0x42>
 800b454:	4621      	mov	r1, r4
 800b456:	4628      	mov	r0, r5
 800b458:	f000 f948 	bl	800b6ec <_fflush_r>
 800b45c:	bb30      	cbnz	r0, 800b4ac <__swbuf_r+0x90>
 800b45e:	68a3      	ldr	r3, [r4, #8]
 800b460:	3b01      	subs	r3, #1
 800b462:	60a3      	str	r3, [r4, #8]
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	1c5a      	adds	r2, r3, #1
 800b468:	6022      	str	r2, [r4, #0]
 800b46a:	701e      	strb	r6, [r3, #0]
 800b46c:	6963      	ldr	r3, [r4, #20]
 800b46e:	3001      	adds	r0, #1
 800b470:	4283      	cmp	r3, r0
 800b472:	d004      	beq.n	800b47e <__swbuf_r+0x62>
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	07db      	lsls	r3, r3, #31
 800b478:	d506      	bpl.n	800b488 <__swbuf_r+0x6c>
 800b47a:	2e0a      	cmp	r6, #10
 800b47c:	d104      	bne.n	800b488 <__swbuf_r+0x6c>
 800b47e:	4621      	mov	r1, r4
 800b480:	4628      	mov	r0, r5
 800b482:	f000 f933 	bl	800b6ec <_fflush_r>
 800b486:	b988      	cbnz	r0, 800b4ac <__swbuf_r+0x90>
 800b488:	4638      	mov	r0, r7
 800b48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b48c:	4b0a      	ldr	r3, [pc, #40]	; (800b4b8 <__swbuf_r+0x9c>)
 800b48e:	429c      	cmp	r4, r3
 800b490:	d101      	bne.n	800b496 <__swbuf_r+0x7a>
 800b492:	68ac      	ldr	r4, [r5, #8]
 800b494:	e7cf      	b.n	800b436 <__swbuf_r+0x1a>
 800b496:	4b09      	ldr	r3, [pc, #36]	; (800b4bc <__swbuf_r+0xa0>)
 800b498:	429c      	cmp	r4, r3
 800b49a:	bf08      	it	eq
 800b49c:	68ec      	ldreq	r4, [r5, #12]
 800b49e:	e7ca      	b.n	800b436 <__swbuf_r+0x1a>
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	f000 f81e 	bl	800b4e4 <__swsetup_r>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d0cb      	beq.n	800b444 <__swbuf_r+0x28>
 800b4ac:	f04f 37ff 	mov.w	r7, #4294967295
 800b4b0:	e7ea      	b.n	800b488 <__swbuf_r+0x6c>
 800b4b2:	bf00      	nop
 800b4b4:	0800be8c 	.word	0x0800be8c
 800b4b8:	0800beac 	.word	0x0800beac
 800b4bc:	0800be6c 	.word	0x0800be6c

0800b4c0 <_write_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4d07      	ldr	r5, [pc, #28]	; (800b4e0 <_write_r+0x20>)
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	4608      	mov	r0, r1
 800b4c8:	4611      	mov	r1, r2
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	602a      	str	r2, [r5, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f7f8 fddd 	bl	800408e <_write>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	d102      	bne.n	800b4de <_write_r+0x1e>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	b103      	cbz	r3, 800b4de <_write_r+0x1e>
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	bd38      	pop	{r3, r4, r5, pc}
 800b4e0:	20001090 	.word	0x20001090

0800b4e4 <__swsetup_r>:
 800b4e4:	4b32      	ldr	r3, [pc, #200]	; (800b5b0 <__swsetup_r+0xcc>)
 800b4e6:	b570      	push	{r4, r5, r6, lr}
 800b4e8:	681d      	ldr	r5, [r3, #0]
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	b125      	cbz	r5, 800b4fa <__swsetup_r+0x16>
 800b4f0:	69ab      	ldr	r3, [r5, #24]
 800b4f2:	b913      	cbnz	r3, 800b4fa <__swsetup_r+0x16>
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	f7ff fc79 	bl	800adec <__sinit>
 800b4fa:	4b2e      	ldr	r3, [pc, #184]	; (800b5b4 <__swsetup_r+0xd0>)
 800b4fc:	429c      	cmp	r4, r3
 800b4fe:	d10f      	bne.n	800b520 <__swsetup_r+0x3c>
 800b500:	686c      	ldr	r4, [r5, #4]
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b508:	0719      	lsls	r1, r3, #28
 800b50a:	d42c      	bmi.n	800b566 <__swsetup_r+0x82>
 800b50c:	06dd      	lsls	r5, r3, #27
 800b50e:	d411      	bmi.n	800b534 <__swsetup_r+0x50>
 800b510:	2309      	movs	r3, #9
 800b512:	6033      	str	r3, [r6, #0]
 800b514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	f04f 30ff 	mov.w	r0, #4294967295
 800b51e:	e03e      	b.n	800b59e <__swsetup_r+0xba>
 800b520:	4b25      	ldr	r3, [pc, #148]	; (800b5b8 <__swsetup_r+0xd4>)
 800b522:	429c      	cmp	r4, r3
 800b524:	d101      	bne.n	800b52a <__swsetup_r+0x46>
 800b526:	68ac      	ldr	r4, [r5, #8]
 800b528:	e7eb      	b.n	800b502 <__swsetup_r+0x1e>
 800b52a:	4b24      	ldr	r3, [pc, #144]	; (800b5bc <__swsetup_r+0xd8>)
 800b52c:	429c      	cmp	r4, r3
 800b52e:	bf08      	it	eq
 800b530:	68ec      	ldreq	r4, [r5, #12]
 800b532:	e7e6      	b.n	800b502 <__swsetup_r+0x1e>
 800b534:	0758      	lsls	r0, r3, #29
 800b536:	d512      	bpl.n	800b55e <__swsetup_r+0x7a>
 800b538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b53a:	b141      	cbz	r1, 800b54e <__swsetup_r+0x6a>
 800b53c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b540:	4299      	cmp	r1, r3
 800b542:	d002      	beq.n	800b54a <__swsetup_r+0x66>
 800b544:	4630      	mov	r0, r6
 800b546:	f7ff fd57 	bl	800aff8 <_free_r>
 800b54a:	2300      	movs	r3, #0
 800b54c:	6363      	str	r3, [r4, #52]	; 0x34
 800b54e:	89a3      	ldrh	r3, [r4, #12]
 800b550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b554:	81a3      	strh	r3, [r4, #12]
 800b556:	2300      	movs	r3, #0
 800b558:	6063      	str	r3, [r4, #4]
 800b55a:	6923      	ldr	r3, [r4, #16]
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	f043 0308 	orr.w	r3, r3, #8
 800b564:	81a3      	strh	r3, [r4, #12]
 800b566:	6923      	ldr	r3, [r4, #16]
 800b568:	b94b      	cbnz	r3, 800b57e <__swsetup_r+0x9a>
 800b56a:	89a3      	ldrh	r3, [r4, #12]
 800b56c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b574:	d003      	beq.n	800b57e <__swsetup_r+0x9a>
 800b576:	4621      	mov	r1, r4
 800b578:	4630      	mov	r0, r6
 800b57a:	f000 f929 	bl	800b7d0 <__smakebuf_r>
 800b57e:	89a0      	ldrh	r0, [r4, #12]
 800b580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b584:	f010 0301 	ands.w	r3, r0, #1
 800b588:	d00a      	beq.n	800b5a0 <__swsetup_r+0xbc>
 800b58a:	2300      	movs	r3, #0
 800b58c:	60a3      	str	r3, [r4, #8]
 800b58e:	6963      	ldr	r3, [r4, #20]
 800b590:	425b      	negs	r3, r3
 800b592:	61a3      	str	r3, [r4, #24]
 800b594:	6923      	ldr	r3, [r4, #16]
 800b596:	b943      	cbnz	r3, 800b5aa <__swsetup_r+0xc6>
 800b598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b59c:	d1ba      	bne.n	800b514 <__swsetup_r+0x30>
 800b59e:	bd70      	pop	{r4, r5, r6, pc}
 800b5a0:	0781      	lsls	r1, r0, #30
 800b5a2:	bf58      	it	pl
 800b5a4:	6963      	ldrpl	r3, [r4, #20]
 800b5a6:	60a3      	str	r3, [r4, #8]
 800b5a8:	e7f4      	b.n	800b594 <__swsetup_r+0xb0>
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	e7f7      	b.n	800b59e <__swsetup_r+0xba>
 800b5ae:	bf00      	nop
 800b5b0:	2000001c 	.word	0x2000001c
 800b5b4:	0800be8c 	.word	0x0800be8c
 800b5b8:	0800beac 	.word	0x0800beac
 800b5bc:	0800be6c 	.word	0x0800be6c

0800b5c0 <_close_r>:
 800b5c0:	b538      	push	{r3, r4, r5, lr}
 800b5c2:	4d06      	ldr	r5, [pc, #24]	; (800b5dc <_close_r+0x1c>)
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	4608      	mov	r0, r1
 800b5ca:	602b      	str	r3, [r5, #0]
 800b5cc:	f7f8 fd7b 	bl	80040c6 <_close>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	d102      	bne.n	800b5da <_close_r+0x1a>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	b103      	cbz	r3, 800b5da <_close_r+0x1a>
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	20001090 	.word	0x20001090

0800b5e0 <__sflush_r>:
 800b5e0:	898a      	ldrh	r2, [r1, #12]
 800b5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	0710      	lsls	r0, r2, #28
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	d458      	bmi.n	800b6a0 <__sflush_r+0xc0>
 800b5ee:	684b      	ldr	r3, [r1, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	dc05      	bgt.n	800b600 <__sflush_r+0x20>
 800b5f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	dc02      	bgt.n	800b600 <__sflush_r+0x20>
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b602:	2e00      	cmp	r6, #0
 800b604:	d0f9      	beq.n	800b5fa <__sflush_r+0x1a>
 800b606:	2300      	movs	r3, #0
 800b608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b60c:	682f      	ldr	r7, [r5, #0]
 800b60e:	602b      	str	r3, [r5, #0]
 800b610:	d032      	beq.n	800b678 <__sflush_r+0x98>
 800b612:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	075a      	lsls	r2, r3, #29
 800b618:	d505      	bpl.n	800b626 <__sflush_r+0x46>
 800b61a:	6863      	ldr	r3, [r4, #4]
 800b61c:	1ac0      	subs	r0, r0, r3
 800b61e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b620:	b10b      	cbz	r3, 800b626 <__sflush_r+0x46>
 800b622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b624:	1ac0      	subs	r0, r0, r3
 800b626:	2300      	movs	r3, #0
 800b628:	4602      	mov	r2, r0
 800b62a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b62c:	6a21      	ldr	r1, [r4, #32]
 800b62e:	4628      	mov	r0, r5
 800b630:	47b0      	blx	r6
 800b632:	1c43      	adds	r3, r0, #1
 800b634:	89a3      	ldrh	r3, [r4, #12]
 800b636:	d106      	bne.n	800b646 <__sflush_r+0x66>
 800b638:	6829      	ldr	r1, [r5, #0]
 800b63a:	291d      	cmp	r1, #29
 800b63c:	d82c      	bhi.n	800b698 <__sflush_r+0xb8>
 800b63e:	4a2a      	ldr	r2, [pc, #168]	; (800b6e8 <__sflush_r+0x108>)
 800b640:	40ca      	lsrs	r2, r1
 800b642:	07d6      	lsls	r6, r2, #31
 800b644:	d528      	bpl.n	800b698 <__sflush_r+0xb8>
 800b646:	2200      	movs	r2, #0
 800b648:	6062      	str	r2, [r4, #4]
 800b64a:	04d9      	lsls	r1, r3, #19
 800b64c:	6922      	ldr	r2, [r4, #16]
 800b64e:	6022      	str	r2, [r4, #0]
 800b650:	d504      	bpl.n	800b65c <__sflush_r+0x7c>
 800b652:	1c42      	adds	r2, r0, #1
 800b654:	d101      	bne.n	800b65a <__sflush_r+0x7a>
 800b656:	682b      	ldr	r3, [r5, #0]
 800b658:	b903      	cbnz	r3, 800b65c <__sflush_r+0x7c>
 800b65a:	6560      	str	r0, [r4, #84]	; 0x54
 800b65c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b65e:	602f      	str	r7, [r5, #0]
 800b660:	2900      	cmp	r1, #0
 800b662:	d0ca      	beq.n	800b5fa <__sflush_r+0x1a>
 800b664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b668:	4299      	cmp	r1, r3
 800b66a:	d002      	beq.n	800b672 <__sflush_r+0x92>
 800b66c:	4628      	mov	r0, r5
 800b66e:	f7ff fcc3 	bl	800aff8 <_free_r>
 800b672:	2000      	movs	r0, #0
 800b674:	6360      	str	r0, [r4, #52]	; 0x34
 800b676:	e7c1      	b.n	800b5fc <__sflush_r+0x1c>
 800b678:	6a21      	ldr	r1, [r4, #32]
 800b67a:	2301      	movs	r3, #1
 800b67c:	4628      	mov	r0, r5
 800b67e:	47b0      	blx	r6
 800b680:	1c41      	adds	r1, r0, #1
 800b682:	d1c7      	bne.n	800b614 <__sflush_r+0x34>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0c4      	beq.n	800b614 <__sflush_r+0x34>
 800b68a:	2b1d      	cmp	r3, #29
 800b68c:	d001      	beq.n	800b692 <__sflush_r+0xb2>
 800b68e:	2b16      	cmp	r3, #22
 800b690:	d101      	bne.n	800b696 <__sflush_r+0xb6>
 800b692:	602f      	str	r7, [r5, #0]
 800b694:	e7b1      	b.n	800b5fa <__sflush_r+0x1a>
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b69c:	81a3      	strh	r3, [r4, #12]
 800b69e:	e7ad      	b.n	800b5fc <__sflush_r+0x1c>
 800b6a0:	690f      	ldr	r7, [r1, #16]
 800b6a2:	2f00      	cmp	r7, #0
 800b6a4:	d0a9      	beq.n	800b5fa <__sflush_r+0x1a>
 800b6a6:	0793      	lsls	r3, r2, #30
 800b6a8:	680e      	ldr	r6, [r1, #0]
 800b6aa:	bf08      	it	eq
 800b6ac:	694b      	ldreq	r3, [r1, #20]
 800b6ae:	600f      	str	r7, [r1, #0]
 800b6b0:	bf18      	it	ne
 800b6b2:	2300      	movne	r3, #0
 800b6b4:	eba6 0807 	sub.w	r8, r6, r7
 800b6b8:	608b      	str	r3, [r1, #8]
 800b6ba:	f1b8 0f00 	cmp.w	r8, #0
 800b6be:	dd9c      	ble.n	800b5fa <__sflush_r+0x1a>
 800b6c0:	6a21      	ldr	r1, [r4, #32]
 800b6c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6c4:	4643      	mov	r3, r8
 800b6c6:	463a      	mov	r2, r7
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	47b0      	blx	r6
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	dc06      	bgt.n	800b6de <__sflush_r+0xfe>
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6d6:	81a3      	strh	r3, [r4, #12]
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6dc:	e78e      	b.n	800b5fc <__sflush_r+0x1c>
 800b6de:	4407      	add	r7, r0
 800b6e0:	eba8 0800 	sub.w	r8, r8, r0
 800b6e4:	e7e9      	b.n	800b6ba <__sflush_r+0xda>
 800b6e6:	bf00      	nop
 800b6e8:	20400001 	.word	0x20400001

0800b6ec <_fflush_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	690b      	ldr	r3, [r1, #16]
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	b913      	cbnz	r3, 800b6fc <_fflush_r+0x10>
 800b6f6:	2500      	movs	r5, #0
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	bd38      	pop	{r3, r4, r5, pc}
 800b6fc:	b118      	cbz	r0, 800b706 <_fflush_r+0x1a>
 800b6fe:	6983      	ldr	r3, [r0, #24]
 800b700:	b90b      	cbnz	r3, 800b706 <_fflush_r+0x1a>
 800b702:	f7ff fb73 	bl	800adec <__sinit>
 800b706:	4b14      	ldr	r3, [pc, #80]	; (800b758 <_fflush_r+0x6c>)
 800b708:	429c      	cmp	r4, r3
 800b70a:	d11b      	bne.n	800b744 <_fflush_r+0x58>
 800b70c:	686c      	ldr	r4, [r5, #4]
 800b70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0ef      	beq.n	800b6f6 <_fflush_r+0xa>
 800b716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b718:	07d0      	lsls	r0, r2, #31
 800b71a:	d404      	bmi.n	800b726 <_fflush_r+0x3a>
 800b71c:	0599      	lsls	r1, r3, #22
 800b71e:	d402      	bmi.n	800b726 <_fflush_r+0x3a>
 800b720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b722:	f7ff fc26 	bl	800af72 <__retarget_lock_acquire_recursive>
 800b726:	4628      	mov	r0, r5
 800b728:	4621      	mov	r1, r4
 800b72a:	f7ff ff59 	bl	800b5e0 <__sflush_r>
 800b72e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b730:	07da      	lsls	r2, r3, #31
 800b732:	4605      	mov	r5, r0
 800b734:	d4e0      	bmi.n	800b6f8 <_fflush_r+0xc>
 800b736:	89a3      	ldrh	r3, [r4, #12]
 800b738:	059b      	lsls	r3, r3, #22
 800b73a:	d4dd      	bmi.n	800b6f8 <_fflush_r+0xc>
 800b73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b73e:	f7ff fc19 	bl	800af74 <__retarget_lock_release_recursive>
 800b742:	e7d9      	b.n	800b6f8 <_fflush_r+0xc>
 800b744:	4b05      	ldr	r3, [pc, #20]	; (800b75c <_fflush_r+0x70>)
 800b746:	429c      	cmp	r4, r3
 800b748:	d101      	bne.n	800b74e <_fflush_r+0x62>
 800b74a:	68ac      	ldr	r4, [r5, #8]
 800b74c:	e7df      	b.n	800b70e <_fflush_r+0x22>
 800b74e:	4b04      	ldr	r3, [pc, #16]	; (800b760 <_fflush_r+0x74>)
 800b750:	429c      	cmp	r4, r3
 800b752:	bf08      	it	eq
 800b754:	68ec      	ldreq	r4, [r5, #12]
 800b756:	e7da      	b.n	800b70e <_fflush_r+0x22>
 800b758:	0800be8c 	.word	0x0800be8c
 800b75c:	0800beac 	.word	0x0800beac
 800b760:	0800be6c 	.word	0x0800be6c

0800b764 <_lseek_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d07      	ldr	r5, [pc, #28]	; (800b784 <_lseek_r+0x20>)
 800b768:	4604      	mov	r4, r0
 800b76a:	4608      	mov	r0, r1
 800b76c:	4611      	mov	r1, r2
 800b76e:	2200      	movs	r2, #0
 800b770:	602a      	str	r2, [r5, #0]
 800b772:	461a      	mov	r2, r3
 800b774:	f7f8 fcce 	bl	8004114 <_lseek>
 800b778:	1c43      	adds	r3, r0, #1
 800b77a:	d102      	bne.n	800b782 <_lseek_r+0x1e>
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	b103      	cbz	r3, 800b782 <_lseek_r+0x1e>
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	20001090 	.word	0x20001090

0800b788 <__swhatbuf_r>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	460e      	mov	r6, r1
 800b78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b790:	2900      	cmp	r1, #0
 800b792:	b096      	sub	sp, #88	; 0x58
 800b794:	4614      	mov	r4, r2
 800b796:	461d      	mov	r5, r3
 800b798:	da07      	bge.n	800b7aa <__swhatbuf_r+0x22>
 800b79a:	2300      	movs	r3, #0
 800b79c:	602b      	str	r3, [r5, #0]
 800b79e:	89b3      	ldrh	r3, [r6, #12]
 800b7a0:	061a      	lsls	r2, r3, #24
 800b7a2:	d410      	bmi.n	800b7c6 <__swhatbuf_r+0x3e>
 800b7a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7a8:	e00e      	b.n	800b7c8 <__swhatbuf_r+0x40>
 800b7aa:	466a      	mov	r2, sp
 800b7ac:	f000 f862 	bl	800b874 <_fstat_r>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	dbf2      	blt.n	800b79a <__swhatbuf_r+0x12>
 800b7b4:	9a01      	ldr	r2, [sp, #4]
 800b7b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7be:	425a      	negs	r2, r3
 800b7c0:	415a      	adcs	r2, r3
 800b7c2:	602a      	str	r2, [r5, #0]
 800b7c4:	e7ee      	b.n	800b7a4 <__swhatbuf_r+0x1c>
 800b7c6:	2340      	movs	r3, #64	; 0x40
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	6023      	str	r3, [r4, #0]
 800b7cc:	b016      	add	sp, #88	; 0x58
 800b7ce:	bd70      	pop	{r4, r5, r6, pc}

0800b7d0 <__smakebuf_r>:
 800b7d0:	898b      	ldrh	r3, [r1, #12]
 800b7d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7d4:	079d      	lsls	r5, r3, #30
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	460c      	mov	r4, r1
 800b7da:	d507      	bpl.n	800b7ec <__smakebuf_r+0x1c>
 800b7dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7e0:	6023      	str	r3, [r4, #0]
 800b7e2:	6123      	str	r3, [r4, #16]
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	6163      	str	r3, [r4, #20]
 800b7e8:	b002      	add	sp, #8
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}
 800b7ec:	ab01      	add	r3, sp, #4
 800b7ee:	466a      	mov	r2, sp
 800b7f0:	f7ff ffca 	bl	800b788 <__swhatbuf_r>
 800b7f4:	9900      	ldr	r1, [sp, #0]
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7ff fc4d 	bl	800b098 <_malloc_r>
 800b7fe:	b948      	cbnz	r0, 800b814 <__smakebuf_r+0x44>
 800b800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b804:	059a      	lsls	r2, r3, #22
 800b806:	d4ef      	bmi.n	800b7e8 <__smakebuf_r+0x18>
 800b808:	f023 0303 	bic.w	r3, r3, #3
 800b80c:	f043 0302 	orr.w	r3, r3, #2
 800b810:	81a3      	strh	r3, [r4, #12]
 800b812:	e7e3      	b.n	800b7dc <__smakebuf_r+0xc>
 800b814:	4b0d      	ldr	r3, [pc, #52]	; (800b84c <__smakebuf_r+0x7c>)
 800b816:	62b3      	str	r3, [r6, #40]	; 0x28
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	6020      	str	r0, [r4, #0]
 800b81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b820:	81a3      	strh	r3, [r4, #12]
 800b822:	9b00      	ldr	r3, [sp, #0]
 800b824:	6163      	str	r3, [r4, #20]
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	6120      	str	r0, [r4, #16]
 800b82a:	b15b      	cbz	r3, 800b844 <__smakebuf_r+0x74>
 800b82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b830:	4630      	mov	r0, r6
 800b832:	f000 f831 	bl	800b898 <_isatty_r>
 800b836:	b128      	cbz	r0, 800b844 <__smakebuf_r+0x74>
 800b838:	89a3      	ldrh	r3, [r4, #12]
 800b83a:	f023 0303 	bic.w	r3, r3, #3
 800b83e:	f043 0301 	orr.w	r3, r3, #1
 800b842:	81a3      	strh	r3, [r4, #12]
 800b844:	89a0      	ldrh	r0, [r4, #12]
 800b846:	4305      	orrs	r5, r0
 800b848:	81a5      	strh	r5, [r4, #12]
 800b84a:	e7cd      	b.n	800b7e8 <__smakebuf_r+0x18>
 800b84c:	0800ad85 	.word	0x0800ad85

0800b850 <_read_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d07      	ldr	r5, [pc, #28]	; (800b870 <_read_r+0x20>)
 800b854:	4604      	mov	r4, r0
 800b856:	4608      	mov	r0, r1
 800b858:	4611      	mov	r1, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	f7f8 fbf8 	bl	8004054 <_read>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_read_r+0x1e>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_read_r+0x1e>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	20001090 	.word	0x20001090

0800b874 <_fstat_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d07      	ldr	r5, [pc, #28]	; (800b894 <_fstat_r+0x20>)
 800b878:	2300      	movs	r3, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	4611      	mov	r1, r2
 800b880:	602b      	str	r3, [r5, #0]
 800b882:	f7f8 fc2c 	bl	80040de <_fstat>
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	d102      	bne.n	800b890 <_fstat_r+0x1c>
 800b88a:	682b      	ldr	r3, [r5, #0]
 800b88c:	b103      	cbz	r3, 800b890 <_fstat_r+0x1c>
 800b88e:	6023      	str	r3, [r4, #0]
 800b890:	bd38      	pop	{r3, r4, r5, pc}
 800b892:	bf00      	nop
 800b894:	20001090 	.word	0x20001090

0800b898 <_isatty_r>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	4d06      	ldr	r5, [pc, #24]	; (800b8b4 <_isatty_r+0x1c>)
 800b89c:	2300      	movs	r3, #0
 800b89e:	4604      	mov	r4, r0
 800b8a0:	4608      	mov	r0, r1
 800b8a2:	602b      	str	r3, [r5, #0]
 800b8a4:	f7f8 fc2b 	bl	80040fe <_isatty>
 800b8a8:	1c43      	adds	r3, r0, #1
 800b8aa:	d102      	bne.n	800b8b2 <_isatty_r+0x1a>
 800b8ac:	682b      	ldr	r3, [r5, #0]
 800b8ae:	b103      	cbz	r3, 800b8b2 <_isatty_r+0x1a>
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	bd38      	pop	{r3, r4, r5, pc}
 800b8b4:	20001090 	.word	0x20001090

0800b8b8 <_Unwind_GetDataRelBase>:
 800b8b8:	b508      	push	{r3, lr}
 800b8ba:	f7ff fa32 	bl	800ad22 <abort>

0800b8be <_Unwind_GetTextRelBase>:
 800b8be:	b508      	push	{r3, lr}
 800b8c0:	f7ff fffa 	bl	800b8b8 <_Unwind_GetDataRelBase>

0800b8c4 <_init>:
 800b8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c6:	bf00      	nop
 800b8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ca:	bc08      	pop	{r3}
 800b8cc:	469e      	mov	lr, r3
 800b8ce:	4770      	bx	lr

0800b8d0 <_fini>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	bf00      	nop
 800b8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d6:	bc08      	pop	{r3}
 800b8d8:	469e      	mov	lr, r3
 800b8da:	4770      	bx	lr
