
BFFT_Architecture_STM32_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b348  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800b548  0800b548  0001b548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000278  0800ba5c  0800ba5c  0001ba5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000002f8  0800bcd4  0800bcd4  0001bcd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfcc  0800bfcc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800bfcc  0800bfcc  0001bfcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800bfe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013dc  20000080  0800c060  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000145c  0800c060  0002145c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000306bb  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005007  00000000  00000000  00050769  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021a0  00000000  00000000  00055770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fe8  00000000  00000000  00057910  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00012080  00000000  00000000  000598f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00010e34  00000000  00000000  0006b978  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0007c7ac  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a884  00000000  00000000  0007c828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b530 	.word	0x0800b530

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800b530 	.word	0x0800b530

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <__aeabi_uldivmod>:
 8000254:	b953      	cbnz	r3, 800026c <__aeabi_uldivmod+0x18>
 8000256:	b94a      	cbnz	r2, 800026c <__aeabi_uldivmod+0x18>
 8000258:	2900      	cmp	r1, #0
 800025a:	bf08      	it	eq
 800025c:	2800      	cmpeq	r0, #0
 800025e:	bf1c      	itt	ne
 8000260:	f04f 31ff 	movne.w	r1, #4294967295
 8000264:	f04f 30ff 	movne.w	r0, #4294967295
 8000268:	f001 b8f8 	b.w	800145c <__aeabi_idiv0>
 800026c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000280:	b004      	add	sp, #16
 8000282:	4770      	bx	lr

08000284 <__udivmoddi4>:
 8000284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000288:	9e08      	ldr	r6, [sp, #32]
 800028a:	4604      	mov	r4, r0
 800028c:	4688      	mov	r8, r1
 800028e:	2b00      	cmp	r3, #0
 8000290:	d14b      	bne.n	800032a <__udivmoddi4+0xa6>
 8000292:	428a      	cmp	r2, r1
 8000294:	4615      	mov	r5, r2
 8000296:	d967      	bls.n	8000368 <__udivmoddi4+0xe4>
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	b14a      	cbz	r2, 80002b2 <__udivmoddi4+0x2e>
 800029e:	f1c2 0720 	rsb	r7, r2, #32
 80002a2:	fa01 f302 	lsl.w	r3, r1, r2
 80002a6:	fa20 f707 	lsr.w	r7, r0, r7
 80002aa:	4095      	lsls	r5, r2
 80002ac:	ea47 0803 	orr.w	r8, r7, r3
 80002b0:	4094      	lsls	r4, r2
 80002b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002bc:	fa1f fc85 	uxth.w	ip, r5
 80002c0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002c8:	fb07 f10c 	mul.w	r1, r7, ip
 80002cc:	4299      	cmp	r1, r3
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x60>
 80002d0:	18eb      	adds	r3, r5, r3
 80002d2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002d6:	f080 811b 	bcs.w	8000510 <__udivmoddi4+0x28c>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 8118 	bls.w	8000510 <__udivmoddi4+0x28c>
 80002e0:	3f02      	subs	r7, #2
 80002e2:	442b      	add	r3, r5
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002f8:	45a4      	cmp	ip, r4
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x8c>
 80002fc:	192c      	adds	r4, r5, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	f080 8107 	bcs.w	8000514 <__udivmoddi4+0x290>
 8000306:	45a4      	cmp	ip, r4
 8000308:	f240 8104 	bls.w	8000514 <__udivmoddi4+0x290>
 800030c:	3802      	subs	r0, #2
 800030e:	442c      	add	r4, r5
 8000310:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000314:	eba4 040c 	sub.w	r4, r4, ip
 8000318:	2700      	movs	r7, #0
 800031a:	b11e      	cbz	r6, 8000324 <__udivmoddi4+0xa0>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c6 4300 	strd	r4, r3, [r6]
 8000324:	4639      	mov	r1, r7
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0xbe>
 800032e:	2e00      	cmp	r6, #0
 8000330:	f000 80eb 	beq.w	800050a <__udivmoddi4+0x286>
 8000334:	2700      	movs	r7, #0
 8000336:	e9c6 0100 	strd	r0, r1, [r6]
 800033a:	4638      	mov	r0, r7
 800033c:	4639      	mov	r1, r7
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f783 	clz	r7, r3
 8000346:	2f00      	cmp	r7, #0
 8000348:	d147      	bne.n	80003da <__udivmoddi4+0x156>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0xd0>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80fa 	bhi.w	8000548 <__udivmoddi4+0x2c4>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0303 	sbc.w	r3, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	4698      	mov	r8, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d0e0      	beq.n	8000324 <__udivmoddi4+0xa0>
 8000362:	e9c6 4800 	strd	r4, r8, [r6]
 8000366:	e7dd      	b.n	8000324 <__udivmoddi4+0xa0>
 8000368:	b902      	cbnz	r2, 800036c <__udivmoddi4+0xe8>
 800036a:	deff      	udf	#255	; 0xff
 800036c:	fab2 f282 	clz	r2, r2
 8000370:	2a00      	cmp	r2, #0
 8000372:	f040 808f 	bne.w	8000494 <__udivmoddi4+0x210>
 8000376:	1b49      	subs	r1, r1, r5
 8000378:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800037c:	fa1f f885 	uxth.w	r8, r5
 8000380:	2701      	movs	r7, #1
 8000382:	fbb1 fcfe 	udiv	ip, r1, lr
 8000386:	0c23      	lsrs	r3, r4, #16
 8000388:	fb0e 111c 	mls	r1, lr, ip, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb08 f10c 	mul.w	r1, r8, ip
 8000394:	4299      	cmp	r1, r3
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x124>
 8000398:	18eb      	adds	r3, r5, r3
 800039a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x122>
 80003a0:	4299      	cmp	r1, r3
 80003a2:	f200 80cd 	bhi.w	8000540 <__udivmoddi4+0x2bc>
 80003a6:	4684      	mov	ip, r0
 80003a8:	1a59      	subs	r1, r3, r1
 80003aa:	b2a3      	uxth	r3, r4
 80003ac:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003b8:	fb08 f800 	mul.w	r8, r8, r0
 80003bc:	45a0      	cmp	r8, r4
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x14c>
 80003c0:	192c      	adds	r4, r5, r4
 80003c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x14a>
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	f200 80b6 	bhi.w	800053a <__udivmoddi4+0x2b6>
 80003ce:	4618      	mov	r0, r3
 80003d0:	eba4 0408 	sub.w	r4, r4, r8
 80003d4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d8:	e79f      	b.n	800031a <__udivmoddi4+0x96>
 80003da:	f1c7 0c20 	rsb	ip, r7, #32
 80003de:	40bb      	lsls	r3, r7
 80003e0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003e4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003e8:	fa01 f407 	lsl.w	r4, r1, r7
 80003ec:	fa20 f50c 	lsr.w	r5, r0, ip
 80003f0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003f4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003f8:	4325      	orrs	r5, r4
 80003fa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003fe:	0c2c      	lsrs	r4, r5, #16
 8000400:	fb08 3319 	mls	r3, r8, r9, r3
 8000404:	fa1f fa8e 	uxth.w	sl, lr
 8000408:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800040c:	fb09 f40a 	mul.w	r4, r9, sl
 8000410:	429c      	cmp	r4, r3
 8000412:	fa02 f207 	lsl.w	r2, r2, r7
 8000416:	fa00 f107 	lsl.w	r1, r0, r7
 800041a:	d90b      	bls.n	8000434 <__udivmoddi4+0x1b0>
 800041c:	eb1e 0303 	adds.w	r3, lr, r3
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	f080 8087 	bcs.w	8000536 <__udivmoddi4+0x2b2>
 8000428:	429c      	cmp	r4, r3
 800042a:	f240 8084 	bls.w	8000536 <__udivmoddi4+0x2b2>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4473      	add	r3, lr
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	b2ad      	uxth	r5, r5
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000444:	fb00 fa0a 	mul.w	sl, r0, sl
 8000448:	45a2      	cmp	sl, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x1da>
 800044c:	eb1e 0404 	adds.w	r4, lr, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	d26b      	bcs.n	800052e <__udivmoddi4+0x2aa>
 8000456:	45a2      	cmp	sl, r4
 8000458:	d969      	bls.n	800052e <__udivmoddi4+0x2aa>
 800045a:	3802      	subs	r0, #2
 800045c:	4474      	add	r4, lr
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	eba4 040a 	sub.w	r4, r4, sl
 800046a:	454c      	cmp	r4, r9
 800046c:	46c2      	mov	sl, r8
 800046e:	464b      	mov	r3, r9
 8000470:	d354      	bcc.n	800051c <__udivmoddi4+0x298>
 8000472:	d051      	beq.n	8000518 <__udivmoddi4+0x294>
 8000474:	2e00      	cmp	r6, #0
 8000476:	d069      	beq.n	800054c <__udivmoddi4+0x2c8>
 8000478:	ebb1 050a 	subs.w	r5, r1, sl
 800047c:	eb64 0403 	sbc.w	r4, r4, r3
 8000480:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000484:	40fd      	lsrs	r5, r7
 8000486:	40fc      	lsrs	r4, r7
 8000488:	ea4c 0505 	orr.w	r5, ip, r5
 800048c:	e9c6 5400 	strd	r5, r4, [r6]
 8000490:	2700      	movs	r7, #0
 8000492:	e747      	b.n	8000324 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f703 	lsr.w	r7, r0, r3
 800049c:	4095      	lsls	r5, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	fa21 f303 	lsr.w	r3, r1, r3
 80004a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004aa:	4338      	orrs	r0, r7
 80004ac:	0c01      	lsrs	r1, r0, #16
 80004ae:	fbb3 f7fe 	udiv	r7, r3, lr
 80004b2:	fa1f f885 	uxth.w	r8, r5
 80004b6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004be:	fb07 f308 	mul.w	r3, r7, r8
 80004c2:	428b      	cmp	r3, r1
 80004c4:	fa04 f402 	lsl.w	r4, r4, r2
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x256>
 80004ca:	1869      	adds	r1, r5, r1
 80004cc:	f107 3cff 	add.w	ip, r7, #4294967295
 80004d0:	d22f      	bcs.n	8000532 <__udivmoddi4+0x2ae>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d92d      	bls.n	8000532 <__udivmoddi4+0x2ae>
 80004d6:	3f02      	subs	r7, #2
 80004d8:	4429      	add	r1, r5
 80004da:	1acb      	subs	r3, r1, r3
 80004dc:	b281      	uxth	r1, r0
 80004de:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb00 f308 	mul.w	r3, r0, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d907      	bls.n	8000502 <__udivmoddi4+0x27e>
 80004f2:	1869      	adds	r1, r5, r1
 80004f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004f8:	d217      	bcs.n	800052a <__udivmoddi4+0x2a6>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d915      	bls.n	800052a <__udivmoddi4+0x2a6>
 80004fe:	3802      	subs	r0, #2
 8000500:	4429      	add	r1, r5
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000508:	e73b      	b.n	8000382 <__udivmoddi4+0xfe>
 800050a:	4637      	mov	r7, r6
 800050c:	4630      	mov	r0, r6
 800050e:	e709      	b.n	8000324 <__udivmoddi4+0xa0>
 8000510:	4607      	mov	r7, r0
 8000512:	e6e7      	b.n	80002e4 <__udivmoddi4+0x60>
 8000514:	4618      	mov	r0, r3
 8000516:	e6fb      	b.n	8000310 <__udivmoddi4+0x8c>
 8000518:	4541      	cmp	r1, r8
 800051a:	d2ab      	bcs.n	8000474 <__udivmoddi4+0x1f0>
 800051c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000520:	eb69 020e 	sbc.w	r2, r9, lr
 8000524:	3801      	subs	r0, #1
 8000526:	4613      	mov	r3, r2
 8000528:	e7a4      	b.n	8000474 <__udivmoddi4+0x1f0>
 800052a:	4660      	mov	r0, ip
 800052c:	e7e9      	b.n	8000502 <__udivmoddi4+0x27e>
 800052e:	4618      	mov	r0, r3
 8000530:	e795      	b.n	800045e <__udivmoddi4+0x1da>
 8000532:	4667      	mov	r7, ip
 8000534:	e7d1      	b.n	80004da <__udivmoddi4+0x256>
 8000536:	4681      	mov	r9, r0
 8000538:	e77c      	b.n	8000434 <__udivmoddi4+0x1b0>
 800053a:	3802      	subs	r0, #2
 800053c:	442c      	add	r4, r5
 800053e:	e747      	b.n	80003d0 <__udivmoddi4+0x14c>
 8000540:	f1ac 0c02 	sub.w	ip, ip, #2
 8000544:	442b      	add	r3, r5
 8000546:	e72f      	b.n	80003a8 <__udivmoddi4+0x124>
 8000548:	4638      	mov	r0, r7
 800054a:	e708      	b.n	800035e <__udivmoddi4+0xda>
 800054c:	4637      	mov	r7, r6
 800054e:	e6e9      	b.n	8000324 <__udivmoddi4+0xa0>

08000550 <selfrel_offset31>:
 8000550:	6803      	ldr	r3, [r0, #0]
 8000552:	005a      	lsls	r2, r3, #1
 8000554:	bf4c      	ite	mi
 8000556:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800055a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800055e:	4418      	add	r0, r3
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <search_EIT_table>:
 8000564:	b361      	cbz	r1, 80005c0 <search_EIT_table+0x5c>
 8000566:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800056a:	f101 3aff 	add.w	sl, r1, #4294967295
 800056e:	4690      	mov	r8, r2
 8000570:	4606      	mov	r6, r0
 8000572:	46d1      	mov	r9, sl
 8000574:	2700      	movs	r7, #0
 8000576:	eb07 0409 	add.w	r4, r7, r9
 800057a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800057e:	1064      	asrs	r4, r4, #1
 8000580:	00e5      	lsls	r5, r4, #3
 8000582:	1971      	adds	r1, r6, r5
 8000584:	4608      	mov	r0, r1
 8000586:	f7ff ffe3 	bl	8000550 <selfrel_offset31>
 800058a:	45a2      	cmp	sl, r4
 800058c:	4683      	mov	fp, r0
 800058e:	f105 0008 	add.w	r0, r5, #8
 8000592:	4430      	add	r0, r6
 8000594:	d009      	beq.n	80005aa <search_EIT_table+0x46>
 8000596:	f7ff ffdb 	bl	8000550 <selfrel_offset31>
 800059a:	45c3      	cmp	fp, r8
 800059c:	f100 30ff 	add.w	r0, r0, #4294967295
 80005a0:	d805      	bhi.n	80005ae <search_EIT_table+0x4a>
 80005a2:	4540      	cmp	r0, r8
 80005a4:	d209      	bcs.n	80005ba <search_EIT_table+0x56>
 80005a6:	1c67      	adds	r7, r4, #1
 80005a8:	e7e5      	b.n	8000576 <search_EIT_table+0x12>
 80005aa:	45c3      	cmp	fp, r8
 80005ac:	d905      	bls.n	80005ba <search_EIT_table+0x56>
 80005ae:	42a7      	cmp	r7, r4
 80005b0:	d002      	beq.n	80005b8 <search_EIT_table+0x54>
 80005b2:	f104 39ff 	add.w	r9, r4, #4294967295
 80005b6:	e7de      	b.n	8000576 <search_EIT_table+0x12>
 80005b8:	2100      	movs	r1, #0
 80005ba:	4608      	mov	r0, r1
 80005bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005c0:	4608      	mov	r0, r1
 80005c2:	4770      	bx	lr

080005c4 <__gnu_unwind_get_pr_addr>:
 80005c4:	2801      	cmp	r0, #1
 80005c6:	d007      	beq.n	80005d8 <__gnu_unwind_get_pr_addr+0x14>
 80005c8:	2802      	cmp	r0, #2
 80005ca:	d007      	beq.n	80005dc <__gnu_unwind_get_pr_addr+0x18>
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <__gnu_unwind_get_pr_addr+0x1c>)
 80005ce:	2800      	cmp	r0, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	4618      	moveq	r0, r3
 80005d4:	2000      	movne	r0, #0
 80005d6:	4770      	bx	lr
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <__gnu_unwind_get_pr_addr+0x20>)
 80005da:	4770      	bx	lr
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <__gnu_unwind_get_pr_addr+0x24>)
 80005de:	4770      	bx	lr
 80005e0:	08000cb1 	.word	0x08000cb1
 80005e4:	08000cb5 	.word	0x08000cb5
 80005e8:	08000cb9 	.word	0x08000cb9

080005ec <get_eit_entry>:
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <get_eit_entry+0x98>)
 80005f0:	b083      	sub	sp, #12
 80005f2:	4604      	mov	r4, r0
 80005f4:	1e8d      	subs	r5, r1, #2
 80005f6:	b34b      	cbz	r3, 800064c <get_eit_entry+0x60>
 80005f8:	a901      	add	r1, sp, #4
 80005fa:	4628      	mov	r0, r5
 80005fc:	f3af 8000 	nop.w
 8000600:	b1f0      	cbz	r0, 8000640 <get_eit_entry+0x54>
 8000602:	9901      	ldr	r1, [sp, #4]
 8000604:	462a      	mov	r2, r5
 8000606:	f7ff ffad 	bl	8000564 <search_EIT_table>
 800060a:	4601      	mov	r1, r0
 800060c:	b1c0      	cbz	r0, 8000640 <get_eit_entry+0x54>
 800060e:	f7ff ff9f 	bl	8000550 <selfrel_offset31>
 8000612:	684b      	ldr	r3, [r1, #4]
 8000614:	64a0      	str	r0, [r4, #72]	; 0x48
 8000616:	2b01      	cmp	r3, #1
 8000618:	d02e      	beq.n	8000678 <get_eit_entry+0x8c>
 800061a:	2b00      	cmp	r3, #0
 800061c:	f101 0004 	add.w	r0, r1, #4
 8000620:	db26      	blt.n	8000670 <get_eit_entry+0x84>
 8000622:	f7ff ff95 	bl	8000550 <selfrel_offset31>
 8000626:	2300      	movs	r3, #0
 8000628:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800062c:	6803      	ldr	r3, [r0, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db12      	blt.n	8000658 <get_eit_entry+0x6c>
 8000632:	f7ff ff8d 	bl	8000550 <selfrel_offset31>
 8000636:	2300      	movs	r3, #0
 8000638:	6120      	str	r0, [r4, #16]
 800063a:	4618      	mov	r0, r3
 800063c:	b003      	add	sp, #12
 800063e:	bd30      	pop	{r4, r5, pc}
 8000640:	2300      	movs	r3, #0
 8000642:	6123      	str	r3, [r4, #16]
 8000644:	2309      	movs	r3, #9
 8000646:	4618      	mov	r0, r3
 8000648:	b003      	add	sp, #12
 800064a:	bd30      	pop	{r4, r5, pc}
 800064c:	490e      	ldr	r1, [pc, #56]	; (8000688 <get_eit_entry+0x9c>)
 800064e:	480f      	ldr	r0, [pc, #60]	; (800068c <get_eit_entry+0xa0>)
 8000650:	1a09      	subs	r1, r1, r0
 8000652:	10c9      	asrs	r1, r1, #3
 8000654:	9101      	str	r1, [sp, #4]
 8000656:	e7d5      	b.n	8000604 <get_eit_entry+0x18>
 8000658:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800065c:	f7ff ffb2 	bl	80005c4 <__gnu_unwind_get_pr_addr>
 8000660:	2800      	cmp	r0, #0
 8000662:	bf14      	ite	ne
 8000664:	2300      	movne	r3, #0
 8000666:	2309      	moveq	r3, #9
 8000668:	6120      	str	r0, [r4, #16]
 800066a:	4618      	mov	r0, r3
 800066c:	b003      	add	sp, #12
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	2301      	movs	r3, #1
 8000672:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000676:	e7d9      	b.n	800062c <get_eit_entry+0x40>
 8000678:	2300      	movs	r3, #0
 800067a:	6123      	str	r3, [r4, #16]
 800067c:	2305      	movs	r3, #5
 800067e:	4618      	mov	r0, r3
 8000680:	b003      	add	sp, #12
 8000682:	bd30      	pop	{r4, r5, pc}
 8000684:	00000000 	.word	0x00000000
 8000688:	0800bfcc 	.word	0x0800bfcc
 800068c:	0800bcd4 	.word	0x0800bcd4

08000690 <restore_non_core_regs>:
 8000690:	6803      	ldr	r3, [r0, #0]
 8000692:	07da      	lsls	r2, r3, #31
 8000694:	b510      	push	{r4, lr}
 8000696:	4604      	mov	r4, r0
 8000698:	d406      	bmi.n	80006a8 <restore_non_core_regs+0x18>
 800069a:	079b      	lsls	r3, r3, #30
 800069c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80006a0:	d509      	bpl.n	80006b6 <restore_non_core_regs+0x26>
 80006a2:	f000 fc5f 	bl	8000f64 <__gnu_Unwind_Restore_VFP_D>
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	0759      	lsls	r1, r3, #29
 80006aa:	d509      	bpl.n	80006c0 <restore_non_core_regs+0x30>
 80006ac:	071a      	lsls	r2, r3, #28
 80006ae:	d50e      	bpl.n	80006ce <restore_non_core_regs+0x3e>
 80006b0:	06db      	lsls	r3, r3, #27
 80006b2:	d513      	bpl.n	80006dc <restore_non_core_regs+0x4c>
 80006b4:	bd10      	pop	{r4, pc}
 80006b6:	f000 fc4d 	bl	8000f54 <__gnu_Unwind_Restore_VFP>
 80006ba:	6823      	ldr	r3, [r4, #0]
 80006bc:	0759      	lsls	r1, r3, #29
 80006be:	d4f5      	bmi.n	80006ac <restore_non_core_regs+0x1c>
 80006c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006c4:	f000 fc56 	bl	8000f74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006c8:	6823      	ldr	r3, [r4, #0]
 80006ca:	071a      	lsls	r2, r3, #28
 80006cc:	d4f0      	bmi.n	80006b0 <restore_non_core_regs+0x20>
 80006ce:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006d2:	f000 fc57 	bl	8000f84 <__gnu_Unwind_Restore_WMMXD>
 80006d6:	6823      	ldr	r3, [r4, #0]
 80006d8:	06db      	lsls	r3, r3, #27
 80006da:	d4eb      	bmi.n	80006b4 <restore_non_core_regs+0x24>
 80006dc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80006e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e4:	f000 bc92 	b.w	800100c <__gnu_Unwind_Restore_WMMXC>

080006e8 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006e8:	6803      	ldr	r3, [r0, #0]
 80006ea:	b103      	cbz	r3, 80006ee <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80006ec:	4403      	add	r3, r0
 80006ee:	4618      	mov	r0, r3
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop

080006f4 <__gnu_unwind_24bit.isra.1>:
 80006f4:	2009      	movs	r0, #9
 80006f6:	4770      	bx	lr

080006f8 <_Unwind_DebugHook>:
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <unwind_phase2>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	4604      	mov	r4, r0
 8000700:	460d      	mov	r5, r1
 8000702:	e008      	b.n	8000716 <unwind_phase2+0x1a>
 8000704:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000706:	6163      	str	r3, [r4, #20]
 8000708:	462a      	mov	r2, r5
 800070a:	6923      	ldr	r3, [r4, #16]
 800070c:	4621      	mov	r1, r4
 800070e:	2001      	movs	r0, #1
 8000710:	4798      	blx	r3
 8000712:	2808      	cmp	r0, #8
 8000714:	d108      	bne.n	8000728 <unwind_phase2+0x2c>
 8000716:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000718:	4620      	mov	r0, r4
 800071a:	f7ff ff67 	bl	80005ec <get_eit_entry>
 800071e:	4606      	mov	r6, r0
 8000720:	2800      	cmp	r0, #0
 8000722:	d0ef      	beq.n	8000704 <unwind_phase2+0x8>
 8000724:	f00a f993 	bl	800aa4e <abort>
 8000728:	2807      	cmp	r0, #7
 800072a:	d1fb      	bne.n	8000724 <unwind_phase2+0x28>
 800072c:	4630      	mov	r0, r6
 800072e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000730:	f7ff ffe2 	bl	80006f8 <_Unwind_DebugHook>
 8000734:	1d28      	adds	r0, r5, #4
 8000736:	f000 fc01 	bl	8000f3c <__restore_core_regs>
 800073a:	bf00      	nop

0800073c <unwind_phase2_forced>:
 800073c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000740:	1d0c      	adds	r4, r1, #4
 8000742:	4605      	mov	r5, r0
 8000744:	4617      	mov	r7, r2
 8000746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000748:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800074c:	ae03      	add	r6, sp, #12
 800074e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000752:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000756:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000758:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800075c:	ac02      	add	r4, sp, #8
 800075e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000762:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000766:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800076a:	2300      	movs	r3, #0
 800076c:	6023      	str	r3, [r4, #0]
 800076e:	e021      	b.n	80007b4 <unwind_phase2_forced+0x78>
 8000770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000772:	616b      	str	r3, [r5, #20]
 8000774:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000778:	4621      	mov	r1, r4
 800077a:	a87a      	add	r0, sp, #488	; 0x1e8
 800077c:	f00a fa72 	bl	800ac64 <memcpy>
 8000780:	692b      	ldr	r3, [r5, #16]
 8000782:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000784:	4629      	mov	r1, r5
 8000786:	4630      	mov	r0, r6
 8000788:	4798      	blx	r3
 800078a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800078c:	e9cd 4900 	strd	r4, r9, [sp]
 8000790:	4682      	mov	sl, r0
 8000792:	6463      	str	r3, [r4, #68]	; 0x44
 8000794:	4631      	mov	r1, r6
 8000796:	462b      	mov	r3, r5
 8000798:	462a      	mov	r2, r5
 800079a:	2001      	movs	r0, #1
 800079c:	47c0      	blx	r8
 800079e:	4607      	mov	r7, r0
 80007a0:	b9f8      	cbnz	r0, 80007e2 <unwind_phase2_forced+0xa6>
 80007a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007a6:	a97a      	add	r1, sp, #488	; 0x1e8
 80007a8:	4620      	mov	r0, r4
 80007aa:	f00a fa5b 	bl	800ac64 <memcpy>
 80007ae:	f1ba 0f08 	cmp.w	sl, #8
 80007b2:	d11c      	bne.n	80007ee <unwind_phase2_forced+0xb2>
 80007b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007b6:	4628      	mov	r0, r5
 80007b8:	f7ff ff18 	bl	80005ec <get_eit_entry>
 80007bc:	2f00      	cmp	r7, #0
 80007be:	bf08      	it	eq
 80007c0:	2609      	moveq	r6, #9
 80007c2:	4607      	mov	r7, r0
 80007c4:	bf18      	it	ne
 80007c6:	260a      	movne	r6, #10
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d0d1      	beq.n	8000770 <unwind_phase2_forced+0x34>
 80007cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007ce:	f046 0110 	orr.w	r1, r6, #16
 80007d2:	e9cd 4900 	strd	r4, r9, [sp]
 80007d6:	462a      	mov	r2, r5
 80007d8:	6463      	str	r3, [r4, #68]	; 0x44
 80007da:	2001      	movs	r0, #1
 80007dc:	462b      	mov	r3, r5
 80007de:	47c0      	blx	r8
 80007e0:	b100      	cbz	r0, 80007e4 <unwind_phase2_forced+0xa8>
 80007e2:	2709      	movs	r7, #9
 80007e4:	4638      	mov	r0, r7
 80007e6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ee:	f1ba 0f07 	cmp.w	sl, #7
 80007f2:	d1f6      	bne.n	80007e2 <unwind_phase2_forced+0xa6>
 80007f4:	4638      	mov	r0, r7
 80007f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007f8:	f7ff ff7e 	bl	80006f8 <_Unwind_DebugHook>
 80007fc:	a803      	add	r0, sp, #12
 80007fe:	f000 fb9d 	bl	8000f3c <__restore_core_regs>
 8000802:	bf00      	nop

08000804 <_Unwind_GetCFA>:
 8000804:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000806:	4770      	bx	lr

08000808 <__gnu_Unwind_RaiseException>:
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800080c:	640b      	str	r3, [r1, #64]	; 0x40
 800080e:	1d0d      	adds	r5, r1, #4
 8000810:	460f      	mov	r7, r1
 8000812:	4606      	mov	r6, r0
 8000814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000816:	b0f9      	sub	sp, #484	; 0x1e4
 8000818:	ac01      	add	r4, sp, #4
 800081a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000824:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000828:	f04f 35ff 	mov.w	r5, #4294967295
 800082c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000830:	9500      	str	r5, [sp, #0]
 8000832:	e006      	b.n	8000842 <__gnu_Unwind_RaiseException+0x3a>
 8000834:	6933      	ldr	r3, [r6, #16]
 8000836:	466a      	mov	r2, sp
 8000838:	4631      	mov	r1, r6
 800083a:	4798      	blx	r3
 800083c:	2808      	cmp	r0, #8
 800083e:	4604      	mov	r4, r0
 8000840:	d108      	bne.n	8000854 <__gnu_Unwind_RaiseException+0x4c>
 8000842:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000844:	4630      	mov	r0, r6
 8000846:	f7ff fed1 	bl	80005ec <get_eit_entry>
 800084a:	2800      	cmp	r0, #0
 800084c:	d0f2      	beq.n	8000834 <__gnu_Unwind_RaiseException+0x2c>
 800084e:	2009      	movs	r0, #9
 8000850:	b079      	add	sp, #484	; 0x1e4
 8000852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000854:	4668      	mov	r0, sp
 8000856:	f7ff ff1b 	bl	8000690 <restore_non_core_regs>
 800085a:	2c06      	cmp	r4, #6
 800085c:	d1f7      	bne.n	800084e <__gnu_Unwind_RaiseException+0x46>
 800085e:	4639      	mov	r1, r7
 8000860:	4630      	mov	r0, r6
 8000862:	f7ff ff4b 	bl	80006fc <unwind_phase2>
 8000866:	bf00      	nop

08000868 <__gnu_Unwind_ForcedUnwind>:
 8000868:	b430      	push	{r4, r5}
 800086a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800086c:	60c1      	str	r1, [r0, #12]
 800086e:	6182      	str	r2, [r0, #24]
 8000870:	4619      	mov	r1, r3
 8000872:	641d      	str	r5, [r3, #64]	; 0x40
 8000874:	2200      	movs	r2, #0
 8000876:	bc30      	pop	{r4, r5}
 8000878:	e760      	b.n	800073c <unwind_phase2_forced>
 800087a:	bf00      	nop

0800087c <__gnu_Unwind_Resume>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	68c6      	ldr	r6, [r0, #12]
 8000880:	6943      	ldr	r3, [r0, #20]
 8000882:	640b      	str	r3, [r1, #64]	; 0x40
 8000884:	b9be      	cbnz	r6, 80008b6 <__gnu_Unwind_Resume+0x3a>
 8000886:	6903      	ldr	r3, [r0, #16]
 8000888:	460a      	mov	r2, r1
 800088a:	4604      	mov	r4, r0
 800088c:	460d      	mov	r5, r1
 800088e:	4601      	mov	r1, r0
 8000890:	2002      	movs	r0, #2
 8000892:	4798      	blx	r3
 8000894:	2807      	cmp	r0, #7
 8000896:	d007      	beq.n	80008a8 <__gnu_Unwind_Resume+0x2c>
 8000898:	2808      	cmp	r0, #8
 800089a:	d103      	bne.n	80008a4 <__gnu_Unwind_Resume+0x28>
 800089c:	4629      	mov	r1, r5
 800089e:	4620      	mov	r0, r4
 80008a0:	f7ff ff2c 	bl	80006fc <unwind_phase2>
 80008a4:	f00a f8d3 	bl	800aa4e <abort>
 80008a8:	4630      	mov	r0, r6
 80008aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008ac:	f7ff ff24 	bl	80006f8 <_Unwind_DebugHook>
 80008b0:	1d28      	adds	r0, r5, #4
 80008b2:	f000 fb43 	bl	8000f3c <__restore_core_regs>
 80008b6:	2201      	movs	r2, #1
 80008b8:	f7ff ff40 	bl	800073c <unwind_phase2_forced>
 80008bc:	f00a f8c7 	bl	800aa4e <abort>

080008c0 <__gnu_Unwind_Resume_or_Rethrow>:
 80008c0:	68c2      	ldr	r2, [r0, #12]
 80008c2:	b11a      	cbz	r2, 80008cc <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008c4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008c6:	640a      	str	r2, [r1, #64]	; 0x40
 80008c8:	2200      	movs	r2, #0
 80008ca:	e737      	b.n	800073c <unwind_phase2_forced>
 80008cc:	e79c      	b.n	8000808 <__gnu_Unwind_RaiseException>
 80008ce:	bf00      	nop

080008d0 <_Unwind_Complete>:
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <_Unwind_DeleteException>:
 80008d4:	6883      	ldr	r3, [r0, #8]
 80008d6:	b113      	cbz	r3, 80008de <_Unwind_DeleteException+0xa>
 80008d8:	4601      	mov	r1, r0
 80008da:	2001      	movs	r0, #1
 80008dc:	4718      	bx	r3
 80008de:	4770      	bx	lr

080008e0 <_Unwind_VRS_Get>:
 80008e0:	2904      	cmp	r1, #4
 80008e2:	d807      	bhi.n	80008f4 <_Unwind_VRS_Get+0x14>
 80008e4:	e8df f001 	tbb	[pc, r1]
 80008e8:	08060803 	.word	0x08060803
 80008ec:	08          	.byte	0x08
 80008ed:	00          	.byte	0x00
 80008ee:	b90b      	cbnz	r3, 80008f4 <_Unwind_VRS_Get+0x14>
 80008f0:	2a0f      	cmp	r2, #15
 80008f2:	d903      	bls.n	80008fc <_Unwind_VRS_Get+0x1c>
 80008f4:	2002      	movs	r0, #2
 80008f6:	4770      	bx	lr
 80008f8:	2001      	movs	r0, #1
 80008fa:	4770      	bx	lr
 80008fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000900:	4618      	mov	r0, r3
 8000902:	6853      	ldr	r3, [r2, #4]
 8000904:	9a00      	ldr	r2, [sp, #0]
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <_Unwind_GetGR>:
 800090c:	b510      	push	{r4, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	2300      	movs	r3, #0
 8000912:	ac03      	add	r4, sp, #12
 8000914:	460a      	mov	r2, r1
 8000916:	9400      	str	r4, [sp, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f7ff ffe1 	bl	80008e0 <_Unwind_VRS_Get>
 800091e:	9803      	ldr	r0, [sp, #12]
 8000920:	b004      	add	sp, #16
 8000922:	bd10      	pop	{r4, pc}

08000924 <_Unwind_VRS_Set>:
 8000924:	2904      	cmp	r1, #4
 8000926:	d807      	bhi.n	8000938 <_Unwind_VRS_Set+0x14>
 8000928:	e8df f001 	tbb	[pc, r1]
 800092c:	08060803 	.word	0x08060803
 8000930:	08          	.byte	0x08
 8000931:	00          	.byte	0x00
 8000932:	b90b      	cbnz	r3, 8000938 <_Unwind_VRS_Set+0x14>
 8000934:	2a0f      	cmp	r2, #15
 8000936:	d903      	bls.n	8000940 <_Unwind_VRS_Set+0x1c>
 8000938:	2002      	movs	r0, #2
 800093a:	4770      	bx	lr
 800093c:	2001      	movs	r0, #1
 800093e:	4770      	bx	lr
 8000940:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000944:	9a00      	ldr	r2, [sp, #0]
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	6042      	str	r2, [r0, #4]
 800094a:	4618      	mov	r0, r3
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop

08000950 <_Unwind_SetGR>:
 8000950:	b510      	push	{r4, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	ac04      	add	r4, sp, #16
 8000956:	2300      	movs	r3, #0
 8000958:	f844 2d04 	str.w	r2, [r4, #-4]!
 800095c:	460a      	mov	r2, r1
 800095e:	9400      	str	r4, [sp, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f7ff ffdf 	bl	8000924 <_Unwind_VRS_Set>
 8000966:	b004      	add	sp, #16
 8000968:	bd10      	pop	{r4, pc}
 800096a:	bf00      	nop

0800096c <__gnu_Unwind_Backtrace>:
 800096c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	1d15      	adds	r5, r2, #4
 8000974:	4607      	mov	r7, r0
 8000976:	460e      	mov	r6, r1
 8000978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800097a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800097e:	ac17      	add	r4, sp, #92	; 0x5c
 8000980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800098e:	f04f 35ff 	mov.w	r5, #4294967295
 8000992:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000996:	9516      	str	r5, [sp, #88]	; 0x58
 8000998:	e010      	b.n	80009bc <__gnu_Unwind_Backtrace+0x50>
 800099a:	a816      	add	r0, sp, #88	; 0x58
 800099c:	f7ff ffd8 	bl	8000950 <_Unwind_SetGR>
 80009a0:	4631      	mov	r1, r6
 80009a2:	a816      	add	r0, sp, #88	; 0x58
 80009a4:	47b8      	blx	r7
 80009a6:	aa16      	add	r2, sp, #88	; 0x58
 80009a8:	4669      	mov	r1, sp
 80009aa:	b978      	cbnz	r0, 80009cc <__gnu_Unwind_Backtrace+0x60>
 80009ac:	9b04      	ldr	r3, [sp, #16]
 80009ae:	2008      	movs	r0, #8
 80009b0:	4798      	blx	r3
 80009b2:	2805      	cmp	r0, #5
 80009b4:	4604      	mov	r4, r0
 80009b6:	d00a      	beq.n	80009ce <__gnu_Unwind_Backtrace+0x62>
 80009b8:	2809      	cmp	r0, #9
 80009ba:	d007      	beq.n	80009cc <__gnu_Unwind_Backtrace+0x60>
 80009bc:	9926      	ldr	r1, [sp, #152]	; 0x98
 80009be:	4668      	mov	r0, sp
 80009c0:	f7ff fe14 	bl	80005ec <get_eit_entry>
 80009c4:	466a      	mov	r2, sp
 80009c6:	210c      	movs	r1, #12
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d0e6      	beq.n	800099a <__gnu_Unwind_Backtrace+0x2e>
 80009cc:	2409      	movs	r4, #9
 80009ce:	a816      	add	r0, sp, #88	; 0x58
 80009d0:	f7ff fe5e 	bl	8000690 <restore_non_core_regs>
 80009d4:	4620      	mov	r0, r4
 80009d6:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009dc <__gnu_unwind_pr_common>:
 80009dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e0:	460d      	mov	r5, r1
 80009e2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009e4:	b089      	sub	sp, #36	; 0x24
 80009e6:	1d0c      	adds	r4, r1, #4
 80009e8:	4616      	mov	r6, r2
 80009ea:	f000 0b03 	and.w	fp, r0, #3
 80009ee:	680a      	ldr	r2, [r1, #0]
 80009f0:	9406      	str	r4, [sp, #24]
 80009f2:	461f      	mov	r7, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d068      	beq.n	8000aca <__gnu_unwind_pr_common+0xee>
 80009f8:	0c13      	lsrs	r3, r2, #16
 80009fa:	b2d9      	uxtb	r1, r3
 80009fc:	0412      	lsls	r2, r2, #16
 80009fe:	f88d 301d 	strb.w	r3, [sp, #29]
 8000a02:	2302      	movs	r3, #2
 8000a04:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8000a08:	9205      	str	r2, [sp, #20]
 8000a0a:	f88d 301c 	strb.w	r3, [sp, #28]
 8000a0e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a10:	f1bb 0f02 	cmp.w	fp, #2
 8000a14:	bf08      	it	eq
 8000a16:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a18:	f013 0301 	ands.w	r3, r3, #1
 8000a1c:	d146      	bne.n	8000aac <__gnu_unwind_pr_common+0xd0>
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	f000 0308 	and.w	r3, r0, #8
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	f8d4 9000 	ldr.w	r9, [r4]
 8000a2a:	f1b9 0f00 	cmp.w	r9, #0
 8000a2e:	f000 80f3 	beq.w	8000c18 <__gnu_unwind_pr_common+0x23c>
 8000a32:	2f02      	cmp	r7, #2
 8000a34:	d045      	beq.n	8000ac2 <__gnu_unwind_pr_common+0xe6>
 8000a36:	f8b4 9000 	ldrh.w	r9, [r4]
 8000a3a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8000a3e:	3404      	adds	r4, #4
 8000a40:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a42:	f028 0a01 	bic.w	sl, r8, #1
 8000a46:	210f      	movs	r1, #15
 8000a48:	4630      	mov	r0, r6
 8000a4a:	449a      	add	sl, r3
 8000a4c:	f7ff ff5e 	bl	800090c <_Unwind_GetGR>
 8000a50:	4582      	cmp	sl, r0
 8000a52:	d834      	bhi.n	8000abe <__gnu_unwind_pr_common+0xe2>
 8000a54:	f029 0301 	bic.w	r3, r9, #1
 8000a58:	4453      	add	r3, sl
 8000a5a:	4283      	cmp	r3, r0
 8000a5c:	bf94      	ite	ls
 8000a5e:	2000      	movls	r0, #0
 8000a60:	2001      	movhi	r0, #1
 8000a62:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8000a66:	f008 0802 	and.w	r8, r8, #2
 8000a6a:	f009 0901 	and.w	r9, r9, #1
 8000a6e:	ea48 0809 	orr.w	r8, r8, r9
 8000a72:	f1b8 0f01 	cmp.w	r8, #1
 8000a76:	d03a      	beq.n	8000aee <__gnu_unwind_pr_common+0x112>
 8000a78:	d331      	bcc.n	8000ade <__gnu_unwind_pr_common+0x102>
 8000a7a:	f1b8 0f02 	cmp.w	r8, #2
 8000a7e:	d11a      	bne.n	8000ab6 <__gnu_unwind_pr_common+0xda>
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
 8000a86:	f1bb 0f00 	cmp.w	fp, #0
 8000a8a:	d166      	bne.n	8000b5a <__gnu_unwind_pr_common+0x17e>
 8000a8c:	b130      	cbz	r0, 8000a9c <__gnu_unwind_pr_common+0xc0>
 8000a8e:	9a00      	ldr	r2, [sp, #0]
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d06c      	beq.n	8000b6e <__gnu_unwind_pr_common+0x192>
 8000a94:	f1ba 0f00 	cmp.w	sl, #0
 8000a98:	f000 8090 	beq.w	8000bbc <__gnu_unwind_pr_common+0x1e0>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	da00      	bge.n	8000aa2 <__gnu_unwind_pr_common+0xc6>
 8000aa0:	3404      	adds	r4, #4
 8000aa2:	f10a 0301 	add.w	r3, sl, #1
 8000aa6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000aaa:	e7bc      	b.n	8000a26 <__gnu_unwind_pr_common+0x4a>
 8000aac:	4630      	mov	r0, r6
 8000aae:	a905      	add	r1, sp, #20
 8000ab0:	f000 fb46 	bl	8001140 <__gnu_unwind_execute>
 8000ab4:	b178      	cbz	r0, 8000ad6 <__gnu_unwind_pr_common+0xfa>
 8000ab6:	2009      	movs	r0, #9
 8000ab8:	b009      	add	sp, #36	; 0x24
 8000aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000abe:	2000      	movs	r0, #0
 8000ac0:	e7cf      	b.n	8000a62 <__gnu_unwind_pr_common+0x86>
 8000ac2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8000ac6:	3408      	adds	r4, #8
 8000ac8:	e7ba      	b.n	8000a40 <__gnu_unwind_pr_common+0x64>
 8000aca:	0212      	lsls	r2, r2, #8
 8000acc:	2303      	movs	r3, #3
 8000ace:	9205      	str	r2, [sp, #20]
 8000ad0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000ad4:	e79b      	b.n	8000a0e <__gnu_unwind_pr_common+0x32>
 8000ad6:	2008      	movs	r0, #8
 8000ad8:	b009      	add	sp, #36	; 0x24
 8000ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ade:	f1bb 0f00 	cmp.w	fp, #0
 8000ae2:	d002      	beq.n	8000aea <__gnu_unwind_pr_common+0x10e>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	f040 80b4 	bne.w	8000c52 <__gnu_unwind_pr_common+0x276>
 8000aea:	3404      	adds	r4, #4
 8000aec:	e79b      	b.n	8000a26 <__gnu_unwind_pr_common+0x4a>
 8000aee:	f1bb 0f00 	cmp.w	fp, #0
 8000af2:	d118      	bne.n	8000b26 <__gnu_unwind_pr_common+0x14a>
 8000af4:	b1a8      	cbz	r0, 8000b22 <__gnu_unwind_pr_common+0x146>
 8000af6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000afa:	1c99      	adds	r1, r3, #2
 8000afc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b00:	d0d9      	beq.n	8000ab6 <__gnu_unwind_pr_common+0xda>
 8000b02:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b06:	3301      	adds	r3, #1
 8000b08:	9104      	str	r1, [sp, #16]
 8000b0a:	f000 80b5 	beq.w	8000c78 <__gnu_unwind_pr_common+0x29c>
 8000b0e:	1d20      	adds	r0, r4, #4
 8000b10:	f7ff fdea 	bl	80006e8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b14:	ab04      	add	r3, sp, #16
 8000b16:	4601      	mov	r1, r0
 8000b18:	4628      	mov	r0, r5
 8000b1a:	f009 f84b 	bl	8009bb4 <__cxa_type_match>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d167      	bne.n	8000bf2 <__gnu_unwind_pr_common+0x216>
 8000b22:	3408      	adds	r4, #8
 8000b24:	e77f      	b.n	8000a26 <__gnu_unwind_pr_common+0x4a>
 8000b26:	210d      	movs	r1, #13
 8000b28:	4630      	mov	r0, r6
 8000b2a:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8000b2e:	f7ff feed 	bl	800090c <_Unwind_GetGR>
 8000b32:	4580      	cmp	r8, r0
 8000b34:	d1f5      	bne.n	8000b22 <__gnu_unwind_pr_common+0x146>
 8000b36:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	d1f2      	bne.n	8000b22 <__gnu_unwind_pr_common+0x146>
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f7ff fd07 	bl	8000550 <selfrel_offset31>
 8000b42:	210f      	movs	r1, #15
 8000b44:	4602      	mov	r2, r0
 8000b46:	4630      	mov	r0, r6
 8000b48:	f7ff ff02 	bl	8000950 <_Unwind_SetGR>
 8000b4c:	4630      	mov	r0, r6
 8000b4e:	462a      	mov	r2, r5
 8000b50:	2100      	movs	r1, #0
 8000b52:	f7ff fefd 	bl	8000950 <_Unwind_SetGR>
 8000b56:	2007      	movs	r0, #7
 8000b58:	e7ae      	b.n	8000ab8 <__gnu_unwind_pr_common+0xdc>
 8000b5a:	210d      	movs	r1, #13
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8000b62:	f7ff fed3 	bl	800090c <_Unwind_GetGR>
 8000b66:	4580      	cmp	r8, r0
 8000b68:	d032      	beq.n	8000bd0 <__gnu_unwind_pr_common+0x1f4>
 8000b6a:	6823      	ldr	r3, [r4, #0]
 8000b6c:	e796      	b.n	8000a9c <__gnu_unwind_pr_common+0xc0>
 8000b6e:	f1ba 0f00 	cmp.w	sl, #0
 8000b72:	d023      	beq.n	8000bbc <__gnu_unwind_pr_common+0x1e0>
 8000b74:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b78:	f104 0804 	add.w	r8, r4, #4
 8000b7c:	f8cd b008 	str.w	fp, [sp, #8]
 8000b80:	f8dd 9000 	ldr.w	r9, [sp]
 8000b84:	9703      	str	r7, [sp, #12]
 8000b86:	46a3      	mov	fp, r4
 8000b88:	461c      	mov	r4, r3
 8000b8a:	e002      	b.n	8000b92 <__gnu_unwind_pr_common+0x1b6>
 8000b8c:	4557      	cmp	r7, sl
 8000b8e:	46b9      	mov	r9, r7
 8000b90:	d040      	beq.n	8000c14 <__gnu_unwind_pr_common+0x238>
 8000b92:	4640      	mov	r0, r8
 8000b94:	9404      	str	r4, [sp, #16]
 8000b96:	f7ff fda7 	bl	80006e8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b9a:	ab04      	add	r3, sp, #16
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	f009 f807 	bl	8009bb4 <__cxa_type_match>
 8000ba6:	f109 0701 	add.w	r7, r9, #1
 8000baa:	f108 0804 	add.w	r8, r8, #4
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	d0ec      	beq.n	8000b8c <__gnu_unwind_pr_common+0x1b0>
 8000bb2:	45d1      	cmp	r9, sl
 8000bb4:	465c      	mov	r4, fp
 8000bb6:	e9dd b702 	ldrd	fp, r7, [sp, #8]
 8000bba:	d1d6      	bne.n	8000b6a <__gnu_unwind_pr_common+0x18e>
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	210d      	movs	r1, #13
 8000bc0:	f7ff fea4 	bl	800090c <_Unwind_GetGR>
 8000bc4:	9b04      	ldr	r3, [sp, #16]
 8000bc6:	6228      	str	r0, [r5, #32]
 8000bc8:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000bcc:	2006      	movs	r0, #6
 8000bce:	e773      	b.n	8000ab8 <__gnu_unwind_pr_common+0xdc>
 8000bd0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	d1c9      	bne.n	8000b6a <__gnu_unwind_pr_common+0x18e>
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	f04f 0800 	mov.w	r8, #0
 8000bdc:	18a3      	adds	r3, r4, r2
 8000bde:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
 8000be2:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	4543      	cmp	r3, r8
 8000bea:	db4d      	blt.n	8000c88 <__gnu_unwind_pr_common+0x2ac>
 8000bec:	2301      	movs	r3, #1
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	e757      	b.n	8000aa2 <__gnu_unwind_pr_common+0xc6>
 8000bf2:	4680      	mov	r8, r0
 8000bf4:	210d      	movs	r1, #13
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f7ff fe88 	bl	800090c <_Unwind_GetGR>
 8000bfc:	f1b8 0f02 	cmp.w	r8, #2
 8000c00:	6228      	str	r0, [r5, #32]
 8000c02:	d13e      	bne.n	8000c82 <__gnu_unwind_pr_common+0x2a6>
 8000c04:	462b      	mov	r3, r5
 8000c06:	9a04      	ldr	r2, [sp, #16]
 8000c08:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c0c:	626b      	str	r3, [r5, #36]	; 0x24
 8000c0e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c10:	2006      	movs	r0, #6
 8000c12:	e751      	b.n	8000ab8 <__gnu_unwind_pr_common+0xdc>
 8000c14:	465c      	mov	r4, fp
 8000c16:	e7d1      	b.n	8000bbc <__gnu_unwind_pr_common+0x1e0>
 8000c18:	a905      	add	r1, sp, #20
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	f000 fa90 	bl	8001140 <__gnu_unwind_execute>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	f47f af48 	bne.w	8000ab6 <__gnu_unwind_pr_common+0xda>
 8000c26:	9b01      	ldr	r3, [sp, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f43f af54 	beq.w	8000ad6 <__gnu_unwind_pr_common+0xfa>
 8000c2e:	210f      	movs	r1, #15
 8000c30:	4630      	mov	r0, r6
 8000c32:	f7ff fe6b 	bl	800090c <_Unwind_GetGR>
 8000c36:	210e      	movs	r1, #14
 8000c38:	4602      	mov	r2, r0
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	f7ff fe88 	bl	8000950 <_Unwind_SetGR>
 8000c40:	4630      	mov	r0, r6
 8000c42:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <__gnu_unwind_pr_common+0x2d0>)
 8000c44:	210f      	movs	r1, #15
 8000c46:	f7ff fe83 	bl	8000950 <_Unwind_SetGR>
 8000c4a:	2007      	movs	r0, #7
 8000c4c:	b009      	add	sp, #36	; 0x24
 8000c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c52:	4620      	mov	r0, r4
 8000c54:	f7ff fc7c 	bl	8000550 <selfrel_offset31>
 8000c58:	3404      	adds	r4, #4
 8000c5a:	4607      	mov	r7, r0
 8000c5c:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c5e:	4628      	mov	r0, r5
 8000c60:	f009 f806 	bl	8009c70 <__cxa_begin_cleanup>
 8000c64:	2800      	cmp	r0, #0
 8000c66:	f43f af26 	beq.w	8000ab6 <__gnu_unwind_pr_common+0xda>
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	463a      	mov	r2, r7
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f7ff fe6e 	bl	8000950 <_Unwind_SetGR>
 8000c74:	2007      	movs	r0, #7
 8000c76:	e71f      	b.n	8000ab8 <__gnu_unwind_pr_common+0xdc>
 8000c78:	4630      	mov	r0, r6
 8000c7a:	210d      	movs	r1, #13
 8000c7c:	f7ff fe46 	bl	800090c <_Unwind_GetGR>
 8000c80:	6228      	str	r0, [r5, #32]
 8000c82:	9b04      	ldr	r3, [sp, #16]
 8000c84:	626b      	str	r3, [r5, #36]	; 0x24
 8000c86:	e7c2      	b.n	8000c0e <__gnu_unwind_pr_common+0x232>
 8000c88:	f10a 0001 	add.w	r0, sl, #1
 8000c8c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c90:	f7ff fc5e 	bl	8000550 <selfrel_offset31>
 8000c94:	210f      	movs	r1, #15
 8000c96:	4602      	mov	r2, r0
 8000c98:	4630      	mov	r0, r6
 8000c9a:	f7ff fe59 	bl	8000950 <_Unwind_SetGR>
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	462a      	mov	r2, r5
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	f7ff fe54 	bl	8000950 <_Unwind_SetGR>
 8000ca8:	2007      	movs	r0, #7
 8000caa:	e705      	b.n	8000ab8 <__gnu_unwind_pr_common+0xdc>
 8000cac:	0800a7c3 	.word	0x0800a7c3

08000cb0 <__aeabi_unwind_cpp_pr0>:
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e693      	b.n	80009dc <__gnu_unwind_pr_common>

08000cb4 <__aeabi_unwind_cpp_pr1>:
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e691      	b.n	80009dc <__gnu_unwind_pr_common>

08000cb8 <__aeabi_unwind_cpp_pr2>:
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e68f      	b.n	80009dc <__gnu_unwind_pr_common>

08000cbc <_Unwind_VRS_Pop>:
 8000cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cc0:	4605      	mov	r5, r0
 8000cc2:	b0c4      	sub	sp, #272	; 0x110
 8000cc4:	2904      	cmp	r1, #4
 8000cc6:	d806      	bhi.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000cc8:	e8df f001 	tbb	[pc, r1]
 8000ccc:	03052b4d 	.word	0x03052b4d
 8000cd0:	09          	.byte	0x09
 8000cd1:	00          	.byte	0x00
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d05f      	beq.n	8000d96 <_Unwind_VRS_Pop+0xda>
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	b044      	add	sp, #272	; 0x110
 8000cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f9      	bne.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000ce2:	2a10      	cmp	r2, #16
 8000ce4:	d8f7      	bhi.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000ce6:	682b      	ldr	r3, [r5, #0]
 8000ce8:	06dc      	lsls	r4, r3, #27
 8000cea:	f100 80f4 	bmi.w	8000ed6 <_Unwind_VRS_Pop+0x21a>
 8000cee:	ac22      	add	r4, sp, #136	; 0x88
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	9201      	str	r2, [sp, #4]
 8000cf4:	f000 f994 	bl	8001020 <__gnu_Unwind_Save_WMMXC>
 8000cf8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	2601      	movs	r6, #1
 8000d00:	fa06 f103 	lsl.w	r1, r6, r3
 8000d04:	4211      	tst	r1, r2
 8000d06:	d003      	beq.n	8000d10 <_Unwind_VRS_Pop+0x54>
 8000d08:	6801      	ldr	r1, [r0, #0]
 8000d0a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8000d0e:	3004      	adds	r0, #4
 8000d10:	3301      	adds	r3, #1
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d1f4      	bne.n	8000d00 <_Unwind_VRS_Pop+0x44>
 8000d16:	63a8      	str	r0, [r5, #56]	; 0x38
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f000 f977 	bl	800100c <__gnu_Unwind_Restore_WMMXC>
 8000d1e:	2000      	movs	r0, #0
 8000d20:	e7da      	b.n	8000cd8 <_Unwind_VRS_Pop+0x1c>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d28:	b297      	uxth	r7, r2
 8000d2a:	d052      	beq.n	8000dd2 <_Unwind_VRS_Pop+0x116>
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	d1d2      	bne.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000d30:	eb06 0807 	add.w	r8, r6, r7
 8000d34:	f1b8 0f20 	cmp.w	r8, #32
 8000d38:	d8cd      	bhi.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000d3a:	2e0f      	cmp	r6, #15
 8000d3c:	f240 8099 	bls.w	8000e72 <_Unwind_VRS_Pop+0x1b6>
 8000d40:	46b8      	mov	r8, r7
 8000d42:	2f00      	cmp	r7, #0
 8000d44:	f040 80db 	bne.w	8000efe <_Unwind_VRS_Pop+0x242>
 8000d48:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000d4a:	63aa      	str	r2, [r5, #56]	; 0x38
 8000d4c:	2e0f      	cmp	r6, #15
 8000d4e:	f240 80be 	bls.w	8000ece <_Unwind_VRS_Pop+0x212>
 8000d52:	f1b8 0f00 	cmp.w	r8, #0
 8000d56:	d002      	beq.n	8000d5e <_Unwind_VRS_Pop+0xa2>
 8000d58:	a802      	add	r0, sp, #8
 8000d5a:	f000 f90b 	bl	8000f74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000d5e:	2000      	movs	r0, #0
 8000d60:	b044      	add	sp, #272	; 0x110
 8000d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1b5      	bne.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000d6a:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8000d6c:	b297      	uxth	r7, r2
 8000d6e:	1d28      	adds	r0, r5, #4
 8000d70:	2601      	movs	r6, #1
 8000d72:	fa06 f103 	lsl.w	r1, r6, r3
 8000d76:	4239      	tst	r1, r7
 8000d78:	f103 0301 	add.w	r3, r3, #1
 8000d7c:	d002      	beq.n	8000d84 <_Unwind_VRS_Pop+0xc8>
 8000d7e:	6821      	ldr	r1, [r4, #0]
 8000d80:	6001      	str	r1, [r0, #0]
 8000d82:	3404      	adds	r4, #4
 8000d84:	2b10      	cmp	r3, #16
 8000d86:	f100 0004 	add.w	r0, r0, #4
 8000d8a:	d1f2      	bne.n	8000d72 <_Unwind_VRS_Pop+0xb6>
 8000d8c:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d90:	d1e5      	bne.n	8000d5e <_Unwind_VRS_Pop+0xa2>
 8000d92:	63ac      	str	r4, [r5, #56]	; 0x38
 8000d94:	e7a0      	b.n	8000cd8 <_Unwind_VRS_Pop+0x1c>
 8000d96:	0c16      	lsrs	r6, r2, #16
 8000d98:	b297      	uxth	r7, r2
 8000d9a:	19f3      	adds	r3, r6, r7
 8000d9c:	2b10      	cmp	r3, #16
 8000d9e:	d89a      	bhi.n	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	071a      	lsls	r2, r3, #28
 8000da4:	d45d      	bmi.n	8000e62 <_Unwind_VRS_Pop+0x1a6>
 8000da6:	ac22      	add	r4, sp, #136	; 0x88
 8000da8:	4620      	mov	r0, r4
 8000daa:	f000 f90d 	bl	8000fc8 <__gnu_Unwind_Save_WMMXD>
 8000dae:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8000db2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000db4:	b13f      	cbz	r7, 8000dc6 <_Unwind_VRS_Pop+0x10a>
 8000db6:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	f841 0b04 	str.w	r0, [r1], #4
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d1f9      	bne.n	8000dba <_Unwind_VRS_Pop+0xfe>
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	63ab      	str	r3, [r5, #56]	; 0x38
 8000dca:	f000 f8db 	bl	8000f84 <__gnu_Unwind_Restore_WMMXD>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	e782      	b.n	8000cd8 <_Unwind_VRS_Pop+0x1c>
 8000dd2:	19f2      	adds	r2, r6, r7
 8000dd4:	2a10      	cmp	r2, #16
 8000dd6:	f63f af7e 	bhi.w	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000dda:	2e0f      	cmp	r6, #15
 8000ddc:	f63f af7b 	bhi.w	8000cd6 <_Unwind_VRS_Pop+0x1a>
 8000de0:	682a      	ldr	r2, [r5, #0]
 8000de2:	07d1      	lsls	r1, r2, #31
 8000de4:	d508      	bpl.n	8000df8 <_Unwind_VRS_Pop+0x13c>
 8000de6:	4628      	mov	r0, r5
 8000de8:	f022 0203 	bic.w	r2, r2, #3
 8000dec:	f840 2b48 	str.w	r2, [r0], #72
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	f000 f8b3 	bl	8000f5c <__gnu_Unwind_Save_VFP>
 8000df6:	9b01      	ldr	r3, [sp, #4]
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	ac22      	add	r4, sp, #136	; 0x88
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f000 f8ad 	bl	8000f5c <__gnu_Unwind_Save_VFP>
 8000e02:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000e04:	9b01      	ldr	r3, [sp, #4]
 8000e06:	2f00      	cmp	r7, #0
 8000e08:	f000 8095 	beq.w	8000f36 <_Unwind_VRS_Pop+0x27a>
 8000e0c:	007f      	lsls	r7, r7, #1
 8000e0e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8000e12:	f04f 0800 	mov.w	r8, #0
 8000e16:	3c04      	subs	r4, #4
 8000e18:	eb01 0287 	add.w	r2, r1, r7, lsl #2
 8000e1c:	f851 0b04 	ldr.w	r0, [r1], #4
 8000e20:	f844 0f04 	str.w	r0, [r4, #4]!
 8000e24:	4291      	cmp	r1, r2
 8000e26:	d1f9      	bne.n	8000e1c <_Unwind_VRS_Pop+0x160>
 8000e28:	f1b8 0f00 	cmp.w	r8, #0
 8000e2c:	d00f      	beq.n	8000e4e <_Unwind_VRS_Pop+0x192>
 8000e2e:	ac02      	add	r4, sp, #8
 8000e30:	2e10      	cmp	r6, #16
 8000e32:	4631      	mov	r1, r6
 8000e34:	bf38      	it	cc
 8000e36:	2110      	movcc	r1, #16
 8000e38:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8000e3c:	3984      	subs	r1, #132	; 0x84
 8000e3e:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
 8000e42:	f852 0b04 	ldr.w	r0, [r2], #4
 8000e46:	f841 0f04 	str.w	r0, [r1, #4]!
 8000e4a:	4294      	cmp	r4, r2
 8000e4c:	d1f9      	bne.n	8000e42 <_Unwind_VRS_Pop+0x186>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	f47f af7b 	bne.w	8000d4a <_Unwind_VRS_Pop+0x8e>
 8000e54:	ac22      	add	r4, sp, #136	; 0x88
 8000e56:	3204      	adds	r2, #4
 8000e58:	63aa      	str	r2, [r5, #56]	; 0x38
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	f000 f87a 	bl	8000f54 <__gnu_Unwind_Restore_VFP>
 8000e60:	e77d      	b.n	8000d5e <_Unwind_VRS_Pop+0xa2>
 8000e62:	f023 0308 	bic.w	r3, r3, #8
 8000e66:	602b      	str	r3, [r5, #0]
 8000e68:	f505 70a8 	add.w	r0, r5, #336	; 0x150
 8000e6c:	f000 f8ac 	bl	8000fc8 <__gnu_Unwind_Save_WMMXD>
 8000e70:	e799      	b.n	8000da6 <_Unwind_VRS_Pop+0xea>
 8000e72:	f1b8 0f10 	cmp.w	r8, #16
 8000e76:	682a      	ldr	r2, [r5, #0]
 8000e78:	d943      	bls.n	8000f02 <_Unwind_VRS_Pop+0x246>
 8000e7a:	07d0      	lsls	r0, r2, #31
 8000e7c:	f1a8 0810 	sub.w	r8, r8, #16
 8000e80:	d50b      	bpl.n	8000e9a <_Unwind_VRS_Pop+0x1de>
 8000e82:	4628      	mov	r0, r5
 8000e84:	f022 0201 	bic.w	r2, r2, #1
 8000e88:	f042 0202 	orr.w	r2, r2, #2
 8000e8c:	f840 2b48 	str.w	r2, [r0], #72
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	f000 f86b 	bl	8000f6c <__gnu_Unwind_Save_VFP_D>
 8000e96:	682a      	ldr	r2, [r5, #0]
 8000e98:	9b01      	ldr	r3, [sp, #4]
 8000e9a:	0751      	lsls	r1, r2, #29
 8000e9c:	d425      	bmi.n	8000eea <_Unwind_VRS_Pop+0x22e>
 8000e9e:	2e0f      	cmp	r6, #15
 8000ea0:	d804      	bhi.n	8000eac <_Unwind_VRS_Pop+0x1f0>
 8000ea2:	a822      	add	r0, sp, #136	; 0x88
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	f000 f861 	bl	8000f6c <__gnu_Unwind_Save_VFP_D>
 8000eaa:	9b01      	ldr	r3, [sp, #4]
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	ac02      	add	r4, sp, #8
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	f000 f863 	bl	8000f7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000eb6:	f1c6 0110 	rsb	r1, r6, #16
 8000eba:	2900      	cmp	r1, #0
 8000ebc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000ebe:	9b01      	ldr	r3, [sp, #4]
 8000ec0:	ddb6      	ble.n	8000e30 <_Unwind_VRS_Pop+0x174>
 8000ec2:	ac22      	add	r4, sp, #136	; 0x88
 8000ec4:	004f      	lsls	r7, r1, #1
 8000ec6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8000eca:	4611      	mov	r1, r2
 8000ecc:	e7a3      	b.n	8000e16 <_Unwind_VRS_Pop+0x15a>
 8000ece:	a822      	add	r0, sp, #136	; 0x88
 8000ed0:	f000 f848 	bl	8000f64 <__gnu_Unwind_Restore_VFP_D>
 8000ed4:	e73d      	b.n	8000d52 <_Unwind_VRS_Pop+0x96>
 8000ed6:	f023 0310 	bic.w	r3, r3, #16
 8000eda:	602b      	str	r3, [r5, #0]
 8000edc:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
 8000ee0:	9201      	str	r2, [sp, #4]
 8000ee2:	f000 f89d 	bl	8001020 <__gnu_Unwind_Save_WMMXC>
 8000ee6:	9a01      	ldr	r2, [sp, #4]
 8000ee8:	e701      	b.n	8000cee <_Unwind_VRS_Pop+0x32>
 8000eea:	4628      	mov	r0, r5
 8000eec:	f022 0204 	bic.w	r2, r2, #4
 8000ef0:	f840 2bd0 	str.w	r2, [r0], #208
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	f000 f841 	bl	8000f7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000efa:	9b01      	ldr	r3, [sp, #4]
 8000efc:	e7cf      	b.n	8000e9e <_Unwind_VRS_Pop+0x1e2>
 8000efe:	682a      	ldr	r2, [r5, #0]
 8000f00:	e7cb      	b.n	8000e9a <_Unwind_VRS_Pop+0x1de>
 8000f02:	07d0      	lsls	r0, r2, #31
 8000f04:	d50a      	bpl.n	8000f1c <_Unwind_VRS_Pop+0x260>
 8000f06:	4628      	mov	r0, r5
 8000f08:	f022 0201 	bic.w	r2, r2, #1
 8000f0c:	f042 0202 	orr.w	r2, r2, #2
 8000f10:	f840 2b48 	str.w	r2, [r0], #72
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	f000 f829 	bl	8000f6c <__gnu_Unwind_Save_VFP_D>
 8000f1a:	9b01      	ldr	r3, [sp, #4]
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	ac22      	add	r4, sp, #136	; 0x88
 8000f20:	4620      	mov	r0, r4
 8000f22:	f000 f823 	bl	8000f6c <__gnu_Unwind_Save_VFP_D>
 8000f26:	46b8      	mov	r8, r7
 8000f28:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000f2a:	9b01      	ldr	r3, [sp, #4]
 8000f2c:	2f00      	cmp	r7, #0
 8000f2e:	f47f af6d 	bne.w	8000e0c <_Unwind_VRS_Pop+0x150>
 8000f32:	460a      	mov	r2, r1
 8000f34:	e709      	b.n	8000d4a <_Unwind_VRS_Pop+0x8e>
 8000f36:	460a      	mov	r2, r1
 8000f38:	e78d      	b.n	8000e56 <_Unwind_VRS_Pop+0x19a>
 8000f3a:	bf00      	nop

08000f3c <__restore_core_regs>:
 8000f3c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f40:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f44:	469c      	mov	ip, r3
 8000f46:	46a6      	mov	lr, r4
 8000f48:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f4c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f50:	46e5      	mov	sp, ip
 8000f52:	bd00      	pop	{pc}

08000f54 <__gnu_Unwind_Restore_VFP>:
 8000f54:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__gnu_Unwind_Save_VFP>:
 8000f5c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <__gnu_Unwind_Restore_VFP_D>:
 8000f64:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <__gnu_Unwind_Save_VFP_D>:
 8000f6c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f74:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f7c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <__gnu_Unwind_Restore_WMMXD>:
 8000f84:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f88:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f8c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f90:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f94:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f98:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f9c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000fa0:	ecf0 7102 	ldfe	f7, [r0], #8
 8000fa4:	ecf0 8102 	ldfp	f0, [r0], #8
 8000fa8:	ecf0 9102 	ldfp	f1, [r0], #8
 8000fac:	ecf0 a102 	ldfp	f2, [r0], #8
 8000fb0:	ecf0 b102 	ldfp	f3, [r0], #8
 8000fb4:	ecf0 c102 	ldfp	f4, [r0], #8
 8000fb8:	ecf0 d102 	ldfp	f5, [r0], #8
 8000fbc:	ecf0 e102 	ldfp	f6, [r0], #8
 8000fc0:	ecf0 f102 	ldfp	f7, [r0], #8
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__gnu_Unwind_Save_WMMXD>:
 8000fc8:	ece0 0102 	stfe	f0, [r0], #8
 8000fcc:	ece0 1102 	stfe	f1, [r0], #8
 8000fd0:	ece0 2102 	stfe	f2, [r0], #8
 8000fd4:	ece0 3102 	stfe	f3, [r0], #8
 8000fd8:	ece0 4102 	stfe	f4, [r0], #8
 8000fdc:	ece0 5102 	stfe	f5, [r0], #8
 8000fe0:	ece0 6102 	stfe	f6, [r0], #8
 8000fe4:	ece0 7102 	stfe	f7, [r0], #8
 8000fe8:	ece0 8102 	stfp	f0, [r0], #8
 8000fec:	ece0 9102 	stfp	f1, [r0], #8
 8000ff0:	ece0 a102 	stfp	f2, [r0], #8
 8000ff4:	ece0 b102 	stfp	f3, [r0], #8
 8000ff8:	ece0 c102 	stfp	f4, [r0], #8
 8000ffc:	ece0 d102 	stfp	f5, [r0], #8
 8001000:	ece0 e102 	stfp	f6, [r0], #8
 8001004:	ece0 f102 	stfp	f7, [r0], #8
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <__gnu_Unwind_Restore_WMMXC>:
 800100c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001010:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001014:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001018:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <__gnu_Unwind_Save_WMMXC>:
 8001020:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001024:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001028:	fca0 a101 	stc2	1, cr10, [r0], #4
 800102c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <_Unwind_RaiseException>:
 8001034:	46ec      	mov	ip, sp
 8001036:	b500      	push	{lr}
 8001038:	e92d 5000 	stmdb	sp!, {ip, lr}
 800103c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001048:	a901      	add	r1, sp, #4
 800104a:	f7ff fbdd 	bl	8000808 <__gnu_Unwind_RaiseException>
 800104e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001052:	b012      	add	sp, #72	; 0x48
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <_Unwind_Resume>:
 8001058:	46ec      	mov	ip, sp
 800105a:	b500      	push	{lr}
 800105c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001060:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	e92d 000c 	stmdb	sp!, {r2, r3}
 800106c:	a901      	add	r1, sp, #4
 800106e:	f7ff fc05 	bl	800087c <__gnu_Unwind_Resume>
 8001072:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001076:	b012      	add	sp, #72	; 0x48
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <_Unwind_Resume_or_Rethrow>:
 800107c:	46ec      	mov	ip, sp
 800107e:	b500      	push	{lr}
 8001080:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001084:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001088:	f04f 0300 	mov.w	r3, #0
 800108c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001090:	a901      	add	r1, sp, #4
 8001092:	f7ff fc15 	bl	80008c0 <__gnu_Unwind_Resume_or_Rethrow>
 8001096:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800109a:	b012      	add	sp, #72	; 0x48
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <_Unwind_ForcedUnwind>:
 80010a0:	46ec      	mov	ip, sp
 80010a2:	b500      	push	{lr}
 80010a4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010a8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010b4:	ab01      	add	r3, sp, #4
 80010b6:	f7ff fbd7 	bl	8000868 <__gnu_Unwind_ForcedUnwind>
 80010ba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010be:	b012      	add	sp, #72	; 0x48
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <_Unwind_Backtrace>:
 80010c4:	46ec      	mov	ip, sp
 80010c6:	b500      	push	{lr}
 80010c8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010d8:	aa01      	add	r2, sp, #4
 80010da:	f7ff fc47 	bl	800096c <__gnu_Unwind_Backtrace>
 80010de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010e2:	b012      	add	sp, #72	; 0x48
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <next_unwind_byte>:
 80010e8:	7a02      	ldrb	r2, [r0, #8]
 80010ea:	b982      	cbnz	r2, 800110e <next_unwind_byte+0x26>
 80010ec:	7a43      	ldrb	r3, [r0, #9]
 80010ee:	b1ab      	cbz	r3, 800111c <next_unwind_byte+0x34>
 80010f0:	6842      	ldr	r2, [r0, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b410      	push	{r4}
 80010f6:	7243      	strb	r3, [r0, #9]
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	2103      	movs	r1, #3
 80010fc:	1d14      	adds	r4, r2, #4
 80010fe:	7201      	strb	r1, [r0, #8]
 8001100:	021a      	lsls	r2, r3, #8
 8001102:	6044      	str	r4, [r0, #4]
 8001104:	6002      	str	r2, [r0, #0]
 8001106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800110a:	0e18      	lsrs	r0, r3, #24
 800110c:	4770      	bx	lr
 800110e:	6803      	ldr	r3, [r0, #0]
 8001110:	3a01      	subs	r2, #1
 8001112:	7202      	strb	r2, [r0, #8]
 8001114:	021a      	lsls	r2, r3, #8
 8001116:	6002      	str	r2, [r0, #0]
 8001118:	0e18      	lsrs	r0, r3, #24
 800111a:	4770      	bx	lr
 800111c:	20b0      	movs	r0, #176	; 0xb0
 800111e:	4770      	bx	lr

08001120 <_Unwind_GetGR.constprop.0>:
 8001120:	b500      	push	{lr}
 8001122:	b085      	sub	sp, #20
 8001124:	aa03      	add	r2, sp, #12
 8001126:	2300      	movs	r3, #0
 8001128:	9200      	str	r2, [sp, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	220c      	movs	r2, #12
 800112e:	f7ff fbd7 	bl	80008e0 <_Unwind_VRS_Get>
 8001132:	9803      	ldr	r0, [sp, #12]
 8001134:	b005      	add	sp, #20
 8001136:	f85d fb04 	ldr.w	pc, [sp], #4
 800113a:	bf00      	nop

0800113c <unwind_UCB_from_context>:
 800113c:	e7f0      	b.n	8001120 <_Unwind_GetGR.constprop.0>
 800113e:	bf00      	nop

08001140 <__gnu_unwind_execute>:
 8001140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001144:	4605      	mov	r5, r0
 8001146:	b085      	sub	sp, #20
 8001148:	460e      	mov	r6, r1
 800114a:	f04f 0800 	mov.w	r8, #0
 800114e:	4630      	mov	r0, r6
 8001150:	f7ff ffca 	bl	80010e8 <next_unwind_byte>
 8001154:	28b0      	cmp	r0, #176	; 0xb0
 8001156:	4604      	mov	r4, r0
 8001158:	f000 80b1 	beq.w	80012be <__gnu_unwind_execute+0x17e>
 800115c:	0607      	lsls	r7, r0, #24
 800115e:	d520      	bpl.n	80011a2 <__gnu_unwind_execute+0x62>
 8001160:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001164:	2b80      	cmp	r3, #128	; 0x80
 8001166:	d065      	beq.n	8001234 <__gnu_unwind_execute+0xf4>
 8001168:	2b90      	cmp	r3, #144	; 0x90
 800116a:	d036      	beq.n	80011da <__gnu_unwind_execute+0x9a>
 800116c:	2ba0      	cmp	r3, #160	; 0xa0
 800116e:	d078      	beq.n	8001262 <__gnu_unwind_execute+0x122>
 8001170:	2bb0      	cmp	r3, #176	; 0xb0
 8001172:	d047      	beq.n	8001204 <__gnu_unwind_execute+0xc4>
 8001174:	2bc0      	cmp	r3, #192	; 0xc0
 8001176:	f000 808a 	beq.w	800128e <__gnu_unwind_execute+0x14e>
 800117a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800117e:	2bd0      	cmp	r3, #208	; 0xd0
 8001180:	d10b      	bne.n	800119a <__gnu_unwind_execute+0x5a>
 8001182:	f000 0207 	and.w	r2, r0, #7
 8001186:	3201      	adds	r2, #1
 8001188:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800118c:	2305      	movs	r3, #5
 800118e:	2101      	movs	r1, #1
 8001190:	4628      	mov	r0, r5
 8001192:	f7ff fd93 	bl	8000cbc <_Unwind_VRS_Pop>
 8001196:	2800      	cmp	r0, #0
 8001198:	d0d9      	beq.n	800114e <__gnu_unwind_execute+0xe>
 800119a:	2009      	movs	r0, #9
 800119c:	b005      	add	sp, #20
 800119e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011a2:	f10d 090c 	add.w	r9, sp, #12
 80011a6:	2300      	movs	r3, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	0087      	lsls	r7, r0, #2
 80011ac:	f8cd 9000 	str.w	r9, [sp]
 80011b0:	220d      	movs	r2, #13
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff fb94 	bl	80008e0 <_Unwind_VRS_Get>
 80011b8:	b2ff      	uxtb	r7, r7
 80011ba:	9b03      	ldr	r3, [sp, #12]
 80011bc:	f8cd 9000 	str.w	r9, [sp]
 80011c0:	3704      	adds	r7, #4
 80011c2:	0660      	lsls	r0, r4, #25
 80011c4:	bf4c      	ite	mi
 80011c6:	1bdf      	submi	r7, r3, r7
 80011c8:	18ff      	addpl	r7, r7, r3
 80011ca:	2300      	movs	r3, #0
 80011cc:	4619      	mov	r1, r3
 80011ce:	220d      	movs	r2, #13
 80011d0:	4628      	mov	r0, r5
 80011d2:	9703      	str	r7, [sp, #12]
 80011d4:	f7ff fba6 	bl	8000924 <_Unwind_VRS_Set>
 80011d8:	e7b9      	b.n	800114e <__gnu_unwind_execute+0xe>
 80011da:	f000 030d 	and.w	r3, r0, #13
 80011de:	2b0d      	cmp	r3, #13
 80011e0:	d0db      	beq.n	800119a <__gnu_unwind_execute+0x5a>
 80011e2:	af03      	add	r7, sp, #12
 80011e4:	2300      	movs	r3, #0
 80011e6:	f000 020f 	and.w	r2, r0, #15
 80011ea:	4619      	mov	r1, r3
 80011ec:	9700      	str	r7, [sp, #0]
 80011ee:	4628      	mov	r0, r5
 80011f0:	f7ff fb76 	bl	80008e0 <_Unwind_VRS_Get>
 80011f4:	2300      	movs	r3, #0
 80011f6:	9700      	str	r7, [sp, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	220d      	movs	r2, #13
 80011fc:	4628      	mov	r0, r5
 80011fe:	f7ff fb91 	bl	8000924 <_Unwind_VRS_Set>
 8001202:	e7a4      	b.n	800114e <__gnu_unwind_execute+0xe>
 8001204:	28b1      	cmp	r0, #177	; 0xb1
 8001206:	d05f      	beq.n	80012c8 <__gnu_unwind_execute+0x188>
 8001208:	28b2      	cmp	r0, #178	; 0xb2
 800120a:	f000 80cc 	beq.w	80013a6 <__gnu_unwind_execute+0x266>
 800120e:	28b3      	cmp	r0, #179	; 0xb3
 8001210:	d07e      	beq.n	8001310 <__gnu_unwind_execute+0x1d0>
 8001212:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001216:	2bb4      	cmp	r3, #180	; 0xb4
 8001218:	d0bf      	beq.n	800119a <__gnu_unwind_execute+0x5a>
 800121a:	f000 0207 	and.w	r2, r0, #7
 800121e:	3201      	adds	r2, #1
 8001220:	2301      	movs	r3, #1
 8001222:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001226:	4619      	mov	r1, r3
 8001228:	4628      	mov	r0, r5
 800122a:	f7ff fd47 	bl	8000cbc <_Unwind_VRS_Pop>
 800122e:	2800      	cmp	r0, #0
 8001230:	d08d      	beq.n	800114e <__gnu_unwind_execute+0xe>
 8001232:	e7b2      	b.n	800119a <__gnu_unwind_execute+0x5a>
 8001234:	4630      	mov	r0, r6
 8001236:	f7ff ff57 	bl	80010e8 <next_unwind_byte>
 800123a:	0224      	lsls	r4, r4, #8
 800123c:	4304      	orrs	r4, r0
 800123e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001242:	d0aa      	beq.n	800119a <__gnu_unwind_execute+0x5a>
 8001244:	0124      	lsls	r4, r4, #4
 8001246:	2300      	movs	r3, #0
 8001248:	b2a2      	uxth	r2, r4
 800124a:	4619      	mov	r1, r3
 800124c:	4628      	mov	r0, r5
 800124e:	f7ff fd35 	bl	8000cbc <_Unwind_VRS_Pop>
 8001252:	2800      	cmp	r0, #0
 8001254:	d1a1      	bne.n	800119a <__gnu_unwind_execute+0x5a>
 8001256:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800125a:	bf18      	it	ne
 800125c:	f04f 0801 	movne.w	r8, #1
 8001260:	e775      	b.n	800114e <__gnu_unwind_execute+0xe>
 8001262:	43c2      	mvns	r2, r0
 8001264:	f002 0307 	and.w	r3, r2, #7
 8001268:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800126c:	411a      	asrs	r2, r3
 800126e:	0701      	lsls	r1, r0, #28
 8001270:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	bf48      	it	mi
 800127a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800127e:	4619      	mov	r1, r3
 8001280:	4628      	mov	r0, r5
 8001282:	f7ff fd1b 	bl	8000cbc <_Unwind_VRS_Pop>
 8001286:	2800      	cmp	r0, #0
 8001288:	f43f af61 	beq.w	800114e <__gnu_unwind_execute+0xe>
 800128c:	e785      	b.n	800119a <__gnu_unwind_execute+0x5a>
 800128e:	28c6      	cmp	r0, #198	; 0xc6
 8001290:	d051      	beq.n	8001336 <__gnu_unwind_execute+0x1f6>
 8001292:	28c7      	cmp	r0, #199	; 0xc7
 8001294:	d05a      	beq.n	800134c <__gnu_unwind_execute+0x20c>
 8001296:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800129a:	2bc0      	cmp	r3, #192	; 0xc0
 800129c:	d069      	beq.n	8001372 <__gnu_unwind_execute+0x232>
 800129e:	28c8      	cmp	r0, #200	; 0xc8
 80012a0:	d075      	beq.n	800138e <__gnu_unwind_execute+0x24e>
 80012a2:	28c9      	cmp	r0, #201	; 0xc9
 80012a4:	f47f af79 	bne.w	800119a <__gnu_unwind_execute+0x5a>
 80012a8:	4630      	mov	r0, r6
 80012aa:	f7ff ff1d 	bl	80010e8 <next_unwind_byte>
 80012ae:	0302      	lsls	r2, r0, #12
 80012b0:	f000 000f 	and.w	r0, r0, #15
 80012b4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80012b8:	3001      	adds	r0, #1
 80012ba:	4302      	orrs	r2, r0
 80012bc:	e766      	b.n	800118c <__gnu_unwind_execute+0x4c>
 80012be:	f1b8 0f00 	cmp.w	r8, #0
 80012c2:	d014      	beq.n	80012ee <__gnu_unwind_execute+0x1ae>
 80012c4:	2000      	movs	r0, #0
 80012c6:	e769      	b.n	800119c <__gnu_unwind_execute+0x5c>
 80012c8:	4630      	mov	r0, r6
 80012ca:	f7ff ff0d 	bl	80010e8 <next_unwind_byte>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	f43f af63 	beq.w	800119a <__gnu_unwind_execute+0x5a>
 80012d4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012d8:	f47f af5f 	bne.w	800119a <__gnu_unwind_execute+0x5a>
 80012dc:	4602      	mov	r2, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	4628      	mov	r0, r5
 80012e2:	f7ff fceb 	bl	8000cbc <_Unwind_VRS_Pop>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	f43f af31 	beq.w	800114e <__gnu_unwind_execute+0xe>
 80012ec:	e755      	b.n	800119a <__gnu_unwind_execute+0x5a>
 80012ee:	ac03      	add	r4, sp, #12
 80012f0:	4643      	mov	r3, r8
 80012f2:	220e      	movs	r2, #14
 80012f4:	4641      	mov	r1, r8
 80012f6:	9400      	str	r4, [sp, #0]
 80012f8:	4628      	mov	r0, r5
 80012fa:	f7ff faf1 	bl	80008e0 <_Unwind_VRS_Get>
 80012fe:	9400      	str	r4, [sp, #0]
 8001300:	4628      	mov	r0, r5
 8001302:	4643      	mov	r3, r8
 8001304:	220f      	movs	r2, #15
 8001306:	4641      	mov	r1, r8
 8001308:	f7ff fb0c 	bl	8000924 <_Unwind_VRS_Set>
 800130c:	4640      	mov	r0, r8
 800130e:	e745      	b.n	800119c <__gnu_unwind_execute+0x5c>
 8001310:	4630      	mov	r0, r6
 8001312:	f7ff fee9 	bl	80010e8 <next_unwind_byte>
 8001316:	0301      	lsls	r1, r0, #12
 8001318:	f000 000f 	and.w	r0, r0, #15
 800131c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001320:	1c42      	adds	r2, r0, #1
 8001322:	2301      	movs	r3, #1
 8001324:	430a      	orrs	r2, r1
 8001326:	4628      	mov	r0, r5
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fcc7 	bl	8000cbc <_Unwind_VRS_Pop>
 800132e:	2800      	cmp	r0, #0
 8001330:	f43f af0d 	beq.w	800114e <__gnu_unwind_execute+0xe>
 8001334:	e731      	b.n	800119a <__gnu_unwind_execute+0x5a>
 8001336:	4630      	mov	r0, r6
 8001338:	f7ff fed6 	bl	80010e8 <next_unwind_byte>
 800133c:	0301      	lsls	r1, r0, #12
 800133e:	f000 000f 	and.w	r0, r0, #15
 8001342:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001346:	1c42      	adds	r2, r0, #1
 8001348:	2303      	movs	r3, #3
 800134a:	e7eb      	b.n	8001324 <__gnu_unwind_execute+0x1e4>
 800134c:	4630      	mov	r0, r6
 800134e:	f7ff fecb 	bl	80010e8 <next_unwind_byte>
 8001352:	4602      	mov	r2, r0
 8001354:	2800      	cmp	r0, #0
 8001356:	f43f af20 	beq.w	800119a <__gnu_unwind_execute+0x5a>
 800135a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800135e:	f47f af1c 	bne.w	800119a <__gnu_unwind_execute+0x5a>
 8001362:	2104      	movs	r1, #4
 8001364:	4628      	mov	r0, r5
 8001366:	f7ff fca9 	bl	8000cbc <_Unwind_VRS_Pop>
 800136a:	2800      	cmp	r0, #0
 800136c:	f43f aeef 	beq.w	800114e <__gnu_unwind_execute+0xe>
 8001370:	e713      	b.n	800119a <__gnu_unwind_execute+0x5a>
 8001372:	f000 020f 	and.w	r2, r0, #15
 8001376:	3201      	adds	r2, #1
 8001378:	2303      	movs	r3, #3
 800137a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800137e:	4619      	mov	r1, r3
 8001380:	4628      	mov	r0, r5
 8001382:	f7ff fc9b 	bl	8000cbc <_Unwind_VRS_Pop>
 8001386:	2800      	cmp	r0, #0
 8001388:	f43f aee1 	beq.w	800114e <__gnu_unwind_execute+0xe>
 800138c:	e705      	b.n	800119a <__gnu_unwind_execute+0x5a>
 800138e:	4630      	mov	r0, r6
 8001390:	f7ff feaa 	bl	80010e8 <next_unwind_byte>
 8001394:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001398:	f000 030f 	and.w	r3, r0, #15
 800139c:	3210      	adds	r2, #16
 800139e:	3301      	adds	r3, #1
 80013a0:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013a4:	e6f2      	b.n	800118c <__gnu_unwind_execute+0x4c>
 80013a6:	2300      	movs	r3, #0
 80013a8:	f10d 090c 	add.w	r9, sp, #12
 80013ac:	220d      	movs	r2, #13
 80013ae:	4619      	mov	r1, r3
 80013b0:	f8cd 9000 	str.w	r9, [sp]
 80013b4:	4628      	mov	r0, r5
 80013b6:	f7ff fa93 	bl	80008e0 <_Unwind_VRS_Get>
 80013ba:	4630      	mov	r0, r6
 80013bc:	f7ff fe94 	bl	80010e8 <next_unwind_byte>
 80013c0:	0602      	lsls	r2, r0, #24
 80013c2:	f04f 0702 	mov.w	r7, #2
 80013c6:	d50c      	bpl.n	80013e2 <__gnu_unwind_execute+0x2a2>
 80013c8:	9b03      	ldr	r3, [sp, #12]
 80013ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80013ce:	40b8      	lsls	r0, r7
 80013d0:	4403      	add	r3, r0
 80013d2:	4630      	mov	r0, r6
 80013d4:	9303      	str	r3, [sp, #12]
 80013d6:	f7ff fe87 	bl	80010e8 <next_unwind_byte>
 80013da:	0603      	lsls	r3, r0, #24
 80013dc:	f107 0707 	add.w	r7, r7, #7
 80013e0:	d4f2      	bmi.n	80013c8 <__gnu_unwind_execute+0x288>
 80013e2:	9b03      	ldr	r3, [sp, #12]
 80013e4:	f8cd 9000 	str.w	r9, [sp]
 80013e8:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 80013ec:	f503 7201 	add.w	r2, r3, #516	; 0x204
 80013f0:	40bc      	lsls	r4, r7
 80013f2:	2300      	movs	r3, #0
 80013f4:	4414      	add	r4, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	220d      	movs	r2, #13
 80013fa:	4628      	mov	r0, r5
 80013fc:	9403      	str	r4, [sp, #12]
 80013fe:	f7ff fa91 	bl	8000924 <_Unwind_VRS_Set>
 8001402:	e6a4      	b.n	800114e <__gnu_unwind_execute+0xe>

08001404 <__gnu_unwind_frame>:
 8001404:	b510      	push	{r4, lr}
 8001406:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001408:	b084      	sub	sp, #16
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	2003      	movs	r0, #3
 800140e:	f88d 000c 	strb.w	r0, [sp, #12]
 8001412:	79dc      	ldrb	r4, [r3, #7]
 8001414:	f88d 400d 	strb.w	r4, [sp, #13]
 8001418:	0212      	lsls	r2, r2, #8
 800141a:	3308      	adds	r3, #8
 800141c:	4608      	mov	r0, r1
 800141e:	a901      	add	r1, sp, #4
 8001420:	9201      	str	r2, [sp, #4]
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	f7ff fe8c 	bl	8001140 <__gnu_unwind_execute>
 8001428:	b004      	add	sp, #16
 800142a:	bd10      	pop	{r4, pc}

0800142c <_Unwind_GetRegionStart>:
 800142c:	b508      	push	{r3, lr}
 800142e:	f7ff fe85 	bl	800113c <unwind_UCB_from_context>
 8001432:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001434:	bd08      	pop	{r3, pc}
 8001436:	bf00      	nop

08001438 <_Unwind_GetLanguageSpecificData>:
 8001438:	b508      	push	{r3, lr}
 800143a:	f7ff fe7f 	bl	800113c <unwind_UCB_from_context>
 800143e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001440:	79c3      	ldrb	r3, [r0, #7]
 8001442:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001446:	3008      	adds	r0, #8
 8001448:	bd08      	pop	{r3, pc}
 800144a:	bf00      	nop

0800144c <_Unwind_GetDataRelBase>:
 800144c:	b508      	push	{r3, lr}
 800144e:	f009 fafe 	bl	800aa4e <abort>
 8001452:	bf00      	nop

08001454 <_Unwind_GetTextRelBase>:
 8001454:	b508      	push	{r3, lr}
 8001456:	f7ff fff9 	bl	800144c <_Unwind_GetDataRelBase>
 800145a:	bf00      	nop

0800145c <__aeabi_idiv0>:
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <_sbrk_r>:
static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit; // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void* _sbrk_r(struct _reent *pReent, int incr) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
	static char *currentHeapEnd = &__HeapBase;
#ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
	if (TotalHeapSize == 0) {
 800146a:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <_sbrk_r+0xc4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10e      	bne.n	8001490 <_sbrk_r+0x30>
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
				- (&__HeapBase)) - ISR_STACK_LENGTH_BYTES;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <_sbrk_r+0xc8>)
 8001474:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001478:	4a2c      	ldr	r2, [pc, #176]	; (800152c <_sbrk_r+0xcc>)
 800147a:	1a9b      	subs	r3, r3, r2
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 800147c:	4a2c      	ldr	r2, [pc, #176]	; (8001530 <_sbrk_r+0xd0>)
 800147e:	6013      	str	r3, [r2, #0]
				- (&__HeapBase)) - ISR_STACK_LENGTH_BYTES;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <_sbrk_r+0xc8>)
 8001482:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001486:	4a29      	ldr	r2, [pc, #164]	; (800152c <_sbrk_r+0xcc>)
 8001488:	1a9b      	subs	r3, r3, r2
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 800148a:	461a      	mov	r2, r3
 800148c:	4b25      	ldr	r3, [pc, #148]	; (8001524 <_sbrk_r+0xc4>)
 800148e:	601a      	str	r2, [r3, #0]
	char* my_heap_limit = &__HeapLimit;
	char* my_heap_isr_stack_limit = &__HeapLimit - ISR_STACK_LENGTH_BYTES;
	*/

	char *limit =
			(xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) ?
 8001490:	f007 fd0a 	bl	8008ea8 <xTaskGetSchedulerState>
 8001494:	4603      	mov	r3, r0
					stack_ptr : // Before scheduler is started, limit is stack pointer (risky!)
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <_sbrk_r+0x3e>
 800149a:	466b      	mov	r3, sp
 800149c:	e000      	b.n	80014a0 <_sbrk_r+0x40>
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <_sbrk_r+0xd4>)
	char *limit =
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80014a2:	f3ef 8211 	mrs	r2, BASEPRI
 80014a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014aa:	b672      	cpsid	i
 80014ac:	f383 8811 	msr	BASEPRI, r3
 80014b0:	f3bf 8f6f 	isb	sy
 80014b4:	f3bf 8f4f 	dsb	sy
 80014b8:	b662      	cpsie	i
 80014ba:	61ba      	str	r2, [r7, #24]
 80014bc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80014be:	69bb      	ldr	r3, [r7, #24]
					&__HeapLimit - ISR_STACK_LENGTH_BYTES; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
	DRN_ENTER_CRITICAL_SECTION(usis);
 80014c0:	623b      	str	r3, [r7, #32]
	char *previousHeapEnd = currentHeapEnd;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <_sbrk_r+0xd8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	61fb      	str	r3, [r7, #28]
	if (currentHeapEnd + incr > limit) {
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <_sbrk_r+0xd8>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d209      	bcs.n	80014ea <_sbrk_r+0x8a>
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	f383 8811 	msr	BASEPRI, r3
		// Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
		{
			extern void vApplicationMallocFailedHook(void);
			DRN_EXIT_CRITICAL_SECTION(usis);
			vApplicationMallocFailedHook();
 80014e0:	f001 fc8d 	bl	8002dfe <vApplicationMallocFailedHook>
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
            DRN_EXIT_CRITICAL_SECTION(usis);
        #endif
		return (char*) -1; // the malloc-family routine that called sbrk will return 0
 80014e4:	f04f 33ff 	mov.w	r3, #4294967295
 80014e8:	e017      	b.n	800151a <_sbrk_r+0xba>
	}
	// 'incr' of memory is available: update accounting and return it.
	currentHeapEnd += incr;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <_sbrk_r+0xd8>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <_sbrk_r+0xd8>)
 80014f4:	6013      	str	r3, [r2, #0]
	heapBytesRemaining -= incr;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <_sbrk_r+0xd0>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <_sbrk_r+0xd0>)
 8001500:	6013      	str	r3, [r2, #0]
#ifndef NDEBUG
	totalBytesProvidedBySBRK += incr;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <_sbrk_r+0xdc>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	4413      	add	r3, r2
 800150a:	4a0c      	ldr	r2, [pc, #48]	; (800153c <_sbrk_r+0xdc>)
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f383 8811 	msr	BASEPRI, r3
#endif
	DRN_EXIT_CRITICAL_SECTION(usis);
	return (char*) previousHeapEnd;
 8001518:	69fb      	ldr	r3, [r7, #28]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000ec4 	.word	0x20000ec4
 8001528:	20080000 	.word	0x20080000
 800152c:	20001460 	.word	0x20001460
 8001530:	2000009c 	.word	0x2000009c
 8001534:	2007fe00 	.word	0x2007fe00
 8001538:	20000000 	.word	0x20000000
 800153c:	200000a0 	.word	0x200000a0

08001540 <__malloc_lock>:
;

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r) {
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	__asm volatile
 8001548:	f3ef 8211 	mrs	r2, BASEPRI
 800154c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001550:	b672      	cpsid	i
 8001552:	f383 8811 	msr	BASEPRI, r3
 8001556:	f3bf 8f6f 	isb	sy
 800155a:	f3bf 8f4f 	dsb	sy
 800155e:	b662      	cpsie	i
 8001560:	60fa      	str	r2, [r7, #12]
 8001562:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 8001564:	68fb      	ldr	r3, [r7, #12]
#if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__malloc_lock+0x38>)
 8001568:	6013      	str	r3, [r2, #0]
		taskDISABLE_INTERRUPTS();
		for( ;; );
	}
	vTaskSuspendAll();
#endif
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200000a4 	.word	0x200000a4

0800157c <__malloc_unlock>:
;
void __malloc_unlock(struct _reent *r) {
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
#if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <__malloc_unlock+0x20>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f383 8811 	msr	BASEPRI, r3
  #else
	(void) xTaskResumeAll();
#endif
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	200000a4 	.word	0x200000a4

080015a0 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void* pvPortMalloc(size_t xSize) PRIVILEGED_FUNCTION {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	void *p = malloc(xSize);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f009 fb4b 	bl	800ac44 <malloc>
 80015ae:	4603      	mov	r3, r0
 80015b0:	60fb      	str	r3, [r7, #12]
	return p;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <vPortFree>:
void vPortFree(void *pv) PRIVILEGED_FUNCTION {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	free(pv);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f009 fb45 	bl	800ac54 <free>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_ZN17CANControllerBase13addSubscriberE10CANFrameIdR14ICANSubscriber>:
{
	std::vector<CANFrameId> _canFrameIds;
	std::vector<ICANSubscriber*> _canSubscribers;

public:
	void addSubscriber(CANFrameId id, ICANSubscriber &subscriber) override
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	4638      	mov	r0, r7
 80015f4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		_canFrameIds.push_back(id);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3304      	adds	r3, #4
 80015fc:	463a      	mov	r2, r7
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f8f7 	bl	80017f4 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_>
		_canSubscribers.push_back(&subscriber);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f103 0210 	add.w	r2, r3, #16
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4610      	mov	r0, r2
 8001618:	f000 f91d 	bl	8001856 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE9push_backEOS1_>
	}
 800161c:	bf00      	nop
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_ZN17CANControllerBase7receiveE8CANFrame>:

	void receive(CANFrame frame) override
 8001624:	b084      	sub	sp, #16
 8001626:	b5b0      	push	{r4, r5, r7, lr}
 8001628:	b08c      	sub	sp, #48	; 0x30
 800162a:	af04      	add	r7, sp, #16
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		// update each subscriber that listens to the same frame id as the id of the given frame
		for (auto it = _canFrameIds.begin(); it != _canFrameIds.end(); ++it)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3304      	adds	r3, #4
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f91c 	bl	8001878 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 8001640:	4603      	mov	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3304      	adds	r3, #4
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f925 	bl	8001898 <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>
 800164e:	4603      	mov	r3, r0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	f107 0210 	add.w	r2, r7, #16
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f92c 	bl	80018ba <_ZN9__gnu_cxxneIP10CANFrameIdSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d03e      	beq.n	80016e6 <_ZN17CANControllerBase7receiveE8CANFrame+0xc2>
		{
			if (frame.id == *it)
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f94d 	bl	800190c <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEdeEv>
 8001672:	4602      	mov	r2, r0
 8001674:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fb86 	bl	8002d8c <_ZNK10CANFrameIdeqERKS_>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d029      	beq.n	80016da <_ZN17CANControllerBase7receiveE8CANFrame+0xb6>
			{
				const int index = it - _canFrameIds.begin();
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3304      	adds	r3, #4
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f8f4 	bl	8001878 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 8001690:	4603      	mov	r3, r0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	f107 0214 	add.w	r2, r7, #20
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f940 	bl	8001924 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80016a4:	61f8      	str	r0, [r7, #28]
				ICANSubscriber *subscriber = _canSubscribers[index];
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3310      	adds	r3, #16
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f954 	bl	800195c <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEixEj>
 80016b4:	4603      	mov	r3, r0
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	61bb      	str	r3, [r7, #24]
				subscriber->receive(frame);
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3308      	adds	r3, #8
 80016c0:	681c      	ldr	r4, [r3, #0]
 80016c2:	466d      	mov	r5, sp
 80016c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80016d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d6:	69b8      	ldr	r0, [r7, #24]
 80016d8:	47a0      	blx	r4
		for (auto it = _canFrameIds.begin(); it != _canFrameIds.end(); ++it)
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f903 	bl	80018ea <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEppEv>
 80016e4:	e7ae      	b.n	8001644 <_ZN17CANControllerBase7receiveE8CANFrame+0x20>
			}
		}
	}
 80016e6:	bf00      	nop
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016f0:	b004      	add	sp, #16
 80016f2:	4770      	bx	lr

080016f4 <_ZN17CANControllerBaseD1Ev>:
class CANControllerBase : public ICANController
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	4a08      	ldr	r2, [pc, #32]	; (8001720 <_ZN17CANControllerBaseD1Ev+0x2c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3310      	adds	r3, #16
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f953 	bl	80019b2 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EED1Ev>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3304      	adds	r3, #4
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f933 	bl	800197c <_ZNSt6vectorI10CANFrameIdSaIS0_EED1Ev>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	0800b6e8 	.word	0x0800b6e8

08001724 <_ZN13CANControllerD1Ev>:

#include <middleware_layer/can/CANControllerBase.hpp>
#include <middleware_layer/can/CANHandle.hpp>


class CANController : public CANControllerBase
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_ZN13CANControllerD1Ev+0x20>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ffdd 	bl	80016f4 <_ZN17CANControllerBaseD1Ev>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	0800b6fc 	.word	0x0800b6fc

08001748 <halt>:
CANFrameId canFrameIdRightInverter = CANFrameId(0xBB);


// for testing
extern "C" void halt()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	//while (1) {
		puts("");
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <halt+0x10>)
 800174e:	f009 fbb9 	bl	800aec4 <puts>
	//}
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	0800b548 	.word	0x0800b548

0800175c <cppmain>:
* @author Manuel Ehrahrdt
* @date 05.04.2020
*
*/
void cppmain (void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0ac      	sub	sp, #176	; 0xb0
 8001760:	af00      	add	r7, sp, #0
	// Be aware that this example has not yet explicitly defined filters for receiving.
	// So I dont know if something can be received yet.
	// Make sure to do define filters if you want to receive the frames that you want to receive.


	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001762:	4821      	ldr	r0, [pc, #132]	; (80017e8 <cppmain+0x8c>)
 8001764:	f002 fa64 	bl	8003c30 <HAL_CAN_Start>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf14      	ite	ne
 800176e:	2301      	movne	r3, #1
 8001770:	2300      	moveq	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <cppmain+0x20>
	{
		Error_Handler();
 8001778:	f001 fd66 	bl	8003248 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1,
 800177c:	2113      	movs	r1, #19
 800177e:	481a      	ldr	r0, [pc, #104]	; (80017e8 <cppmain+0x8c>)
 8001780:	f002 fce0 	bl	8004144 <HAL_CAN_ActivateNotification>
 8001784:	4603      	mov	r3, r0
			CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf14      	ite	ne
 800178a:	2301      	movne	r3, #1
 800178c:	2300      	moveq	r3, #0
 800178e:	b2db      	uxtb	r3, r3
	if (HAL_CAN_ActivateNotification(&hcan1,
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <cppmain+0x3c>
	{
		Error_Handler();
 8001794:	f001 fd58 	bl	8003248 <Error_Handler>


	// prepare header
	CAN_TxHeaderTypeDef header;
	// set standard id
	header.StdId = 42;
 8001798:	232a      	movs	r3, #42	; 0x2a
 800179a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	// use standard id
	header.IDE = CAN_ID_STD;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	// this is a data frame, not a remote frame, because we have data to send
	header.RTR = CAN_RTR_DATA;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	// data length, we send eight bytes
	header.DLC = 8;
 80017aa:	2308      	movs	r3, #8
 80017ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	uint8_t data[] = {1, 2, 3, 4, 5, 6, 7, 8};
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <cppmain+0x90>)
 80017b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ba:	e883 0003 	stmia.w	r3, {r0, r1}



	while (true)
	{
		if (HAL_CAN_AddTxMessage(&hcan1, &header, data, &txMailbox_used_to_store) != HAL_OK)
 80017be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017c2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80017c6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <cppmain+0x8c>)
 80017cc:	f002 fa74 	bl	8003cb8 <HAL_CAN_AddTxMessage>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ee      	beq.n	80017be <cppmain+0x62>
		{
			puts("error");
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <cppmain+0x94>)
 80017e2:	f009 fb6f 	bl	800aec4 <puts>
		if (HAL_CAN_AddTxMessage(&hcan1, &header, data, &txMailbox_used_to_store) != HAL_OK)
 80017e6:	e7ea      	b.n	80017be <cppmain+0x62>
 80017e8:	20001358 	.word	0x20001358
 80017ec:	0800b554 	.word	0x0800b554
 80017f0:	0800b54c 	.word	0x0800b54c

080017f4 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	429a      	cmp	r2, r3
 8001808:	d00d      	beq.n	8001826 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	f000 f8f3 	bl	80019fe <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f103 020c 	add.w	r2, r3, #12
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8001824:	e008      	b.n	8001838 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f836 	bl	8001898 <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>
 800182c:	4603      	mov	r3, r0
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f8f6 	bl	8001a24 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZSt4moveIRP14ICANSubscriberEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE9push_backEOS1_>:

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8001860:	6838      	ldr	r0, [r7, #0]
 8001862:	f7ff ffed 	bl	8001840 <_ZSt4moveIRP14ICANSubscriberEONSt16remove_referenceIT_E4typeEOS4_>
 8001866:	4603      	mov	r3, r0
 8001868:	4619      	mov	r1, r3
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f9ab 	bl	8001bc6 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f000 f9ca 	bl	8001c22 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	1d1a      	adds	r2, r3, #4
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f9b9 	bl	8001c22 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <_ZN9__gnu_cxxneIP10CANFrameIdSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80018ba:	b590      	push	{r4, r7, lr}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f9bc 	bl	8001c42 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 80018ca:	4603      	mov	r3, r0
 80018cc:	681c      	ldr	r4, [r3, #0]
 80018ce:	6838      	ldr	r0, [r7, #0]
 80018d0:	f000 f9b7 	bl	8001c42 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 80018d4:	4603      	mov	r3, r0
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	429c      	cmp	r4, r3
 80018da:	bf14      	ite	ne
 80018dc:	2301      	movne	r3, #1
 80018de:	2300      	moveq	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd90      	pop	{r4, r7, pc}

080018ea <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
	++_M_current;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f103 020c 	add.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
	return *this;
 80018fe:	687b      	ldr	r3, [r7, #4]
      }
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f987 	bl	8001c42 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001934:	4603      	mov	r3, r0
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	461c      	mov	r4, r3
 800193a:	6838      	ldr	r0, [r7, #0]
 800193c:	f000 f981 	bl	8001c42 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001940:	4603      	mov	r3, r0
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	1ae3      	subs	r3, r4, r3
 8001946:	109b      	asrs	r3, r3, #2
 8001948:	4a03      	ldr	r2, [pc, #12]	; (8001958 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x34>)
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bd90      	pop	{r4, r7, pc}
 8001956:	bf00      	nop
 8001958:	aaaaaaab 	.word	0xaaaaaaab

0800195c <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
      }
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_ZNSt6vectorI10CANFrameIdSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681c      	ldr	r4, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f98e 	bl	8001cb0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001994:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001996:	461a      	mov	r2, r3
 8001998:	4629      	mov	r1, r5
 800199a:	4620      	mov	r0, r4
 800199c:	f000 f993 	bl	8001cc6 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f964 	bl	8001c70 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bdb0      	pop	{r4, r5, r7, pc}

080019b2 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80019b2:	b5b0      	push	{r4, r5, r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681c      	ldr	r4, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f9b2 	bl	8001d2e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 80019ca:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80019cc:	461a      	mov	r2, r3
 80019ce:	4629      	mov	r1, r5
 80019d0:	4620      	mov	r0, r4
 80019d2:	f000 f9b7 	bl	8001d44 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f98e 	bl	8001cfa <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EED1Ev>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdb0      	pop	{r4, r5, r7, pc}

080019e8 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffec 	bl	80019e8 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f9a2 	bl	8001d60 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8001a30:	4a5d      	ldr	r2, [pc, #372]	; (8001ba8 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x184>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 f9ad 	bl	8001d94 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	623b      	str	r3, [r7, #32]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff ff1a 	bl	8001878 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 8001a44:	4603      	mov	r3, r0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	f107 0214 	add.w	r2, r7, #20
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff66 	bl	8001924 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a39      	ldr	r1, [r7, #32]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f9df 	bl	8001e24 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj>
 8001a66:	4603      	mov	r3, r0
 8001a68:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001a6e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001a70:	69fa      	ldr	r2, [r7, #28]
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	189d      	adds	r5, r3, r2
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffb1 	bl	80019e8 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff ffb6 	bl	80019fe <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8001a92:	2300      	movs	r3, #0
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681c      	ldr	r4, [r3, #0]
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f8cf 	bl	8001c42 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f900 	bl	8001cb0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001ab0:	4603      	mov	r3, r0
	  __new_finish
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f000 f9c8 	bl	8001e4c <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001abc:	4603      	mov	r3, r0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24

	  ++__new_finish;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	330c      	adds	r3, #12
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 f8b9 	bl	8001c42 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	681c      	ldr	r4, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f8e8 	bl	8001cb0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001ae0:	4603      	mov	r3, r0
	  __new_finish
 8001ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f000 f9b0 	bl	8001e4c <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001aec:	4603      	mov	r3, r0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681c      	ldr	r4, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f8d8 	bl	8001cb0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001b00:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001b02:	461a      	mov	r2, r3
 8001b04:	4629      	mov	r1, r5
 8001b06:	4620      	mov	r0, r4
 8001b08:	f000 f8dd 	bl	8001cc6 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	109b      	asrs	r3, r3, #2
 8001b20:	4a22      	ldr	r2, [pc, #136]	; (8001bac <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(this->_M_impl._M_start,
 8001b26:	461a      	mov	r2, r3
 8001b28:	f000 f9b6 	bl	8001e98 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b36:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001b38:	6a3a      	ldr	r2, [r7, #32]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	461a      	mov	r2, r3
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	441a      	add	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	609a      	str	r2, [r3, #8]
    }
 8001b4c:	e029      	b.n	8001ba2 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x17e>
 8001b4e:	4603      	mov	r3, r0
      __catch(...)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f008 fc2b 	bl	800a3ac <__cxa_begin_catch>
	  if (!__new_finish)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10c      	bne.n	8001b76 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x152>
	    _Alloc_traits::destroy(this->_M_impl,
 8001b5c:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	461a      	mov	r2, r3
	    _Alloc_traits::destroy(this->_M_impl,
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f000 f985 	bl	8001e7e <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>
 8001b74:	e009      	b.n	8001b8a <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x166>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f899 	bl	8001cb0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b84:	69b8      	ldr	r0, [r7, #24]
 8001b86:	f000 f89e 	bl	8001cc6 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a3a      	ldr	r2, [r7, #32]
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f981 	bl	8001e98 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
	  __throw_exception_again;
 8001b96:	f008 fbb5 	bl	800a304 <__cxa_rethrow>
      __catch(...)
 8001b9a:	f008 fc31 	bl	800a400 <__cxa_end_catch>
 8001b9e:	f007 ffe5 	bl	8009b6c <__cxa_end_cleanup>
    }
 8001ba2:	3728      	adds	r7, #40	; 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba8:	0800b55c 	.word	0x0800b55c
 8001bac:	aaaaaaab 	.word	0xaaaaaaab

08001bb0 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8001bc6:	b5b0      	push	{r4, r5, r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d011      	beq.n	8001c00 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001bdc:	687c      	ldr	r4, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685d      	ldr	r5, [r3, #4]
 8001be2:	6838      	ldr	r0, [r7, #0]
 8001be4:	f7ff ffe4 	bl	8001bb0 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461a      	mov	r2, r3
 8001bec:	4629      	mov	r1, r5
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f000 f965 	bl	8001ebe <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	1d1a      	adds	r2, r3, #4
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	605a      	str	r2, [r3, #4]
      }
 8001bfe:	e00c      	b.n	8001c1a <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f96f 	bl	8001ee4 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE3endEv>
 8001c06:	4604      	mov	r4, r0
 8001c08:	6838      	ldr	r0, [r7, #0]
 8001c0a:	f7ff ffd1 	bl	8001bb0 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	4621      	mov	r1, r4
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f977 	bl	8001f08 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bdb0      	pop	{r4, r5, r7, pc}

08001c22 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 fa07 	bl	8002074 <_ZNSaI10CANFrameIdED1Ev>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6819      	ldr	r1, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8001c80:	461a      	mov	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	109b      	asrs	r3, r3, #2
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev+0x3c>)
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8001c90:	461a      	mov	r2, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f900 	bl	8001e98 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
		      - this->_M_impl._M_start); }
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ffdc 	bl	8001c58 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implD1Ev>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	aaaaaaab 	.word	0xaaaaaaab

08001cb0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001cd2:	68b9      	ldr	r1, [r7, #8]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f9d9 	bl	800208c <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>
    }
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f9db 	bl	80020a6 <_ZNSaIP14ICANSubscriberED1Ev>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6819      	ldr	r1, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8001d14:	461a      	mov	r2, r3
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f9d1 	bl	80020be <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ffdf 	bl	8001ce2 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implD1Ev>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f9c6 	bl	80020e4 <_ZSt8_DestroyIPP14ICANSubscriberEvT_S3_>
    }
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff fe3b 	bl	80019e8 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 8001d72:	4604      	mov	r4, r0
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4619      	mov	r1, r3
 8001d78:	200c      	movs	r0, #12
 8001d7a:	f7ff fc2a 	bl	80015d2 <_ZnwjPv>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_+0x2c>
 8001d84:	4622      	mov	r2, r4
 8001d86:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}

08001d94 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f9ac 	bl	80020fe <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 8001da6:	4604      	mov	r4, r0
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f9b9 	bl	8002120 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 8001dae:	4603      	mov	r3, r0
 8001db0:	1ae2      	subs	r2, r4, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	bf34      	ite	cc
 8001db8:	2301      	movcc	r3, #1
 8001dba:	2300      	movcs	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f008 fcb0 	bl	800a72a <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f9a8 	bl	8002120 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f9a4 	bl	8002120 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	f107 0208 	add.w	r2, r7, #8
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f9b0 	bl	800214c <_ZSt3maxIjERKT_S2_S2_>
 8001dec:	4603      	mov	r3, r0
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4423      	add	r3, r4
 8001df2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f993 	bl	8002120 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d306      	bcc.n	8001e10 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x7c>
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f97b 	bl	80020fe <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d904      	bls.n	8001e1a <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x86>
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f974 	bl	80020fe <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 8001e16:	4603      	mov	r3, r0
 8001e18:	e000      	b.n	8001e1c <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x88>
 8001e1a:	697b      	ldr	r3, [r7, #20]
      }
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd90      	pop	{r4, r7, pc}

08001e24 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj+0x1e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f99b 	bl	8002174 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8allocateERS1_j>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	e000      	b.n	8001e44 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj+0x20>
 8001e42:	2300      	movs	r3, #0
      }
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f999 	bl	8002192 <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>
 8001e60:	4604      	mov	r4, r0
 8001e62:	68b8      	ldr	r0, [r7, #8]
 8001e64:	f000 f995 	bl	8002192 <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>
 8001e68:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f000 f99e 	bl	80021b0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CANFrameIdES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8001e74:	4603      	mov	r3, r0
    }
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}

08001e7e <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8001e88:	6839      	ldr	r1, [r7, #0]
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f9a1 	bl	80021d2 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE7destroyIS1_EEvPT_>
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
	if (__p)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	68b9      	ldr	r1, [r7, #8]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 f999 	bl	80021e8 <_ZNSt16allocator_traitsISaI10CANFrameIdEE10deallocateERS1_PS0_j>
      }
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff fe70 	bl	8001bb0 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f995 	bl	8002206 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_>
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	1d1a      	adds	r2, r3, #4
 8001ef0:	f107 030c 	add.w	r3, r7, #12
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f99d 	bl	8002236 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8001f08:	b5b0      	push	{r4, r5, r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8001f14:	4a56      	ldr	r2, [pc, #344]	; (8002070 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x168>)
 8001f16:	2101      	movs	r1, #1
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 f99c 	bl	8002256 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f9df 	bl	80022e6 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE5beginEv>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	f107 0214 	add.w	r2, r7, #20
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f9e5 	bl	8002306 <_ZN9__gnu_cxxmiIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a39      	ldr	r1, [r7, #32]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 f9f4 	bl	8002332 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
	  _Alloc_traits::construct(this->_M_impl,
 8001f52:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	18d5      	adds	r5, r2, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff fe27 	bl	8001bb0 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461a      	mov	r2, r3
 8001f66:	4629      	mov	r1, r5
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f7ff ffa8 	bl	8001ebe <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
	    (this->_M_impl._M_start, __position.base(),
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681c      	ldr	r4, [r3, #0]
 8001f76:	f107 0308 	add.w	r3, r7, #8
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f9ed 	bl	800235a <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 8001f80:	4603      	mov	r3, r0
 8001f82:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fed1 	bl	8001d2e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8001f8c:	4603      	mov	r3, r0
	  __new_finish
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4629      	mov	r1, r5
 8001f92:	4620      	mov	r0, r4
 8001f94:	f000 f9ec 	bl	8002370 <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
	  ++__new_finish;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
	    (__position.base(), this->_M_impl._M_finish,
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f9d7 	bl	800235a <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 8001fac:	4603      	mov	r3, r0
 8001fae:	681c      	ldr	r4, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff feb9 	bl	8001d2e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8001fbc:	4603      	mov	r3, r0
	  __new_finish
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f000 f9d4 	bl	8002370 <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681c      	ldr	r4, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fea9 	bl	8001d2e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8001fdc:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7ff feae 	bl	8001d44 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f000 f85e 	bl	80020be <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	441a      	add	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	609a      	str	r2, [r3, #8]
    }
 800201a:	e025      	b.n	8002068 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x160>
 800201c:	4603      	mov	r3, r0
      __catch(...)
 800201e:	4618      	mov	r0, r3
 8002020:	f008 f9c4 	bl	800a3ac <__cxa_begin_catch>
	  if (!__new_finish)
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	2b00      	cmp	r3, #0
 8002028:	d108      	bne.n	800203c <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x134>
	    _Alloc_traits::destroy(this->_M_impl,
 800202a:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	009b      	lsls	r3, r3, #2
	    _Alloc_traits::destroy(this->_M_impl,
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4413      	add	r3, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f000 f9b4 	bl	80023a2 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE7destroyIS1_EEvRS2_PT_>
 800203a:	e009      	b.n	8002050 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x148>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fe75 	bl	8001d2e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800204a:	69b8      	ldr	r0, [r7, #24]
 800204c:	f7ff fe7a 	bl	8001d44 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a3a      	ldr	r2, [r7, #32]
 8002054:	69b9      	ldr	r1, [r7, #24]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f831 	bl	80020be <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
	  __throw_exception_again;
 800205c:	f008 f952 	bl	800a304 <__cxa_rethrow>
      __catch(...)
 8002060:	f008 f9ce 	bl	800a400 <__cxa_end_catch>
 8002064:	f007 fd82 	bl	8009b6c <__cxa_end_cleanup>
    }
 8002068:	3728      	adds	r7, #40	; 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bdb0      	pop	{r4, r5, r7, pc}
 800206e:	bf00      	nop
 8002070:	0800b55c 	.word	0x0800b55c

08002074 <_ZNSaI10CANFrameIdED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f99d 	bl	80023bc <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdED1Ev>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002096:	6839      	ldr	r1, [r7, #0]
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f99a 	bl	80023d2 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CANFrameIdEEvT_S4_>
    }
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <_ZNSaIP14ICANSubscriberED1Ev>:
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f99a 	bl	80023e8 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberED1Ev>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
	if (__p)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f991 	bl	80023fe <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE10deallocateERS2_PS1_j>
      }
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_ZSt8_DestroyIPP14ICANSubscriberEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80020ee:	6839      	ldr	r1, [r7, #0]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f993 	bl	800241c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14ICANSubscriberEEvT_S5_>
    }
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 f99e 	bl	800244a <_ZNKSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 800210e:	4603      	mov	r3, r0
 8002110:	4618      	mov	r0, r3
 8002112:	f000 f98e 	bl	8002432 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8max_sizeERKS1_>
 8002116:	4603      	mov	r3, r0
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	461a      	mov	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	109b      	asrs	r3, r3, #2
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv+0x28>)
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	aaaaaaab 	.word	0xaaaaaaab

0800214c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d201      	bcs.n	8002166 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	e000      	b.n	8002168 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002166:	687b      	ldr	r3, [r7, #4]
    }
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800217e:	2200      	movs	r2, #0
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f96c 	bl	8002460 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv>
 8002188:	4603      	mov	r3, r0
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800219a:	f107 030c 	add.w	r3, r7, #12
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f97e 	bl	80024a2 <_ZNSt13move_iteratorIP10CANFrameIdEC1ES1_>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CANFrameIdES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f97c 	bl	80024c0 <_ZSt18uninitialized_copyISt13move_iteratorIP10CANFrameIdES2_ET0_T_S5_S4_>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_ZNSt16allocator_traitsISaI10CANFrameIdEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f973 	bl	80024e4 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE10deallocateEPS1_j>
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002206:	b590      	push	{r4, r7, lr}
 8002208:	b085      	sub	sp, #20
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fccc 	bl	8001bb0 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8002218:	4603      	mov	r3, r0
 800221a:	681c      	ldr	r4, [r3, #0]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4619      	mov	r1, r3
 8002220:	2004      	movs	r0, #4
 8002222:	f7ff f9d6 	bl	80015d2 <_ZnwjPv>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d000      	beq.n	800222e <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_+0x28>
 800222c:	601c      	str	r4, [r3, #0]
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bd90      	pop	{r4, r7, pc}

08002236 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8002256:	b590      	push	{r4, r7, lr}
 8002258:	b087      	sub	sp, #28
 800225a:	af00      	add	r7, sp, #0
 800225c:	60f8      	str	r0, [r7, #12]
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f94b 	bl	80024fe <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 8002268:	4604      	mov	r4, r0
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f958 	bl	8002520 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 8002270:	4603      	mov	r3, r0
 8002272:	1ae2      	subs	r2, r4, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	bf34      	ite	cc
 800227a:	2301      	movcc	r3, #1
 800227c:	2300      	movcs	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4618      	mov	r0, r3
 8002288:	f008 fa4f 	bl	800a72a <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 f947 	bl	8002520 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 8002292:	4604      	mov	r4, r0
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f943 	bl	8002520 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 800229a:	4603      	mov	r3, r0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	f107 0208 	add.w	r2, r7, #8
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff4f 	bl	800214c <_ZSt3maxIjERKT_S2_S2_>
 80022ae:	4603      	mov	r3, r0
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4423      	add	r3, r4
 80022b4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f932 	bl	8002520 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 80022bc:	4602      	mov	r2, r0
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d306      	bcc.n	80022d2 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x7c>
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f91a 	bl	80024fe <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 80022ca:	4602      	mov	r2, r0
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d904      	bls.n	80022dc <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x86>
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f913 	bl	80024fe <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 80022d8:	4603      	mov	r3, r0
 80022da:	e000      	b.n	80022de <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x88>
 80022dc:	697b      	ldr	r3, [r7, #20]
      }
 80022de:	4618      	mov	r0, r3
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd90      	pop	{r4, r7, pc}

080022e6 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff9d 	bl	8002236 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_ZN9__gnu_cxxmiIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002306:	b590      	push	{r4, r7, lr}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f822 	bl	800235a <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 8002316:	4603      	mov	r3, r0
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	461c      	mov	r4, r3
 800231c:	6838      	ldr	r0, [r7, #0]
 800231e:	f000 f81c 	bl	800235a <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 8002322:	4603      	mov	r3, r0
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1ae3      	subs	r3, r4, r3
 8002328:	109b      	asrs	r3, r3, #2
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bd90      	pop	{r4, r7, pc}

08002332 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj+0x1e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6839      	ldr	r1, [r7, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f8fb 	bl	8002542 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8allocateERS2_j>
 800234c:	4603      	mov	r3, r0
 800234e:	e000      	b.n	8002352 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj+0x20>
 8002350:	2300      	movs	r3, #0
      }
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f8ee 	bl	8002560 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>
 8002384:	4604      	mov	r4, r0
 8002386:	68b8      	ldr	r0, [r7, #8]
 8002388:	f000 f8ea 	bl	8002560 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>
 800238c:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4620      	mov	r0, r4
 8002394:	f000 f8f3 	bl	800257e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14ICANSubscriberES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8002398:	4603      	mov	r3, r0
    }
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd90      	pop	{r4, r7, pc}

080023a2 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f8f6 	bl	80025a0 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE7destroyIS2_EEvPT_>
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CANFrameIdEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberED1Ev>:
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f8d1 	bl	80025b6 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE10deallocateEPS2_j>
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14ICANSubscriberEEvT_S5_>:
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f8c8 	bl	80025d0 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>
 8002440:	4603      	mov	r3, r0
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <_ZNKSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f8af 	bl	80025d0 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>
 8002472:	4602      	mov	r2, r0
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4293      	cmp	r3, r2
 8002478:	bf8c      	ite	hi
 800247a:	2301      	movhi	r3, #1
 800247c:	2300      	movls	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002484:	f008 f94e 	bl	800a724 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4618      	mov	r0, r3
 8002494:	f007 ffd8 	bl	800a448 <_Znwj>
 8002498:	4603      	mov	r3, r0
      }
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_ZNSt13move_iteratorIP10CANFrameIdEC1ES1_>:
      move_iterator(iterator_type __i)
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_ZSt18uninitialized_copyISt13move_iteratorIP10CANFrameIdES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80024cc:	2300      	movs	r3, #0
 80024ce:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f889 	bl	80025ec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_>
 80024da:	4603      	mov	r3, r0
    }
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80024f0:	68b8      	ldr	r0, [r7, #8]
 80024f2:	f008 f857 	bl	800a5a4 <_ZdlPv>
      }
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f8b9 	bl	8002680 <_ZNKSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 800250e:	4603      	mov	r3, r0
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f8a9 	bl	8002668 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8max_sizeERKS2_>
 8002516:	4603      	mov	r3, r0
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	461a      	mov	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	109b      	asrs	r3, r3, #2
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800254c:	2200      	movs	r2, #0
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f8a0 	bl	8002696 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv>
 8002556:	4603      	mov	r3, r0
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f8af 	bl	80026d2 <_ZNSt13move_iteratorIPP14ICANSubscriberEC1ES2_>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14ICANSubscriberES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f8ad 	bl	80026f0 <_ZSt18uninitialized_copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>
 8002596:	4603      	mov	r3, r0
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE7destroyIS2_EEvPT_>:
	destroy(_Up* __p) { __p->~_Up(); }
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80025c2:	68b8      	ldr	r0, [r7, #8]
 80025c4:	f007 ffee 	bl	800a5a4 <_ZdlPv>
      }
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv+0x18>)
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	15555555 	.word	0x15555555

080025ec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80025fc:	f107 0208 	add.w	r2, r7, #8
 8002600:	f107 030c 	add.w	r3, r7, #12
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f884 	bl	8002714 <_ZStneIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f000 f8a0 	bl	8002758 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002618:	4604      	mov	r4, r0
 800261a:	f107 030c 	add.w	r3, r7, #12
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f8a5 	bl	800276e <_ZNKSt13move_iteratorIP10CANFrameIdEdeEv>
 8002624:	4603      	mov	r3, r0
 8002626:	4619      	mov	r1, r3
 8002628:	4620      	mov	r0, r4
 800262a:	f000 f8b7 	bl	800279c <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800262e:	f107 030c 	add.w	r3, r7, #12
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f87f 	bl	8002736 <_ZNSt13move_iteratorIP10CANFrameIdEppEv>
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	330c      	adds	r3, #12
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e7dd      	b.n	80025fc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	e00d      	b.n	8002660 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x74>
 8002644:	4603      	mov	r3, r0
	  __catch(...)
 8002646:	4618      	mov	r0, r3
 8002648:	f007 feb0 	bl	800a3ac <__cxa_begin_catch>
	      std::_Destroy(__result, __cur);
 800264c:	6979      	ldr	r1, [r7, #20]
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fd1c 	bl	800208c <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>
	      __throw_exception_again;
 8002654:	f007 fe56 	bl	800a304 <__cxa_rethrow>
	  __catch(...)
 8002658:	f007 fed2 	bl	800a400 <__cxa_end_catch>
 800265c:	f007 fa86 	bl	8009b6c <__cxa_end_cleanup>
	}
 8002660:	4618      	mov	r0, r3
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd90      	pop	{r4, r7, pc}

08002668 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f8ac 	bl	80027ce <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>
 8002676:	4603      	mov	r3, r0
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ZNKSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f893 	bl	80027ce <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4293      	cmp	r3, r2
 80026ae:	bf8c      	ite	hi
 80026b0:	2301      	movhi	r3, #1
 80026b2:	2300      	movls	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80026ba:	f008 f833 	bl	800a724 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f007 fec0 	bl	800a448 <_Znwj>
 80026c8:	4603      	mov	r3, r0
      }
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_ZNSt13move_iteratorIPP14ICANSubscriberEC1ES2_>:
      move_iterator(iterator_type __i)
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_ZSt18uninitialized_copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80026fc:	2301      	movs	r3, #1
 80026fe:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f86e 	bl	80027e6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14ICANSubscriberES5_EET0_T_S8_S7_>
 800270a:	4603      	mov	r3, r0
    }
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <_ZStneIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f870 	bl	8002806 <_ZSteqIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>
 8002726:	4603      	mov	r3, r0
 8002728:	f083 0301 	eor.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_ZNSt13move_iteratorIP10CANFrameIdEppEv>:
      operator++()
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f103 020c 	add.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	601a      	str	r2, [r3, #0]
	return *this;
 800274a:	687b      	ldr	r3, [r7, #4]
      }
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <_ZNKSt13move_iteratorIP10CANFrameIdEdeEv>:
      operator*() const
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	f7ff ffed 	bl	8002786 <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>
 80027ac:	4604      	mov	r4, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4619      	mov	r1, r3
 80027b2:	200c      	movs	r0, #12
 80027b4:	f7fe ff0d 	bl	80015d2 <_ZnwjPv>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_+0x2a>
 80027be:	4622      	mov	r2, r4
 80027c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}

080027ce <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80027d6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14ICANSubscriberES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68b9      	ldr	r1, [r7, #8]
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f81b 	bl	8002832 <_ZSt4copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_ZSteqIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8002806:	b590      	push	{r4, r7, lr}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f826 	bl	8002862 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>
 8002816:	4604      	mov	r4, r0
 8002818:	6838      	ldr	r0, [r7, #0]
 800281a:	f000 f822 	bl	8002862 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>
 800281e:	4603      	mov	r3, r0
 8002820:	429c      	cmp	r4, r3
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bd90      	pop	{r4, r7, pc}

08002832 <_ZSt4copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002832:	b590      	push	{r4, r7, lr}
 8002834:	b085      	sub	sp, #20
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f81b 	bl	800287a <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002844:	4604      	mov	r4, r0
 8002846:	68b8      	ldr	r0, [r7, #8]
 8002848:	f000 f817 	bl	800287a <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800284c:	4603      	mov	r3, r0
	       __result));
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4619      	mov	r1, r3
 8002852:	4620      	mov	r0, r4
 8002854:	f000 f822 	bl	800289c <_ZSt14__copy_move_a2ILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>
 8002858:	4603      	mov	r3, r0
    }
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}

08002862 <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>:
      base() const
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f825 	bl	80028d4 <_ZNKSt13move_iteratorIPP14ICANSubscriberE4baseEv>
 800288a:	4603      	mov	r3, r0
 800288c:	4618      	mov	r0, r3
 800288e:	f000 f82d 	bl	80028ec <_ZSt12__miter_baseIPP14ICANSubscriberET_S3_>
 8002892:	4603      	mov	r3, r0
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <_ZSt14__copy_move_a2ILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800289c:	b5b0      	push	{r4, r5, r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f82a 	bl	8002902 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 80028ae:	4604      	mov	r4, r0
 80028b0:	68b8      	ldr	r0, [r7, #8]
 80028b2:	f000 f826 	bl	8002902 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 80028b6:	4605      	mov	r5, r0
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f822 	bl	8002902 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 80028be:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80028c0:	461a      	mov	r2, r3
 80028c2:	4629      	mov	r1, r5
 80028c4:	4620      	mov	r0, r4
 80028c6:	f000 f827 	bl	8002918 <_ZSt13__copy_move_aILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>
 80028ca:	4603      	mov	r3, r0
    }
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bdb0      	pop	{r4, r5, r7, pc}

080028d4 <_ZNKSt13move_iteratorIPP14ICANSubscriberE4baseEv>:
      base() const
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_ZSt12__miter_baseIPP14ICANSubscriberET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>:
    __niter_base(_Iterator __it)
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
    { return __it; }
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <_ZSt13__copy_move_aILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8002924:	2301      	movs	r3, #1
 8002926:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f805 	bl	800293c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_>
 8002932:	4603      	mov	r3, r0
    }
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	109b      	asrs	r3, r3, #2
 8002950:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	461a      	mov	r2, r3
 800295e:	68f9      	ldr	r1, [r7, #12]
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f008 f98a 	bl	800ac7a <memmove>
	  return __result + _Num;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
	}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <_Z41__static_initialization_and_destruction_0ii>:
{
	halt();
	canController1.receiveFromISR();
	canController1.receiveFromISR();

}
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d110      	bne.n	80029aa <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800298e:	4293      	cmp	r3, r2
 8002990:	d10b      	bne.n	80029aa <_Z41__static_initialization_and_destruction_0ii+0x32>
CANController canController1 = CANController(hcan1);
 8002992:	490d      	ldr	r1, [pc, #52]	; (80029c8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002994:	480d      	ldr	r0, [pc, #52]	; (80029cc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002996:	f000 f85b 	bl	8002a50 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef>
CANFrameId canFrameIdLeftInverter = CANFrameId(0xAA);
 800299a:	21aa      	movs	r1, #170	; 0xaa
 800299c:	480c      	ldr	r0, [pc, #48]	; (80029d0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800299e:	f000 f9e5 	bl	8002d6c <_ZN10CANFrameIdC1Em>
CANFrameId canFrameIdRightInverter = CANFrameId(0xBB);
 80029a2:	21bb      	movs	r1, #187	; 0xbb
 80029a4:	480b      	ldr	r0, [pc, #44]	; (80029d4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80029a6:	f000 f9e1 	bl	8002d6c <_ZN10CANFrameIdC1Em>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <_Z41__static_initialization_and_destruction_0ii+0x48>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d102      	bne.n	80029c0 <_Z41__static_initialization_and_destruction_0ii+0x48>
CANController canController1 = CANController(hcan1);
 80029ba:	4804      	ldr	r0, [pc, #16]	; (80029cc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80029bc:	f7fe feb2 	bl	8001724 <_ZN13CANControllerD1Ev>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20001358 	.word	0x20001358
 80029cc:	200000a8 	.word	0x200000a8
 80029d0:	200000c8 	.word	0x200000c8
 80029d4:	200000d4 	.word	0x200000d4

080029d8 <_GLOBAL__sub_I_canController1>:
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
 80029dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7ff ffc9 	bl	8002978 <_Z41__static_initialization_and_destruction_0ii>
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_GLOBAL__sub_D_canController1>:
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7ff ffc1 	bl	8002978 <_Z41__static_initialization_and_destruction_0ii>
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_ZN14ICANControllerC1Ev>:
#include <middleware_layer/can/CANFrame.hpp>
#include <middleware_layer/can/CANFrameId.hpp>
#include <middleware_layer/can/ICANSubscriber.hpp>


class ICANController
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <_ZN14ICANControllerC1Ev+0x1c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	0800b710 	.word	0x0800b710

08002a18 <_ZN17CANControllerBaseC1Ev>:
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ffe8 	bl	80029f8 <_ZN14ICANControllerC1Ev>
 8002a28:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <_ZN17CANControllerBaseC1Ev+0x34>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f8b6 	bl	8002ba4 <_ZNSt6vectorI10CANFrameIdSaIS0_EEC1Ev>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3310      	adds	r3, #16
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 f8be 	bl	8002bbe <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEC1Ev>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	0800b6e8 	.word	0x0800b6e8

08002a50 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef>:

#include <middleware_layer/can/CANController.hpp>



CANController::CANController(CANHandle &canHandle) : _canHandle(canHandle)
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ffdb 	bl	8002a18 <_ZN17CANControllerBaseC1Ev>
 8002a62:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef+0x28>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	61da      	str	r2, [r3, #28]
{
	// do nothing here
}
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	0800b6fc 	.word	0x0800b6fc

08002a7c <_ZN13CANController4sendE8CANFrame>:
	receive(RxFrame);
}


void CANController::send(CANFrame frame)
{
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	b590      	push	{r4, r7, lr}
 8002a80:	b08b      	sub	sp, #44	; 0x2c
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/*Local values*/
	uint32_t u32canTxMailbox = 0;			// Param for the Tx mailbox
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef canTxHeader;		// Tx Header set all information for the transmission

/*mailbox handling*/

	/*check if ther are any empty mailboxes*/
	if (HAL_CAN_GetTxMailboxesFreeLevel(&_canHandle))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 f9e9 	bl	8003e6e <HAL_CAN_GetTxMailboxesFreeLevel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf14      	ite	ne
 8002aa2:	2301      	movne	r3, #1
 8002aa4:	2300      	moveq	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d024      	beq.n	8002af6 <_ZN13CANController4sendE8CANFrame+0x7a>
	{/*find the empty mailbox*/
		/*check mailbox 0*/
		if (!HAL_CAN_IsTxMessagePending(&_canHandle, CAN_TX_MAILBOX0))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 fa10 	bl	8003ed8 <HAL_CAN_IsTxMessagePending>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <_ZN13CANController4sendE8CANFrame+0x52>
		{/*mailbox0 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX0;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
 8002acc:	e01e      	b.n	8002b0c <_ZN13CANController4sendE8CANFrame+0x90>
		}
		else if (!HAL_CAN_IsTxMessagePending(&_canHandle, CAN_TX_MAILBOX1))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 f9ff 	bl	8003ed8 <HAL_CAN_IsTxMessagePending>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <_ZN13CANController4sendE8CANFrame+0x74>
		{/*mailbox1 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX1;
 8002aea:	2302      	movs	r3, #2
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
 8002aee:	e00d      	b.n	8002b0c <_ZN13CANController4sendE8CANFrame+0x90>
		}
		else
		{/*mailbox2 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX2;
 8002af0:	2304      	movs	r3, #4
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
 8002af4:	e00a      	b.n	8002b0c <_ZN13CANController4sendE8CANFrame+0x90>
		}
	}
	/*no empty mailbox, throw error-handling*/
	else throw "no empty mailbox";
 8002af6:	2004      	movs	r0, #4
 8002af8:	f007 fdda 	bl	800a6b0 <__cxa_allocate_exception>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <_ZN13CANController4sendE8CANFrame+0x11c>)
 8002b02:	6003      	str	r3, [r0, #0]
 8002b04:	2200      	movs	r2, #0
 8002b06:	4925      	ldr	r1, [pc, #148]	; (8002b9c <_ZN13CANController4sendE8CANFrame+0x120>)
 8002b08:	f007 fbe2 	bl	800a2d0 <__cxa_throw>


	/*set the Tx Header with the CAN information*/
	/*set standard and extended Id for transmission*/
	canTxHeader.StdId = frame.id.standardId;
 8002b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0e:	60fb      	str	r3, [r7, #12]
	canTxHeader.ExtId = frame.id.extendedId;
 8002b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b12:	613b      	str	r3, [r7, #16]
	/*specify if standard or extended Id is use*/
	if(frame.id.isExtendedFrame)
 8002b14:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <_ZN13CANController4sendE8CANFrame+0xa6>
		/*use extended Id*/
		canTxHeader.IDE = CAN_ID_EXT;
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e001      	b.n	8002b26 <_ZN13CANController4sendE8CANFrame+0xaa>
	else
		/*use standard Id*/
		canTxHeader.IDE = CAN_ID_STD;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]

	/*specify the type of frame to transmission*/
	if ( frame.payload.isRemoteFrame)
 8002b26:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <_ZN13CANController4sendE8CANFrame+0xb8>
		/*send remote frame*/
		canTxHeader.RTR = CAN_RTR_REMOTE;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	e001      	b.n	8002b38 <_ZN13CANController4sendE8CANFrame+0xbc>
	else
		/*send a Data frame*/
		canTxHeader.RTR = CAN_RTR_DATA;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]

	/*set length of dataframe*/
	canTxHeader.DLC = frame.payload.bitLength/8;
 8002b38:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002b3c:	08db      	lsrs	r3, r3, #3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	61fb      	str	r3, [r7, #28]
	/*diesable TransmitglobalTime*/
	canTxHeader.TransmitGlobalTime = DISABLE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 3020 	strb.w	r3, [r7, #32]


	/*start transmission*/
	if(HAL_CAN_AddTxMessage(&_canHandle, &canTxHeader, frame.payload.data.uint8, &u32canTxMailbox))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69d8      	ldr	r0, [r3, #28]
 8002b4c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002b50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b54:	f103 020c 	add.w	r2, r3, #12
 8002b58:	f107 010c 	add.w	r1, r7, #12
 8002b5c:	4623      	mov	r3, r4
 8002b5e:	f001 f8ab 	bl	8003cb8 <HAL_CAN_AddTxMessage>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <_ZN13CANController4sendE8CANFrame+0x10c>
		/*transmission failed*/
		throw "send TX is not possible";
 8002b72:	2004      	movs	r0, #4
 8002b74:	f007 fd9c 	bl	800a6b0 <__cxa_allocate_exception>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <_ZN13CANController4sendE8CANFrame+0x124>)
 8002b7e:	6003      	str	r3, [r0, #0]
 8002b80:	2200      	movs	r2, #0
 8002b82:	4906      	ldr	r1, [pc, #24]	; (8002b9c <_ZN13CANController4sendE8CANFrame+0x120>)
 8002b84:	f007 fba4 	bl	800a2d0 <__cxa_throw>

}
 8002b88:	bf00      	nop
 8002b8a:	372c      	adds	r7, #44	; 0x2c
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002b92:	b004      	add	sp, #16
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	0800b5b4 	.word	0x0800b5b4
 8002b9c:	0800b76c 	.word	0x0800b76c
 8002ba0:	0800b5c8 	.word	0x0800b5c8

08002ba4 <_ZNSt6vectorI10CANFrameIdSaIS0_EEC1Ev>:
      vector()
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f812 	bl	8002bd8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EEC1Ev>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEC1Ev>:
      vector()
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 f812 	bl	8002bf2 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EEC1Ev>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EEC1Ev>:
      _Vector_base()
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f812 	bl	8002c0c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implC1Ev>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EEC1Ev>:
      _Vector_base()
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 f81a 	bl	8002c36 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implC1Ev>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f823 	bl	8002c60 <_ZNSaI10CANFrameIdEC1Ev>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
	{ }
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f81a 	bl	8002c78 <_ZNSaIP14ICANSubscriberEC1Ev>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
	{ }
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_ZNSaI10CANFrameIdEC1Ev>:
      allocator() throw() { }
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f811 	bl	8002c90 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdEC1Ev>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_ZNSaIP14ICANSubscriberEC1Ev>:
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f810 	bl	8002ca6 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberEC1Ev>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberEC1Ev>:
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <_ZN10CANFrameIdC1Emmb>:
*
*
*/
#include <middleware_layer/can/CANFrameId.hpp>

CANFrameId::CANFrameId(uint32_t standardId, uint32_t extendedId, bool isExtendedFrame) :
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	70fb      	strb	r3, [r7, #3]
	standardId(standardId), extendedId(extendedId), isExtendedFrame(isExtendedFrame)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	721a      	strb	r2, [r3, #8]
{
	// check standard id
	if (standardId & ~0x7FF) throw "Not an 11 bit CAN standard id.";
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <_ZN10CANFrameIdC1Emmb+0x98>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <_ZN10CANFrameIdC1Emmb+0x40>
 8002ce6:	2004      	movs	r0, #4
 8002ce8:	f007 fce2 	bl	800a6b0 <__cxa_allocate_exception>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <_ZN10CANFrameIdC1Emmb+0x9c>)
 8002cf2:	6003      	str	r3, [r0, #0]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4919      	ldr	r1, [pc, #100]	; (8002d5c <_ZN10CANFrameIdC1Emmb+0xa0>)
 8002cf8:	f007 faea 	bl	800a2d0 <__cxa_throw>
	// check extended id
	if (!isExtendedFrame && extendedId) throw "CAN extended id is not used but is not zero.";
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	f083 0301 	eor.w	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <_ZN10CANFrameIdC1Emmb+0x68>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <_ZN10CANFrameIdC1Emmb+0x68>
 8002d0e:	2004      	movs	r0, #4
 8002d10:	f007 fcce 	bl	800a6b0 <__cxa_allocate_exception>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4618      	mov	r0, r3
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <_ZN10CANFrameIdC1Emmb+0xa4>)
 8002d1a:	6003      	str	r3, [r0, #0]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	490f      	ldr	r1, [pc, #60]	; (8002d5c <_ZN10CANFrameIdC1Emmb+0xa0>)
 8002d20:	f007 fad6 	bl	800a2d0 <__cxa_throw>
	if (isExtendedFrame && (extendedId & ~0x3FF)) throw "Not an 18 bit CAN extended id.";
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00f      	beq.n	8002d4a <_ZN10CANFrameIdC1Emmb+0x8e>
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	; (8002d64 <_ZN10CANFrameIdC1Emmb+0xa8>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <_ZN10CANFrameIdC1Emmb+0x8e>
 8002d34:	2004      	movs	r0, #4
 8002d36:	f007 fcbb 	bl	800a6b0 <__cxa_allocate_exception>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <_ZN10CANFrameIdC1Emmb+0xac>)
 8002d40:	6003      	str	r3, [r0, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	4905      	ldr	r1, [pc, #20]	; (8002d5c <_ZN10CANFrameIdC1Emmb+0xa0>)
 8002d46:	f007 fac3 	bl	800a2d0 <__cxa_throw>
}
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	fffff800 	.word	0xfffff800
 8002d58:	0800b644 	.word	0x0800b644
 8002d5c:	0800b76c 	.word	0x0800b76c
 8002d60:	0800b664 	.word	0x0800b664
 8002d64:	fffffc00 	.word	0xfffffc00
 8002d68:	0800b694 	.word	0x0800b694

08002d6c <_ZN10CANFrameIdC1Em>:


CANFrameId::CANFrameId(uint32_t standardId) : CANFrameId(standardId, 0, false)
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6839      	ldr	r1, [r7, #0]
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff9d 	bl	8002cbc <_ZN10CANFrameIdC1Emmb>
{
	// do nothing here
}
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <_ZNK10CANFrameIdeqERKS_>:
	// do nothing here
}


bool CANFrameId::operator== (const CANFrameId& other) const
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
	return (standardId == other.standardId &&
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
			extendedId == other.extendedId &&
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d10d      	bne.n	8002dbe <_ZNK10CANFrameIdeqERKS_+0x32>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
	return (standardId == other.standardId &&
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d107      	bne.n	8002dbe <_ZNK10CANFrameIdeqERKS_+0x32>
			isExtendedFrame == other.isExtendedFrame);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7a1a      	ldrb	r2, [r3, #8]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	7a1b      	ldrb	r3, [r3, #8]
			extendedId == other.extendedId &&
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d101      	bne.n	8002dbe <_ZNK10CANFrameIdeqERKS_+0x32>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <_ZNK10CANFrameIdeqERKS_+0x34>
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e10:	f000 fcd7 	bl	80037c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e14:	f000 f81c 	bl	8002e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e18:	f000 f958 	bl	80030cc <MX_GPIO_Init>
  // TODO: Ethernet fails to initialize. This needs further investigation.
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 8002e1c:	f000 f8f8 	bl	8003010 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002e20:	f000 f926 	bl	8003070 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8002e24:	f000 f8a4 	bl	8002f70 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002e28:	f004 fa9a 	bl	8007360 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002e2c:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <main+0x38>)
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4805      	ldr	r0, [pc, #20]	; (8002e48 <main+0x3c>)
 8002e32:	f004 faff 	bl	8007434 <osThreadNew>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <main+0x40>)
 8002e3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002e3c:	f004 fac4 	bl	80073c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <main+0x34>
 8002e42:	bf00      	nop
 8002e44:	0800b71c 	.word	0x0800b71c
 8002e48:	08003211 	.word	0x08003211
 8002e4c:	20000ecc 	.word	0x20000ecc

08002e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b0b8      	sub	sp, #224	; 0xe0
 8002e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e5a:	2234      	movs	r2, #52	; 0x34
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f007 ff24 	bl	800acac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e64:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e74:	f107 0308 	add.w	r3, r7, #8
 8002e78:	2290      	movs	r2, #144	; 0x90
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f007 ff15 	bl	800acac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002e82:	f001 ffa7 	bl	8004dd4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e86:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <SystemClock_Config+0x114>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a36      	ldr	r2, [pc, #216]	; (8002f64 <SystemClock_Config+0x114>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
 8002e92:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <SystemClock_Config+0x114>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e9e:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <SystemClock_Config+0x118>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ea6:	4a30      	ldr	r2, [pc, #192]	; (8002f68 <SystemClock_Config+0x118>)
 8002ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b2e      	ldr	r3, [pc, #184]	; (8002f68 <SystemClock_Config+0x118>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002ec0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ece:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002edc:	2390      	movs	r3, #144	; 0x90
 8002ede:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002ee8:	2306      	movs	r3, #6
 8002eea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f001 ff7e 	bl	8004df4 <HAL_RCC_OscConfig>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002efe:	f000 f9a3 	bl	8003248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f02:	230f      	movs	r3, #15
 8002f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002f28:	2104      	movs	r1, #4
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 fa10 	bl	8005350 <HAL_RCC_ClockConfig>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8002f36:	f000 f987 	bl	8003248 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <SystemClock_Config+0x11c>)
 8002f3c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f002 fc29 	bl	80057a4 <HAL_RCCEx_PeriphCLKConfig>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8002f58:	f000 f976 	bl	8003248 <Error_Handler>
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	37e0      	adds	r7, #224	; 0xe0
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	00200100 	.word	0x00200100

08002f70 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <MX_CAN1_Init+0x98>)
 8002f78:	4a24      	ldr	r2, [pc, #144]	; (800300c <MX_CAN1_Init+0x9c>)
 8002f7a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8002f7c:	4b22      	ldr	r3, [pc, #136]	; (8003008 <MX_CAN1_Init+0x98>)
 8002f7e:	2202      	movs	r2, #2
 8002f80:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002f82:	4b21      	ldr	r3, [pc, #132]	; (8003008 <MX_CAN1_Init+0x98>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <MX_CAN1_Init+0x98>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8002f8e:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <MX_CAN1_Init+0x98>)
 8002f90:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8002f94:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <MX_CAN1_Init+0x98>)
 8002f98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002f9c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <MX_CAN1_Init+0x98>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002fa4:	4b18      	ldr	r3, [pc, #96]	; (8003008 <MX_CAN1_Init+0x98>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <MX_CAN1_Init+0x98>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <MX_CAN1_Init+0x98>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <MX_CAN1_Init+0x98>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <MX_CAN1_Init+0x98>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002fc2:	4811      	ldr	r0, [pc, #68]	; (8003008 <MX_CAN1_Init+0x98>)
 8002fc4:	f000 fc4c 	bl	8003860 <HAL_CAN_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8002fce:	f000 f93b 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef s_filter_can;

  	  s_filter_can.FilterMaskIdHigh = 0x0000;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
  	  s_filter_can.FilterIdLow = 0x0000;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
  	  s_filter_can.FilterMaskIdHigh = 0x0000;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
  	  s_filter_can.FilterMaskIdLow = 0x0000;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
  	  s_filter_can.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
  	  s_filter_can.FilterBank = 13;
 8002fe6:	230d      	movs	r3, #13
 8002fe8:	617b      	str	r3, [r7, #20]
  	  s_filter_can.FilterMode = CAN_FILTERMODE_IDMASK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
  	  s_filter_can.FilterScale = CAN_FILTERSCALE_16BIT;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
  	  s_filter_can.FilterActivation = CAN_FILTER_ENABLE;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	623b      	str	r3, [r7, #32]

  	  HAL_CAN_ConfigFilter(&hcan1, &s_filter_can);
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4803      	ldr	r0, [pc, #12]	; (8003008 <MX_CAN1_Init+0x98>)
 8002ffc:	f000 fd2c 	bl	8003a58 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8003000:	bf00      	nop
 8003002:	3728      	adds	r7, #40	; 0x28
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20001358 	.word	0x20001358
 800300c:	40006400 	.word	0x40006400

08003010 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <MX_USART3_UART_Init+0x58>)
 8003016:	4a15      	ldr	r2, [pc, #84]	; (800306c <MX_USART3_UART_Init+0x5c>)
 8003018:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800301a:	4b13      	ldr	r3, [pc, #76]	; (8003068 <MX_USART3_UART_Init+0x58>)
 800301c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003020:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <MX_USART3_UART_Init+0x58>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003028:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <MX_USART3_UART_Init+0x58>)
 800302a:	2200      	movs	r2, #0
 800302c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <MX_USART3_UART_Init+0x58>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <MX_USART3_UART_Init+0x58>)
 8003036:	220c      	movs	r2, #12
 8003038:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303a:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <MX_USART3_UART_Init+0x58>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <MX_USART3_UART_Init+0x58>)
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <MX_USART3_UART_Init+0x58>)
 8003048:	2200      	movs	r2, #0
 800304a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <MX_USART3_UART_Init+0x58>)
 800304e:	2200      	movs	r2, #0
 8003050:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003052:	4805      	ldr	r0, [pc, #20]	; (8003068 <MX_USART3_UART_Init+0x58>)
 8003054:	f003 faae 	bl	80065b4 <HAL_UART_Init>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800305e:	f000 f8f3 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000ed0 	.word	0x20000ed0
 800306c:	40004800 	.word	0x40004800

08003070 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003074:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003076:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800307a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800307e:	2206      	movs	r2, #6
 8003080:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003084:	2202      	movs	r2, #2
 8003086:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003090:	2202      	movs	r2, #2
 8003092:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003096:	2201      	movs	r2, #1
 8003098:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800309c:	2200      	movs	r2, #0
 800309e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80030b2:	4805      	ldr	r0, [pc, #20]	; (80030c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80030b4:	f001 fd45 	bl	8004b42 <HAL_PCD_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80030be:	f000 f8c3 	bl	8003248 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000f54 	.word	0x20000f54

080030cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08c      	sub	sp, #48	; 0x30
 80030d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d2:	f107 031c 	add.w	r3, r7, #28
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	60da      	str	r2, [r3, #12]
 80030e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e2:	4b46      	ldr	r3, [pc, #280]	; (80031fc <MX_GPIO_Init+0x130>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a45      	ldr	r2, [pc, #276]	; (80031fc <MX_GPIO_Init+0x130>)
 80030e8:	f043 0304 	orr.w	r3, r3, #4
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b43      	ldr	r3, [pc, #268]	; (80031fc <MX_GPIO_Init+0x130>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030fa:	4b40      	ldr	r3, [pc, #256]	; (80031fc <MX_GPIO_Init+0x130>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a3f      	ldr	r2, [pc, #252]	; (80031fc <MX_GPIO_Init+0x130>)
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <MX_GPIO_Init+0x130>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <MX_GPIO_Init+0x130>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a39      	ldr	r2, [pc, #228]	; (80031fc <MX_GPIO_Init+0x130>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b37      	ldr	r3, [pc, #220]	; (80031fc <MX_GPIO_Init+0x130>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800312a:	4b34      	ldr	r3, [pc, #208]	; (80031fc <MX_GPIO_Init+0x130>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a33      	ldr	r2, [pc, #204]	; (80031fc <MX_GPIO_Init+0x130>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b31      	ldr	r3, [pc, #196]	; (80031fc <MX_GPIO_Init+0x130>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003142:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <MX_GPIO_Init+0x130>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a2d      	ldr	r2, [pc, #180]	; (80031fc <MX_GPIO_Init+0x130>)
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <MX_GPIO_Init+0x130>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800315a:	4b28      	ldr	r3, [pc, #160]	; (80031fc <MX_GPIO_Init+0x130>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a27      	ldr	r2, [pc, #156]	; (80031fc <MX_GPIO_Init+0x130>)
 8003160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b25      	ldr	r3, [pc, #148]	; (80031fc <MX_GPIO_Init+0x130>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003172:	2200      	movs	r2, #0
 8003174:	f244 0181 	movw	r1, #16513	; 0x4081
 8003178:	4821      	ldr	r0, [pc, #132]	; (8003200 <MX_GPIO_Init+0x134>)
 800317a:	f001 fcc9 	bl	8004b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800317e:	2200      	movs	r2, #0
 8003180:	2140      	movs	r1, #64	; 0x40
 8003182:	4820      	ldr	r0, [pc, #128]	; (8003204 <MX_GPIO_Init+0x138>)
 8003184:	f001 fcc4 	bl	8004b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003188:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800318c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800318e:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <MX_GPIO_Init+0x13c>)
 8003190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003196:	f107 031c 	add.w	r3, r7, #28
 800319a:	4619      	mov	r1, r3
 800319c:	481b      	ldr	r0, [pc, #108]	; (800320c <MX_GPIO_Init+0x140>)
 800319e:	f001 fb0d 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80031a2:	f244 0381 	movw	r3, #16513	; 0x4081
 80031a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a8:	2301      	movs	r3, #1
 80031aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b0:	2300      	movs	r3, #0
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b4:	f107 031c 	add.w	r3, r7, #28
 80031b8:	4619      	mov	r1, r3
 80031ba:	4811      	ldr	r0, [pc, #68]	; (8003200 <MX_GPIO_Init+0x134>)
 80031bc:	f001 fafe 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80031c0:	2340      	movs	r3, #64	; 0x40
 80031c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c4:	2301      	movs	r3, #1
 80031c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80031d0:	f107 031c 	add.w	r3, r7, #28
 80031d4:	4619      	mov	r1, r3
 80031d6:	480b      	ldr	r0, [pc, #44]	; (8003204 <MX_GPIO_Init+0x138>)
 80031d8:	f001 faf0 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	4619      	mov	r1, r3
 80031ee:	4805      	ldr	r0, [pc, #20]	; (8003204 <MX_GPIO_Init+0x138>)
 80031f0:	f001 fae4 	bl	80047bc <HAL_GPIO_Init>

}
 80031f4:	bf00      	nop
 80031f6:	3730      	adds	r7, #48	; 0x30
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40023800 	.word	0x40023800
 8003200:	40020400 	.word	0x40020400
 8003204:	40021800 	.word	0x40021800
 8003208:	10110000 	.word	0x10110000
 800320c:	40020800 	.word	0x40020800

08003210 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
		}
	}
	*/


  cppmain();
 8003218:	f7fe faa0 	bl	800175c <cppmain>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800321c:	2001      	movs	r0, #1
 800321e:	f004 f9af 	bl	8007580 <osDelay>
 8003222:	e7fb      	b.n	800321c <StartDefaultTask+0xc>

08003224 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003236:	f000 fad1 	bl	80037dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000

08003248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1)
	{
		puts("error");
 800324c:	4801      	ldr	r0, [pc, #4]	; (8003254 <Error_Handler+0xc>)
 800324e:	f007 fe39 	bl	800aec4 <puts>
	{
 8003252:	e7fb      	b.n	800324c <Error_Handler+0x4>
 8003254:	0800b6c0 	.word	0x0800b6c0

08003258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_MspInit+0x4c>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <HAL_MspInit+0x4c>)
 8003264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003268:	6413      	str	r3, [r2, #64]	; 0x40
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <HAL_MspInit+0x4c>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <HAL_MspInit+0x4c>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <HAL_MspInit+0x4c>)
 800327c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003280:	6453      	str	r3, [r2, #68]	; 0x44
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <HAL_MspInit+0x4c>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	210f      	movs	r1, #15
 8003292:	f06f 0001 	mvn.w	r0, #1
 8003296:	f001 fa67 	bl	8004768 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800

080032a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a27      	ldr	r2, [pc, #156]	; (8003364 <HAL_CAN_MspInit+0xbc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d147      	bne.n	800335a <HAL_CAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <HAL_CAN_MspInit+0xc0>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4a26      	ldr	r2, [pc, #152]	; (8003368 <HAL_CAN_MspInit+0xc0>)
 80032d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032d4:	6413      	str	r3, [r2, #64]	; 0x40
 80032d6:	4b24      	ldr	r3, [pc, #144]	; (8003368 <HAL_CAN_MspInit+0xc0>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032e2:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_CAN_MspInit+0xc0>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a20      	ldr	r2, [pc, #128]	; (8003368 <HAL_CAN_MspInit+0xc0>)
 80032e8:	f043 0308 	orr.w	r3, r3, #8
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <HAL_CAN_MspInit+0xc0>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032fa:	2303      	movs	r3, #3
 80032fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800330a:	2309      	movs	r3, #9
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4619      	mov	r1, r3
 8003314:	4815      	ldr	r0, [pc, #84]	; (800336c <HAL_CAN_MspInit+0xc4>)
 8003316:	f001 fa51 	bl	80047bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	2013      	movs	r0, #19
 8003320:	f001 fa22 	bl	8004768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003324:	2013      	movs	r0, #19
 8003326:	f001 fa3b 	bl	80047a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2100      	movs	r1, #0
 800332e:	2014      	movs	r0, #20
 8003330:	f001 fa1a 	bl	8004768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003334:	2014      	movs	r0, #20
 8003336:	f001 fa33 	bl	80047a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800333a:	2200      	movs	r2, #0
 800333c:	2100      	movs	r1, #0
 800333e:	2015      	movs	r0, #21
 8003340:	f001 fa12 	bl	8004768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003344:	2015      	movs	r0, #21
 8003346:	f001 fa2b 	bl	80047a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	2100      	movs	r1, #0
 800334e:	2016      	movs	r0, #22
 8003350:	f001 fa0a 	bl	8004768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003354:	2016      	movs	r0, #22
 8003356:	f001 fa23 	bl	80047a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800335a:	bf00      	nop
 800335c:	3728      	adds	r7, #40	; 0x28
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40006400 	.word	0x40006400
 8003368:	40023800 	.word	0x40023800
 800336c:	40020c00 	.word	0x40020c00

08003370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a17      	ldr	r2, [pc, #92]	; (80033ec <HAL_UART_MspInit+0x7c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d128      	bne.n	80033e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003392:	4b17      	ldr	r3, [pc, #92]	; (80033f0 <HAL_UART_MspInit+0x80>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <HAL_UART_MspInit+0x80>)
 8003398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <HAL_UART_MspInit+0x80>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_UART_MspInit+0x80>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <HAL_UART_MspInit+0x80>)
 80033b0:	f043 0308 	orr.w	r3, r3, #8
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_UART_MspInit+0x80>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80033c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d0:	2303      	movs	r3, #3
 80033d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033d4:	2307      	movs	r3, #7
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	4619      	mov	r1, r3
 80033de:	4805      	ldr	r0, [pc, #20]	; (80033f4 <HAL_UART_MspInit+0x84>)
 80033e0:	f001 f9ec 	bl	80047bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033e4:	bf00      	nop
 80033e6:	3728      	adds	r7, #40	; 0x28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40004800 	.word	0x40004800
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40020c00 	.word	0x40020c00

080033f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003418:	d141      	bne.n	800349e <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_PCD_MspInit+0xb0>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <HAL_PCD_MspInit+0xb0>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_PCD_MspInit+0xb0>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003432:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	2302      	movs	r3, #2
 800343a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003440:	2303      	movs	r3, #3
 8003442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003444:	230a      	movs	r3, #10
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003448:	f107 0314 	add.w	r3, r7, #20
 800344c:	4619      	mov	r1, r3
 800344e:	4817      	ldr	r0, [pc, #92]	; (80034ac <HAL_PCD_MspInit+0xb4>)
 8003450:	f001 f9b4 	bl	80047bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800345a:	2300      	movs	r3, #0
 800345c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	4619      	mov	r1, r3
 8003468:	4810      	ldr	r0, [pc, #64]	; (80034ac <HAL_PCD_MspInit+0xb4>)
 800346a:	f001 f9a7 	bl	80047bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800346e:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <HAL_PCD_MspInit+0xb0>)
 8003470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003472:	4a0d      	ldr	r2, [pc, #52]	; (80034a8 <HAL_PCD_MspInit+0xb0>)
 8003474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003478:	6353      	str	r3, [r2, #52]	; 0x34
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_PCD_MspInit+0xb0>)
 800347c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <HAL_PCD_MspInit+0xb0>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <HAL_PCD_MspInit+0xb0>)
 800348c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003490:	6453      	str	r3, [r2, #68]	; 0x44
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_PCD_MspInit+0xb0>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800349e:	bf00      	nop
 80034a0:	3728      	adds	r7, #40	; 0x28
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40020000 	.word	0x40020000

080034b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08c      	sub	sp, #48	; 0x30
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80034c0:	2200      	movs	r2, #0
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	2019      	movs	r0, #25
 80034c6:	f001 f94f 	bl	8004768 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80034ca:	2019      	movs	r0, #25
 80034cc:	f001 f968 	bl	80047a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80034d0:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_InitTick+0xa0>)
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <HAL_InitTick+0xa0>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6453      	str	r3, [r2, #68]	; 0x44
 80034dc:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <HAL_InitTick+0xa0>)
 80034de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034e8:	f107 0210 	add.w	r2, r7, #16
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f002 f924 	bl	8005740 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80034f8:	f002 f90e 	bl	8005718 <HAL_RCC_GetPCLK2Freq>
 80034fc:	4603      	mov	r3, r0
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	4a13      	ldr	r2, [pc, #76]	; (8003554 <HAL_InitTick+0xa4>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0c9b      	lsrs	r3, r3, #18
 800350c:	3b01      	subs	r3, #1
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_InitTick+0xa8>)
 8003512:	4a12      	ldr	r2, [pc, #72]	; (800355c <HAL_InitTick+0xac>)
 8003514:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_InitTick+0xa8>)
 8003518:	f240 32e7 	movw	r2, #999	; 0x3e7
 800351c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800351e:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <HAL_InitTick+0xa8>)
 8003520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003522:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_InitTick+0xa8>)
 8003526:	2200      	movs	r2, #0
 8003528:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_InitTick+0xa8>)
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003530:	4809      	ldr	r0, [pc, #36]	; (8003558 <HAL_InitTick+0xa8>)
 8003532:	f002 fd5f 	bl	8005ff4 <HAL_TIM_Base_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d104      	bne.n	8003546 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800353c:	4806      	ldr	r0, [pc, #24]	; (8003558 <HAL_InitTick+0xa8>)
 800353e:	f002 fdbb 	bl	80060b8 <HAL_TIM_Base_Start_IT>
 8003542:	4603      	mov	r3, r0
 8003544:	e000      	b.n	8003548 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
}
 8003548:	4618      	mov	r0, r3
 800354a:	3730      	adds	r7, #48	; 0x30
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	431bde83 	.word	0x431bde83
 8003558:	200013c8 	.word	0x200013c8
 800355c:	40010000 	.word	0x40010000

08003560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <HardFault_Handler+0x4>

08003574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <MemManage_Handler+0x4>

0800357a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800357e:	e7fe      	b.n	800357e <BusFault_Handler+0x4>

08003580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <UsageFault_Handler+0x4>

08003586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */
	halt();
 8003598:	f7fe f8d6 	bl	8001748 <halt>
  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <CAN1_TX_IRQHandler+0x14>)
 800359e:	f000 fdf7 	bl	8004190 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20001358 	.word	0x20001358

080035ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	; 0x28
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	halt();
 80035b2:	f7fe f8c9 	bl	8001748 <halt>
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80035b6:	4809      	ldr	r0, [pc, #36]	; (80035dc <CAN1_RX0_IRQHandler+0x30>)
 80035b8:	f000 fdea 	bl	8004190 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  //CAN1_irq_receive();
  CAN_RxHeaderTypeDef header;
  char data[8];
  if (HAL_CAN_GetRxMessage(&hcan1, 0, &header, data) != HAL_OK)
 80035bc:	1d3b      	adds	r3, r7, #4
 80035be:	f107 020c 	add.w	r2, r7, #12
 80035c2:	2100      	movs	r1, #0
 80035c4:	4805      	ldr	r0, [pc, #20]	; (80035dc <CAN1_RX0_IRQHandler+0x30>)
 80035c6:	f000 fcab 	bl	8003f20 <HAL_CAN_GetRxMessage>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <CAN1_RX0_IRQHandler+0x28>
  {
	  halt();
 80035d0:	f7fe f8ba 	bl	8001748 <halt>
  }
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80035d4:	bf00      	nop
 80035d6:	3728      	adds	r7, #40	; 0x28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20001358 	.word	0x20001358

080035e0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	halt();
 80035e4:	f7fe f8b0 	bl	8001748 <halt>
  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <CAN1_RX1_IRQHandler+0x14>)
 80035ea:	f000 fdd1 	bl	8004190 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
  //CAN1_irq_receive();
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20001358 	.word	0x20001358

080035f8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */
	halt();
 80035fc:	f7fe f8a4 	bl	8001748 <halt>
  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <CAN1_SCE_IRQHandler+0x14>)
 8003602:	f000 fdc5 	bl	8004190 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20001358 	.word	0x20001358

08003610 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003616:	f002 fdc7 	bl	80061a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	200013c8 	.word	0x200013c8

08003624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
	return 1;
 8003628:	2301      	movs	r3, #1
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <_kill>:

int _kill(int pid, int sig)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800363e:	f007 fa0d 	bl	800aa5c <__errno>
 8003642:	4602      	mov	r2, r0
 8003644:	2316      	movs	r3, #22
 8003646:	6013      	str	r3, [r2, #0]
	return -1;
 8003648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_exit>:

void _exit (int status)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800365c:	f04f 31ff 	mov.w	r1, #4294967295
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ffe7 	bl	8003634 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003666:	e7fe      	b.n	8003666 <_exit+0x12>

08003668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	e00a      	b.n	8003690 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800367a:	f3af 8000 	nop.w
 800367e:	4601      	mov	r1, r0
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	60ba      	str	r2, [r7, #8]
 8003686:	b2ca      	uxtb	r2, r1
 8003688:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	3301      	adds	r3, #1
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	dbf0      	blt.n	800367a <_read+0x12>
	}

return len;
 8003698:	687b      	ldr	r3, [r7, #4]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e009      	b.n	80036c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	60ba      	str	r2, [r7, #8]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3301      	adds	r3, #1
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	dbf1      	blt.n	80036b4 <_write+0x12>
	}
	return len;
 80036d0:	687b      	ldr	r3, [r7, #4]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <_close>:

int _close(int file)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
	return -1;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003702:	605a      	str	r2, [r3, #4]
	return 0;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <_isatty>:

int _isatty(int file)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
	return 1;
 800371a:	2301      	movs	r3, #1
}
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
	return 0;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <SystemInit+0x28>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	4a07      	ldr	r2, [pc, #28]	; (800376c <SystemInit+0x28>)
 8003750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <SystemInit+0x28>)
 800375a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800375e:	609a      	str	r2, [r3, #8]
#endif
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003774:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003776:	e003      	b.n	8003780 <LoopCopyDataInit>

08003778 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800377a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800377c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800377e:	3104      	adds	r1, #4

08003780 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003780:	480b      	ldr	r0, [pc, #44]	; (80037b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003782:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003784:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003786:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003788:	d3f6      	bcc.n	8003778 <CopyDataInit>
  ldr  r2, =_sbss
 800378a:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800378c:	e002      	b.n	8003794 <LoopFillZerobss>

0800378e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800378e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003790:	f842 3b04 	str.w	r3, [r2], #4

08003794 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003796:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003798:	d3f9      	bcc.n	800378e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800379a:	f7ff ffd3 	bl	8003744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800379e:	f007 fa2d 	bl	800abfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037a2:	f7ff fb33 	bl	8002e0c <main>
  bx  lr    
 80037a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037a8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80037ac:	0800bfe0 	.word	0x0800bfe0
  ldr  r0, =_sdata
 80037b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037b4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80037b8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80037bc:	2000145c 	.word	0x2000145c

080037c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037c0:	e7fe      	b.n	80037c0 <ADC_IRQHandler>

080037c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037c6:	2003      	movs	r0, #3
 80037c8:	f000 ffc3 	bl	8004752 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037cc:	2000      	movs	r0, #0
 80037ce:	f7ff fe6f 	bl	80034b0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80037d2:	f7ff fd41 	bl	8003258 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_IncTick+0x20>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_IncTick+0x24>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4413      	add	r3, r2
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <HAL_IncTick+0x24>)
 80037ee:	6013      	str	r3, [r2, #0]
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	2000000c 	.word	0x2000000c
 8003800:	20001414 	.word	0x20001414

08003804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return uwTick;
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_GetTick+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20001414 	.word	0x20001414

0800381c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003824:	f7ff ffee 	bl	8003804 <HAL_GetTick>
 8003828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d005      	beq.n	8003842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_Delay+0x40>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003842:	bf00      	nop
 8003844:	f7ff ffde 	bl	8003804 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	429a      	cmp	r2, r3
 8003852:	d8f7      	bhi.n	8003844 <HAL_Delay+0x28>
  {
  }
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	2000000c 	.word	0x2000000c

08003860 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0ed      	b.n	8003a4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d102      	bne.n	8003884 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fd12 	bl	80032a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0202 	bic.w	r2, r2, #2
 8003892:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003894:	f7ff ffb6 	bl	8003804 <HAL_GetTick>
 8003898:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800389a:	e012      	b.n	80038c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800389c:	f7ff ffb2 	bl	8003804 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b0a      	cmp	r3, #10
 80038a8:	d90b      	bls.n	80038c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2205      	movs	r2, #5
 80038ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0c5      	b.n	8003a4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e5      	bne.n	800389c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038e0:	f7ff ff90 	bl	8003804 <HAL_GetTick>
 80038e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038e6:	e012      	b.n	800390e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038e8:	f7ff ff8c 	bl	8003804 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b0a      	cmp	r3, #10
 80038f4:	d90b      	bls.n	800390e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2205      	movs	r2, #5
 8003906:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e09f      	b.n	8003a4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0e5      	beq.n	80038e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	7e1b      	ldrb	r3, [r3, #24]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d108      	bne.n	8003936 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e007      	b.n	8003946 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003944:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7e5b      	ldrb	r3, [r3, #25]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d108      	bne.n	8003960 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e007      	b.n	8003970 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	7e9b      	ldrb	r3, [r3, #26]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d108      	bne.n	800398a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0220 	orr.w	r2, r2, #32
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e007      	b.n	800399a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0220 	bic.w	r2, r2, #32
 8003998:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	7edb      	ldrb	r3, [r3, #27]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d108      	bne.n	80039b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0210 	bic.w	r2, r2, #16
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e007      	b.n	80039c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0210 	orr.w	r2, r2, #16
 80039c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7f1b      	ldrb	r3, [r3, #28]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d108      	bne.n	80039de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0208 	orr.w	r2, r2, #8
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e007      	b.n	80039ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0208 	bic.w	r2, r2, #8
 80039ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7f5b      	ldrb	r3, [r3, #29]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d108      	bne.n	8003a08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0204 	orr.w	r2, r2, #4
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e007      	b.n	8003a18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0204 	bic.w	r2, r2, #4
 8003a16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	ea42 0103 	orr.w	r1, r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	1e5a      	subs	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003a70:	7cfb      	ldrb	r3, [r7, #19]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d003      	beq.n	8003a7e <HAL_CAN_ConfigFilter+0x26>
 8003a76:	7cfb      	ldrb	r3, [r7, #19]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	f040 80c7 	bne.w	8003c0c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a69      	ldr	r2, [pc, #420]	; (8003c28 <HAL_CAN_ConfigFilter+0x1d0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d001      	beq.n	8003a8c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003a88:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <HAL_CAN_ConfigFilter+0x1d4>)
 8003a8a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a92:	f043 0201 	orr.w	r2, r3, #1
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	4a63      	ldr	r2, [pc, #396]	; (8003c2c <HAL_CAN_ConfigFilter+0x1d4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d111      	bne.n	8003ac8 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003aaa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d123      	bne.n	8003b3a <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	401a      	ands	r2, r3
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003b14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	3248      	adds	r2, #72	; 0x48
 8003b1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b30:	6979      	ldr	r1, [r7, #20]
 8003b32:	3348      	adds	r3, #72	; 0x48
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	440b      	add	r3, r1
 8003b38:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d122      	bne.n	8003b88 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003b62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3248      	adds	r2, #72	; 0x48
 8003b68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b7e:	6979      	ldr	r1, [r7, #20]
 8003b80:	3348      	adds	r3, #72	; 0x48
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	440b      	add	r3, r1
 8003b86:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ba2:	e007      	b.n	8003bb4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d109      	bne.n	8003bd0 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003bce:	e007      	b.n	8003be0 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d107      	bne.n	8003bf8 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bfe:	f023 0201 	bic.w	r2, r3, #1
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e006      	b.n	8003c1a <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40003400 	.word	0x40003400
 8003c2c:	40006400 	.word	0x40006400

08003c30 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d12e      	bne.n	8003ca2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c5c:	f7ff fdd2 	bl	8003804 <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c62:	e012      	b.n	8003c8a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c64:	f7ff fdce 	bl	8003804 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b0a      	cmp	r3, #10
 8003c70:	d90b      	bls.n	8003c8a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2205      	movs	r2, #5
 8003c82:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e012      	b.n	8003cb0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e5      	bne.n	8003c64 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e006      	b.n	8003cb0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ccc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cd6:	7ffb      	ldrb	r3, [r7, #31]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d003      	beq.n	8003ce4 <HAL_CAN_AddTxMessage+0x2c>
 8003cdc:	7ffb      	ldrb	r3, [r7, #31]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	f040 80b8 	bne.w	8003e54 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10a      	bne.n	8003d04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d105      	bne.n	8003d04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80a0 	beq.w	8003e44 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	0e1b      	lsrs	r3, r3, #24
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d907      	bls.n	8003d24 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e09e      	b.n	8003e62 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003d24:	2201      	movs	r2, #1
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10d      	bne.n	8003d52 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d40:	68f9      	ldr	r1, [r7, #12]
 8003d42:	6809      	ldr	r1, [r1, #0]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	3318      	adds	r3, #24
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	440b      	add	r3, r1
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	e00f      	b.n	8003d72 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d5c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d62:	68f9      	ldr	r1, [r7, #12]
 8003d64:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003d66:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	3318      	adds	r3, #24
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	440b      	add	r3, r1
 8003d70:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6819      	ldr	r1, [r3, #0]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	3318      	adds	r3, #24
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	440b      	add	r3, r1
 8003d82:	3304      	adds	r3, #4
 8003d84:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	7d1b      	ldrb	r3, [r3, #20]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d111      	bne.n	8003db2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	3318      	adds	r3, #24
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4413      	add	r3, r2
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	6811      	ldr	r1, [r2, #0]
 8003da2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	3318      	adds	r3, #24
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	440b      	add	r3, r1
 8003dae:	3304      	adds	r3, #4
 8003db0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3307      	adds	r3, #7
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	061a      	lsls	r2, r3, #24
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3306      	adds	r3, #6
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3305      	adds	r3, #5
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	3204      	adds	r2, #4
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	6811      	ldr	r1, [r2, #0]
 8003dda:	ea43 0200 	orr.w	r2, r3, r0
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	440b      	add	r3, r1
 8003de4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003de8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3303      	adds	r3, #3
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	061a      	lsls	r2, r3, #24
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3302      	adds	r3, #2
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	4313      	orrs	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	6811      	ldr	r1, [r2, #0]
 8003e10:	ea43 0200 	orr.w	r2, r3, r0
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	440b      	add	r3, r1
 8003e1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003e1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3318      	adds	r3, #24
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	4413      	add	r3, r2
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	6811      	ldr	r1, [r2, #0]
 8003e32:	f043 0201 	orr.w	r2, r3, #1
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3318      	adds	r3, #24
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	440b      	add	r3, r1
 8003e3e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e00e      	b.n	8003e62 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e006      	b.n	8003e62 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3724      	adds	r7, #36	; 0x24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e80:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e82:	7afb      	ldrb	r3, [r7, #11]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d002      	beq.n	8003e8e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003e88:	7afb      	ldrb	r3, [r7, #11]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d11d      	bne.n	8003eca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eec:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eee:	7afb      	ldrb	r3, [r7, #11]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d002      	beq.n	8003efa <HAL_CAN_IsTxMessagePending+0x22>
 8003ef4:	7afb      	ldrb	r3, [r7, #11]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d10b      	bne.n	8003f12 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	069b      	lsls	r3, r3, #26
 8003f04:	401a      	ands	r2, r3
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	069b      	lsls	r3, r3, #26
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d001      	beq.n	8003f12 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f34:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d003      	beq.n	8003f44 <HAL_CAN_GetRxMessage+0x24>
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	f040 80f3 	bne.w	800412a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10e      	bne.n	8003f68 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d116      	bne.n	8003f86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0e7      	b.n	8004138 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d107      	bne.n	8003f86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0d8      	b.n	8004138 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	331b      	adds	r3, #27
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	4413      	add	r3, r2
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0204 	and.w	r2, r3, #4
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10c      	bne.n	8003fbe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	331b      	adds	r3, #27
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	4413      	add	r3, r2
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	0d5b      	lsrs	r3, r3, #21
 8003fb4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e00b      	b.n	8003fd6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	331b      	adds	r3, #27
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	4413      	add	r3, r2
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	08db      	lsrs	r3, r3, #3
 8003fce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	331b      	adds	r3, #27
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	4413      	add	r3, r2
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0202 	and.w	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	331b      	adds	r3, #27
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 020f 	and.w	r2, r3, #15
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	331b      	adds	r3, #27
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	4413      	add	r3, r2
 8004010:	3304      	adds	r3, #4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	b2da      	uxtb	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	331b      	adds	r3, #27
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	b29a      	uxth	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	4413      	add	r3, r2
 800403e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	4413      	add	r3, r2
 8004054:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	0a1a      	lsrs	r2, r3, #8
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	3301      	adds	r3, #1
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	4413      	add	r3, r2
 800406e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0c1a      	lsrs	r2, r3, #16
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	3302      	adds	r3, #2
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	4413      	add	r3, r2
 8004088:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	0e1a      	lsrs	r2, r3, #24
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	3303      	adds	r3, #3
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	3304      	adds	r3, #4
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	0a1a      	lsrs	r2, r3, #8
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	3305      	adds	r3, #5
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	0c1a      	lsrs	r2, r3, #16
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	3306      	adds	r3, #6
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0e1a      	lsrs	r2, r3, #24
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	3307      	adds	r3, #7
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d108      	bne.n	8004116 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0220 	orr.w	r2, r2, #32
 8004112:	60da      	str	r2, [r3, #12]
 8004114:	e007      	b.n	8004126 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0220 	orr.w	r2, r2, #32
 8004124:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e006      	b.n	8004138 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
  }
}
 8004138:	4618      	mov	r0, r3
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004154:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d002      	beq.n	8004162 <HAL_CAN_ActivateNotification+0x1e>
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d109      	bne.n	8004176 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6959      	ldr	r1, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e006      	b.n	8004184 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
  }
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004198:	2300      	movs	r3, #0
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d07c      	beq.n	80042d0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d023      	beq.n	8004228 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2201      	movs	r2, #1
 80041e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f97d 	bl	80044f2 <HAL_CAN_TxMailbox0CompleteCallback>
 80041f8:	e016      	b.n	8004228 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d004      	beq.n	800420e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
 800420c:	e00c      	b.n	8004228 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
 8004220:	e002      	b.n	8004228 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f983 	bl	800452e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d024      	beq.n	800427c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800423a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f95d 	bl	8004506 <HAL_CAN_TxMailbox1CompleteCallback>
 800424c:	e016      	b.n	800427c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
 8004260:	e00c      	b.n	800427c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004268:	2b00      	cmp	r3, #0
 800426a:	d004      	beq.n	8004276 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
 8004274:	e002      	b.n	800427c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f963 	bl	8004542 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d024      	beq.n	80042d0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800428e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f93d 	bl	800451a <HAL_CAN_TxMailbox2CompleteCallback>
 80042a0:	e016      	b.n	80042d0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d004      	beq.n	80042b6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
 80042b4:	e00c      	b.n	80042d0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
 80042c8:	e002      	b.n	80042d0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f943 	bl	8004556 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00c      	beq.n	80042f4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2210      	movs	r2, #16
 80042f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d006      	beq.n	8004316 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2208      	movs	r2, #8
 800430e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f934 	bl	800457e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d009      	beq.n	8004334 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f91b 	bl	800456a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800434e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2210      	movs	r2, #16
 8004356:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d006      	beq.n	800437a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2208      	movs	r2, #8
 8004372:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f916 	bl	80045a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f8fd 	bl	8004592 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d006      	beq.n	80043ba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2210      	movs	r2, #16
 80043b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f900 	bl	80045ba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00b      	beq.n	80043dc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d006      	beq.n	80043dc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2208      	movs	r2, #8
 80043d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8f9 	bl	80045ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d075      	beq.n	80044d2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d06c      	beq.n	80044ca <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d008      	beq.n	800440c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442e:	2b00      	cmp	r3, #0
 8004430:	d008      	beq.n	8004444 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	f043 0304 	orr.w	r3, r3, #4
 8004442:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800444a:	2b00      	cmp	r3, #0
 800444c:	d03d      	beq.n	80044ca <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004454:	2b00      	cmp	r3, #0
 8004456:	d038      	beq.n	80044ca <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800445e:	2b30      	cmp	r3, #48	; 0x30
 8004460:	d017      	beq.n	8004492 <HAL_CAN_IRQHandler+0x302>
 8004462:	2b30      	cmp	r3, #48	; 0x30
 8004464:	d804      	bhi.n	8004470 <HAL_CAN_IRQHandler+0x2e0>
 8004466:	2b10      	cmp	r3, #16
 8004468:	d009      	beq.n	800447e <HAL_CAN_IRQHandler+0x2ee>
 800446a:	2b20      	cmp	r3, #32
 800446c:	d00c      	beq.n	8004488 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800446e:	e024      	b.n	80044ba <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8004470:	2b50      	cmp	r3, #80	; 0x50
 8004472:	d018      	beq.n	80044a6 <HAL_CAN_IRQHandler+0x316>
 8004474:	2b60      	cmp	r3, #96	; 0x60
 8004476:	d01b      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x320>
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d00f      	beq.n	800449c <HAL_CAN_IRQHandler+0x30c>
            break;
 800447c:	e01d      	b.n	80044ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	f043 0308 	orr.w	r3, r3, #8
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004486:	e018      	b.n	80044ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	f043 0310 	orr.w	r3, r3, #16
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004490:	e013      	b.n	80044ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	f043 0320 	orr.w	r3, r3, #32
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800449a:	e00e      	b.n	80044ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044a4:	e009      	b.n	80044ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044ae:	e004      	b.n	80044ba <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80044b8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699a      	ldr	r2, [r3, #24]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80044c8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2204      	movs	r2, #4
 80044d0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f87c 	bl	80045e2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80044ea:	bf00      	nop
 80044ec:	3728      	adds	r7, #40	; 0x28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004608:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <__NVIC_SetPriorityGrouping+0x40>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004614:	4013      	ands	r3, r2
 8004616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004620:	4b06      	ldr	r3, [pc, #24]	; (800463c <__NVIC_SetPriorityGrouping+0x44>)
 8004622:	4313      	orrs	r3, r2
 8004624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004626:	4a04      	ldr	r2, [pc, #16]	; (8004638 <__NVIC_SetPriorityGrouping+0x40>)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	60d3      	str	r3, [r2, #12]
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	e000ed00 	.word	0xe000ed00
 800463c:	05fa0000 	.word	0x05fa0000

08004640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <__NVIC_GetPriorityGrouping+0x18>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	f003 0307 	and.w	r3, r3, #7
}
 800464e:	4618      	mov	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466a:	2b00      	cmp	r3, #0
 800466c:	db0b      	blt.n	8004686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	f003 021f 	and.w	r2, r3, #31
 8004674:	4907      	ldr	r1, [pc, #28]	; (8004694 <__NVIC_EnableIRQ+0x38>)
 8004676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	2001      	movs	r0, #1
 800467e:	fa00 f202 	lsl.w	r2, r0, r2
 8004682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	e000e100 	.word	0xe000e100

08004698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	6039      	str	r1, [r7, #0]
 80046a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	db0a      	blt.n	80046c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	490c      	ldr	r1, [pc, #48]	; (80046e4 <__NVIC_SetPriority+0x4c>)
 80046b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b6:	0112      	lsls	r2, r2, #4
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	440b      	add	r3, r1
 80046bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c0:	e00a      	b.n	80046d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	4908      	ldr	r1, [pc, #32]	; (80046e8 <__NVIC_SetPriority+0x50>)
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	3b04      	subs	r3, #4
 80046d0:	0112      	lsls	r2, r2, #4
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	440b      	add	r3, r1
 80046d6:	761a      	strb	r2, [r3, #24]
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	e000e100 	.word	0xe000e100
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b089      	sub	sp, #36	; 0x24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f1c3 0307 	rsb	r3, r3, #7
 8004706:	2b04      	cmp	r3, #4
 8004708:	bf28      	it	cs
 800470a:	2304      	movcs	r3, #4
 800470c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3304      	adds	r3, #4
 8004712:	2b06      	cmp	r3, #6
 8004714:	d902      	bls.n	800471c <NVIC_EncodePriority+0x30>
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3b03      	subs	r3, #3
 800471a:	e000      	b.n	800471e <NVIC_EncodePriority+0x32>
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004720:	f04f 32ff 	mov.w	r2, #4294967295
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43da      	mvns	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	401a      	ands	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004734:	f04f 31ff 	mov.w	r1, #4294967295
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	43d9      	mvns	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004744:	4313      	orrs	r3, r2
         );
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ff4c 	bl	80045f8 <__NVIC_SetPriorityGrouping>
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800477a:	f7ff ff61 	bl	8004640 <__NVIC_GetPriorityGrouping>
 800477e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	6978      	ldr	r0, [r7, #20]
 8004786:	f7ff ffb1 	bl	80046ec <NVIC_EncodePriority>
 800478a:	4602      	mov	r2, r0
 800478c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ff80 	bl	8004698 <__NVIC_SetPriority>
}
 8004798:	bf00      	nop
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff ff54 	bl	800465c <__NVIC_EnableIRQ>
}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047bc:	b480      	push	{r7}
 80047be:	b089      	sub	sp, #36	; 0x24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e175      	b.n	8004ac8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80047dc:	2201      	movs	r2, #1
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	f040 8164 	bne.w	8004ac2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d00b      	beq.n	800481a <HAL_GPIO_Init+0x5e>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d007      	beq.n	800481a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800480e:	2b11      	cmp	r3, #17
 8004810:	d003      	beq.n	800481a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b12      	cmp	r3, #18
 8004818:	d130      	bne.n	800487c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	2203      	movs	r2, #3
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004850:	2201      	movs	r2, #1
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 0201 	and.w	r2, r3, #1
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2203      	movs	r2, #3
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d003      	beq.n	80048bc <HAL_GPIO_Init+0x100>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b12      	cmp	r3, #18
 80048ba:	d123      	bne.n	8004904 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	08da      	lsrs	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3208      	adds	r2, #8
 80048c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	220f      	movs	r2, #15
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	08da      	lsrs	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3208      	adds	r2, #8
 80048fe:	69b9      	ldr	r1, [r7, #24]
 8004900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	2203      	movs	r2, #3
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0203 	and.w	r2, r3, #3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80be 	beq.w	8004ac2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004946:	4b65      	ldr	r3, [pc, #404]	; (8004adc <HAL_GPIO_Init+0x320>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	4a64      	ldr	r2, [pc, #400]	; (8004adc <HAL_GPIO_Init+0x320>)
 800494c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004950:	6453      	str	r3, [r2, #68]	; 0x44
 8004952:	4b62      	ldr	r3, [pc, #392]	; (8004adc <HAL_GPIO_Init+0x320>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800495e:	4a60      	ldr	r2, [pc, #384]	; (8004ae0 <HAL_GPIO_Init+0x324>)
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	089b      	lsrs	r3, r3, #2
 8004964:	3302      	adds	r3, #2
 8004966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	220f      	movs	r2, #15
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a57      	ldr	r2, [pc, #348]	; (8004ae4 <HAL_GPIO_Init+0x328>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d037      	beq.n	80049fa <HAL_GPIO_Init+0x23e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a56      	ldr	r2, [pc, #344]	; (8004ae8 <HAL_GPIO_Init+0x32c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d031      	beq.n	80049f6 <HAL_GPIO_Init+0x23a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a55      	ldr	r2, [pc, #340]	; (8004aec <HAL_GPIO_Init+0x330>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d02b      	beq.n	80049f2 <HAL_GPIO_Init+0x236>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a54      	ldr	r2, [pc, #336]	; (8004af0 <HAL_GPIO_Init+0x334>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d025      	beq.n	80049ee <HAL_GPIO_Init+0x232>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a53      	ldr	r2, [pc, #332]	; (8004af4 <HAL_GPIO_Init+0x338>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01f      	beq.n	80049ea <HAL_GPIO_Init+0x22e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a52      	ldr	r2, [pc, #328]	; (8004af8 <HAL_GPIO_Init+0x33c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d019      	beq.n	80049e6 <HAL_GPIO_Init+0x22a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a51      	ldr	r2, [pc, #324]	; (8004afc <HAL_GPIO_Init+0x340>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_GPIO_Init+0x226>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a50      	ldr	r2, [pc, #320]	; (8004b00 <HAL_GPIO_Init+0x344>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00d      	beq.n	80049de <HAL_GPIO_Init+0x222>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a4f      	ldr	r2, [pc, #316]	; (8004b04 <HAL_GPIO_Init+0x348>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <HAL_GPIO_Init+0x21e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a4e      	ldr	r2, [pc, #312]	; (8004b08 <HAL_GPIO_Init+0x34c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d101      	bne.n	80049d6 <HAL_GPIO_Init+0x21a>
 80049d2:	2309      	movs	r3, #9
 80049d4:	e012      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049d6:	230a      	movs	r3, #10
 80049d8:	e010      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049da:	2308      	movs	r3, #8
 80049dc:	e00e      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049de:	2307      	movs	r3, #7
 80049e0:	e00c      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049e2:	2306      	movs	r3, #6
 80049e4:	e00a      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049e6:	2305      	movs	r3, #5
 80049e8:	e008      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049ea:	2304      	movs	r3, #4
 80049ec:	e006      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049ee:	2303      	movs	r3, #3
 80049f0:	e004      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e002      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049fa:	2300      	movs	r3, #0
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	f002 0203 	and.w	r2, r2, #3
 8004a02:	0092      	lsls	r2, r2, #2
 8004a04:	4093      	lsls	r3, r2
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a0c:	4934      	ldr	r1, [pc, #208]	; (8004ae0 <HAL_GPIO_Init+0x324>)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	3302      	adds	r3, #2
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a1a:	4b3c      	ldr	r3, [pc, #240]	; (8004b0c <HAL_GPIO_Init+0x350>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a3e:	4a33      	ldr	r2, [pc, #204]	; (8004b0c <HAL_GPIO_Init+0x350>)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a44:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <HAL_GPIO_Init+0x350>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a68:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <HAL_GPIO_Init+0x350>)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a6e:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_GPIO_Init+0x350>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	43db      	mvns	r3, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a92:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <HAL_GPIO_Init+0x350>)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a98:	4b1c      	ldr	r3, [pc, #112]	; (8004b0c <HAL_GPIO_Init+0x350>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004abc:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <HAL_GPIO_Init+0x350>)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b0f      	cmp	r3, #15
 8004acc:	f67f ae86 	bls.w	80047dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	3724      	adds	r7, #36	; 0x24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	40013800 	.word	0x40013800
 8004ae4:	40020000 	.word	0x40020000
 8004ae8:	40020400 	.word	0x40020400
 8004aec:	40020800 	.word	0x40020800
 8004af0:	40020c00 	.word	0x40020c00
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40021400 	.word	0x40021400
 8004afc:	40021800 	.word	0x40021800
 8004b00:	40021c00 	.word	0x40021c00
 8004b04:	40022000 	.word	0x40022000
 8004b08:	40022400 	.word	0x40022400
 8004b0c:	40013c00 	.word	0x40013c00

08004b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	807b      	strh	r3, [r7, #2]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b20:	787b      	ldrb	r3, [r7, #1]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b26:	887a      	ldrh	r2, [r7, #2]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b2c:	e003      	b.n	8004b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b2e:	887b      	ldrh	r3, [r7, #2]
 8004b30:	041a      	lsls	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	619a      	str	r2, [r3, #24]
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b44:	b08f      	sub	sp, #60	; 0x3c
 8004b46:	af0a      	add	r7, sp, #40	; 0x28
 8004b48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e116      	b.n	8004d82 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fe fc42 	bl	80033f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2203      	movs	r2, #3
 8004b78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f002 f97c 	bl	8006e90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	687e      	ldr	r6, [r7, #4]
 8004ba0:	466d      	mov	r5, sp
 8004ba2:	f106 0410 	add.w	r4, r6, #16
 8004ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bb6:	1d33      	adds	r3, r6, #4
 8004bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bba:	6838      	ldr	r0, [r7, #0]
 8004bbc:	f002 f910 	bl	8006de0 <USB_CoreInit>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e0d7      	b.n	8004d82 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f002 f96a 	bl	8006eb2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bde:	2300      	movs	r3, #0
 8004be0:	73fb      	strb	r3, [r7, #15]
 8004be2:	e04a      	b.n	8004c7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	333d      	adds	r3, #61	; 0x3d
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bf8:	7bfa      	ldrb	r2, [r7, #15]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	333c      	adds	r3, #60	; 0x3c
 8004c08:	7bfa      	ldrb	r2, [r7, #15]
 8004c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c0c:	7bfa      	ldrb	r2, [r7, #15]
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	b298      	uxth	r0, r3
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	3342      	adds	r3, #66	; 0x42
 8004c20:	4602      	mov	r2, r0
 8004c22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c24:	7bfa      	ldrb	r2, [r7, #15]
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	333f      	adds	r3, #63	; 0x3f
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c38:	7bfa      	ldrb	r2, [r7, #15]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	3344      	adds	r3, #68	; 0x44
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c4c:	7bfa      	ldrb	r2, [r7, #15]
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	3348      	adds	r3, #72	; 0x48
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c60:	7bfa      	ldrb	r2, [r7, #15]
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	3350      	adds	r3, #80	; 0x50
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	3301      	adds	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d3af      	bcc.n	8004be4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c84:	2300      	movs	r3, #0
 8004c86:	73fb      	strb	r3, [r7, #15]
 8004c88:	e044      	b.n	8004d14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c8a:	7bfa      	ldrb	r2, [r7, #15]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ccc:	7bfa      	ldrb	r2, [r7, #15]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ce2:	7bfa      	ldrb	r2, [r7, #15]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cf8:	7bfa      	ldrb	r2, [r7, #15]
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d0e:	7bfb      	ldrb	r3, [r7, #15]
 8004d10:	3301      	adds	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
 8004d14:	7bfa      	ldrb	r2, [r7, #15]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d3b5      	bcc.n	8004c8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	687e      	ldr	r6, [r7, #4]
 8004d26:	466d      	mov	r5, sp
 8004d28:	f106 0410 	add.w	r4, r6, #16
 8004d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d38:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d3c:	1d33      	adds	r3, r6, #4
 8004d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d40:	6838      	ldr	r0, [r7, #0]
 8004d42:	f002 f8e1 	bl	8006f08 <USB_DevInit>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e014      	b.n	8004d82 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d102      	bne.n	8004d76 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f80b 	bl	8004d8c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f002 fa93 	bl	80072a6 <USB_DevDisconnect>

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004d8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <HAL_PCDEx_ActivateLPM+0x44>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	10000003 	.word	0x10000003

08004dd4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de2:	6013      	str	r3, [r2, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40007000 	.word	0x40007000

08004df4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e29b      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 8087 	beq.w	8004f26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e18:	4b96      	ldr	r3, [pc, #600]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 030c 	and.w	r3, r3, #12
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d00c      	beq.n	8004e3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e24:	4b93      	ldr	r3, [pc, #588]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 030c 	and.w	r3, r3, #12
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d112      	bne.n	8004e56 <HAL_RCC_OscConfig+0x62>
 8004e30:	4b90      	ldr	r3, [pc, #576]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3c:	d10b      	bne.n	8004e56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3e:	4b8d      	ldr	r3, [pc, #564]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d06c      	beq.n	8004f24 <HAL_RCC_OscConfig+0x130>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d168      	bne.n	8004f24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e275      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCC_OscConfig+0x7a>
 8004e60:	4b84      	ldr	r3, [pc, #528]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a83      	ldr	r2, [pc, #524]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	e02e      	b.n	8004ecc <HAL_RCC_OscConfig+0xd8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCC_OscConfig+0x9c>
 8004e76:	4b7f      	ldr	r3, [pc, #508]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a7e      	ldr	r2, [pc, #504]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	4b7c      	ldr	r3, [pc, #496]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a7b      	ldr	r2, [pc, #492]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e01d      	b.n	8004ecc <HAL_RCC_OscConfig+0xd8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0xc0>
 8004e9a:	4b76      	ldr	r3, [pc, #472]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a75      	ldr	r2, [pc, #468]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4b73      	ldr	r3, [pc, #460]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a72      	ldr	r2, [pc, #456]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e00b      	b.n	8004ecc <HAL_RCC_OscConfig+0xd8>
 8004eb4:	4b6f      	ldr	r3, [pc, #444]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a6e      	ldr	r2, [pc, #440]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	4b6c      	ldr	r3, [pc, #432]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a6b      	ldr	r2, [pc, #428]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d013      	beq.n	8004efc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fc96 	bl	8003804 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fe fc92 	bl	8003804 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e229      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	4b61      	ldr	r3, [pc, #388]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0xe8>
 8004efa:	e014      	b.n	8004f26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fe fc82 	bl	8003804 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f04:	f7fe fc7e 	bl	8003804 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e215      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f16:	4b57      	ldr	r3, [pc, #348]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x110>
 8004f22:	e000      	b.n	8004f26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d069      	beq.n	8005006 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f32:	4b50      	ldr	r3, [pc, #320]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00b      	beq.n	8004f56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f3e:	4b4d      	ldr	r3, [pc, #308]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d11c      	bne.n	8004f84 <HAL_RCC_OscConfig+0x190>
 8004f4a:	4b4a      	ldr	r3, [pc, #296]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d116      	bne.n	8004f84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f56:	4b47      	ldr	r3, [pc, #284]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_RCC_OscConfig+0x17a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d001      	beq.n	8004f6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e1e9      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f6e:	4b41      	ldr	r3, [pc, #260]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	493d      	ldr	r1, [pc, #244]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f82:	e040      	b.n	8005006 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d023      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f8c:	4b39      	ldr	r3, [pc, #228]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a38      	ldr	r2, [pc, #224]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f98:	f7fe fc34 	bl	8003804 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa0:	f7fe fc30 	bl	8003804 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e1c7      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb2:	4b30      	ldr	r3, [pc, #192]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fbe:	4b2d      	ldr	r3, [pc, #180]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	4929      	ldr	r1, [pc, #164]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]
 8004fd2:	e018      	b.n	8005006 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fd4:	4b27      	ldr	r3, [pc, #156]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a26      	ldr	r2, [pc, #152]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004fda:	f023 0301 	bic.w	r3, r3, #1
 8004fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fe fc10 	bl	8003804 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe8:	f7fe fc0c 	bl	8003804 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e1a3      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffa:	4b1e      	ldr	r3, [pc, #120]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d038      	beq.n	8005084 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d019      	beq.n	800504e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501a:	4b16      	ldr	r3, [pc, #88]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 800501c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501e:	4a15      	ldr	r2, [pc, #84]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8005020:	f043 0301 	orr.w	r3, r3, #1
 8005024:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005026:	f7fe fbed 	bl	8003804 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800502e:	f7fe fbe9 	bl	8003804 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e180      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005040:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8005042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <HAL_RCC_OscConfig+0x23a>
 800504c:	e01a      	b.n	8005084 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800504e:	4b09      	ldr	r3, [pc, #36]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8005050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005052:	4a08      	ldr	r2, [pc, #32]	; (8005074 <HAL_RCC_OscConfig+0x280>)
 8005054:	f023 0301 	bic.w	r3, r3, #1
 8005058:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505a:	f7fe fbd3 	bl	8003804 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005060:	e00a      	b.n	8005078 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005062:	f7fe fbcf 	bl	8003804 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d903      	bls.n	8005078 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e166      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
 8005074:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005078:	4b92      	ldr	r3, [pc, #584]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 800507a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1ee      	bne.n	8005062 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80a4 	beq.w	80051da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005092:	4b8c      	ldr	r3, [pc, #560]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10d      	bne.n	80050ba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800509e:	4b89      	ldr	r3, [pc, #548]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	4a88      	ldr	r2, [pc, #544]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 80050a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a8:	6413      	str	r3, [r2, #64]	; 0x40
 80050aa:	4b86      	ldr	r3, [pc, #536]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b6:	2301      	movs	r3, #1
 80050b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ba:	4b83      	ldr	r3, [pc, #524]	; (80052c8 <HAL_RCC_OscConfig+0x4d4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d118      	bne.n	80050f8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80050c6:	4b80      	ldr	r3, [pc, #512]	; (80052c8 <HAL_RCC_OscConfig+0x4d4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a7f      	ldr	r2, [pc, #508]	; (80052c8 <HAL_RCC_OscConfig+0x4d4>)
 80050cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050d2:	f7fe fb97 	bl	8003804 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050da:	f7fe fb93 	bl	8003804 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b64      	cmp	r3, #100	; 0x64
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e12a      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050ec:	4b76      	ldr	r3, [pc, #472]	; (80052c8 <HAL_RCC_OscConfig+0x4d4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f0      	beq.n	80050da <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d106      	bne.n	800510e <HAL_RCC_OscConfig+0x31a>
 8005100:	4b70      	ldr	r3, [pc, #448]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	4a6f      	ldr	r2, [pc, #444]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005106:	f043 0301 	orr.w	r3, r3, #1
 800510a:	6713      	str	r3, [r2, #112]	; 0x70
 800510c:	e02d      	b.n	800516a <HAL_RCC_OscConfig+0x376>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10c      	bne.n	8005130 <HAL_RCC_OscConfig+0x33c>
 8005116:	4b6b      	ldr	r3, [pc, #428]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	4a6a      	ldr	r2, [pc, #424]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	6713      	str	r3, [r2, #112]	; 0x70
 8005122:	4b68      	ldr	r3, [pc, #416]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	4a67      	ldr	r2, [pc, #412]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005128:	f023 0304 	bic.w	r3, r3, #4
 800512c:	6713      	str	r3, [r2, #112]	; 0x70
 800512e:	e01c      	b.n	800516a <HAL_RCC_OscConfig+0x376>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b05      	cmp	r3, #5
 8005136:	d10c      	bne.n	8005152 <HAL_RCC_OscConfig+0x35e>
 8005138:	4b62      	ldr	r3, [pc, #392]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	4a61      	ldr	r2, [pc, #388]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 800513e:	f043 0304 	orr.w	r3, r3, #4
 8005142:	6713      	str	r3, [r2, #112]	; 0x70
 8005144:	4b5f      	ldr	r3, [pc, #380]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	4a5e      	ldr	r2, [pc, #376]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	6713      	str	r3, [r2, #112]	; 0x70
 8005150:	e00b      	b.n	800516a <HAL_RCC_OscConfig+0x376>
 8005152:	4b5c      	ldr	r3, [pc, #368]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005156:	4a5b      	ldr	r2, [pc, #364]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005158:	f023 0301 	bic.w	r3, r3, #1
 800515c:	6713      	str	r3, [r2, #112]	; 0x70
 800515e:	4b59      	ldr	r3, [pc, #356]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	4a58      	ldr	r2, [pc, #352]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005164:	f023 0304 	bic.w	r3, r3, #4
 8005168:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d015      	beq.n	800519e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005172:	f7fe fb47 	bl	8003804 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005178:	e00a      	b.n	8005190 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517a:	f7fe fb43 	bl	8003804 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	; 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e0d8      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005190:	4b4c      	ldr	r3, [pc, #304]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0ee      	beq.n	800517a <HAL_RCC_OscConfig+0x386>
 800519c:	e014      	b.n	80051c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519e:	f7fe fb31 	bl	8003804 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a4:	e00a      	b.n	80051bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a6:	f7fe fb2d 	bl	8003804 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e0c2      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051bc:	4b41      	ldr	r3, [pc, #260]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1ee      	bne.n	80051a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d105      	bne.n	80051da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ce:	4b3d      	ldr	r3, [pc, #244]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	4a3c      	ldr	r2, [pc, #240]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 80051d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 80ae 	beq.w	8005340 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051e4:	4b37      	ldr	r3, [pc, #220]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 030c 	and.w	r3, r3, #12
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d06d      	beq.n	80052cc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d14b      	bne.n	8005290 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f8:	4b32      	ldr	r3, [pc, #200]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a31      	ldr	r2, [pc, #196]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 80051fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fe fafe 	bl	8003804 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520c:	f7fe fafa 	bl	8003804 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e091      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521e:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69da      	ldr	r2, [r3, #28]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	019b      	lsls	r3, r3, #6
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005240:	085b      	lsrs	r3, r3, #1
 8005242:	3b01      	subs	r3, #1
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	061b      	lsls	r3, r3, #24
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	071b      	lsls	r3, r3, #28
 8005256:	491b      	ldr	r1, [pc, #108]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005258:	4313      	orrs	r3, r2
 800525a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800525c:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005268:	f7fe facc 	bl	8003804 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005270:	f7fe fac8 	bl	8003804 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e05f      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005282:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0x47c>
 800528e:	e057      	b.n	8005340 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005290:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a0b      	ldr	r2, [pc, #44]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 8005296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800529a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fe fab2 	bl	8003804 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a4:	f7fe faae 	bl	8003804 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e045      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b6:	4b03      	ldr	r3, [pc, #12]	; (80052c4 <HAL_RCC_OscConfig+0x4d0>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x4b0>
 80052c2:	e03d      	b.n	8005340 <HAL_RCC_OscConfig+0x54c>
 80052c4:	40023800 	.word	0x40023800
 80052c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80052cc:	4b1f      	ldr	r3, [pc, #124]	; (800534c <HAL_RCC_OscConfig+0x558>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d030      	beq.n	800533c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d129      	bne.n	800533c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d122      	bne.n	800533c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052fc:	4013      	ands	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005302:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005304:	4293      	cmp	r3, r2
 8005306:	d119      	bne.n	800533c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	3b01      	subs	r3, #1
 8005316:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d10f      	bne.n	800533c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d107      	bne.n	800533c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023800 	.word	0x40023800

08005350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0d0      	b.n	800550a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005368:	4b6a      	ldr	r3, [pc, #424]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d910      	bls.n	8005398 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4b67      	ldr	r3, [pc, #412]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 020f 	bic.w	r2, r3, #15
 800537e:	4965      	ldr	r1, [pc, #404]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	4b63      	ldr	r3, [pc, #396]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0b8      	b.n	800550a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d020      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b0:	4b59      	ldr	r3, [pc, #356]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4a58      	ldr	r2, [pc, #352]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80053b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053c8:	4b53      	ldr	r3, [pc, #332]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4a52      	ldr	r2, [pc, #328]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80053ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d4:	4b50      	ldr	r3, [pc, #320]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	494d      	ldr	r1, [pc, #308]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d040      	beq.n	8005474 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d107      	bne.n	800540a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fa:	4b47      	ldr	r3, [pc, #284]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d115      	bne.n	8005432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e07f      	b.n	800550a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005412:	4b41      	ldr	r3, [pc, #260]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e073      	b.n	800550a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005422:	4b3d      	ldr	r3, [pc, #244]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e06b      	b.n	800550a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005432:	4b39      	ldr	r3, [pc, #228]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 0203 	bic.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4936      	ldr	r1, [pc, #216]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 8005440:	4313      	orrs	r3, r2
 8005442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005444:	f7fe f9de 	bl	8003804 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	e00a      	b.n	8005462 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544c:	f7fe f9da 	bl	8003804 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e053      	b.n	800550a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	4b2d      	ldr	r3, [pc, #180]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 020c 	and.w	r2, r3, #12
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	429a      	cmp	r2, r3
 8005472:	d1eb      	bne.n	800544c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005474:	4b27      	ldr	r3, [pc, #156]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d210      	bcs.n	80054a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005482:	4b24      	ldr	r3, [pc, #144]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 020f 	bic.w	r2, r3, #15
 800548a:	4922      	ldr	r1, [pc, #136]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4313      	orrs	r3, r2
 8005490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005492:	4b20      	ldr	r3, [pc, #128]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e032      	b.n	800550a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054b0:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4916      	ldr	r1, [pc, #88]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	490e      	ldr	r1, [pc, #56]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054e2:	f000 f821 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 80054e6:	4601      	mov	r1, r0
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	4a0a      	ldr	r2, [pc, #40]	; (800551c <HAL_RCC_ClockConfig+0x1cc>)
 80054f4:	5cd3      	ldrb	r3, [r2, r3]
 80054f6:	fa21 f303 	lsr.w	r3, r1, r3
 80054fa:	4a09      	ldr	r2, [pc, #36]	; (8005520 <HAL_RCC_ClockConfig+0x1d0>)
 80054fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054fe:	4b09      	ldr	r3, [pc, #36]	; (8005524 <HAL_RCC_ClockConfig+0x1d4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7fd ffd4 	bl	80034b0 <HAL_InitTick>

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40023c00 	.word	0x40023c00
 8005518:	40023800 	.word	0x40023800
 800551c:	0800b740 	.word	0x0800b740
 8005520:	20000004 	.word	0x20000004
 8005524:	20000008 	.word	0x20000008

08005528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800552e:	2300      	movs	r3, #0
 8005530:	607b      	str	r3, [r7, #4]
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	2300      	movs	r3, #0
 8005538:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800553e:	4b63      	ldr	r3, [pc, #396]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 030c 	and.w	r3, r3, #12
 8005546:	2b04      	cmp	r3, #4
 8005548:	d007      	beq.n	800555a <HAL_RCC_GetSysClockFreq+0x32>
 800554a:	2b08      	cmp	r3, #8
 800554c:	d008      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0x38>
 800554e:	2b00      	cmp	r3, #0
 8005550:	f040 80b4 	bne.w	80056bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005554:	4b5e      	ldr	r3, [pc, #376]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005556:	60bb      	str	r3, [r7, #8]
      break;
 8005558:	e0b3      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800555a:	4b5e      	ldr	r3, [pc, #376]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800555c:	60bb      	str	r3, [r7, #8]
      break;
 800555e:	e0b0      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005560:	4b5a      	ldr	r3, [pc, #360]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005568:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800556a:	4b58      	ldr	r3, [pc, #352]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d04a      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005576:	4b55      	ldr	r3, [pc, #340]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	099b      	lsrs	r3, r3, #6
 800557c:	f04f 0400 	mov.w	r4, #0
 8005580:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	ea03 0501 	and.w	r5, r3, r1
 800558c:	ea04 0602 	and.w	r6, r4, r2
 8005590:	4629      	mov	r1, r5
 8005592:	4632      	mov	r2, r6
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	f04f 0400 	mov.w	r4, #0
 800559c:	0154      	lsls	r4, r2, #5
 800559e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055a2:	014b      	lsls	r3, r1, #5
 80055a4:	4619      	mov	r1, r3
 80055a6:	4622      	mov	r2, r4
 80055a8:	1b49      	subs	r1, r1, r5
 80055aa:	eb62 0206 	sbc.w	r2, r2, r6
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	f04f 0400 	mov.w	r4, #0
 80055b6:	0194      	lsls	r4, r2, #6
 80055b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80055bc:	018b      	lsls	r3, r1, #6
 80055be:	1a5b      	subs	r3, r3, r1
 80055c0:	eb64 0402 	sbc.w	r4, r4, r2
 80055c4:	f04f 0100 	mov.w	r1, #0
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	00e2      	lsls	r2, r4, #3
 80055ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80055d2:	00d9      	lsls	r1, r3, #3
 80055d4:	460b      	mov	r3, r1
 80055d6:	4614      	mov	r4, r2
 80055d8:	195b      	adds	r3, r3, r5
 80055da:	eb44 0406 	adc.w	r4, r4, r6
 80055de:	f04f 0100 	mov.w	r1, #0
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	0262      	lsls	r2, r4, #9
 80055e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80055ec:	0259      	lsls	r1, r3, #9
 80055ee:	460b      	mov	r3, r1
 80055f0:	4614      	mov	r4, r2
 80055f2:	4618      	mov	r0, r3
 80055f4:	4621      	mov	r1, r4
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f04f 0400 	mov.w	r4, #0
 80055fc:	461a      	mov	r2, r3
 80055fe:	4623      	mov	r3, r4
 8005600:	f7fa fe28 	bl	8000254 <__aeabi_uldivmod>
 8005604:	4603      	mov	r3, r0
 8005606:	460c      	mov	r4, r1
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	e049      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800560c:	4b2f      	ldr	r3, [pc, #188]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	099b      	lsrs	r3, r3, #6
 8005612:	f04f 0400 	mov.w	r4, #0
 8005616:	f240 11ff 	movw	r1, #511	; 0x1ff
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	ea03 0501 	and.w	r5, r3, r1
 8005622:	ea04 0602 	and.w	r6, r4, r2
 8005626:	4629      	mov	r1, r5
 8005628:	4632      	mov	r2, r6
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	f04f 0400 	mov.w	r4, #0
 8005632:	0154      	lsls	r4, r2, #5
 8005634:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005638:	014b      	lsls	r3, r1, #5
 800563a:	4619      	mov	r1, r3
 800563c:	4622      	mov	r2, r4
 800563e:	1b49      	subs	r1, r1, r5
 8005640:	eb62 0206 	sbc.w	r2, r2, r6
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	f04f 0400 	mov.w	r4, #0
 800564c:	0194      	lsls	r4, r2, #6
 800564e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005652:	018b      	lsls	r3, r1, #6
 8005654:	1a5b      	subs	r3, r3, r1
 8005656:	eb64 0402 	sbc.w	r4, r4, r2
 800565a:	f04f 0100 	mov.w	r1, #0
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	00e2      	lsls	r2, r4, #3
 8005664:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005668:	00d9      	lsls	r1, r3, #3
 800566a:	460b      	mov	r3, r1
 800566c:	4614      	mov	r4, r2
 800566e:	195b      	adds	r3, r3, r5
 8005670:	eb44 0406 	adc.w	r4, r4, r6
 8005674:	f04f 0100 	mov.w	r1, #0
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	02a2      	lsls	r2, r4, #10
 800567e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005682:	0299      	lsls	r1, r3, #10
 8005684:	460b      	mov	r3, r1
 8005686:	4614      	mov	r4, r2
 8005688:	4618      	mov	r0, r3
 800568a:	4621      	mov	r1, r4
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f04f 0400 	mov.w	r4, #0
 8005692:	461a      	mov	r2, r3
 8005694:	4623      	mov	r3, r4
 8005696:	f7fa fddd 	bl	8000254 <__aeabi_uldivmod>
 800569a:	4603      	mov	r3, r0
 800569c:	460c      	mov	r4, r1
 800569e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80056a0:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	3301      	adds	r3, #1
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	60bb      	str	r3, [r7, #8]
      break;
 80056ba:	e002      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80056be:	60bb      	str	r3, [r7, #8]
      break;
 80056c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056c2:	68bb      	ldr	r3, [r7, #8]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056cc:	40023800 	.word	0x40023800
 80056d0:	00f42400 	.word	0x00f42400
 80056d4:	007a1200 	.word	0x007a1200

080056d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056dc:	4b03      	ldr	r3, [pc, #12]	; (80056ec <HAL_RCC_GetHCLKFreq+0x14>)
 80056de:	681b      	ldr	r3, [r3, #0]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20000004 	.word	0x20000004

080056f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056f4:	f7ff fff0 	bl	80056d8 <HAL_RCC_GetHCLKFreq>
 80056f8:	4601      	mov	r1, r0
 80056fa:	4b05      	ldr	r3, [pc, #20]	; (8005710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	0a9b      	lsrs	r3, r3, #10
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	4a03      	ldr	r2, [pc, #12]	; (8005714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005706:	5cd3      	ldrb	r3, [r2, r3]
 8005708:	fa21 f303 	lsr.w	r3, r1, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40023800 	.word	0x40023800
 8005714:	0800b750 	.word	0x0800b750

08005718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800571c:	f7ff ffdc 	bl	80056d8 <HAL_RCC_GetHCLKFreq>
 8005720:	4601      	mov	r1, r0
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	0b5b      	lsrs	r3, r3, #13
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	4a03      	ldr	r2, [pc, #12]	; (800573c <HAL_RCC_GetPCLK2Freq+0x24>)
 800572e:	5cd3      	ldrb	r3, [r2, r3]
 8005730:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40023800 	.word	0x40023800
 800573c:	0800b750 	.word	0x0800b750

08005740 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	220f      	movs	r2, #15
 800574e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005750:	4b12      	ldr	r3, [pc, #72]	; (800579c <HAL_RCC_GetClockConfig+0x5c>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0203 	and.w	r2, r3, #3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800575c:	4b0f      	ldr	r3, [pc, #60]	; (800579c <HAL_RCC_GetClockConfig+0x5c>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005768:	4b0c      	ldr	r3, [pc, #48]	; (800579c <HAL_RCC_GetClockConfig+0x5c>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005774:	4b09      	ldr	r3, [pc, #36]	; (800579c <HAL_RCC_GetClockConfig+0x5c>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	08db      	lsrs	r3, r3, #3
 800577a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005782:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <HAL_RCC_GetClockConfig+0x60>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 020f 	and.w	r2, r3, #15
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	601a      	str	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800
 80057a0:	40023c00 	.word	0x40023c00

080057a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d012      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057cc:	4b69      	ldr	r3, [pc, #420]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4a68      	ldr	r2, [pc, #416]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80057d6:	6093      	str	r3, [r2, #8]
 80057d8:	4b66      	ldr	r3, [pc, #408]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e0:	4964      	ldr	r1, [pc, #400]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80057ee:	2301      	movs	r3, #1
 80057f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d017      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057fe:	4b5d      	ldr	r3, [pc, #372]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005804:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580c:	4959      	ldr	r1, [pc, #356]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581c:	d101      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800581e:	2301      	movs	r3, #1
 8005820:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800582a:	2301      	movs	r3, #1
 800582c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d017      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800583a:	4b4e      	ldr	r3, [pc, #312]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005840:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	494a      	ldr	r1, [pc, #296]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005858:	d101      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800585a:	2301      	movs	r3, #1
 800585c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005866:	2301      	movs	r3, #1
 8005868:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005876:	2301      	movs	r3, #1
 8005878:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 808b 	beq.w	800599e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005888:	4b3a      	ldr	r3, [pc, #232]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	4a39      	ldr	r2, [pc, #228]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005892:	6413      	str	r3, [r2, #64]	; 0x40
 8005894:	4b37      	ldr	r3, [pc, #220]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800589c:	60bb      	str	r3, [r7, #8]
 800589e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058a0:	4b35      	ldr	r3, [pc, #212]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a34      	ldr	r2, [pc, #208]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ac:	f7fd ffaa 	bl	8003804 <HAL_GetTick>
 80058b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b4:	f7fd ffa6 	bl	8003804 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b64      	cmp	r3, #100	; 0x64
 80058c0:	d901      	bls.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e38f      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058c6:	4b2c      	ldr	r3, [pc, #176]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058d2:	4b28      	ldr	r3, [pc, #160]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d035      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d02e      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058f0:	4b20      	ldr	r3, [pc, #128]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058fa:	4b1e      	ldr	r3, [pc, #120]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005904:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005906:	4b1b      	ldr	r3, [pc, #108]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	4a1a      	ldr	r2, [pc, #104]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800590c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005910:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005912:	4a18      	ldr	r2, [pc, #96]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005918:	4b16      	ldr	r3, [pc, #88]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	d114      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fd ff6e 	bl	8003804 <HAL_GetTick>
 8005928:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592a:	e00a      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800592c:	f7fd ff6a 	bl	8003804 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	f241 3288 	movw	r2, #5000	; 0x1388
 800593a:	4293      	cmp	r3, r2
 800593c:	d901      	bls.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e351      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005942:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0ee      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800595a:	d111      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800596a:	400b      	ands	r3, r1
 800596c:	4901      	ldr	r1, [pc, #4]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596e:	4313      	orrs	r3, r2
 8005970:	608b      	str	r3, [r1, #8]
 8005972:	e00b      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005974:	40023800 	.word	0x40023800
 8005978:	40007000 	.word	0x40007000
 800597c:	0ffffcff 	.word	0x0ffffcff
 8005980:	4bb3      	ldr	r3, [pc, #716]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4ab2      	ldr	r2, [pc, #712]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005986:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800598a:	6093      	str	r3, [r2, #8]
 800598c:	4bb0      	ldr	r3, [pc, #704]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800598e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005998:	49ad      	ldr	r1, [pc, #692]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800599a:	4313      	orrs	r3, r2
 800599c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d010      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059aa:	4ba9      	ldr	r3, [pc, #676]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b0:	4aa7      	ldr	r2, [pc, #668]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80059ba:	4ba5      	ldr	r3, [pc, #660]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	49a2      	ldr	r1, [pc, #648]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059d8:	4b9d      	ldr	r3, [pc, #628]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e6:	499a      	ldr	r1, [pc, #616]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059fa:	4b95      	ldr	r3, [pc, #596]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a08:	4991      	ldr	r1, [pc, #580]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a1c:	4b8c      	ldr	r3, [pc, #560]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2a:	4989      	ldr	r1, [pc, #548]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a3e:	4b84      	ldr	r3, [pc, #528]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4c:	4980      	ldr	r1, [pc, #512]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a60:	4b7b      	ldr	r3, [pc, #492]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a66:	f023 0203 	bic.w	r2, r3, #3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	4978      	ldr	r1, [pc, #480]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a82:	4b73      	ldr	r3, [pc, #460]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a88:	f023 020c 	bic.w	r2, r3, #12
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a90:	496f      	ldr	r1, [pc, #444]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aa4:	4b6a      	ldr	r3, [pc, #424]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aaa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab2:	4967      	ldr	r1, [pc, #412]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ac6:	4b62      	ldr	r3, [pc, #392]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005acc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad4:	495e      	ldr	r1, [pc, #376]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ae8:	4b59      	ldr	r3, [pc, #356]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	4956      	ldr	r1, [pc, #344]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b0a:	4b51      	ldr	r3, [pc, #324]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	494d      	ldr	r1, [pc, #308]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b2c:	4b48      	ldr	r3, [pc, #288]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3a:	4945      	ldr	r1, [pc, #276]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b4e:	4b40      	ldr	r3, [pc, #256]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5c:	493c      	ldr	r1, [pc, #240]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b70:	4b37      	ldr	r3, [pc, #220]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b7e:	4934      	ldr	r1, [pc, #208]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d011      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b92:	4b2f      	ldr	r3, [pc, #188]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b98:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba0:	492b      	ldr	r1, [pc, #172]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bb0:	d101      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bd2:	4b1f      	ldr	r3, [pc, #124]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be0:	491b      	ldr	r1, [pc, #108]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00b      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bf4:	4b16      	ldr	r3, [pc, #88]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c04:	4912      	ldr	r1, [pc, #72]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00b      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005c18:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c28:	4909      	ldr	r1, [pc, #36]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00f      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c3c:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4c:	e002      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800
 8005c54:	4986      	ldr	r1, [pc, #536]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00b      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c68:	4b81      	ldr	r3, [pc, #516]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c78:	497d      	ldr	r1, [pc, #500]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d006      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 80d6 	beq.w	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c94:	4b76      	ldr	r3, [pc, #472]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a75      	ldr	r2, [pc, #468]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7fd fdb0 	bl	8003804 <HAL_GetTick>
 8005ca4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ca8:	f7fd fdac 	bl	8003804 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b64      	cmp	r3, #100	; 0x64
 8005cb4:	d901      	bls.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e195      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cba:	4b6d      	ldr	r3, [pc, #436]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f0      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d021      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d11d      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cda:	4b65      	ldr	r3, [pc, #404]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ce0:	0c1b      	lsrs	r3, r3, #16
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ce8:	4b61      	ldr	r3, [pc, #388]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cee:	0e1b      	lsrs	r3, r3, #24
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	019a      	lsls	r2, r3, #6
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	041b      	lsls	r3, r3, #16
 8005d00:	431a      	orrs	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	061b      	lsls	r3, r3, #24
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	071b      	lsls	r3, r3, #28
 8005d0e:	4958      	ldr	r1, [pc, #352]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d004      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d2a:	d00a      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d02e      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d40:	d129      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d42:	4b4b      	ldr	r3, [pc, #300]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d48:	0c1b      	lsrs	r3, r3, #16
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d50:	4b47      	ldr	r3, [pc, #284]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d56:	0f1b      	lsrs	r3, r3, #28
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	019a      	lsls	r2, r3, #6
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	041b      	lsls	r3, r3, #16
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	431a      	orrs	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	071b      	lsls	r3, r3, #28
 8005d76:	493e      	ldr	r1, [pc, #248]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d7e:	4b3c      	ldr	r3, [pc, #240]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d84:	f023 021f 	bic.w	r2, r3, #31
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	4938      	ldr	r1, [pc, #224]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01d      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005da2:	4b33      	ldr	r3, [pc, #204]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da8:	0e1b      	lsrs	r3, r3, #24
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005db0:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db6:	0f1b      	lsrs	r3, r3, #28
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	019a      	lsls	r2, r3, #6
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	061b      	lsls	r3, r3, #24
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	071b      	lsls	r3, r3, #28
 8005dd6:	4926      	ldr	r1, [pc, #152]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d011      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	019a      	lsls	r2, r3, #6
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	041b      	lsls	r3, r3, #16
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	071b      	lsls	r3, r3, #28
 8005e06:	491a      	ldr	r1, [pc, #104]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e0e:	4b18      	ldr	r3, [pc, #96]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1a:	f7fd fcf3 	bl	8003804 <HAL_GetTick>
 8005e1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e20:	e008      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e22:	f7fd fcef 	bl	8003804 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b64      	cmp	r3, #100	; 0x64
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e0d8      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e34:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0f0      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	f040 80ce 	bne.w	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a08      	ldr	r2, [pc, #32]	; (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e54:	f7fd fcd6 	bl	8003804 <HAL_GetTick>
 8005e58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e5a:	e00b      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e5c:	f7fd fcd2 	bl	8003804 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b64      	cmp	r3, #100	; 0x64
 8005e68:	d904      	bls.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e0bb      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005e6e:	bf00      	nop
 8005e70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e74:	4b5e      	ldr	r3, [pc, #376]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e80:	d0ec      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d02e      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d12a      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005eaa:	4b51      	ldr	r3, [pc, #324]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb0:	0c1b      	lsrs	r3, r3, #16
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005eb8:	4b4d      	ldr	r3, [pc, #308]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	0f1b      	lsrs	r3, r3, #28
 8005ec0:	f003 0307 	and.w	r3, r3, #7
 8005ec4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	019a      	lsls	r2, r3, #6
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	041b      	lsls	r3, r3, #16
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	061b      	lsls	r3, r3, #24
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	071b      	lsls	r3, r3, #28
 8005ede:	4944      	ldr	r1, [pc, #272]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ee6:	4b42      	ldr	r3, [pc, #264]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	493d      	ldr	r1, [pc, #244]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d022      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f14:	d11d      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f16:	4b36      	ldr	r3, [pc, #216]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1c:	0e1b      	lsrs	r3, r3, #24
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f24:	4b32      	ldr	r3, [pc, #200]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	0f1b      	lsrs	r3, r3, #28
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	019a      	lsls	r2, r3, #6
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	041b      	lsls	r3, r3, #16
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	061b      	lsls	r3, r3, #24
 8005f44:	431a      	orrs	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	071b      	lsls	r3, r3, #28
 8005f4a:	4929      	ldr	r1, [pc, #164]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0308 	and.w	r3, r3, #8
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d028      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f5e:	4b24      	ldr	r3, [pc, #144]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f64:	0e1b      	lsrs	r3, r3, #24
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f6c:	4b20      	ldr	r3, [pc, #128]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	0c1b      	lsrs	r3, r3, #16
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	019a      	lsls	r2, r3, #6
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	041b      	lsls	r3, r3, #16
 8005f84:	431a      	orrs	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	061b      	lsls	r3, r3, #24
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	071b      	lsls	r3, r3, #28
 8005f92:	4917      	ldr	r1, [pc, #92]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f9a:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	4911      	ldr	r1, [pc, #68]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005fb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a0e      	ldr	r2, [pc, #56]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fbc:	f7fd fc22 	bl	8003804 <HAL_GetTick>
 8005fc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005fc4:	f7fd fc1e 	bl	8003804 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b64      	cmp	r3, #100	; 0x64
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e007      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fe2:	d1ef      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3720      	adds	r7, #32
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40023800 	.word	0x40023800

08005ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e049      	b.n	800609a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f841 	bl	80060a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	4619      	mov	r1, r3
 8006032:	4610      	mov	r0, r2
 8006034:	f000 fa00 	bl	8006438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
	...

080060b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d001      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e054      	b.n	800617a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a26      	ldr	r2, [pc, #152]	; (8006188 <HAL_TIM_Base_Start_IT+0xd0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d022      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fa:	d01d      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a22      	ldr	r2, [pc, #136]	; (800618c <HAL_TIM_Base_Start_IT+0xd4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d018      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a21      	ldr	r2, [pc, #132]	; (8006190 <HAL_TIM_Base_Start_IT+0xd8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d013      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1f      	ldr	r2, [pc, #124]	; (8006194 <HAL_TIM_Base_Start_IT+0xdc>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00e      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1e      	ldr	r2, [pc, #120]	; (8006198 <HAL_TIM_Base_Start_IT+0xe0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d009      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1c      	ldr	r2, [pc, #112]	; (800619c <HAL_TIM_Base_Start_IT+0xe4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d004      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1b      	ldr	r2, [pc, #108]	; (80061a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d115      	bne.n	8006164 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <HAL_TIM_Base_Start_IT+0xec>)
 8006140:	4013      	ands	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b06      	cmp	r3, #6
 8006148:	d015      	beq.n	8006176 <HAL_TIM_Base_Start_IT+0xbe>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006150:	d011      	beq.n	8006176 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006162:	e008      	b.n	8006176 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0201 	orr.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	e000      	b.n	8006178 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006176:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40010000 	.word	0x40010000
 800618c:	40000400 	.word	0x40000400
 8006190:	40000800 	.word	0x40000800
 8006194:	40000c00 	.word	0x40000c00
 8006198:	40010400 	.word	0x40010400
 800619c:	40014000 	.word	0x40014000
 80061a0:	40001800 	.word	0x40001800
 80061a4:	00010007 	.word	0x00010007

080061a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d122      	bne.n	8006204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d11b      	bne.n	8006204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0202 	mvn.w	r2, #2
 80061d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f905 	bl	80063fa <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f8f7 	bl	80063e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f908 	bl	800640e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b04      	cmp	r3, #4
 8006210:	d122      	bne.n	8006258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b04      	cmp	r3, #4
 800621e:	d11b      	bne.n	8006258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0204 	mvn.w	r2, #4
 8006228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8db 	bl	80063fa <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f8cd 	bl	80063e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f8de 	bl	800640e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b08      	cmp	r3, #8
 8006264:	d122      	bne.n	80062ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b08      	cmp	r3, #8
 8006272:	d11b      	bne.n	80062ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0208 	mvn.w	r2, #8
 800627c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2204      	movs	r2, #4
 8006282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f8b1 	bl	80063fa <HAL_TIM_IC_CaptureCallback>
 8006298:	e005      	b.n	80062a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f8a3 	bl	80063e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f8b4 	bl	800640e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	2b10      	cmp	r3, #16
 80062b8:	d122      	bne.n	8006300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d11b      	bne.n	8006300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0210 	mvn.w	r2, #16
 80062d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2208      	movs	r2, #8
 80062d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f887 	bl	80063fa <HAL_TIM_IC_CaptureCallback>
 80062ec:	e005      	b.n	80062fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f879 	bl	80063e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f88a 	bl	800640e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b01      	cmp	r3, #1
 800630c:	d10e      	bne.n	800632c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b01      	cmp	r3, #1
 800631a:	d107      	bne.n	800632c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0201 	mvn.w	r2, #1
 8006324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fc ff7c 	bl	8003224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006336:	2b80      	cmp	r3, #128	; 0x80
 8006338:	d10e      	bne.n	8006358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d107      	bne.n	8006358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f91a 	bl	800658c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006366:	d10e      	bne.n	8006386 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006372:	2b80      	cmp	r3, #128	; 0x80
 8006374:	d107      	bne.n	8006386 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800637e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f90d 	bl	80065a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d10e      	bne.n	80063b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	2b40      	cmp	r3, #64	; 0x40
 80063a0:	d107      	bne.n	80063b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f838 	bl	8006422 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d10e      	bne.n	80063de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	d107      	bne.n	80063de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f06f 0220 	mvn.w	r2, #32
 80063d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f8cd 	bl	8006578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063de:	bf00      	nop
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a40      	ldr	r2, [pc, #256]	; (800654c <TIM_Base_SetConfig+0x114>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d013      	beq.n	8006478 <TIM_Base_SetConfig+0x40>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006456:	d00f      	beq.n	8006478 <TIM_Base_SetConfig+0x40>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a3d      	ldr	r2, [pc, #244]	; (8006550 <TIM_Base_SetConfig+0x118>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00b      	beq.n	8006478 <TIM_Base_SetConfig+0x40>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a3c      	ldr	r2, [pc, #240]	; (8006554 <TIM_Base_SetConfig+0x11c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d007      	beq.n	8006478 <TIM_Base_SetConfig+0x40>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a3b      	ldr	r2, [pc, #236]	; (8006558 <TIM_Base_SetConfig+0x120>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d003      	beq.n	8006478 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a3a      	ldr	r2, [pc, #232]	; (800655c <TIM_Base_SetConfig+0x124>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d108      	bne.n	800648a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a2f      	ldr	r2, [pc, #188]	; (800654c <TIM_Base_SetConfig+0x114>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d02b      	beq.n	80064ea <TIM_Base_SetConfig+0xb2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006498:	d027      	beq.n	80064ea <TIM_Base_SetConfig+0xb2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a2c      	ldr	r2, [pc, #176]	; (8006550 <TIM_Base_SetConfig+0x118>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d023      	beq.n	80064ea <TIM_Base_SetConfig+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a2b      	ldr	r2, [pc, #172]	; (8006554 <TIM_Base_SetConfig+0x11c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d01f      	beq.n	80064ea <TIM_Base_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a2a      	ldr	r2, [pc, #168]	; (8006558 <TIM_Base_SetConfig+0x120>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d01b      	beq.n	80064ea <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a29      	ldr	r2, [pc, #164]	; (800655c <TIM_Base_SetConfig+0x124>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d017      	beq.n	80064ea <TIM_Base_SetConfig+0xb2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a28      	ldr	r2, [pc, #160]	; (8006560 <TIM_Base_SetConfig+0x128>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d013      	beq.n	80064ea <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a27      	ldr	r2, [pc, #156]	; (8006564 <TIM_Base_SetConfig+0x12c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00f      	beq.n	80064ea <TIM_Base_SetConfig+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a26      	ldr	r2, [pc, #152]	; (8006568 <TIM_Base_SetConfig+0x130>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00b      	beq.n	80064ea <TIM_Base_SetConfig+0xb2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a25      	ldr	r2, [pc, #148]	; (800656c <TIM_Base_SetConfig+0x134>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d007      	beq.n	80064ea <TIM_Base_SetConfig+0xb2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a24      	ldr	r2, [pc, #144]	; (8006570 <TIM_Base_SetConfig+0x138>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d003      	beq.n	80064ea <TIM_Base_SetConfig+0xb2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a23      	ldr	r2, [pc, #140]	; (8006574 <TIM_Base_SetConfig+0x13c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d108      	bne.n	80064fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a0a      	ldr	r2, [pc, #40]	; (800654c <TIM_Base_SetConfig+0x114>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_Base_SetConfig+0xf8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a0c      	ldr	r2, [pc, #48]	; (800655c <TIM_Base_SetConfig+0x124>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d103      	bne.n	8006538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	615a      	str	r2, [r3, #20]
}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40010000 	.word	0x40010000
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	40000c00 	.word	0x40000c00
 800655c:	40010400 	.word	0x40010400
 8006560:	40014000 	.word	0x40014000
 8006564:	40014400 	.word	0x40014400
 8006568:	40014800 	.word	0x40014800
 800656c:	40001800 	.word	0x40001800
 8006570:	40001c00 	.word	0x40001c00
 8006574:	40002000 	.word	0x40002000

08006578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e040      	b.n	8006648 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fc feca 	bl	8003370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2224      	movs	r2, #36	; 0x24
 80065e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0201 	bic.w	r2, r2, #1
 80065f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f82c 	bl	8006650 <UART_SetConfig>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e022      	b.n	8006648 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa80 	bl	8006b10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800661e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800662e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fb07 	bl	8006c54 <UART_CheckIdleState>
 8006646:	4603      	mov	r3, r0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	431a      	orrs	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4bb1      	ldr	r3, [pc, #708]	; (8006940 <UART_SetConfig+0x2f0>)
 800667c:	4013      	ands	r3, r2
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	6979      	ldr	r1, [r7, #20]
 8006684:	430b      	orrs	r3, r1
 8006686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	430a      	orrs	r2, r1
 80066c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a9f      	ldr	r2, [pc, #636]	; (8006944 <UART_SetConfig+0x2f4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d121      	bne.n	8006710 <UART_SetConfig+0xc0>
 80066cc:	4b9e      	ldr	r3, [pc, #632]	; (8006948 <UART_SetConfig+0x2f8>)
 80066ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d816      	bhi.n	8006708 <UART_SetConfig+0xb8>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <UART_SetConfig+0x90>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	080066f1 	.word	0x080066f1
 80066e4:	080066fd 	.word	0x080066fd
 80066e8:	080066f7 	.word	0x080066f7
 80066ec:	08006703 	.word	0x08006703
 80066f0:	2301      	movs	r3, #1
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e151      	b.n	800699a <UART_SetConfig+0x34a>
 80066f6:	2302      	movs	r3, #2
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	e14e      	b.n	800699a <UART_SetConfig+0x34a>
 80066fc:	2304      	movs	r3, #4
 80066fe:	77fb      	strb	r3, [r7, #31]
 8006700:	e14b      	b.n	800699a <UART_SetConfig+0x34a>
 8006702:	2308      	movs	r3, #8
 8006704:	77fb      	strb	r3, [r7, #31]
 8006706:	e148      	b.n	800699a <UART_SetConfig+0x34a>
 8006708:	2310      	movs	r3, #16
 800670a:	77fb      	strb	r3, [r7, #31]
 800670c:	bf00      	nop
 800670e:	e144      	b.n	800699a <UART_SetConfig+0x34a>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a8d      	ldr	r2, [pc, #564]	; (800694c <UART_SetConfig+0x2fc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d134      	bne.n	8006784 <UART_SetConfig+0x134>
 800671a:	4b8b      	ldr	r3, [pc, #556]	; (8006948 <UART_SetConfig+0x2f8>)
 800671c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006720:	f003 030c 	and.w	r3, r3, #12
 8006724:	2b0c      	cmp	r3, #12
 8006726:	d829      	bhi.n	800677c <UART_SetConfig+0x12c>
 8006728:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <UART_SetConfig+0xe0>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006765 	.word	0x08006765
 8006734:	0800677d 	.word	0x0800677d
 8006738:	0800677d 	.word	0x0800677d
 800673c:	0800677d 	.word	0x0800677d
 8006740:	08006771 	.word	0x08006771
 8006744:	0800677d 	.word	0x0800677d
 8006748:	0800677d 	.word	0x0800677d
 800674c:	0800677d 	.word	0x0800677d
 8006750:	0800676b 	.word	0x0800676b
 8006754:	0800677d 	.word	0x0800677d
 8006758:	0800677d 	.word	0x0800677d
 800675c:	0800677d 	.word	0x0800677d
 8006760:	08006777 	.word	0x08006777
 8006764:	2300      	movs	r3, #0
 8006766:	77fb      	strb	r3, [r7, #31]
 8006768:	e117      	b.n	800699a <UART_SetConfig+0x34a>
 800676a:	2302      	movs	r3, #2
 800676c:	77fb      	strb	r3, [r7, #31]
 800676e:	e114      	b.n	800699a <UART_SetConfig+0x34a>
 8006770:	2304      	movs	r3, #4
 8006772:	77fb      	strb	r3, [r7, #31]
 8006774:	e111      	b.n	800699a <UART_SetConfig+0x34a>
 8006776:	2308      	movs	r3, #8
 8006778:	77fb      	strb	r3, [r7, #31]
 800677a:	e10e      	b.n	800699a <UART_SetConfig+0x34a>
 800677c:	2310      	movs	r3, #16
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	bf00      	nop
 8006782:	e10a      	b.n	800699a <UART_SetConfig+0x34a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a71      	ldr	r2, [pc, #452]	; (8006950 <UART_SetConfig+0x300>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d120      	bne.n	80067d0 <UART_SetConfig+0x180>
 800678e:	4b6e      	ldr	r3, [pc, #440]	; (8006948 <UART_SetConfig+0x2f8>)
 8006790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006794:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006798:	2b10      	cmp	r3, #16
 800679a:	d00f      	beq.n	80067bc <UART_SetConfig+0x16c>
 800679c:	2b10      	cmp	r3, #16
 800679e:	d802      	bhi.n	80067a6 <UART_SetConfig+0x156>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <UART_SetConfig+0x160>
 80067a4:	e010      	b.n	80067c8 <UART_SetConfig+0x178>
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	d005      	beq.n	80067b6 <UART_SetConfig+0x166>
 80067aa:	2b30      	cmp	r3, #48	; 0x30
 80067ac:	d009      	beq.n	80067c2 <UART_SetConfig+0x172>
 80067ae:	e00b      	b.n	80067c8 <UART_SetConfig+0x178>
 80067b0:	2300      	movs	r3, #0
 80067b2:	77fb      	strb	r3, [r7, #31]
 80067b4:	e0f1      	b.n	800699a <UART_SetConfig+0x34a>
 80067b6:	2302      	movs	r3, #2
 80067b8:	77fb      	strb	r3, [r7, #31]
 80067ba:	e0ee      	b.n	800699a <UART_SetConfig+0x34a>
 80067bc:	2304      	movs	r3, #4
 80067be:	77fb      	strb	r3, [r7, #31]
 80067c0:	e0eb      	b.n	800699a <UART_SetConfig+0x34a>
 80067c2:	2308      	movs	r3, #8
 80067c4:	77fb      	strb	r3, [r7, #31]
 80067c6:	e0e8      	b.n	800699a <UART_SetConfig+0x34a>
 80067c8:	2310      	movs	r3, #16
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	bf00      	nop
 80067ce:	e0e4      	b.n	800699a <UART_SetConfig+0x34a>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a5f      	ldr	r2, [pc, #380]	; (8006954 <UART_SetConfig+0x304>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d120      	bne.n	800681c <UART_SetConfig+0x1cc>
 80067da:	4b5b      	ldr	r3, [pc, #364]	; (8006948 <UART_SetConfig+0x2f8>)
 80067dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067e4:	2b40      	cmp	r3, #64	; 0x40
 80067e6:	d00f      	beq.n	8006808 <UART_SetConfig+0x1b8>
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	d802      	bhi.n	80067f2 <UART_SetConfig+0x1a2>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d005      	beq.n	80067fc <UART_SetConfig+0x1ac>
 80067f0:	e010      	b.n	8006814 <UART_SetConfig+0x1c4>
 80067f2:	2b80      	cmp	r3, #128	; 0x80
 80067f4:	d005      	beq.n	8006802 <UART_SetConfig+0x1b2>
 80067f6:	2bc0      	cmp	r3, #192	; 0xc0
 80067f8:	d009      	beq.n	800680e <UART_SetConfig+0x1be>
 80067fa:	e00b      	b.n	8006814 <UART_SetConfig+0x1c4>
 80067fc:	2300      	movs	r3, #0
 80067fe:	77fb      	strb	r3, [r7, #31]
 8006800:	e0cb      	b.n	800699a <UART_SetConfig+0x34a>
 8006802:	2302      	movs	r3, #2
 8006804:	77fb      	strb	r3, [r7, #31]
 8006806:	e0c8      	b.n	800699a <UART_SetConfig+0x34a>
 8006808:	2304      	movs	r3, #4
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	e0c5      	b.n	800699a <UART_SetConfig+0x34a>
 800680e:	2308      	movs	r3, #8
 8006810:	77fb      	strb	r3, [r7, #31]
 8006812:	e0c2      	b.n	800699a <UART_SetConfig+0x34a>
 8006814:	2310      	movs	r3, #16
 8006816:	77fb      	strb	r3, [r7, #31]
 8006818:	bf00      	nop
 800681a:	e0be      	b.n	800699a <UART_SetConfig+0x34a>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a4d      	ldr	r2, [pc, #308]	; (8006958 <UART_SetConfig+0x308>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d124      	bne.n	8006870 <UART_SetConfig+0x220>
 8006826:	4b48      	ldr	r3, [pc, #288]	; (8006948 <UART_SetConfig+0x2f8>)
 8006828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006834:	d012      	beq.n	800685c <UART_SetConfig+0x20c>
 8006836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683a:	d802      	bhi.n	8006842 <UART_SetConfig+0x1f2>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <UART_SetConfig+0x200>
 8006840:	e012      	b.n	8006868 <UART_SetConfig+0x218>
 8006842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006846:	d006      	beq.n	8006856 <UART_SetConfig+0x206>
 8006848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800684c:	d009      	beq.n	8006862 <UART_SetConfig+0x212>
 800684e:	e00b      	b.n	8006868 <UART_SetConfig+0x218>
 8006850:	2300      	movs	r3, #0
 8006852:	77fb      	strb	r3, [r7, #31]
 8006854:	e0a1      	b.n	800699a <UART_SetConfig+0x34a>
 8006856:	2302      	movs	r3, #2
 8006858:	77fb      	strb	r3, [r7, #31]
 800685a:	e09e      	b.n	800699a <UART_SetConfig+0x34a>
 800685c:	2304      	movs	r3, #4
 800685e:	77fb      	strb	r3, [r7, #31]
 8006860:	e09b      	b.n	800699a <UART_SetConfig+0x34a>
 8006862:	2308      	movs	r3, #8
 8006864:	77fb      	strb	r3, [r7, #31]
 8006866:	e098      	b.n	800699a <UART_SetConfig+0x34a>
 8006868:	2310      	movs	r3, #16
 800686a:	77fb      	strb	r3, [r7, #31]
 800686c:	bf00      	nop
 800686e:	e094      	b.n	800699a <UART_SetConfig+0x34a>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a39      	ldr	r2, [pc, #228]	; (800695c <UART_SetConfig+0x30c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d124      	bne.n	80068c4 <UART_SetConfig+0x274>
 800687a:	4b33      	ldr	r3, [pc, #204]	; (8006948 <UART_SetConfig+0x2f8>)
 800687c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006880:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006888:	d012      	beq.n	80068b0 <UART_SetConfig+0x260>
 800688a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800688e:	d802      	bhi.n	8006896 <UART_SetConfig+0x246>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d007      	beq.n	80068a4 <UART_SetConfig+0x254>
 8006894:	e012      	b.n	80068bc <UART_SetConfig+0x26c>
 8006896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800689a:	d006      	beq.n	80068aa <UART_SetConfig+0x25a>
 800689c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068a0:	d009      	beq.n	80068b6 <UART_SetConfig+0x266>
 80068a2:	e00b      	b.n	80068bc <UART_SetConfig+0x26c>
 80068a4:	2301      	movs	r3, #1
 80068a6:	77fb      	strb	r3, [r7, #31]
 80068a8:	e077      	b.n	800699a <UART_SetConfig+0x34a>
 80068aa:	2302      	movs	r3, #2
 80068ac:	77fb      	strb	r3, [r7, #31]
 80068ae:	e074      	b.n	800699a <UART_SetConfig+0x34a>
 80068b0:	2304      	movs	r3, #4
 80068b2:	77fb      	strb	r3, [r7, #31]
 80068b4:	e071      	b.n	800699a <UART_SetConfig+0x34a>
 80068b6:	2308      	movs	r3, #8
 80068b8:	77fb      	strb	r3, [r7, #31]
 80068ba:	e06e      	b.n	800699a <UART_SetConfig+0x34a>
 80068bc:	2310      	movs	r3, #16
 80068be:	77fb      	strb	r3, [r7, #31]
 80068c0:	bf00      	nop
 80068c2:	e06a      	b.n	800699a <UART_SetConfig+0x34a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a25      	ldr	r2, [pc, #148]	; (8006960 <UART_SetConfig+0x310>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d124      	bne.n	8006918 <UART_SetConfig+0x2c8>
 80068ce:	4b1e      	ldr	r3, [pc, #120]	; (8006948 <UART_SetConfig+0x2f8>)
 80068d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068dc:	d012      	beq.n	8006904 <UART_SetConfig+0x2b4>
 80068de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e2:	d802      	bhi.n	80068ea <UART_SetConfig+0x29a>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <UART_SetConfig+0x2a8>
 80068e8:	e012      	b.n	8006910 <UART_SetConfig+0x2c0>
 80068ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ee:	d006      	beq.n	80068fe <UART_SetConfig+0x2ae>
 80068f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068f4:	d009      	beq.n	800690a <UART_SetConfig+0x2ba>
 80068f6:	e00b      	b.n	8006910 <UART_SetConfig+0x2c0>
 80068f8:	2300      	movs	r3, #0
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e04d      	b.n	800699a <UART_SetConfig+0x34a>
 80068fe:	2302      	movs	r3, #2
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e04a      	b.n	800699a <UART_SetConfig+0x34a>
 8006904:	2304      	movs	r3, #4
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e047      	b.n	800699a <UART_SetConfig+0x34a>
 800690a:	2308      	movs	r3, #8
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e044      	b.n	800699a <UART_SetConfig+0x34a>
 8006910:	2310      	movs	r3, #16
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	bf00      	nop
 8006916:	e040      	b.n	800699a <UART_SetConfig+0x34a>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a11      	ldr	r2, [pc, #68]	; (8006964 <UART_SetConfig+0x314>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d139      	bne.n	8006996 <UART_SetConfig+0x346>
 8006922:	4b09      	ldr	r3, [pc, #36]	; (8006948 <UART_SetConfig+0x2f8>)
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800692c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006930:	d027      	beq.n	8006982 <UART_SetConfig+0x332>
 8006932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006936:	d817      	bhi.n	8006968 <UART_SetConfig+0x318>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01c      	beq.n	8006976 <UART_SetConfig+0x326>
 800693c:	e027      	b.n	800698e <UART_SetConfig+0x33e>
 800693e:	bf00      	nop
 8006940:	efff69f3 	.word	0xefff69f3
 8006944:	40011000 	.word	0x40011000
 8006948:	40023800 	.word	0x40023800
 800694c:	40004400 	.word	0x40004400
 8006950:	40004800 	.word	0x40004800
 8006954:	40004c00 	.word	0x40004c00
 8006958:	40005000 	.word	0x40005000
 800695c:	40011400 	.word	0x40011400
 8006960:	40007800 	.word	0x40007800
 8006964:	40007c00 	.word	0x40007c00
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696c:	d006      	beq.n	800697c <UART_SetConfig+0x32c>
 800696e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006972:	d009      	beq.n	8006988 <UART_SetConfig+0x338>
 8006974:	e00b      	b.n	800698e <UART_SetConfig+0x33e>
 8006976:	2300      	movs	r3, #0
 8006978:	77fb      	strb	r3, [r7, #31]
 800697a:	e00e      	b.n	800699a <UART_SetConfig+0x34a>
 800697c:	2302      	movs	r3, #2
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e00b      	b.n	800699a <UART_SetConfig+0x34a>
 8006982:	2304      	movs	r3, #4
 8006984:	77fb      	strb	r3, [r7, #31]
 8006986:	e008      	b.n	800699a <UART_SetConfig+0x34a>
 8006988:	2308      	movs	r3, #8
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e005      	b.n	800699a <UART_SetConfig+0x34a>
 800698e:	2310      	movs	r3, #16
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	bf00      	nop
 8006994:	e001      	b.n	800699a <UART_SetConfig+0x34a>
 8006996:	2310      	movs	r3, #16
 8006998:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a2:	d15b      	bne.n	8006a5c <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80069a4:	7ffb      	ldrb	r3, [r7, #31]
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d827      	bhi.n	80069fa <UART_SetConfig+0x3aa>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <UART_SetConfig+0x360>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	080069d5 	.word	0x080069d5
 80069b4:	080069dd 	.word	0x080069dd
 80069b8:	080069e5 	.word	0x080069e5
 80069bc:	080069fb 	.word	0x080069fb
 80069c0:	080069eb 	.word	0x080069eb
 80069c4:	080069fb 	.word	0x080069fb
 80069c8:	080069fb 	.word	0x080069fb
 80069cc:	080069fb 	.word	0x080069fb
 80069d0:	080069f3 	.word	0x080069f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069d4:	f7fe fe8c 	bl	80056f0 <HAL_RCC_GetPCLK1Freq>
 80069d8:	61b8      	str	r0, [r7, #24]
        break;
 80069da:	e013      	b.n	8006a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069dc:	f7fe fe9c 	bl	8005718 <HAL_RCC_GetPCLK2Freq>
 80069e0:	61b8      	str	r0, [r7, #24]
        break;
 80069e2:	e00f      	b.n	8006a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069e4:	4b49      	ldr	r3, [pc, #292]	; (8006b0c <UART_SetConfig+0x4bc>)
 80069e6:	61bb      	str	r3, [r7, #24]
        break;
 80069e8:	e00c      	b.n	8006a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ea:	f7fe fd9d 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 80069ee:	61b8      	str	r0, [r7, #24]
        break;
 80069f0:	e008      	b.n	8006a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069f6:	61bb      	str	r3, [r7, #24]
        break;
 80069f8:	e004      	b.n	8006a04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	77bb      	strb	r3, [r7, #30]
        break;
 8006a02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d074      	beq.n	8006af4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	005a      	lsls	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	085b      	lsrs	r3, r3, #1
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b0f      	cmp	r3, #15
 8006a26:	d916      	bls.n	8006a56 <UART_SetConfig+0x406>
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2e:	d212      	bcs.n	8006a56 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f023 030f 	bic.w	r3, r3, #15
 8006a38:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	085b      	lsrs	r3, r3, #1
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	89fb      	ldrh	r3, [r7, #14]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	89fa      	ldrh	r2, [r7, #14]
 8006a52:	60da      	str	r2, [r3, #12]
 8006a54:	e04e      	b.n	8006af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	77bb      	strb	r3, [r7, #30]
 8006a5a:	e04b      	b.n	8006af4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a5c:	7ffb      	ldrb	r3, [r7, #31]
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	d827      	bhi.n	8006ab2 <UART_SetConfig+0x462>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <UART_SetConfig+0x418>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a8d 	.word	0x08006a8d
 8006a6c:	08006a95 	.word	0x08006a95
 8006a70:	08006a9d 	.word	0x08006a9d
 8006a74:	08006ab3 	.word	0x08006ab3
 8006a78:	08006aa3 	.word	0x08006aa3
 8006a7c:	08006ab3 	.word	0x08006ab3
 8006a80:	08006ab3 	.word	0x08006ab3
 8006a84:	08006ab3 	.word	0x08006ab3
 8006a88:	08006aab 	.word	0x08006aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a8c:	f7fe fe30 	bl	80056f0 <HAL_RCC_GetPCLK1Freq>
 8006a90:	61b8      	str	r0, [r7, #24]
        break;
 8006a92:	e013      	b.n	8006abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a94:	f7fe fe40 	bl	8005718 <HAL_RCC_GetPCLK2Freq>
 8006a98:	61b8      	str	r0, [r7, #24]
        break;
 8006a9a:	e00f      	b.n	8006abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a9c:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <UART_SetConfig+0x4bc>)
 8006a9e:	61bb      	str	r3, [r7, #24]
        break;
 8006aa0:	e00c      	b.n	8006abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aa2:	f7fe fd41 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 8006aa6:	61b8      	str	r0, [r7, #24]
        break;
 8006aa8:	e008      	b.n	8006abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aae:	61bb      	str	r3, [r7, #24]
        break;
 8006ab0:	e004      	b.n	8006abc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	77bb      	strb	r3, [r7, #30]
        break;
 8006aba:	bf00      	nop
    }

    if (pclk != 0U)
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d018      	beq.n	8006af4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	085a      	lsrs	r2, r3, #1
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	441a      	add	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b0f      	cmp	r3, #15
 8006adc:	d908      	bls.n	8006af0 <UART_SetConfig+0x4a0>
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae4:	d204      	bcs.n	8006af0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	60da      	str	r2, [r3, #12]
 8006aee:	e001      	b.n	8006af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b00:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	00f42400 	.word	0x00f42400

08006b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	f003 0308 	and.w	r3, r3, #8
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d01a      	beq.n	8006c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c0e:	d10a      	bne.n	8006c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	605a      	str	r2, [r3, #4]
  }
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c64:	f7fc fdce 	bl	8003804 <HAL_GetTick>
 8006c68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0308 	and.w	r3, r3, #8
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d10e      	bne.n	8006c96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f82d 	bl	8006ce6 <UART_WaitOnFlagUntilTimeout>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e023      	b.n	8006cde <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d10e      	bne.n	8006cc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f817 	bl	8006ce6 <UART_WaitOnFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e00d      	b.n	8006cde <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	603b      	str	r3, [r7, #0]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cf6:	e05e      	b.n	8006db6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfe:	d05a      	beq.n	8006db6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d00:	f7fc fd80 	bl	8003804 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d302      	bcc.n	8006d16 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d11b      	bne.n	8006d4e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0201 	bic.w	r2, r2, #1
 8006d34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e043      	b.n	8006dd6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d02c      	beq.n	8006db6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d6a:	d124      	bne.n	8006db6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d84:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0201 	bic.w	r2, r2, #1
 8006d94:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2220      	movs	r2, #32
 8006da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e00f      	b.n	8006dd6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	bf0c      	ite	eq
 8006dc6:	2301      	moveq	r3, #1
 8006dc8:	2300      	movne	r3, #0
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d091      	beq.n	8006cf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006de0:	b084      	sub	sp, #16
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	f107 001c 	add.w	r0, r7, #28
 8006dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d120      	bne.n	8006e3a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	4b20      	ldr	r3, [pc, #128]	; (8006e8c <USB_CoreInit+0xac>)
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d105      	bne.n	8006e2e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fa5a 	bl	80072e8 <USB_CoreReset>
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]
 8006e38:	e010      	b.n	8006e5c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa4e 	bl	80072e8 <USB_CoreReset>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d10b      	bne.n	8006e7a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f043 0206 	orr.w	r2, r3, #6
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f043 0220 	orr.w	r2, r3, #32
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e86:	b004      	add	sp, #16
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	ffbdffbf 	.word	0xffbdffbf

08006e90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f023 0201 	bic.w	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006eca:	78fb      	ldrb	r3, [r7, #3]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d106      	bne.n	8006ede <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]
 8006edc:	e00b      	b.n	8006ef6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60da      	str	r2, [r3, #12]
 8006ef0:	e001      	b.n	8006ef6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e003      	b.n	8006efe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006ef6:	2032      	movs	r0, #50	; 0x32
 8006ef8:	f7fc fc90 	bl	800381c <HAL_Delay>

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f08:	b084      	sub	sp, #16
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b086      	sub	sp, #24
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f22:	2300      	movs	r3, #0
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	e009      	b.n	8006f3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	3340      	adds	r3, #64	; 0x40
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	2200      	movs	r2, #0
 8006f34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b0e      	cmp	r3, #14
 8006f40:	d9f2      	bls.n	8006f28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d11c      	bne.n	8006f82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f56:	f043 0302 	orr.w	r3, r3, #2
 8006f5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	e005      	b.n	8006f8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f94:	461a      	mov	r2, r3
 8006f96:	2300      	movs	r3, #0
 8006f98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa8:	461a      	mov	r2, r3
 8006faa:	680b      	ldr	r3, [r1, #0]
 8006fac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d10c      	bne.n	8006fce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d104      	bne.n	8006fc4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fba:	2100      	movs	r1, #0
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f959 	bl	8007274 <USB_SetDevSpeed>
 8006fc2:	e018      	b.n	8006ff6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f954 	bl	8007274 <USB_SetDevSpeed>
 8006fcc:	e013      	b.n	8006ff6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d10c      	bne.n	8006fee <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d104      	bne.n	8006fe4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fda:	2100      	movs	r1, #0
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f949 	bl	8007274 <USB_SetDevSpeed>
 8006fe2:	e008      	b.n	8006ff6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f944 	bl	8007274 <USB_SetDevSpeed>
 8006fec:	e003      	b.n	8006ff6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fee:	2103      	movs	r1, #3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f93f 	bl	8007274 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ff6:	2110      	movs	r1, #16
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f8f3 	bl	80071e4 <USB_FlushTxFifo>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f911 	bl	8007230 <USB_FlushRxFifo>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	461a      	mov	r2, r3
 8007020:	2300      	movs	r3, #0
 8007022:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702a:	461a      	mov	r2, r3
 800702c:	2300      	movs	r3, #0
 800702e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007036:	461a      	mov	r2, r3
 8007038:	2300      	movs	r3, #0
 800703a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800703c:	2300      	movs	r3, #0
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	e043      	b.n	80070ca <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007058:	d118      	bne.n	800708c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10a      	bne.n	8007076 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706c:	461a      	mov	r2, r3
 800706e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	e013      	b.n	800709e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007082:	461a      	mov	r2, r3
 8007084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	e008      	b.n	800709e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	461a      	mov	r2, r3
 800709a:	2300      	movs	r3, #0
 800709c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070aa:	461a      	mov	r2, r3
 80070ac:	2300      	movs	r3, #0
 80070ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	461a      	mov	r2, r3
 80070be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	3301      	adds	r3, #1
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d3b7      	bcc.n	8007042 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070d2:	2300      	movs	r3, #0
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	e043      	b.n	8007160 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ee:	d118      	bne.n	8007122 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	461a      	mov	r2, r3
 8007104:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	e013      	b.n	8007134 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007118:	461a      	mov	r2, r3
 800711a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	e008      	b.n	8007134 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712e:	461a      	mov	r2, r3
 8007130:	2300      	movs	r3, #0
 8007132:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	461a      	mov	r2, r3
 8007142:	2300      	movs	r3, #0
 8007144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007152:	461a      	mov	r2, r3
 8007154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007158:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	3301      	adds	r3, #1
 800715e:	613b      	str	r3, [r7, #16]
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	429a      	cmp	r2, r3
 8007166:	d3b7      	bcc.n	80070d8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800717a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007188:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	2b00      	cmp	r3, #0
 800718e:	d105      	bne.n	800719c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	f043 0210 	orr.w	r2, r3, #16
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	699a      	ldr	r2, [r3, #24]
 80071a0:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <USB_DevInit+0x2d4>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f043 0208 	orr.w	r2, r3, #8
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d105      	bne.n	80071cc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699a      	ldr	r2, [r3, #24]
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <USB_DevInit+0x2d8>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071d8:	b004      	add	sp, #16
 80071da:	4770      	bx	lr
 80071dc:	803c3800 	.word	0x803c3800
 80071e0:	40000004 	.word	0x40000004

080071e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80071ee:	2300      	movs	r3, #0
 80071f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	019b      	lsls	r3, r3, #6
 80071f6:	f043 0220 	orr.w	r2, r3, #32
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	3301      	adds	r3, #1
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4a09      	ldr	r2, [pc, #36]	; (800722c <USB_FlushTxFifo+0x48>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d901      	bls.n	8007210 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e006      	b.n	800721e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b20      	cmp	r3, #32
 800721a:	d0f0      	beq.n	80071fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	00030d40 	.word	0x00030d40

08007230 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2210      	movs	r2, #16
 8007240:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3301      	adds	r3, #1
 8007246:	60fb      	str	r3, [r7, #12]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4a09      	ldr	r2, [pc, #36]	; (8007270 <USB_FlushRxFifo+0x40>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d901      	bls.n	8007254 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e006      	b.n	8007262 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f003 0310 	and.w	r3, r3, #16
 800725c:	2b10      	cmp	r3, #16
 800725e:	d0f0      	beq.n	8007242 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	00030d40 	.word	0x00030d40

08007274 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	68f9      	ldr	r1, [r7, #12]
 8007290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007294:	4313      	orrs	r3, r2
 8007296:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072c0:	f023 0303 	bic.w	r3, r3, #3
 80072c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072d4:	f043 0302 	orr.w	r3, r3, #2
 80072d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4a13      	ldr	r2, [pc, #76]	; (800734c <USB_CoreReset+0x64>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d901      	bls.n	8007306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e01b      	b.n	800733e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	daf2      	bge.n	80072f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f043 0201 	orr.w	r2, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3301      	adds	r3, #1
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4a09      	ldr	r2, [pc, #36]	; (800734c <USB_CoreReset+0x64>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d901      	bls.n	8007330 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e006      	b.n	800733e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b01      	cmp	r3, #1
 800733a:	d0f0      	beq.n	800731e <USB_CoreReset+0x36>

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	00030d40 	.word	0x00030d40

08007350 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007354:	bf00      	nop
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
	...

08007360 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007366:	f3ef 8305 	mrs	r3, IPSR
 800736a:	60bb      	str	r3, [r7, #8]
  return(result);
 800736c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10f      	bne.n	8007392 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007372:	f3ef 8310 	mrs	r3, PRIMASK
 8007376:	607b      	str	r3, [r7, #4]
  return(result);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d105      	bne.n	800738a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800737e:	f3ef 8311 	mrs	r3, BASEPRI
 8007382:	603b      	str	r3, [r7, #0]
  return(result);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d007      	beq.n	800739a <osKernelInitialize+0x3a>
 800738a:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <osKernelInitialize+0x64>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b02      	cmp	r3, #2
 8007390:	d103      	bne.n	800739a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007392:	f06f 0305 	mvn.w	r3, #5
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	e00c      	b.n	80073b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800739a:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <osKernelInitialize+0x64>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d105      	bne.n	80073ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073a2:	4b08      	ldr	r3, [pc, #32]	; (80073c4 <osKernelInitialize+0x64>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]
 80073ac:	e002      	b.n	80073b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295
 80073b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80073b4:	68fb      	ldr	r3, [r7, #12]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	200000e0 	.word	0x200000e0

080073c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ce:	f3ef 8305 	mrs	r3, IPSR
 80073d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80073d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10f      	bne.n	80073fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073da:	f3ef 8310 	mrs	r3, PRIMASK
 80073de:	607b      	str	r3, [r7, #4]
  return(result);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d105      	bne.n	80073f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073e6:	f3ef 8311 	mrs	r3, BASEPRI
 80073ea:	603b      	str	r3, [r7, #0]
  return(result);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d007      	beq.n	8007402 <osKernelStart+0x3a>
 80073f2:	4b0f      	ldr	r3, [pc, #60]	; (8007430 <osKernelStart+0x68>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d103      	bne.n	8007402 <osKernelStart+0x3a>
    stat = osErrorISR;
 80073fa:	f06f 0305 	mvn.w	r3, #5
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	e010      	b.n	8007424 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007402:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <osKernelStart+0x68>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d109      	bne.n	800741e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800740a:	f7ff ffa1 	bl	8007350 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800740e:	4b08      	ldr	r3, [pc, #32]	; (8007430 <osKernelStart+0x68>)
 8007410:	2202      	movs	r2, #2
 8007412:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007414:	f001 f8b6 	bl	8008584 <vTaskStartScheduler>
      stat = osOK;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	e002      	b.n	8007424 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800741e:	f04f 33ff 	mov.w	r3, #4294967295
 8007422:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007424:	68fb      	ldr	r3, [r7, #12]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	200000e0 	.word	0x200000e0

08007434 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007434:	b580      	push	{r7, lr}
 8007436:	b090      	sub	sp, #64	; 0x40
 8007438:	af04      	add	r7, sp, #16
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007444:	f3ef 8305 	mrs	r3, IPSR
 8007448:	61fb      	str	r3, [r7, #28]
  return(result);
 800744a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800744c:	2b00      	cmp	r3, #0
 800744e:	f040 808f 	bne.w	8007570 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007452:	f3ef 8310 	mrs	r3, PRIMASK
 8007456:	61bb      	str	r3, [r7, #24]
  return(result);
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800745e:	f3ef 8311 	mrs	r3, BASEPRI
 8007462:	617b      	str	r3, [r7, #20]
  return(result);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <osThreadNew+0x3e>
 800746a:	4b44      	ldr	r3, [pc, #272]	; (800757c <osThreadNew+0x148>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d07e      	beq.n	8007570 <osThreadNew+0x13c>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d07b      	beq.n	8007570 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007478:	2380      	movs	r3, #128	; 0x80
 800747a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800747c:	2318      	movs	r3, #24
 800747e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007480:	2300      	movs	r3, #0
 8007482:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007484:	f04f 33ff 	mov.w	r3, #4294967295
 8007488:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d045      	beq.n	800751c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <osThreadNew+0x6a>
        name = attr->name;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <osThreadNew+0x90>
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	2b38      	cmp	r3, #56	; 0x38
 80074b6:	d805      	bhi.n	80074c4 <osThreadNew+0x90>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <osThreadNew+0x94>
        return (NULL);
 80074c4:	2300      	movs	r3, #0
 80074c6:	e054      	b.n	8007572 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	089b      	lsrs	r3, r3, #2
 80074d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00e      	beq.n	80074fe <osThreadNew+0xca>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	2bbf      	cmp	r3, #191	; 0xbf
 80074e6:	d90a      	bls.n	80074fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d006      	beq.n	80074fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <osThreadNew+0xca>
        mem = 1;
 80074f8:	2301      	movs	r3, #1
 80074fa:	623b      	str	r3, [r7, #32]
 80074fc:	e010      	b.n	8007520 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10c      	bne.n	8007520 <osThreadNew+0xec>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d108      	bne.n	8007520 <osThreadNew+0xec>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d104      	bne.n	8007520 <osThreadNew+0xec>
          mem = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	623b      	str	r3, [r7, #32]
 800751a:	e001      	b.n	8007520 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d110      	bne.n	8007548 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800752e:	9202      	str	r2, [sp, #8]
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800753a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 fe2b 	bl	8008198 <xTaskCreateStatic>
 8007542:	4603      	mov	r3, r0
 8007544:	613b      	str	r3, [r7, #16]
 8007546:	e013      	b.n	8007570 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d110      	bne.n	8007570 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007550:	b29a      	uxth	r2, r3
 8007552:	f107 0310 	add.w	r3, r7, #16
 8007556:	9301      	str	r3, [sp, #4]
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fe79 	bl	8008258 <xTaskCreate>
 8007566:	4603      	mov	r3, r0
 8007568:	2b01      	cmp	r3, #1
 800756a:	d001      	beq.n	8007570 <osThreadNew+0x13c>
          hTask = NULL;
 800756c:	2300      	movs	r3, #0
 800756e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007570:	693b      	ldr	r3, [r7, #16]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3730      	adds	r7, #48	; 0x30
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	200000e0 	.word	0x200000e0

08007580 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007588:	f3ef 8305 	mrs	r3, IPSR
 800758c:	613b      	str	r3, [r7, #16]
  return(result);
 800758e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10f      	bne.n	80075b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007594:	f3ef 8310 	mrs	r3, PRIMASK
 8007598:	60fb      	str	r3, [r7, #12]
  return(result);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d105      	bne.n	80075ac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075a0:	f3ef 8311 	mrs	r3, BASEPRI
 80075a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d007      	beq.n	80075bc <osDelay+0x3c>
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <osDelay+0x58>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d103      	bne.n	80075bc <osDelay+0x3c>
    stat = osErrorISR;
 80075b4:	f06f 0305 	mvn.w	r3, #5
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	e007      	b.n	80075cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80075bc:	2300      	movs	r3, #0
 80075be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 ffa6 	bl	8008518 <vTaskDelay>
    }
  }

  return (stat);
 80075cc:	697b      	ldr	r3, [r7, #20]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	200000e0 	.word	0x200000e0

080075dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4a07      	ldr	r2, [pc, #28]	; (8007608 <vApplicationGetIdleTaskMemory+0x2c>)
 80075ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	4a06      	ldr	r2, [pc, #24]	; (800760c <vApplicationGetIdleTaskMemory+0x30>)
 80075f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2280      	movs	r2, #128	; 0x80
 80075f8:	601a      	str	r2, [r3, #0]
}
 80075fa:	bf00      	nop
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	200000e4 	.word	0x200000e4
 800760c:	200001a4 	.word	0x200001a4

08007610 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a07      	ldr	r2, [pc, #28]	; (800763c <vApplicationGetTimerTaskMemory+0x2c>)
 8007620:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	4a06      	ldr	r2, [pc, #24]	; (8007640 <vApplicationGetTimerTaskMemory+0x30>)
 8007626:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800762e:	601a      	str	r2, [r3, #0]
}
 8007630:	bf00      	nop
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	200003a4 	.word	0x200003a4
 8007640:	20000464 	.word	0x20000464

08007644 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f103 0208 	add.w	r2, r3, #8
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f04f 32ff 	mov.w	r2, #4294967295
 800765c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f103 0208 	add.w	r2, r3, #8
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f103 0208 	add.w	r2, r3, #8
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	601a      	str	r2, [r3, #0]
}
 80076da:	bf00      	nop
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076e6:	b480      	push	{r7}
 80076e8:	b085      	sub	sp, #20
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fc:	d103      	bne.n	8007706 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	e00c      	b.n	8007720 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3308      	adds	r3, #8
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	e002      	b.n	8007714 <vListInsert+0x2e>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	429a      	cmp	r2, r3
 800771e:	d2f6      	bcs.n	800770e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]
}
 800774c:	bf00      	nop
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6892      	ldr	r2, [r2, #8]
 800776e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6852      	ldr	r2, [r2, #4]
 8007778:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	429a      	cmp	r2, r3
 8007782:	d103      	bne.n	800778c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	1e5a      	subs	r2, r3, #1
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10b      	bne.n	80077d8 <xQueueGenericReset+0x2c>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	b672      	cpsid	i
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	b662      	cpsie	i
 80077d4:	60bb      	str	r3, [r7, #8]
 80077d6:	e7fe      	b.n	80077d6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80077d8:	f002 f8a6 	bl	8009928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e4:	68f9      	ldr	r1, [r7, #12]
 80077e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077e8:	fb01 f303 	mul.w	r3, r1, r3
 80077ec:	441a      	add	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007808:	3b01      	subs	r3, #1
 800780a:	68f9      	ldr	r1, [r7, #12]
 800780c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800780e:	fb01 f303 	mul.w	r3, r1, r3
 8007812:	441a      	add	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	22ff      	movs	r2, #255	; 0xff
 800781c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	22ff      	movs	r2, #255	; 0xff
 8007824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d114      	bne.n	8007858 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d01a      	beq.n	800786c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3310      	adds	r3, #16
 800783a:	4618      	mov	r0, r3
 800783c:	f001 f96e 	bl	8008b1c <xTaskRemoveFromEventList>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d012      	beq.n	800786c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007846:	4b0d      	ldr	r3, [pc, #52]	; (800787c <xQueueGenericReset+0xd0>)
 8007848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	e009      	b.n	800786c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3310      	adds	r3, #16
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fef1 	bl	8007644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3324      	adds	r3, #36	; 0x24
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff feec 	bl	8007644 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800786c:	f002 f88e 	bl	800998c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007870:	2301      	movs	r3, #1
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	e000ed04 	.word	0xe000ed04

08007880 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08e      	sub	sp, #56	; 0x38
 8007884:	af02      	add	r7, sp, #8
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10b      	bne.n	80078ac <xQueueGenericCreateStatic+0x2c>
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	b672      	cpsid	i
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	b662      	cpsie	i
 80078a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80078aa:	e7fe      	b.n	80078aa <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10b      	bne.n	80078ca <xQueueGenericCreateStatic+0x4a>
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	b672      	cpsid	i
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	b662      	cpsie	i
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
 80078c8:	e7fe      	b.n	80078c8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <xQueueGenericCreateStatic+0x56>
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <xQueueGenericCreateStatic+0x5a>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <xQueueGenericCreateStatic+0x5c>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10b      	bne.n	80078f8 <xQueueGenericCreateStatic+0x78>
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	b672      	cpsid	i
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	b662      	cpsie	i
 80078f4:	623b      	str	r3, [r7, #32]
 80078f6:	e7fe      	b.n	80078f6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d102      	bne.n	8007904 <xQueueGenericCreateStatic+0x84>
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <xQueueGenericCreateStatic+0x88>
 8007904:	2301      	movs	r3, #1
 8007906:	e000      	b.n	800790a <xQueueGenericCreateStatic+0x8a>
 8007908:	2300      	movs	r3, #0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10b      	bne.n	8007926 <xQueueGenericCreateStatic+0xa6>
 800790e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007912:	b672      	cpsid	i
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	b662      	cpsie	i
 8007922:	61fb      	str	r3, [r7, #28]
 8007924:	e7fe      	b.n	8007924 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007926:	2350      	movs	r3, #80	; 0x50
 8007928:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2b50      	cmp	r3, #80	; 0x50
 800792e:	d00b      	beq.n	8007948 <xQueueGenericCreateStatic+0xc8>
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	b672      	cpsid	i
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	b662      	cpsie	i
 8007944:	61bb      	str	r3, [r7, #24]
 8007946:	e7fe      	b.n	8007946 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007948:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00d      	beq.n	8007970 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800795c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	4613      	mov	r3, r2
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	68b9      	ldr	r1, [r7, #8]
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 f805 	bl	800797a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007972:	4618      	mov	r0, r3
 8007974:	3730      	adds	r7, #48	; 0x30
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	607a      	str	r2, [r7, #4]
 8007986:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d103      	bne.n	8007996 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e002      	b.n	800799c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079a8:	2101      	movs	r1, #1
 80079aa:	69b8      	ldr	r0, [r7, #24]
 80079ac:	f7ff fefe 	bl	80077ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	78fa      	ldrb	r2, [r7, #3]
 80079b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079b8:	bf00      	nop
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08e      	sub	sp, #56	; 0x38
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079ce:	2300      	movs	r3, #0
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10b      	bne.n	80079f4 <xQueueGenericSend+0x34>
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	b672      	cpsid	i
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	b662      	cpsie	i
 80079f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80079f2:	e7fe      	b.n	80079f2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d103      	bne.n	8007a02 <xQueueGenericSend+0x42>
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <xQueueGenericSend+0x46>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e000      	b.n	8007a08 <xQueueGenericSend+0x48>
 8007a06:	2300      	movs	r3, #0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10b      	bne.n	8007a24 <xQueueGenericSend+0x64>
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	b672      	cpsid	i
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	b662      	cpsie	i
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
 8007a22:	e7fe      	b.n	8007a22 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d103      	bne.n	8007a32 <xQueueGenericSend+0x72>
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <xQueueGenericSend+0x76>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e000      	b.n	8007a38 <xQueueGenericSend+0x78>
 8007a36:	2300      	movs	r3, #0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10b      	bne.n	8007a54 <xQueueGenericSend+0x94>
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	b672      	cpsid	i
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	b662      	cpsie	i
 8007a50:	623b      	str	r3, [r7, #32]
 8007a52:	e7fe      	b.n	8007a52 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a54:	f001 fa28 	bl	8008ea8 <xTaskGetSchedulerState>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d102      	bne.n	8007a64 <xQueueGenericSend+0xa4>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <xQueueGenericSend+0xa8>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <xQueueGenericSend+0xaa>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <xQueueGenericSend+0xc6>
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	b672      	cpsid	i
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	b662      	cpsie	i
 8007a82:	61fb      	str	r3, [r7, #28]
 8007a84:	e7fe      	b.n	8007a84 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a86:	f001 ff4f 	bl	8009928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d302      	bcc.n	8007a9c <xQueueGenericSend+0xdc>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d129      	bne.n	8007af0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aa2:	f000 fa0d 	bl	8007ec0 <prvCopyDataToQueue>
 8007aa6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d010      	beq.n	8007ad2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	3324      	adds	r3, #36	; 0x24
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 f831 	bl	8008b1c <xTaskRemoveFromEventList>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d013      	beq.n	8007ae8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ac0:	4b3f      	ldr	r3, [pc, #252]	; (8007bc0 <xQueueGenericSend+0x200>)
 8007ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	e00a      	b.n	8007ae8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ad8:	4b39      	ldr	r3, [pc, #228]	; (8007bc0 <xQueueGenericSend+0x200>)
 8007ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ae8:	f001 ff50 	bl	800998c <vPortExitCritical>
				return pdPASS;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e063      	b.n	8007bb8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d103      	bne.n	8007afe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007af6:	f001 ff49 	bl	800998c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	e05c      	b.n	8007bb8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d106      	bne.n	8007b12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b04:	f107 0314 	add.w	r3, r7, #20
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 f86b 	bl	8008be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b12:	f001 ff3b 	bl	800998c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b16:	f000 fda7 	bl	8008668 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b1a:	f001 ff05 	bl	8009928 <vPortEnterCritical>
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b24:	b25b      	sxtb	r3, r3
 8007b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2a:	d103      	bne.n	8007b34 <xQueueGenericSend+0x174>
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b3a:	b25b      	sxtb	r3, r3
 8007b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b40:	d103      	bne.n	8007b4a <xQueueGenericSend+0x18a>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b4a:	f001 ff1f 	bl	800998c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b4e:	1d3a      	adds	r2, r7, #4
 8007b50:	f107 0314 	add.w	r3, r7, #20
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f001 f85a 	bl	8008c10 <xTaskCheckForTimeOut>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d124      	bne.n	8007bac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b64:	f000 faa4 	bl	80080b0 <prvIsQueueFull>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d018      	beq.n	8007ba0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	3310      	adds	r3, #16
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 ff7e 	bl	8008a78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b7e:	f000 fa2f 	bl	8007fe0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b82:	f000 fd7f 	bl	8008684 <xTaskResumeAll>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f47f af7c 	bne.w	8007a86 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007b8e:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <xQueueGenericSend+0x200>)
 8007b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	e772      	b.n	8007a86 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ba2:	f000 fa1d 	bl	8007fe0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ba6:	f000 fd6d 	bl	8008684 <xTaskResumeAll>
 8007baa:	e76c      	b.n	8007a86 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bae:	f000 fa17 	bl	8007fe0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bb2:	f000 fd67 	bl	8008684 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3738      	adds	r7, #56	; 0x38
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	e000ed04 	.word	0xe000ed04

08007bc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08e      	sub	sp, #56	; 0x38
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
 8007bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10b      	bne.n	8007bf4 <xQueueGenericSendFromISR+0x30>
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	b672      	cpsid	i
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	b662      	cpsie	i
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf2:	e7fe      	b.n	8007bf2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <xQueueGenericSendFromISR+0x3e>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <xQueueGenericSendFromISR+0x42>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <xQueueGenericSendFromISR+0x44>
 8007c06:	2300      	movs	r3, #0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10b      	bne.n	8007c24 <xQueueGenericSendFromISR+0x60>
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	b672      	cpsid	i
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	b662      	cpsie	i
 8007c20:	623b      	str	r3, [r7, #32]
 8007c22:	e7fe      	b.n	8007c22 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d103      	bne.n	8007c32 <xQueueGenericSendFromISR+0x6e>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d101      	bne.n	8007c36 <xQueueGenericSendFromISR+0x72>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e000      	b.n	8007c38 <xQueueGenericSendFromISR+0x74>
 8007c36:	2300      	movs	r3, #0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10b      	bne.n	8007c54 <xQueueGenericSendFromISR+0x90>
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	b672      	cpsid	i
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	b662      	cpsie	i
 8007c50:	61fb      	str	r3, [r7, #28]
 8007c52:	e7fe      	b.n	8007c52 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c54:	f001 ff48 	bl	8009ae8 <vPortValidateInterruptPriority>
	__asm volatile
 8007c58:	f3ef 8211 	mrs	r2, BASEPRI
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	b672      	cpsid	i
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	b662      	cpsie	i
 8007c70:	61ba      	str	r2, [r7, #24]
 8007c72:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d302      	bcc.n	8007c8a <xQueueGenericSendFromISR+0xc6>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d12c      	bne.n	8007ce4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c9a:	f000 f911 	bl	8007ec0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca6:	d112      	bne.n	8007cce <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d016      	beq.n	8007cde <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	3324      	adds	r3, #36	; 0x24
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 ff31 	bl	8008b1c <xTaskRemoveFromEventList>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00e      	beq.n	8007cde <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00b      	beq.n	8007cde <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	e007      	b.n	8007cde <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	b25a      	sxtb	r2, r3
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007ce2:	e001      	b.n	8007ce8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3738      	adds	r7, #56	; 0x38
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08c      	sub	sp, #48	; 0x30
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10b      	bne.n	8007d2e <xQueueReceive+0x32>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	b672      	cpsid	i
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	b662      	cpsie	i
 8007d2a:	623b      	str	r3, [r7, #32]
 8007d2c:	e7fe      	b.n	8007d2c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <xQueueReceive+0x40>
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <xQueueReceive+0x44>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e000      	b.n	8007d42 <xQueueReceive+0x46>
 8007d40:	2300      	movs	r3, #0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10b      	bne.n	8007d5e <xQueueReceive+0x62>
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	b672      	cpsid	i
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	b662      	cpsie	i
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	e7fe      	b.n	8007d5c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d5e:	f001 f8a3 	bl	8008ea8 <xTaskGetSchedulerState>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <xQueueReceive+0x72>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <xQueueReceive+0x76>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e000      	b.n	8007d74 <xQueueReceive+0x78>
 8007d72:	2300      	movs	r3, #0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10b      	bne.n	8007d90 <xQueueReceive+0x94>
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	b672      	cpsid	i
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	b662      	cpsie	i
 8007d8c:	61bb      	str	r3, [r7, #24]
 8007d8e:	e7fe      	b.n	8007d8e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d90:	f001 fdca 	bl	8009928 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01f      	beq.n	8007de0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007da0:	68b9      	ldr	r1, [r7, #8]
 8007da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da4:	f000 f8f6 	bl	8007f94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	1e5a      	subs	r2, r3, #1
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00f      	beq.n	8007dd8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	3310      	adds	r3, #16
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 fead 	bl	8008b1c <xTaskRemoveFromEventList>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007dc8:	4b3c      	ldr	r3, [pc, #240]	; (8007ebc <xQueueReceive+0x1c0>)
 8007dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007dd8:	f001 fdd8 	bl	800998c <vPortExitCritical>
				return pdPASS;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e069      	b.n	8007eb4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d103      	bne.n	8007dee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007de6:	f001 fdd1 	bl	800998c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e062      	b.n	8007eb4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d106      	bne.n	8007e02 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 fef3 	bl	8008be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e02:	f001 fdc3 	bl	800998c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e06:	f000 fc2f 	bl	8008668 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e0a:	f001 fd8d 	bl	8009928 <vPortEnterCritical>
 8007e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e14:	b25b      	sxtb	r3, r3
 8007e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1a:	d103      	bne.n	8007e24 <xQueueReceive+0x128>
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e2a:	b25b      	sxtb	r3, r3
 8007e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e30:	d103      	bne.n	8007e3a <xQueueReceive+0x13e>
 8007e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e3a:	f001 fda7 	bl	800998c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e3e:	1d3a      	adds	r2, r7, #4
 8007e40:	f107 0310 	add.w	r3, r7, #16
 8007e44:	4611      	mov	r1, r2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fee2 	bl	8008c10 <xTaskCheckForTimeOut>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d123      	bne.n	8007e9a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e54:	f000 f916 	bl	8008084 <prvIsQueueEmpty>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d017      	beq.n	8007e8e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	3324      	adds	r3, #36	; 0x24
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 fe06 	bl	8008a78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6e:	f000 f8b7 	bl	8007fe0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e72:	f000 fc07 	bl	8008684 <xTaskResumeAll>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d189      	bne.n	8007d90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007e7c:	4b0f      	ldr	r3, [pc, #60]	; (8007ebc <xQueueReceive+0x1c0>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	e780      	b.n	8007d90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e90:	f000 f8a6 	bl	8007fe0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e94:	f000 fbf6 	bl	8008684 <xTaskResumeAll>
 8007e98:	e77a      	b.n	8007d90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e9c:	f000 f8a0 	bl	8007fe0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ea0:	f000 fbf0 	bl	8008684 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ea6:	f000 f8ed 	bl	8008084 <prvIsQueueEmpty>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f43f af6f 	beq.w	8007d90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007eb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3730      	adds	r7, #48	; 0x30
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	e000ed04 	.word	0xe000ed04

08007ec0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10d      	bne.n	8007efa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d14d      	bne.n	8007f82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fffa 	bl	8008ee4 <xTaskPriorityDisinherit>
 8007ef0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	609a      	str	r2, [r3, #8]
 8007ef8:	e043      	b.n	8007f82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d119      	bne.n	8007f34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6858      	ldr	r0, [r3, #4]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f08:	461a      	mov	r2, r3
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	f002 feaa 	bl	800ac64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	441a      	add	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d32b      	bcc.n	8007f82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	605a      	str	r2, [r3, #4]
 8007f32:	e026      	b.n	8007f82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	68d8      	ldr	r0, [r3, #12]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	f002 fe90 	bl	800ac64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	441a      	add	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d207      	bcs.n	8007f70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f68:	425b      	negs	r3, r3
 8007f6a:	441a      	add	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d105      	bne.n	8007f82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f8a:	697b      	ldr	r3, [r7, #20]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d018      	beq.n	8007fd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68da      	ldr	r2, [r3, #12]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fae:	441a      	add	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d303      	bcc.n	8007fc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68d9      	ldr	r1, [r3, #12]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	6838      	ldr	r0, [r7, #0]
 8007fd4:	f002 fe46 	bl	800ac64 <memcpy>
	}
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fe8:	f001 fc9e 	bl	8009928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ff2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ff4:	e011      	b.n	800801a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d012      	beq.n	8008024 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3324      	adds	r3, #36	; 0x24
 8008002:	4618      	mov	r0, r3
 8008004:	f000 fd8a 	bl	8008b1c <xTaskRemoveFromEventList>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800800e:	f000 fe63 	bl	8008cd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	3b01      	subs	r3, #1
 8008016:	b2db      	uxtb	r3, r3
 8008018:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800801a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801e:	2b00      	cmp	r3, #0
 8008020:	dce9      	bgt.n	8007ff6 <prvUnlockQueue+0x16>
 8008022:	e000      	b.n	8008026 <prvUnlockQueue+0x46>
					break;
 8008024:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	22ff      	movs	r2, #255	; 0xff
 800802a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800802e:	f001 fcad 	bl	800998c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008032:	f001 fc79 	bl	8009928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800803c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800803e:	e011      	b.n	8008064 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d012      	beq.n	800806e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3310      	adds	r3, #16
 800804c:	4618      	mov	r0, r3
 800804e:	f000 fd65 	bl	8008b1c <xTaskRemoveFromEventList>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008058:	f000 fe3e 	bl	8008cd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	3b01      	subs	r3, #1
 8008060:	b2db      	uxtb	r3, r3
 8008062:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008068:	2b00      	cmp	r3, #0
 800806a:	dce9      	bgt.n	8008040 <prvUnlockQueue+0x60>
 800806c:	e000      	b.n	8008070 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800806e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	22ff      	movs	r2, #255	; 0xff
 8008074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008078:	f001 fc88 	bl	800998c <vPortExitCritical>
}
 800807c:	bf00      	nop
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800808c:	f001 fc4c 	bl	8009928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	e001      	b.n	80080a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080a2:	f001 fc73 	bl	800998c <vPortExitCritical>

	return xReturn;
 80080a6:	68fb      	ldr	r3, [r7, #12]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080b8:	f001 fc36 	bl	8009928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d102      	bne.n	80080ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080c8:	2301      	movs	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	e001      	b.n	80080d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080d2:	f001 fc5b 	bl	800998c <vPortExitCritical>

	return xReturn;
 80080d6:	68fb      	ldr	r3, [r7, #12]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	e014      	b.n	800811a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080f0:	4a0e      	ldr	r2, [pc, #56]	; (800812c <vQueueAddToRegistry+0x4c>)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10b      	bne.n	8008114 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080fc:	490b      	ldr	r1, [pc, #44]	; (800812c <vQueueAddToRegistry+0x4c>)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008106:	4a09      	ldr	r2, [pc, #36]	; (800812c <vQueueAddToRegistry+0x4c>)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	4413      	add	r3, r2
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008112:	e005      	b.n	8008120 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3301      	adds	r3, #1
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b07      	cmp	r3, #7
 800811e:	d9e7      	bls.n	80080f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	20001418 	.word	0x20001418

08008130 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008140:	f001 fbf2 	bl	8009928 <vPortEnterCritical>
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800814a:	b25b      	sxtb	r3, r3
 800814c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008150:	d103      	bne.n	800815a <vQueueWaitForMessageRestricted+0x2a>
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008160:	b25b      	sxtb	r3, r3
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008166:	d103      	bne.n	8008170 <vQueueWaitForMessageRestricted+0x40>
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008170:	f001 fc0c 	bl	800998c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	2b00      	cmp	r3, #0
 800817a:	d106      	bne.n	800818a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	3324      	adds	r3, #36	; 0x24
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	4618      	mov	r0, r3
 8008186:	f000 fc9d 	bl	8008ac4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800818a:	6978      	ldr	r0, [r7, #20]
 800818c:	f7ff ff28 	bl	8007fe0 <prvUnlockQueue>
	}
 8008190:	bf00      	nop
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08e      	sub	sp, #56	; 0x38
 800819c:	af04      	add	r7, sp, #16
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
 80081a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <xTaskCreateStatic+0x2c>
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	b672      	cpsid	i
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	b662      	cpsie	i
 80081c0:	623b      	str	r3, [r7, #32]
 80081c2:	e7fe      	b.n	80081c2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10b      	bne.n	80081e2 <xTaskCreateStatic+0x4a>
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	b672      	cpsid	i
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	b662      	cpsie	i
 80081de:	61fb      	str	r3, [r7, #28]
 80081e0:	e7fe      	b.n	80081e0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081e2:	23c0      	movs	r3, #192	; 0xc0
 80081e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2bc0      	cmp	r3, #192	; 0xc0
 80081ea:	d00b      	beq.n	8008204 <xTaskCreateStatic+0x6c>
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	b672      	cpsid	i
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	b662      	cpsie	i
 8008200:	61bb      	str	r3, [r7, #24]
 8008202:	e7fe      	b.n	8008202 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008204:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01e      	beq.n	800824a <xTaskCreateStatic+0xb2>
 800820c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820e:	2b00      	cmp	r3, #0
 8008210:	d01b      	beq.n	800824a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800821a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	2202      	movs	r2, #2
 8008220:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008224:	2300      	movs	r3, #0
 8008226:	9303      	str	r3, [sp, #12]
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	9302      	str	r3, [sp, #8]
 800822c:	f107 0314 	add.w	r3, r7, #20
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 f851 	bl	80082e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008242:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008244:	f000 f8f8 	bl	8008438 <prvAddNewTaskToReadyList>
 8008248:	e001      	b.n	800824e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800824e:	697b      	ldr	r3, [r7, #20]
	}
 8008250:	4618      	mov	r0, r3
 8008252:	3728      	adds	r7, #40	; 0x28
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08c      	sub	sp, #48	; 0x30
 800825c:	af04      	add	r7, sp, #16
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	603b      	str	r3, [r7, #0]
 8008264:	4613      	mov	r3, r2
 8008266:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008268:	88fb      	ldrh	r3, [r7, #6]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4618      	mov	r0, r3
 800826e:	f7f9 f997 	bl	80015a0 <pvPortMalloc>
 8008272:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800827a:	20c0      	movs	r0, #192	; 0xc0
 800827c:	f7f9 f990 	bl	80015a0 <pvPortMalloc>
 8008280:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	631a      	str	r2, [r3, #48]	; 0x30
 800828e:	e005      	b.n	800829c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008290:	6978      	ldr	r0, [r7, #20]
 8008292:	f7f9 f993 	bl	80015bc <vPortFree>
 8008296:	e001      	b.n	800829c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008298:	2300      	movs	r3, #0
 800829a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d017      	beq.n	80082d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	2300      	movs	r3, #0
 80082ae:	9303      	str	r3, [sp, #12]
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	9302      	str	r3, [sp, #8]
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	68b9      	ldr	r1, [r7, #8]
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 f80f 	bl	80082e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082c6:	69f8      	ldr	r0, [r7, #28]
 80082c8:	f000 f8b6 	bl	8008438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082cc:	2301      	movs	r3, #1
 80082ce:	61bb      	str	r3, [r7, #24]
 80082d0:	e002      	b.n	80082d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082d2:	f04f 33ff 	mov.w	r3, #4294967295
 80082d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082d8:	69bb      	ldr	r3, [r7, #24]
	}
 80082da:	4618      	mov	r0, r3
 80082dc:	3720      	adds	r7, #32
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	461a      	mov	r2, r3
 80082fc:	21a5      	movs	r1, #165	; 0xa5
 80082fe:	f002 fcd5 	bl	800acac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800830c:	440b      	add	r3, r1
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	f023 0307 	bic.w	r3, r3, #7
 800831a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00b      	beq.n	800833e <prvInitialiseNewTask+0x5a>
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	b672      	cpsid	i
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	b662      	cpsie	i
 800833a:	617b      	str	r3, [r7, #20]
 800833c:	e7fe      	b.n	800833c <prvInitialiseNewTask+0x58>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d01f      	beq.n	800838a <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	e012      	b.n	8008376 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	4413      	add	r3, r2
 8008356:	7819      	ldrb	r1, [r3, #0]
 8008358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	3334      	adds	r3, #52	; 0x34
 8008360:	460a      	mov	r2, r1
 8008362:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d006      	beq.n	800837e <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	3301      	adds	r3, #1
 8008374:	61fb      	str	r3, [r7, #28]
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	2b0f      	cmp	r3, #15
 800837a:	d9e9      	bls.n	8008350 <prvInitialiseNewTask+0x6c>
 800837c:	e000      	b.n	8008380 <prvInitialiseNewTask+0x9c>
			{
				break;
 800837e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	2200      	movs	r2, #0
 8008384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008388:	e003      	b.n	8008392 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008394:	2b37      	cmp	r3, #55	; 0x37
 8008396:	d901      	bls.n	800839c <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008398:	2337      	movs	r3, #55	; 0x37
 800839a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80083a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083aa:	2200      	movs	r2, #0
 80083ac:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b0:	3304      	adds	r3, #4
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7ff f966 	bl	8007684 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	3318      	adds	r3, #24
 80083bc:	4618      	mov	r0, r3
 80083be:	f7ff f961 	bl	8007684 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	3358      	adds	r3, #88	; 0x58
 80083ec:	2260      	movs	r2, #96	; 0x60
 80083ee:	2100      	movs	r1, #0
 80083f0:	4618      	mov	r0, r3
 80083f2:	f002 fc5b 	bl	800acac <memset>
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	4a0c      	ldr	r2, [pc, #48]	; (800842c <prvInitialiseNewTask+0x148>)
 80083fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	4a0c      	ldr	r2, [pc, #48]	; (8008430 <prvInitialiseNewTask+0x14c>)
 8008400:	661a      	str	r2, [r3, #96]	; 0x60
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	4a0b      	ldr	r2, [pc, #44]	; (8008434 <prvInitialiseNewTask+0x150>)
 8008406:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	68f9      	ldr	r1, [r7, #12]
 800840c:	69b8      	ldr	r0, [r7, #24]
 800840e:	f001 f981 	bl	8009714 <pxPortInitialiseStack>
 8008412:	4602      	mov	r2, r0
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008422:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008424:	bf00      	nop
 8008426:	3720      	adds	r7, #32
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	0800ba18 	.word	0x0800ba18
 8008430:	0800ba38 	.word	0x0800ba38
 8008434:	0800b9f8 	.word	0x0800b9f8

08008438 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008440:	f001 fa72 	bl	8009928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008444:	4b2d      	ldr	r3, [pc, #180]	; (80084fc <prvAddNewTaskToReadyList+0xc4>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3301      	adds	r3, #1
 800844a:	4a2c      	ldr	r2, [pc, #176]	; (80084fc <prvAddNewTaskToReadyList+0xc4>)
 800844c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800844e:	4b2c      	ldr	r3, [pc, #176]	; (8008500 <prvAddNewTaskToReadyList+0xc8>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d109      	bne.n	800846a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008456:	4a2a      	ldr	r2, [pc, #168]	; (8008500 <prvAddNewTaskToReadyList+0xc8>)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800845c:	4b27      	ldr	r3, [pc, #156]	; (80084fc <prvAddNewTaskToReadyList+0xc4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d110      	bne.n	8008486 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008464:	f000 fc5e 	bl	8008d24 <prvInitialiseTaskLists>
 8008468:	e00d      	b.n	8008486 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800846a:	4b26      	ldr	r3, [pc, #152]	; (8008504 <prvAddNewTaskToReadyList+0xcc>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d109      	bne.n	8008486 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008472:	4b23      	ldr	r3, [pc, #140]	; (8008500 <prvAddNewTaskToReadyList+0xc8>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	429a      	cmp	r2, r3
 800847e:	d802      	bhi.n	8008486 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008480:	4a1f      	ldr	r2, [pc, #124]	; (8008500 <prvAddNewTaskToReadyList+0xc8>)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008486:	4b20      	ldr	r3, [pc, #128]	; (8008508 <prvAddNewTaskToReadyList+0xd0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3301      	adds	r3, #1
 800848c:	4a1e      	ldr	r2, [pc, #120]	; (8008508 <prvAddNewTaskToReadyList+0xd0>)
 800848e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008490:	4b1d      	ldr	r3, [pc, #116]	; (8008508 <prvAddNewTaskToReadyList+0xd0>)
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800849c:	4b1b      	ldr	r3, [pc, #108]	; (800850c <prvAddNewTaskToReadyList+0xd4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d903      	bls.n	80084ac <prvAddNewTaskToReadyList+0x74>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	4a18      	ldr	r2, [pc, #96]	; (800850c <prvAddNewTaskToReadyList+0xd4>)
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b0:	4613      	mov	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4a15      	ldr	r2, [pc, #84]	; (8008510 <prvAddNewTaskToReadyList+0xd8>)
 80084ba:	441a      	add	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3304      	adds	r3, #4
 80084c0:	4619      	mov	r1, r3
 80084c2:	4610      	mov	r0, r2
 80084c4:	f7ff f8eb 	bl	800769e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084c8:	f001 fa60 	bl	800998c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084cc:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <prvAddNewTaskToReadyList+0xcc>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00e      	beq.n	80084f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <prvAddNewTaskToReadyList+0xc8>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084de:	429a      	cmp	r2, r3
 80084e0:	d207      	bcs.n	80084f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084e2:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <prvAddNewTaskToReadyList+0xdc>)
 80084e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000d38 	.word	0x20000d38
 8008500:	20000864 	.word	0x20000864
 8008504:	20000d44 	.word	0x20000d44
 8008508:	20000d54 	.word	0x20000d54
 800850c:	20000d40 	.word	0x20000d40
 8008510:	20000868 	.word	0x20000868
 8008514:	e000ed04 	.word	0xe000ed04

08008518 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008520:	2300      	movs	r3, #0
 8008522:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d018      	beq.n	800855c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800852a:	4b14      	ldr	r3, [pc, #80]	; (800857c <vTaskDelay+0x64>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00b      	beq.n	800854a <vTaskDelay+0x32>
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	b672      	cpsid	i
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	b662      	cpsie	i
 8008546:	60bb      	str	r3, [r7, #8]
 8008548:	e7fe      	b.n	8008548 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800854a:	f000 f88d 	bl	8008668 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800854e:	2100      	movs	r1, #0
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fd37 	bl	8008fc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008556:	f000 f895 	bl	8008684 <xTaskResumeAll>
 800855a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d107      	bne.n	8008572 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008562:	4b07      	ldr	r3, [pc, #28]	; (8008580 <vTaskDelay+0x68>)
 8008564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20000d60 	.word	0x20000d60
 8008580:	e000ed04 	.word	0xe000ed04

08008584 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08a      	sub	sp, #40	; 0x28
 8008588:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800858a:	2300      	movs	r3, #0
 800858c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008592:	463a      	mov	r2, r7
 8008594:	1d39      	adds	r1, r7, #4
 8008596:	f107 0308 	add.w	r3, r7, #8
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff f81e 	bl	80075dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	9202      	str	r2, [sp, #8]
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	2300      	movs	r3, #0
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	2300      	movs	r3, #0
 80085b0:	460a      	mov	r2, r1
 80085b2:	4925      	ldr	r1, [pc, #148]	; (8008648 <vTaskStartScheduler+0xc4>)
 80085b4:	4825      	ldr	r0, [pc, #148]	; (800864c <vTaskStartScheduler+0xc8>)
 80085b6:	f7ff fdef 	bl	8008198 <xTaskCreateStatic>
 80085ba:	4602      	mov	r2, r0
 80085bc:	4b24      	ldr	r3, [pc, #144]	; (8008650 <vTaskStartScheduler+0xcc>)
 80085be:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085c0:	4b23      	ldr	r3, [pc, #140]	; (8008650 <vTaskStartScheduler+0xcc>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085c8:	2301      	movs	r3, #1
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	e001      	b.n	80085d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085ce:	2300      	movs	r3, #0
 80085d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d102      	bne.n	80085de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085d8:	f000 fd48 	bl	800906c <xTimerCreateTimerTask>
 80085dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d11c      	bne.n	800861e <vTaskStartScheduler+0x9a>
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	b672      	cpsid	i
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	b662      	cpsie	i
 80085f8:	613b      	str	r3, [r7, #16]

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085fa:	4b16      	ldr	r3, [pc, #88]	; (8008654 <vTaskStartScheduler+0xd0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3358      	adds	r3, #88	; 0x58
 8008600:	4a15      	ldr	r2, [pc, #84]	; (8008658 <vTaskStartScheduler+0xd4>)
 8008602:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008604:	4b15      	ldr	r3, [pc, #84]	; (800865c <vTaskStartScheduler+0xd8>)
 8008606:	f04f 32ff 	mov.w	r2, #4294967295
 800860a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800860c:	4b14      	ldr	r3, [pc, #80]	; (8008660 <vTaskStartScheduler+0xdc>)
 800860e:	2201      	movs	r2, #1
 8008610:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008612:	4b14      	ldr	r3, [pc, #80]	; (8008664 <vTaskStartScheduler+0xe0>)
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008618:	f001 f90a 	bl	8009830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800861c:	e00f      	b.n	800863e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d10b      	bne.n	800863e <vTaskStartScheduler+0xba>
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	b672      	cpsid	i
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	b662      	cpsie	i
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	e7fe      	b.n	800863c <vTaskStartScheduler+0xb8>
}
 800863e:	bf00      	nop
 8008640:	3718      	adds	r7, #24
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	0800b6c8 	.word	0x0800b6c8
 800864c:	08008cf1 	.word	0x08008cf1
 8008650:	20000d5c 	.word	0x20000d5c
 8008654:	20000864 	.word	0x20000864
 8008658:	2000001c 	.word	0x2000001c
 800865c:	20000d58 	.word	0x20000d58
 8008660:	20000d44 	.word	0x20000d44
 8008664:	20000d3c 	.word	0x20000d3c

08008668 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800866c:	4b04      	ldr	r3, [pc, #16]	; (8008680 <vTaskSuspendAll+0x18>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3301      	adds	r3, #1
 8008672:	4a03      	ldr	r2, [pc, #12]	; (8008680 <vTaskSuspendAll+0x18>)
 8008674:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008676:	bf00      	nop
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	20000d60 	.word	0x20000d60

08008684 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800868e:	2300      	movs	r3, #0
 8008690:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008692:	4b42      	ldr	r3, [pc, #264]	; (800879c <xTaskResumeAll+0x118>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10b      	bne.n	80086b2 <xTaskResumeAll+0x2e>
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	b672      	cpsid	i
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	b662      	cpsie	i
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	e7fe      	b.n	80086b0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086b2:	f001 f939 	bl	8009928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086b6:	4b39      	ldr	r3, [pc, #228]	; (800879c <xTaskResumeAll+0x118>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	4a37      	ldr	r2, [pc, #220]	; (800879c <xTaskResumeAll+0x118>)
 80086be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086c0:	4b36      	ldr	r3, [pc, #216]	; (800879c <xTaskResumeAll+0x118>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d162      	bne.n	800878e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086c8:	4b35      	ldr	r3, [pc, #212]	; (80087a0 <xTaskResumeAll+0x11c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d05e      	beq.n	800878e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086d0:	e02f      	b.n	8008732 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d2:	4b34      	ldr	r3, [pc, #208]	; (80087a4 <xTaskResumeAll+0x120>)
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3318      	adds	r3, #24
 80086de:	4618      	mov	r0, r3
 80086e0:	f7ff f83a 	bl	8007758 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3304      	adds	r3, #4
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7ff f835 	bl	8007758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f2:	4b2d      	ldr	r3, [pc, #180]	; (80087a8 <xTaskResumeAll+0x124>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d903      	bls.n	8008702 <xTaskResumeAll+0x7e>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fe:	4a2a      	ldr	r2, [pc, #168]	; (80087a8 <xTaskResumeAll+0x124>)
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4a27      	ldr	r2, [pc, #156]	; (80087ac <xTaskResumeAll+0x128>)
 8008710:	441a      	add	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3304      	adds	r3, #4
 8008716:	4619      	mov	r1, r3
 8008718:	4610      	mov	r0, r2
 800871a:	f7fe ffc0 	bl	800769e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008722:	4b23      	ldr	r3, [pc, #140]	; (80087b0 <xTaskResumeAll+0x12c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	429a      	cmp	r2, r3
 800872a:	d302      	bcc.n	8008732 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800872c:	4b21      	ldr	r3, [pc, #132]	; (80087b4 <xTaskResumeAll+0x130>)
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008732:	4b1c      	ldr	r3, [pc, #112]	; (80087a4 <xTaskResumeAll+0x120>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1cb      	bne.n	80086d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008740:	f000 fb92 	bl	8008e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008744:	4b1c      	ldr	r3, [pc, #112]	; (80087b8 <xTaskResumeAll+0x134>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d010      	beq.n	8008772 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008750:	f000 f846 	bl	80087e0 <xTaskIncrementTick>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800875a:	4b16      	ldr	r3, [pc, #88]	; (80087b4 <xTaskResumeAll+0x130>)
 800875c:	2201      	movs	r2, #1
 800875e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3b01      	subs	r3, #1
 8008764:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1f1      	bne.n	8008750 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800876c:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <xTaskResumeAll+0x134>)
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008772:	4b10      	ldr	r3, [pc, #64]	; (80087b4 <xTaskResumeAll+0x130>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d009      	beq.n	800878e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800877a:	2301      	movs	r3, #1
 800877c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800877e:	4b0f      	ldr	r3, [pc, #60]	; (80087bc <xTaskResumeAll+0x138>)
 8008780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800878e:	f001 f8fd 	bl	800998c <vPortExitCritical>

	return xAlreadyYielded;
 8008792:	68bb      	ldr	r3, [r7, #8]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	20000d60 	.word	0x20000d60
 80087a0:	20000d38 	.word	0x20000d38
 80087a4:	20000cf8 	.word	0x20000cf8
 80087a8:	20000d40 	.word	0x20000d40
 80087ac:	20000868 	.word	0x20000868
 80087b0:	20000864 	.word	0x20000864
 80087b4:	20000d4c 	.word	0x20000d4c
 80087b8:	20000d48 	.word	0x20000d48
 80087bc:	e000ed04 	.word	0xe000ed04

080087c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087c6:	4b05      	ldr	r3, [pc, #20]	; (80087dc <xTaskGetTickCount+0x1c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087cc:	687b      	ldr	r3, [r7, #4]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000d3c 	.word	0x20000d3c

080087e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087e6:	2300      	movs	r3, #0
 80087e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ea:	4b53      	ldr	r3, [pc, #332]	; (8008938 <xTaskIncrementTick+0x158>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f040 8090 	bne.w	8008914 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087f4:	4b51      	ldr	r3, [pc, #324]	; (800893c <xTaskIncrementTick+0x15c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3301      	adds	r3, #1
 80087fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087fc:	4a4f      	ldr	r2, [pc, #316]	; (800893c <xTaskIncrementTick+0x15c>)
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d121      	bne.n	800884c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008808:	4b4d      	ldr	r3, [pc, #308]	; (8008940 <xTaskIncrementTick+0x160>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00b      	beq.n	800882a <xTaskIncrementTick+0x4a>
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	b672      	cpsid	i
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	b662      	cpsie	i
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	e7fe      	b.n	8008828 <xTaskIncrementTick+0x48>
 800882a:	4b45      	ldr	r3, [pc, #276]	; (8008940 <xTaskIncrementTick+0x160>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	4b44      	ldr	r3, [pc, #272]	; (8008944 <xTaskIncrementTick+0x164>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a42      	ldr	r2, [pc, #264]	; (8008940 <xTaskIncrementTick+0x160>)
 8008836:	6013      	str	r3, [r2, #0]
 8008838:	4a42      	ldr	r2, [pc, #264]	; (8008944 <xTaskIncrementTick+0x164>)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	4b42      	ldr	r3, [pc, #264]	; (8008948 <xTaskIncrementTick+0x168>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3301      	adds	r3, #1
 8008844:	4a40      	ldr	r2, [pc, #256]	; (8008948 <xTaskIncrementTick+0x168>)
 8008846:	6013      	str	r3, [r2, #0]
 8008848:	f000 fb0e 	bl	8008e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800884c:	4b3f      	ldr	r3, [pc, #252]	; (800894c <xTaskIncrementTick+0x16c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	429a      	cmp	r2, r3
 8008854:	d349      	bcc.n	80088ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008856:	4b3a      	ldr	r3, [pc, #232]	; (8008940 <xTaskIncrementTick+0x160>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008860:	4b3a      	ldr	r3, [pc, #232]	; (800894c <xTaskIncrementTick+0x16c>)
 8008862:	f04f 32ff 	mov.w	r2, #4294967295
 8008866:	601a      	str	r2, [r3, #0]
					break;
 8008868:	e03f      	b.n	80088ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800886a:	4b35      	ldr	r3, [pc, #212]	; (8008940 <xTaskIncrementTick+0x160>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800887a:	693a      	ldr	r2, [r7, #16]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	429a      	cmp	r2, r3
 8008880:	d203      	bcs.n	800888a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008882:	4a32      	ldr	r2, [pc, #200]	; (800894c <xTaskIncrementTick+0x16c>)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008888:	e02f      	b.n	80088ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	3304      	adds	r3, #4
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe ff62 	bl	8007758 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	2b00      	cmp	r3, #0
 800889a:	d004      	beq.n	80088a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	3318      	adds	r3, #24
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fe ff59 	bl	8007758 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088aa:	4b29      	ldr	r3, [pc, #164]	; (8008950 <xTaskIncrementTick+0x170>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d903      	bls.n	80088ba <xTaskIncrementTick+0xda>
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b6:	4a26      	ldr	r2, [pc, #152]	; (8008950 <xTaskIncrementTick+0x170>)
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4a23      	ldr	r2, [pc, #140]	; (8008954 <xTaskIncrementTick+0x174>)
 80088c8:	441a      	add	r2, r3
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	3304      	adds	r3, #4
 80088ce:	4619      	mov	r1, r3
 80088d0:	4610      	mov	r0, r2
 80088d2:	f7fe fee4 	bl	800769e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088da:	4b1f      	ldr	r3, [pc, #124]	; (8008958 <xTaskIncrementTick+0x178>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d3b8      	bcc.n	8008856 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80088e4:	2301      	movs	r3, #1
 80088e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088e8:	e7b5      	b.n	8008856 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088ea:	4b1b      	ldr	r3, [pc, #108]	; (8008958 <xTaskIncrementTick+0x178>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f0:	4918      	ldr	r1, [pc, #96]	; (8008954 <xTaskIncrementTick+0x174>)
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	440b      	add	r3, r1
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d901      	bls.n	8008906 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008902:	2301      	movs	r3, #1
 8008904:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8008906:	4b15      	ldr	r3, [pc, #84]	; (800895c <xTaskIncrementTick+0x17c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d109      	bne.n	8008922 <xTaskIncrementTick+0x142>
			{
				vApplicationTickHook();
 800890e:	f7fa fa64 	bl	8002dda <vApplicationTickHook>
 8008912:	e006      	b.n	8008922 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008914:	4b11      	ldr	r3, [pc, #68]	; (800895c <xTaskIncrementTick+0x17c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3301      	adds	r3, #1
 800891a:	4a10      	ldr	r2, [pc, #64]	; (800895c <xTaskIncrementTick+0x17c>)
 800891c:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800891e:	f7fa fa5c 	bl	8002dda <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008922:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <xTaskIncrementTick+0x180>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 800892a:	2301      	movs	r3, #1
 800892c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800892e:	697b      	ldr	r3, [r7, #20]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	20000d60 	.word	0x20000d60
 800893c:	20000d3c 	.word	0x20000d3c
 8008940:	20000cf0 	.word	0x20000cf0
 8008944:	20000cf4 	.word	0x20000cf4
 8008948:	20000d50 	.word	0x20000d50
 800894c:	20000d58 	.word	0x20000d58
 8008950:	20000d40 	.word	0x20000d40
 8008954:	20000868 	.word	0x20000868
 8008958:	20000864 	.word	0x20000864
 800895c:	20000d48 	.word	0x20000d48
 8008960:	20000d4c 	.word	0x20000d4c

08008964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800896a:	4b3d      	ldr	r3, [pc, #244]	; (8008a60 <vTaskSwitchContext+0xfc>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008972:	4b3c      	ldr	r3, [pc, #240]	; (8008a64 <vTaskSwitchContext+0x100>)
 8008974:	2201      	movs	r2, #1
 8008976:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008978:	e06e      	b.n	8008a58 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800897a:	4b3a      	ldr	r3, [pc, #232]	; (8008a64 <vTaskSwitchContext+0x100>)
 800897c:	2200      	movs	r2, #0
 800897e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008980:	4b39      	ldr	r3, [pc, #228]	; (8008a68 <vTaskSwitchContext+0x104>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008986:	613b      	str	r3, [r7, #16]
 8008988:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800898c:	60fb      	str	r3, [r7, #12]
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	429a      	cmp	r2, r3
 8008996:	d111      	bne.n	80089bc <vTaskSwitchContext+0x58>
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	3304      	adds	r3, #4
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d10b      	bne.n	80089bc <vTaskSwitchContext+0x58>
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	3308      	adds	r3, #8
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d105      	bne.n	80089bc <vTaskSwitchContext+0x58>
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	330c      	adds	r3, #12
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d008      	beq.n	80089ce <vTaskSwitchContext+0x6a>
 80089bc:	4b2a      	ldr	r3, [pc, #168]	; (8008a68 <vTaskSwitchContext+0x104>)
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	4b29      	ldr	r3, [pc, #164]	; (8008a68 <vTaskSwitchContext+0x104>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3334      	adds	r3, #52	; 0x34
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f7fa fa0d 	bl	8002de8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ce:	4b27      	ldr	r3, [pc, #156]	; (8008a6c <vTaskSwitchContext+0x108>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	e011      	b.n	80089fa <vTaskSwitchContext+0x96>
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10b      	bne.n	80089f4 <vTaskSwitchContext+0x90>
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	b672      	cpsid	i
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	b662      	cpsie	i
 80089f0:	607b      	str	r3, [r7, #4]
 80089f2:	e7fe      	b.n	80089f2 <vTaskSwitchContext+0x8e>
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	617b      	str	r3, [r7, #20]
 80089fa:	491d      	ldr	r1, [pc, #116]	; (8008a70 <vTaskSwitchContext+0x10c>)
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	4613      	mov	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	440b      	add	r3, r1
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0e3      	beq.n	80089d6 <vTaskSwitchContext+0x72>
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4a15      	ldr	r2, [pc, #84]	; (8008a70 <vTaskSwitchContext+0x10c>)
 8008a1a:	4413      	add	r3, r2
 8008a1c:	60bb      	str	r3, [r7, #8]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	605a      	str	r2, [r3, #4]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	3308      	adds	r3, #8
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d104      	bne.n	8008a3e <vTaskSwitchContext+0xda>
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	605a      	str	r2, [r3, #4]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	4a08      	ldr	r2, [pc, #32]	; (8008a68 <vTaskSwitchContext+0x104>)
 8008a46:	6013      	str	r3, [r2, #0]
 8008a48:	4a08      	ldr	r2, [pc, #32]	; (8008a6c <vTaskSwitchContext+0x108>)
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a4e:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <vTaskSwitchContext+0x104>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3358      	adds	r3, #88	; 0x58
 8008a54:	4a07      	ldr	r2, [pc, #28]	; (8008a74 <vTaskSwitchContext+0x110>)
 8008a56:	6013      	str	r3, [r2, #0]
}
 8008a58:	bf00      	nop
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	20000d60 	.word	0x20000d60
 8008a64:	20000d4c 	.word	0x20000d4c
 8008a68:	20000864 	.word	0x20000864
 8008a6c:	20000d40 	.word	0x20000d40
 8008a70:	20000868 	.word	0x20000868
 8008a74:	2000001c 	.word	0x2000001c

08008a78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <vTaskPlaceOnEventList+0x28>
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	b672      	cpsid	i
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	b662      	cpsie	i
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e7fe      	b.n	8008a9e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008aa0:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <vTaskPlaceOnEventList+0x48>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3318      	adds	r3, #24
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7fe fe1c 	bl	80076e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008aae:	2101      	movs	r1, #1
 8008ab0:	6838      	ldr	r0, [r7, #0]
 8008ab2:	f000 fa87 	bl	8008fc4 <prvAddCurrentTaskToDelayedList>
}
 8008ab6:	bf00      	nop
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000864 	.word	0x20000864

08008ac4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d10b      	bne.n	8008aee <vTaskPlaceOnEventListRestricted+0x2a>
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	b672      	cpsid	i
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	b662      	cpsie	i
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	e7fe      	b.n	8008aec <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008aee:	4b0a      	ldr	r3, [pc, #40]	; (8008b18 <vTaskPlaceOnEventListRestricted+0x54>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3318      	adds	r3, #24
 8008af4:	4619      	mov	r1, r3
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f7fe fdd1 	bl	800769e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d002      	beq.n	8008b08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008b02:	f04f 33ff 	mov.w	r3, #4294967295
 8008b06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	68b8      	ldr	r0, [r7, #8]
 8008b0c:	f000 fa5a 	bl	8008fc4 <prvAddCurrentTaskToDelayedList>
	}
 8008b10:	bf00      	nop
 8008b12:	3718      	adds	r7, #24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20000864 	.word	0x20000864

08008b1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10b      	bne.n	8008b4a <xTaskRemoveFromEventList+0x2e>
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	b672      	cpsid	i
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	b662      	cpsie	i
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	e7fe      	b.n	8008b48 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	3318      	adds	r3, #24
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fe fe02 	bl	8007758 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b54:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <xTaskRemoveFromEventList+0xb0>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d11d      	bne.n	8008b98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fe fdf9 	bl	8007758 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6a:	4b19      	ldr	r3, [pc, #100]	; (8008bd0 <xTaskRemoveFromEventList+0xb4>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d903      	bls.n	8008b7a <xTaskRemoveFromEventList+0x5e>
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	4a16      	ldr	r2, [pc, #88]	; (8008bd0 <xTaskRemoveFromEventList+0xb4>)
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4a13      	ldr	r2, [pc, #76]	; (8008bd4 <xTaskRemoveFromEventList+0xb8>)
 8008b88:	441a      	add	r2, r3
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4610      	mov	r0, r2
 8008b92:	f7fe fd84 	bl	800769e <vListInsertEnd>
 8008b96:	e005      	b.n	8008ba4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	3318      	adds	r3, #24
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	480e      	ldr	r0, [pc, #56]	; (8008bd8 <xTaskRemoveFromEventList+0xbc>)
 8008ba0:	f7fe fd7d 	bl	800769e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba8:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <xTaskRemoveFromEventList+0xc0>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d905      	bls.n	8008bbe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008bb6:	4b0a      	ldr	r3, [pc, #40]	; (8008be0 <xTaskRemoveFromEventList+0xc4>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	e001      	b.n	8008bc2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008bc2:	697b      	ldr	r3, [r7, #20]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20000d60 	.word	0x20000d60
 8008bd0:	20000d40 	.word	0x20000d40
 8008bd4:	20000868 	.word	0x20000868
 8008bd8:	20000cf8 	.word	0x20000cf8
 8008bdc:	20000864 	.word	0x20000864
 8008be0:	20000d4c 	.word	0x20000d4c

08008be4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bec:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <vTaskInternalSetTimeOutState+0x24>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bf4:	4b05      	ldr	r3, [pc, #20]	; (8008c0c <vTaskInternalSetTimeOutState+0x28>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	605a      	str	r2, [r3, #4]
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	20000d50 	.word	0x20000d50
 8008c0c:	20000d3c 	.word	0x20000d3c

08008c10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10b      	bne.n	8008c38 <xTaskCheckForTimeOut+0x28>
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	b672      	cpsid	i
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	b662      	cpsie	i
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	e7fe      	b.n	8008c36 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10b      	bne.n	8008c56 <xTaskCheckForTimeOut+0x46>
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	b672      	cpsid	i
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	b662      	cpsie	i
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	e7fe      	b.n	8008c54 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8008c56:	f000 fe67 	bl	8009928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008c5a:	4b1d      	ldr	r3, [pc, #116]	; (8008cd0 <xTaskCheckForTimeOut+0xc0>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c72:	d102      	bne.n	8008c7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008c74:	2300      	movs	r3, #0
 8008c76:	61fb      	str	r3, [r7, #28]
 8008c78:	e023      	b.n	8008cc2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	4b15      	ldr	r3, [pc, #84]	; (8008cd4 <xTaskCheckForTimeOut+0xc4>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d007      	beq.n	8008c96 <xTaskCheckForTimeOut+0x86>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d302      	bcc.n	8008c96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c90:	2301      	movs	r3, #1
 8008c92:	61fb      	str	r3, [r7, #28]
 8008c94:	e015      	b.n	8008cc2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d20b      	bcs.n	8008cb8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	1ad2      	subs	r2, r2, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff ff99 	bl	8008be4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	61fb      	str	r3, [r7, #28]
 8008cb6:	e004      	b.n	8008cc2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008cc2:	f000 fe63 	bl	800998c <vPortExitCritical>

	return xReturn;
 8008cc6:	69fb      	ldr	r3, [r7, #28]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3720      	adds	r7, #32
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20000d3c 	.word	0x20000d3c
 8008cd4:	20000d50 	.word	0x20000d50

08008cd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008cdc:	4b03      	ldr	r3, [pc, #12]	; (8008cec <vTaskMissedYield+0x14>)
 8008cde:	2201      	movs	r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]
}
 8008ce2:	bf00      	nop
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr
 8008cec:	20000d4c 	.word	0x20000d4c

08008cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008cf8:	f000 f854 	bl	8008da4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008cfc:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <prvIdleTask+0x2c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d907      	bls.n	8008d14 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008d04:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <prvIdleTask+0x30>)
 8008d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008d14:	f7fa f85a 	bl	8002dcc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008d18:	e7ee      	b.n	8008cf8 <prvIdleTask+0x8>
 8008d1a:	bf00      	nop
 8008d1c:	20000868 	.word	0x20000868
 8008d20:	e000ed04 	.word	0xe000ed04

08008d24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	607b      	str	r3, [r7, #4]
 8008d2e:	e00c      	b.n	8008d4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	4613      	mov	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4a12      	ldr	r2, [pc, #72]	; (8008d84 <prvInitialiseTaskLists+0x60>)
 8008d3c:	4413      	add	r3, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fc80 	bl	8007644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3301      	adds	r3, #1
 8008d48:	607b      	str	r3, [r7, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2b37      	cmp	r3, #55	; 0x37
 8008d4e:	d9ef      	bls.n	8008d30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008d50:	480d      	ldr	r0, [pc, #52]	; (8008d88 <prvInitialiseTaskLists+0x64>)
 8008d52:	f7fe fc77 	bl	8007644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d56:	480d      	ldr	r0, [pc, #52]	; (8008d8c <prvInitialiseTaskLists+0x68>)
 8008d58:	f7fe fc74 	bl	8007644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d5c:	480c      	ldr	r0, [pc, #48]	; (8008d90 <prvInitialiseTaskLists+0x6c>)
 8008d5e:	f7fe fc71 	bl	8007644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008d62:	480c      	ldr	r0, [pc, #48]	; (8008d94 <prvInitialiseTaskLists+0x70>)
 8008d64:	f7fe fc6e 	bl	8007644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008d68:	480b      	ldr	r0, [pc, #44]	; (8008d98 <prvInitialiseTaskLists+0x74>)
 8008d6a:	f7fe fc6b 	bl	8007644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d6e:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <prvInitialiseTaskLists+0x78>)
 8008d70:	4a05      	ldr	r2, [pc, #20]	; (8008d88 <prvInitialiseTaskLists+0x64>)
 8008d72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d74:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <prvInitialiseTaskLists+0x7c>)
 8008d76:	4a05      	ldr	r2, [pc, #20]	; (8008d8c <prvInitialiseTaskLists+0x68>)
 8008d78:	601a      	str	r2, [r3, #0]
}
 8008d7a:	bf00      	nop
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20000868 	.word	0x20000868
 8008d88:	20000cc8 	.word	0x20000cc8
 8008d8c:	20000cdc 	.word	0x20000cdc
 8008d90:	20000cf8 	.word	0x20000cf8
 8008d94:	20000d0c 	.word	0x20000d0c
 8008d98:	20000d24 	.word	0x20000d24
 8008d9c:	20000cf0 	.word	0x20000cf0
 8008da0:	20000cf4 	.word	0x20000cf4

08008da4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008daa:	e019      	b.n	8008de0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008dac:	f000 fdbc 	bl	8009928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db0:	4b0f      	ldr	r3, [pc, #60]	; (8008df0 <prvCheckTasksWaitingTermination+0x4c>)
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3304      	adds	r3, #4
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7fe fccb 	bl	8007758 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <prvCheckTasksWaitingTermination+0x50>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	4a0a      	ldr	r2, [pc, #40]	; (8008df4 <prvCheckTasksWaitingTermination+0x50>)
 8008dca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008dcc:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <prvCheckTasksWaitingTermination+0x54>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	4a09      	ldr	r2, [pc, #36]	; (8008df8 <prvCheckTasksWaitingTermination+0x54>)
 8008dd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008dd6:	f000 fdd9 	bl	800998c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f80e 	bl	8008dfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008de0:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <prvCheckTasksWaitingTermination+0x54>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e1      	bne.n	8008dac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20000d0c 	.word	0x20000d0c
 8008df4:	20000d38 	.word	0x20000d38
 8008df8:	20000d20 	.word	0x20000d20

08008dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3358      	adds	r3, #88	; 0x58
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f002 f871 	bl	800aef0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d108      	bne.n	8008e2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7f8 fbcd 	bl	80015bc <vPortFree>
				vPortFree( pxTCB );
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7f8 fbca 	bl	80015bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e28:	e019      	b.n	8008e5e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d103      	bne.n	8008e3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7f8 fbc1 	bl	80015bc <vPortFree>
	}
 8008e3a:	e010      	b.n	8008e5e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d00b      	beq.n	8008e5e <prvDeleteTCB+0x62>
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	b672      	cpsid	i
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	b662      	cpsie	i
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	e7fe      	b.n	8008e5c <prvDeleteTCB+0x60>
	}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ea0 <prvResetNextTaskUnblockTime+0x38>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d104      	bne.n	8008e82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e78:	4b0a      	ldr	r3, [pc, #40]	; (8008ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8008e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e80:	e008      	b.n	8008e94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e82:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <prvResetNextTaskUnblockTime+0x38>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	4a04      	ldr	r2, [pc, #16]	; (8008ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8008e92:	6013      	str	r3, [r2, #0]
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	20000cf0 	.word	0x20000cf0
 8008ea4:	20000d58 	.word	0x20000d58

08008ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008eae:	4b0b      	ldr	r3, [pc, #44]	; (8008edc <xTaskGetSchedulerState+0x34>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d102      	bne.n	8008ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	607b      	str	r3, [r7, #4]
 8008eba:	e008      	b.n	8008ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ebc:	4b08      	ldr	r3, [pc, #32]	; (8008ee0 <xTaskGetSchedulerState+0x38>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d102      	bne.n	8008eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	607b      	str	r3, [r7, #4]
 8008ec8:	e001      	b.n	8008ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ece:	687b      	ldr	r3, [r7, #4]
	}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	20000d44 	.word	0x20000d44
 8008ee0:	20000d60 	.word	0x20000d60

08008ee4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d058      	beq.n	8008fac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008efa:	4b2f      	ldr	r3, [pc, #188]	; (8008fb8 <xTaskPriorityDisinherit+0xd4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d00b      	beq.n	8008f1c <xTaskPriorityDisinherit+0x38>
 8008f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f08:	b672      	cpsid	i
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	b662      	cpsie	i
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	e7fe      	b.n	8008f1a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10b      	bne.n	8008f3c <xTaskPriorityDisinherit+0x58>
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	b672      	cpsid	i
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	b662      	cpsie	i
 8008f38:	60bb      	str	r3, [r7, #8]
 8008f3a:	e7fe      	b.n	8008f3a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f40:	1e5a      	subs	r2, r3, #1
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d02c      	beq.n	8008fac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d128      	bne.n	8008fac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fe fbfa 	bl	8007758 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f7c:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <xTaskPriorityDisinherit+0xd8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d903      	bls.n	8008f8c <xTaskPriorityDisinherit+0xa8>
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f88:	4a0c      	ldr	r2, [pc, #48]	; (8008fbc <xTaskPriorityDisinherit+0xd8>)
 8008f8a:	6013      	str	r3, [r2, #0]
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4a09      	ldr	r2, [pc, #36]	; (8008fc0 <xTaskPriorityDisinherit+0xdc>)
 8008f9a:	441a      	add	r2, r3
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	4610      	mov	r0, r2
 8008fa4:	f7fe fb7b 	bl	800769e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fac:	697b      	ldr	r3, [r7, #20]
	}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20000864 	.word	0x20000864
 8008fbc:	20000d40 	.word	0x20000d40
 8008fc0:	20000868 	.word	0x20000868

08008fc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fce:	4b21      	ldr	r3, [pc, #132]	; (8009054 <prvAddCurrentTaskToDelayedList+0x90>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fd4:	4b20      	ldr	r3, [pc, #128]	; (8009058 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fe fbbc 	bl	8007758 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe6:	d10a      	bne.n	8008ffe <prvAddCurrentTaskToDelayedList+0x3a>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d007      	beq.n	8008ffe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fee:	4b1a      	ldr	r3, [pc, #104]	; (8009058 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4819      	ldr	r0, [pc, #100]	; (800905c <prvAddCurrentTaskToDelayedList+0x98>)
 8008ff8:	f7fe fb51 	bl	800769e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ffc:	e026      	b.n	800904c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4413      	add	r3, r2
 8009004:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009006:	4b14      	ldr	r3, [pc, #80]	; (8009058 <prvAddCurrentTaskToDelayedList+0x94>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800900e:	68ba      	ldr	r2, [r7, #8]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	429a      	cmp	r2, r3
 8009014:	d209      	bcs.n	800902a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009016:	4b12      	ldr	r3, [pc, #72]	; (8009060 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4b0f      	ldr	r3, [pc, #60]	; (8009058 <prvAddCurrentTaskToDelayedList+0x94>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3304      	adds	r3, #4
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	f7fe fb5f 	bl	80076e6 <vListInsert>
}
 8009028:	e010      	b.n	800904c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800902a:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <prvAddCurrentTaskToDelayedList+0xa0>)
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <prvAddCurrentTaskToDelayedList+0x94>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3304      	adds	r3, #4
 8009034:	4619      	mov	r1, r3
 8009036:	4610      	mov	r0, r2
 8009038:	f7fe fb55 	bl	80076e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800903c:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <prvAddCurrentTaskToDelayedList+0xa4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	429a      	cmp	r2, r3
 8009044:	d202      	bcs.n	800904c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009046:	4a08      	ldr	r2, [pc, #32]	; (8009068 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	6013      	str	r3, [r2, #0]
}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	20000d3c 	.word	0x20000d3c
 8009058:	20000864 	.word	0x20000864
 800905c:	20000d24 	.word	0x20000d24
 8009060:	20000cf4 	.word	0x20000cf4
 8009064:	20000cf0 	.word	0x20000cf0
 8009068:	20000d58 	.word	0x20000d58

0800906c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b08a      	sub	sp, #40	; 0x28
 8009070:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009072:	2300      	movs	r3, #0
 8009074:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009076:	f000 fb0d 	bl	8009694 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800907a:	4b1d      	ldr	r3, [pc, #116]	; (80090f0 <xTimerCreateTimerTask+0x84>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d021      	beq.n	80090c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009086:	2300      	movs	r3, #0
 8009088:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800908a:	1d3a      	adds	r2, r7, #4
 800908c:	f107 0108 	add.w	r1, r7, #8
 8009090:	f107 030c 	add.w	r3, r7, #12
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fabb 	bl	8007610 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	9202      	str	r2, [sp, #8]
 80090a2:	9301      	str	r3, [sp, #4]
 80090a4:	2302      	movs	r3, #2
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	2300      	movs	r3, #0
 80090aa:	460a      	mov	r2, r1
 80090ac:	4911      	ldr	r1, [pc, #68]	; (80090f4 <xTimerCreateTimerTask+0x88>)
 80090ae:	4812      	ldr	r0, [pc, #72]	; (80090f8 <xTimerCreateTimerTask+0x8c>)
 80090b0:	f7ff f872 	bl	8008198 <xTaskCreateStatic>
 80090b4:	4602      	mov	r2, r0
 80090b6:	4b11      	ldr	r3, [pc, #68]	; (80090fc <xTimerCreateTimerTask+0x90>)
 80090b8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090ba:	4b10      	ldr	r3, [pc, #64]	; (80090fc <xTimerCreateTimerTask+0x90>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090c2:	2301      	movs	r3, #1
 80090c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10b      	bne.n	80090e4 <xTimerCreateTimerTask+0x78>
 80090cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d0:	b672      	cpsid	i
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	b662      	cpsie	i
 80090e0:	613b      	str	r3, [r7, #16]
 80090e2:	e7fe      	b.n	80090e2 <xTimerCreateTimerTask+0x76>
	return xReturn;
 80090e4:	697b      	ldr	r3, [r7, #20]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20000d94 	.word	0x20000d94
 80090f4:	0800b6d0 	.word	0x0800b6d0
 80090f8:	08009239 	.word	0x08009239
 80090fc:	20000d98 	.word	0x20000d98

08009100 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	; 0x28
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800910e:	2300      	movs	r3, #0
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10b      	bne.n	8009130 <xTimerGenericCommand+0x30>
 8009118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911c:	b672      	cpsid	i
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	b662      	cpsie	i
 800912c:	623b      	str	r3, [r7, #32]
 800912e:	e7fe      	b.n	800912e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009130:	4b19      	ldr	r3, [pc, #100]	; (8009198 <xTimerGenericCommand+0x98>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d02a      	beq.n	800918e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	2b05      	cmp	r3, #5
 8009148:	dc18      	bgt.n	800917c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800914a:	f7ff fead 	bl	8008ea8 <xTaskGetSchedulerState>
 800914e:	4603      	mov	r3, r0
 8009150:	2b02      	cmp	r3, #2
 8009152:	d109      	bne.n	8009168 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009154:	4b10      	ldr	r3, [pc, #64]	; (8009198 <xTimerGenericCommand+0x98>)
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	f107 0110 	add.w	r1, r7, #16
 800915c:	2300      	movs	r3, #0
 800915e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009160:	f7fe fc2e 	bl	80079c0 <xQueueGenericSend>
 8009164:	6278      	str	r0, [r7, #36]	; 0x24
 8009166:	e012      	b.n	800918e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009168:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <xTimerGenericCommand+0x98>)
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	f107 0110 	add.w	r1, r7, #16
 8009170:	2300      	movs	r3, #0
 8009172:	2200      	movs	r2, #0
 8009174:	f7fe fc24 	bl	80079c0 <xQueueGenericSend>
 8009178:	6278      	str	r0, [r7, #36]	; 0x24
 800917a:	e008      	b.n	800918e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800917c:	4b06      	ldr	r3, [pc, #24]	; (8009198 <xTimerGenericCommand+0x98>)
 800917e:	6818      	ldr	r0, [r3, #0]
 8009180:	f107 0110 	add.w	r1, r7, #16
 8009184:	2300      	movs	r3, #0
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	f7fe fd1c 	bl	8007bc4 <xQueueGenericSendFromISR>
 800918c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009190:	4618      	mov	r0, r3
 8009192:	3728      	adds	r7, #40	; 0x28
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20000d94 	.word	0x20000d94

0800919c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b088      	sub	sp, #32
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091a6:	4b23      	ldr	r3, [pc, #140]	; (8009234 <prvProcessExpiredTimer+0x98>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe facf 	bl	8007758 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091c0:	f003 0304 	and.w	r3, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d023      	beq.n	8009210 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	699a      	ldr	r2, [r3, #24]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	18d1      	adds	r1, r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	6978      	ldr	r0, [r7, #20]
 80091d6:	f000 f8d3 	bl	8009380 <prvInsertTimerInActiveList>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d020      	beq.n	8009222 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091e0:	2300      	movs	r3, #0
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	2100      	movs	r1, #0
 80091ea:	6978      	ldr	r0, [r7, #20]
 80091ec:	f7ff ff88 	bl	8009100 <xTimerGenericCommand>
 80091f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d114      	bne.n	8009222 <prvProcessExpiredTimer+0x86>
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	b672      	cpsid	i
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	b662      	cpsie	i
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	e7fe      	b.n	800920e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009216:	f023 0301 	bic.w	r3, r3, #1
 800921a:	b2da      	uxtb	r2, r3
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	6978      	ldr	r0, [r7, #20]
 8009228:	4798      	blx	r3
}
 800922a:	bf00      	nop
 800922c:	3718      	adds	r7, #24
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20000d8c 	.word	0x20000d8c

08009238 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009240:	f107 0308 	add.w	r3, r7, #8
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f857 	bl	80092f8 <prvGetNextExpireTime>
 800924a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4619      	mov	r1, r3
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f000 f803 	bl	800925c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009256:	f000 f8d5 	bl	8009404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800925a:	e7f1      	b.n	8009240 <prvTimerTask+0x8>

0800925c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009266:	f7ff f9ff 	bl	8008668 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800926a:	f107 0308 	add.w	r3, r7, #8
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f866 	bl	8009340 <prvSampleTimeNow>
 8009274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d130      	bne.n	80092de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <prvProcessTimerOrBlockTask+0x3c>
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	429a      	cmp	r2, r3
 8009288:	d806      	bhi.n	8009298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800928a:	f7ff f9fb 	bl	8008684 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800928e:	68f9      	ldr	r1, [r7, #12]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f7ff ff83 	bl	800919c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009296:	e024      	b.n	80092e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d008      	beq.n	80092b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800929e:	4b13      	ldr	r3, [pc, #76]	; (80092ec <prvProcessTimerOrBlockTask+0x90>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <prvProcessTimerOrBlockTask+0x50>
 80092a8:	2301      	movs	r3, #1
 80092aa:	e000      	b.n	80092ae <prvProcessTimerOrBlockTask+0x52>
 80092ac:	2300      	movs	r3, #0
 80092ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092b0:	4b0f      	ldr	r3, [pc, #60]	; (80092f0 <prvProcessTimerOrBlockTask+0x94>)
 80092b2:	6818      	ldr	r0, [r3, #0]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	4619      	mov	r1, r3
 80092be:	f7fe ff37 	bl	8008130 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092c2:	f7ff f9df 	bl	8008684 <xTaskResumeAll>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10a      	bne.n	80092e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092cc:	4b09      	ldr	r3, [pc, #36]	; (80092f4 <prvProcessTimerOrBlockTask+0x98>)
 80092ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	f3bf 8f6f 	isb	sy
}
 80092dc:	e001      	b.n	80092e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092de:	f7ff f9d1 	bl	8008684 <xTaskResumeAll>
}
 80092e2:	bf00      	nop
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	20000d90 	.word	0x20000d90
 80092f0:	20000d94 	.word	0x20000d94
 80092f4:	e000ed04 	.word	0xe000ed04

080092f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009300:	4b0e      	ldr	r3, [pc, #56]	; (800933c <prvGetNextExpireTime+0x44>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <prvGetNextExpireTime+0x16>
 800930a:	2201      	movs	r2, #1
 800930c:	e000      	b.n	8009310 <prvGetNextExpireTime+0x18>
 800930e:	2200      	movs	r2, #0
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d105      	bne.n	8009328 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800931c:	4b07      	ldr	r3, [pc, #28]	; (800933c <prvGetNextExpireTime+0x44>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	e001      	b.n	800932c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800932c:	68fb      	ldr	r3, [r7, #12]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	20000d8c 	.word	0x20000d8c

08009340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009348:	f7ff fa3a 	bl	80087c0 <xTaskGetTickCount>
 800934c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800934e:	4b0b      	ldr	r3, [pc, #44]	; (800937c <prvSampleTimeNow+0x3c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	429a      	cmp	r2, r3
 8009356:	d205      	bcs.n	8009364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009358:	f000 f936 	bl	80095c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	e002      	b.n	800936a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800936a:	4a04      	ldr	r2, [pc, #16]	; (800937c <prvSampleTimeNow+0x3c>)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009370:	68fb      	ldr	r3, [r7, #12]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	20000d9c 	.word	0x20000d9c

08009380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d812      	bhi.n	80093cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	1ad2      	subs	r2, r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d302      	bcc.n	80093ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093b4:	2301      	movs	r3, #1
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	e01b      	b.n	80093f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093ba:	4b10      	ldr	r3, [pc, #64]	; (80093fc <prvInsertTimerInActiveList+0x7c>)
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7fe f98e 	bl	80076e6 <vListInsert>
 80093ca:	e012      	b.n	80093f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d206      	bcs.n	80093e2 <prvInsertTimerInActiveList+0x62>
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d302      	bcc.n	80093e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093dc:	2301      	movs	r3, #1
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	e007      	b.n	80093f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093e2:	4b07      	ldr	r3, [pc, #28]	; (8009400 <prvInsertTimerInActiveList+0x80>)
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3304      	adds	r3, #4
 80093ea:	4619      	mov	r1, r3
 80093ec:	4610      	mov	r0, r2
 80093ee:	f7fe f97a 	bl	80076e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093f2:	697b      	ldr	r3, [r7, #20]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3718      	adds	r7, #24
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	20000d90 	.word	0x20000d90
 8009400:	20000d8c 	.word	0x20000d8c

08009404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b08e      	sub	sp, #56	; 0x38
 8009408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800940a:	e0cc      	b.n	80095a6 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	da19      	bge.n	8009446 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009412:	1d3b      	adds	r3, r7, #4
 8009414:	3304      	adds	r3, #4
 8009416:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10b      	bne.n	8009436 <prvProcessReceivedCommands+0x32>
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	b672      	cpsid	i
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	b662      	cpsie	i
 8009432:	61fb      	str	r3, [r7, #28]
 8009434:	e7fe      	b.n	8009434 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800943c:	6850      	ldr	r0, [r2, #4]
 800943e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009440:	6892      	ldr	r2, [r2, #8]
 8009442:	4611      	mov	r1, r2
 8009444:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	f2c0 80ab 	blt.w	80095a4 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d004      	beq.n	8009464 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	3304      	adds	r3, #4
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe f97a 	bl	8007758 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009464:	463b      	mov	r3, r7
 8009466:	4618      	mov	r0, r3
 8009468:	f7ff ff6a 	bl	8009340 <prvSampleTimeNow>
 800946c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b09      	cmp	r3, #9
 8009472:	f200 8098 	bhi.w	80095a6 <prvProcessReceivedCommands+0x1a2>
 8009476:	a201      	add	r2, pc, #4	; (adr r2, 800947c <prvProcessReceivedCommands+0x78>)
 8009478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947c:	080094a5 	.word	0x080094a5
 8009480:	080094a5 	.word	0x080094a5
 8009484:	080094a5 	.word	0x080094a5
 8009488:	0800951b 	.word	0x0800951b
 800948c:	0800952f 	.word	0x0800952f
 8009490:	0800957b 	.word	0x0800957b
 8009494:	080094a5 	.word	0x080094a5
 8009498:	080094a5 	.word	0x080094a5
 800949c:	0800951b 	.word	0x0800951b
 80094a0:	0800952f 	.word	0x0800952f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094aa:	f043 0301 	orr.w	r3, r3, #1
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	18d1      	adds	r1, r2, r3
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c4:	f7ff ff5c 	bl	8009380 <prvInsertTimerInActiveList>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d06b      	beq.n	80095a6 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d060      	beq.n	80095a6 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	441a      	add	r2, r3
 80094ec:	2300      	movs	r3, #0
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	2300      	movs	r3, #0
 80094f2:	2100      	movs	r1, #0
 80094f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094f6:	f7ff fe03 	bl	8009100 <xTimerGenericCommand>
 80094fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d151      	bne.n	80095a6 <prvProcessReceivedCommands+0x1a2>
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	b672      	cpsid	i
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	b662      	cpsie	i
 8009516:	61bb      	str	r3, [r7, #24]
 8009518:	e7fe      	b.n	8009518 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009520:	f023 0301 	bic.w	r3, r3, #1
 8009524:	b2da      	uxtb	r2, r3
 8009526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800952c:	e03b      	b.n	80095a6 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009534:	f043 0301 	orr.w	r3, r3, #1
 8009538:	b2da      	uxtb	r2, r3
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10b      	bne.n	8009566 <prvProcessReceivedCommands+0x162>
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	b672      	cpsid	i
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	b662      	cpsie	i
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	e7fe      	b.n	8009564 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009568:	699a      	ldr	r2, [r3, #24]
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	18d1      	adds	r1, r2, r3
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009574:	f7ff ff04 	bl	8009380 <prvInsertTimerInActiveList>
					break;
 8009578:	e015      	b.n	80095a6 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009580:	f003 0302 	and.w	r3, r3, #2
 8009584:	2b00      	cmp	r3, #0
 8009586:	d103      	bne.n	8009590 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800958a:	f7f8 f817 	bl	80015bc <vPortFree>
 800958e:	e00a      	b.n	80095a6 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009596:	f023 0301 	bic.w	r3, r3, #1
 800959a:	b2da      	uxtb	r2, r3
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095a2:	e000      	b.n	80095a6 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80095a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095a6:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <prvProcessReceivedCommands+0x1c0>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	1d39      	adds	r1, r7, #4
 80095ac:	2200      	movs	r2, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fe fba4 	bl	8007cfc <xQueueReceive>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f47f af28 	bne.w	800940c <prvProcessReceivedCommands+0x8>
	}
}
 80095bc:	bf00      	nop
 80095be:	3730      	adds	r7, #48	; 0x30
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	20000d94 	.word	0x20000d94

080095c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095ce:	e049      	b.n	8009664 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095d0:	4b2e      	ldr	r3, [pc, #184]	; (800968c <prvSwitchTimerLists+0xc4>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095da:	4b2c      	ldr	r3, [pc, #176]	; (800968c <prvSwitchTimerLists+0xc4>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	3304      	adds	r3, #4
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fe f8b5 	bl	8007758 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095fc:	f003 0304 	and.w	r3, r3, #4
 8009600:	2b00      	cmp	r3, #0
 8009602:	d02f      	beq.n	8009664 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	4413      	add	r3, r2
 800960c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	429a      	cmp	r2, r3
 8009614:	d90e      	bls.n	8009634 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009622:	4b1a      	ldr	r3, [pc, #104]	; (800968c <prvSwitchTimerLists+0xc4>)
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3304      	adds	r3, #4
 800962a:	4619      	mov	r1, r3
 800962c:	4610      	mov	r0, r2
 800962e:	f7fe f85a 	bl	80076e6 <vListInsert>
 8009632:	e017      	b.n	8009664 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009634:	2300      	movs	r3, #0
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	2300      	movs	r3, #0
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	2100      	movs	r1, #0
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7ff fd5e 	bl	8009100 <xTimerGenericCommand>
 8009644:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10b      	bne.n	8009664 <prvSwitchTimerLists+0x9c>
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	b672      	cpsid	i
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	b662      	cpsie	i
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	e7fe      	b.n	8009662 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009664:	4b09      	ldr	r3, [pc, #36]	; (800968c <prvSwitchTimerLists+0xc4>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1b0      	bne.n	80095d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800966e:	4b07      	ldr	r3, [pc, #28]	; (800968c <prvSwitchTimerLists+0xc4>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009674:	4b06      	ldr	r3, [pc, #24]	; (8009690 <prvSwitchTimerLists+0xc8>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a04      	ldr	r2, [pc, #16]	; (800968c <prvSwitchTimerLists+0xc4>)
 800967a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800967c:	4a04      	ldr	r2, [pc, #16]	; (8009690 <prvSwitchTimerLists+0xc8>)
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	6013      	str	r3, [r2, #0]
}
 8009682:	bf00      	nop
 8009684:	3718      	adds	r7, #24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	20000d8c 	.word	0x20000d8c
 8009690:	20000d90 	.word	0x20000d90

08009694 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800969a:	f000 f945 	bl	8009928 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800969e:	4b15      	ldr	r3, [pc, #84]	; (80096f4 <prvCheckForValidListAndQueue+0x60>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d120      	bne.n	80096e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096a6:	4814      	ldr	r0, [pc, #80]	; (80096f8 <prvCheckForValidListAndQueue+0x64>)
 80096a8:	f7fd ffcc 	bl	8007644 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096ac:	4813      	ldr	r0, [pc, #76]	; (80096fc <prvCheckForValidListAndQueue+0x68>)
 80096ae:	f7fd ffc9 	bl	8007644 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096b2:	4b13      	ldr	r3, [pc, #76]	; (8009700 <prvCheckForValidListAndQueue+0x6c>)
 80096b4:	4a10      	ldr	r2, [pc, #64]	; (80096f8 <prvCheckForValidListAndQueue+0x64>)
 80096b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096b8:	4b12      	ldr	r3, [pc, #72]	; (8009704 <prvCheckForValidListAndQueue+0x70>)
 80096ba:	4a10      	ldr	r2, [pc, #64]	; (80096fc <prvCheckForValidListAndQueue+0x68>)
 80096bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096be:	2300      	movs	r3, #0
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	4b11      	ldr	r3, [pc, #68]	; (8009708 <prvCheckForValidListAndQueue+0x74>)
 80096c4:	4a11      	ldr	r2, [pc, #68]	; (800970c <prvCheckForValidListAndQueue+0x78>)
 80096c6:	2110      	movs	r1, #16
 80096c8:	200a      	movs	r0, #10
 80096ca:	f7fe f8d9 	bl	8007880 <xQueueGenericCreateStatic>
 80096ce:	4602      	mov	r2, r0
 80096d0:	4b08      	ldr	r3, [pc, #32]	; (80096f4 <prvCheckForValidListAndQueue+0x60>)
 80096d2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096d4:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <prvCheckForValidListAndQueue+0x60>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096dc:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <prvCheckForValidListAndQueue+0x60>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	490b      	ldr	r1, [pc, #44]	; (8009710 <prvCheckForValidListAndQueue+0x7c>)
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe fcfc 	bl	80080e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096e8:	f000 f950 	bl	800998c <vPortExitCritical>
}
 80096ec:	bf00      	nop
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	20000d94 	.word	0x20000d94
 80096f8:	20000d64 	.word	0x20000d64
 80096fc:	20000d78 	.word	0x20000d78
 8009700:	20000d8c 	.word	0x20000d8c
 8009704:	20000d90 	.word	0x20000d90
 8009708:	20000e40 	.word	0x20000e40
 800970c:	20000da0 	.word	0x20000da0
 8009710:	0800b6d8 	.word	0x0800b6d8

08009714 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	3b04      	subs	r3, #4
 8009724:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800972c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3b04      	subs	r3, #4
 8009732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f023 0201 	bic.w	r2, r3, #1
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	3b04      	subs	r3, #4
 8009742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009744:	4a0c      	ldr	r2, [pc, #48]	; (8009778 <pxPortInitialiseStack+0x64>)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	3b14      	subs	r3, #20
 800974e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3b04      	subs	r3, #4
 800975a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f06f 0202 	mvn.w	r2, #2
 8009762:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	3b20      	subs	r3, #32
 8009768:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800976a:	68fb      	ldr	r3, [r7, #12]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	0800977d 	.word	0x0800977d

0800977c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009786:	4b13      	ldr	r3, [pc, #76]	; (80097d4 <prvTaskExitError+0x58>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978e:	d00b      	beq.n	80097a8 <prvTaskExitError+0x2c>
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	b672      	cpsid	i
 8009796:	f383 8811 	msr	BASEPRI, r3
 800979a:	f3bf 8f6f 	isb	sy
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	b662      	cpsie	i
 80097a4:	60fb      	str	r3, [r7, #12]
 80097a6:	e7fe      	b.n	80097a6 <prvTaskExitError+0x2a>
 80097a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ac:	b672      	cpsid	i
 80097ae:	f383 8811 	msr	BASEPRI, r3
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	b662      	cpsie	i
 80097bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097be:	bf00      	nop
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0fc      	beq.n	80097c0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097c6:	bf00      	nop
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	20000010 	.word	0x20000010
	...

080097e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097e0:	4b07      	ldr	r3, [pc, #28]	; (8009800 <pxCurrentTCBConst2>)
 80097e2:	6819      	ldr	r1, [r3, #0]
 80097e4:	6808      	ldr	r0, [r1, #0]
 80097e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ea:	f380 8809 	msr	PSP, r0
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f04f 0000 	mov.w	r0, #0
 80097f6:	f380 8811 	msr	BASEPRI, r0
 80097fa:	4770      	bx	lr
 80097fc:	f3af 8000 	nop.w

08009800 <pxCurrentTCBConst2>:
 8009800:	20000864 	.word	0x20000864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009808:	4808      	ldr	r0, [pc, #32]	; (800982c <prvPortStartFirstTask+0x24>)
 800980a:	6800      	ldr	r0, [r0, #0]
 800980c:	6800      	ldr	r0, [r0, #0]
 800980e:	f380 8808 	msr	MSP, r0
 8009812:	f04f 0000 	mov.w	r0, #0
 8009816:	f380 8814 	msr	CONTROL, r0
 800981a:	b662      	cpsie	i
 800981c:	b661      	cpsie	f
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	df00      	svc	0
 8009828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800982a:	bf00      	nop
 800982c:	e000ed08 	.word	0xe000ed08

08009830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009836:	4b36      	ldr	r3, [pc, #216]	; (8009910 <xPortStartScheduler+0xe0>)
 8009838:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	22ff      	movs	r2, #255	; 0xff
 8009846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	b2db      	uxtb	r3, r3
 800984e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009858:	b2da      	uxtb	r2, r3
 800985a:	4b2e      	ldr	r3, [pc, #184]	; (8009914 <xPortStartScheduler+0xe4>)
 800985c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800985e:	4b2e      	ldr	r3, [pc, #184]	; (8009918 <xPortStartScheduler+0xe8>)
 8009860:	2207      	movs	r2, #7
 8009862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009864:	e009      	b.n	800987a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009866:	4b2c      	ldr	r3, [pc, #176]	; (8009918 <xPortStartScheduler+0xe8>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3b01      	subs	r3, #1
 800986c:	4a2a      	ldr	r2, [pc, #168]	; (8009918 <xPortStartScheduler+0xe8>)
 800986e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	b2db      	uxtb	r3, r3
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	b2db      	uxtb	r3, r3
 8009878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009882:	2b80      	cmp	r3, #128	; 0x80
 8009884:	d0ef      	beq.n	8009866 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009886:	4b24      	ldr	r3, [pc, #144]	; (8009918 <xPortStartScheduler+0xe8>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f1c3 0307 	rsb	r3, r3, #7
 800988e:	2b04      	cmp	r3, #4
 8009890:	d00b      	beq.n	80098aa <xPortStartScheduler+0x7a>
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	b672      	cpsid	i
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	b662      	cpsie	i
 80098a6:	60bb      	str	r3, [r7, #8]
 80098a8:	e7fe      	b.n	80098a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098aa:	4b1b      	ldr	r3, [pc, #108]	; (8009918 <xPortStartScheduler+0xe8>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	021b      	lsls	r3, r3, #8
 80098b0:	4a19      	ldr	r2, [pc, #100]	; (8009918 <xPortStartScheduler+0xe8>)
 80098b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098b4:	4b18      	ldr	r3, [pc, #96]	; (8009918 <xPortStartScheduler+0xe8>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098bc:	4a16      	ldr	r2, [pc, #88]	; (8009918 <xPortStartScheduler+0xe8>)
 80098be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098c8:	4b14      	ldr	r3, [pc, #80]	; (800991c <xPortStartScheduler+0xec>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a13      	ldr	r2, [pc, #76]	; (800991c <xPortStartScheduler+0xec>)
 80098ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098d4:	4b11      	ldr	r3, [pc, #68]	; (800991c <xPortStartScheduler+0xec>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a10      	ldr	r2, [pc, #64]	; (800991c <xPortStartScheduler+0xec>)
 80098da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80098de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098e0:	f000 f8d4 	bl	8009a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098e4:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <xPortStartScheduler+0xf0>)
 80098e6:	2200      	movs	r2, #0
 80098e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098ea:	f000 f8f3 	bl	8009ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098ee:	4b0d      	ldr	r3, [pc, #52]	; (8009924 <xPortStartScheduler+0xf4>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a0c      	ldr	r2, [pc, #48]	; (8009924 <xPortStartScheduler+0xf4>)
 80098f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098fa:	f7ff ff85 	bl	8009808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098fe:	f7ff f831 	bl	8008964 <vTaskSwitchContext>
	prvTaskExitError();
 8009902:	f7ff ff3b 	bl	800977c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	e000e400 	.word	0xe000e400
 8009914:	20000e90 	.word	0x20000e90
 8009918:	20000e94 	.word	0x20000e94
 800991c:	e000ed20 	.word	0xe000ed20
 8009920:	20000010 	.word	0x20000010
 8009924:	e000ef34 	.word	0xe000ef34

08009928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	b672      	cpsid	i
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	b662      	cpsie	i
 8009942:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009944:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <vPortEnterCritical+0x5c>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	3301      	adds	r3, #1
 800994a:	4a0e      	ldr	r2, [pc, #56]	; (8009984 <vPortEnterCritical+0x5c>)
 800994c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800994e:	4b0d      	ldr	r3, [pc, #52]	; (8009984 <vPortEnterCritical+0x5c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d110      	bne.n	8009978 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009956:	4b0c      	ldr	r3, [pc, #48]	; (8009988 <vPortEnterCritical+0x60>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00b      	beq.n	8009978 <vPortEnterCritical+0x50>
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	b672      	cpsid	i
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	b662      	cpsie	i
 8009974:	603b      	str	r3, [r7, #0]
 8009976:	e7fe      	b.n	8009976 <vPortEnterCritical+0x4e>
	}
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	20000010 	.word	0x20000010
 8009988:	e000ed04 	.word	0xe000ed04

0800998c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009992:	4b12      	ldr	r3, [pc, #72]	; (80099dc <vPortExitCritical+0x50>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10b      	bne.n	80099b2 <vPortExitCritical+0x26>
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	b672      	cpsid	i
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	b662      	cpsie	i
 80099ae:	607b      	str	r3, [r7, #4]
 80099b0:	e7fe      	b.n	80099b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80099b2:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <vPortExitCritical+0x50>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	4a08      	ldr	r2, [pc, #32]	; (80099dc <vPortExitCritical+0x50>)
 80099ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099bc:	4b07      	ldr	r3, [pc, #28]	; (80099dc <vPortExitCritical+0x50>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <vPortExitCritical+0x42>
 80099c4:	2300      	movs	r3, #0
 80099c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80099ce:	bf00      	nop
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	20000010 	.word	0x20000010

080099e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099e0:	f3ef 8009 	mrs	r0, PSP
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	4b15      	ldr	r3, [pc, #84]	; (8009a40 <pxCurrentTCBConst>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	f01e 0f10 	tst.w	lr, #16
 80099f0:	bf08      	it	eq
 80099f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fa:	6010      	str	r0, [r2, #0]
 80099fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a04:	b672      	cpsid	i
 8009a06:	f380 8811 	msr	BASEPRI, r0
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	b662      	cpsie	i
 8009a14:	f7fe ffa6 	bl	8008964 <vTaskSwitchContext>
 8009a18:	f04f 0000 	mov.w	r0, #0
 8009a1c:	f380 8811 	msr	BASEPRI, r0
 8009a20:	bc09      	pop	{r0, r3}
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	6808      	ldr	r0, [r1, #0]
 8009a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	f01e 0f10 	tst.w	lr, #16
 8009a2e:	bf08      	it	eq
 8009a30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a34:	f380 8809 	msr	PSP, r0
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop

08009a40 <pxCurrentTCBConst>:
 8009a40:	20000864 	.word	0x20000864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop

08009a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	b672      	cpsid	i
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	b662      	cpsie	i
 8009a62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a64:	f7fe febc 	bl	80087e0 <xTaskIncrementTick>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a6e:	4b06      	ldr	r3, [pc, #24]	; (8009a88 <SysTick_Handler+0x40>)
 8009a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	2300      	movs	r3, #0
 8009a78:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	e000ed04 	.word	0xe000ed04

08009a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a90:	4b0b      	ldr	r3, [pc, #44]	; (8009ac0 <vPortSetupTimerInterrupt+0x34>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a96:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <vPortSetupTimerInterrupt+0x38>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ac8 <vPortSetupTimerInterrupt+0x3c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a0a      	ldr	r2, [pc, #40]	; (8009acc <vPortSetupTimerInterrupt+0x40>)
 8009aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa6:	099b      	lsrs	r3, r3, #6
 8009aa8:	4a09      	ldr	r2, [pc, #36]	; (8009ad0 <vPortSetupTimerInterrupt+0x44>)
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009aae:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <vPortSetupTimerInterrupt+0x34>)
 8009ab0:	2207      	movs	r2, #7
 8009ab2:	601a      	str	r2, [r3, #0]
}
 8009ab4:	bf00      	nop
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	e000e010 	.word	0xe000e010
 8009ac4:	e000e018 	.word	0xe000e018
 8009ac8:	20000004 	.word	0x20000004
 8009acc:	10624dd3 	.word	0x10624dd3
 8009ad0:	e000e014 	.word	0xe000e014

08009ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ae4 <vPortEnableVFP+0x10>
 8009ad8:	6801      	ldr	r1, [r0, #0]
 8009ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ade:	6001      	str	r1, [r0, #0]
 8009ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ae2:	bf00      	nop
 8009ae4:	e000ed88 	.word	0xe000ed88

08009ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009aee:	f3ef 8305 	mrs	r3, IPSR
 8009af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b0f      	cmp	r3, #15
 8009af8:	d915      	bls.n	8009b26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009afa:	4a18      	ldr	r2, [pc, #96]	; (8009b5c <vPortValidateInterruptPriority+0x74>)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4413      	add	r3, r2
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b04:	4b16      	ldr	r3, [pc, #88]	; (8009b60 <vPortValidateInterruptPriority+0x78>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	7afa      	ldrb	r2, [r7, #11]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d20b      	bcs.n	8009b26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	b672      	cpsid	i
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	b662      	cpsie	i
 8009b22:	607b      	str	r3, [r7, #4]
 8009b24:	e7fe      	b.n	8009b24 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b26:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <vPortValidateInterruptPriority+0x7c>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b2e:	4b0e      	ldr	r3, [pc, #56]	; (8009b68 <vPortValidateInterruptPriority+0x80>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d90b      	bls.n	8009b4e <vPortValidateInterruptPriority+0x66>
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	b672      	cpsid	i
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	b662      	cpsie	i
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	e7fe      	b.n	8009b4c <vPortValidateInterruptPriority+0x64>
	}
 8009b4e:	bf00      	nop
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	e000e3f0 	.word	0xe000e3f0
 8009b60:	20000e90 	.word	0x20000e90
 8009b64:	e000ed0c 	.word	0xe000ed0c
 8009b68:	20000e94 	.word	0x20000e94

08009b6c <__cxa_end_cleanup>:
 8009b6c:	b41e      	push	{r1, r2, r3, r4}
 8009b6e:	f000 f89c 	bl	8009caa <__gnu_end_cleanup>
 8009b72:	bc1e      	pop	{r1, r2, r3, r4}
 8009b74:	f7f7 fa70 	bl	8001058 <_Unwind_Resume>

08009b78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8009b78:	7803      	ldrb	r3, [r0, #0]
 8009b7a:	2b47      	cmp	r3, #71	; 0x47
 8009b7c:	d117      	bne.n	8009bae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009b7e:	7843      	ldrb	r3, [r0, #1]
 8009b80:	2b4e      	cmp	r3, #78	; 0x4e
 8009b82:	d114      	bne.n	8009bae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009b84:	7883      	ldrb	r3, [r0, #2]
 8009b86:	2b55      	cmp	r3, #85	; 0x55
 8009b88:	d111      	bne.n	8009bae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009b8a:	78c3      	ldrb	r3, [r0, #3]
 8009b8c:	2b43      	cmp	r3, #67	; 0x43
 8009b8e:	d10e      	bne.n	8009bae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009b90:	7903      	ldrb	r3, [r0, #4]
 8009b92:	2b43      	cmp	r3, #67	; 0x43
 8009b94:	d10b      	bne.n	8009bae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009b96:	7943      	ldrb	r3, [r0, #5]
 8009b98:	2b2b      	cmp	r3, #43	; 0x2b
 8009b9a:	d108      	bne.n	8009bae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009b9c:	7983      	ldrb	r3, [r0, #6]
 8009b9e:	2b2b      	cmp	r3, #43	; 0x2b
 8009ba0:	d105      	bne.n	8009bae <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009ba2:	79c0      	ldrb	r0, [r0, #7]
 8009ba4:	2801      	cmp	r0, #1
 8009ba6:	bf8c      	ite	hi
 8009ba8:	2000      	movhi	r0, #0
 8009baa:	2001      	movls	r0, #1
 8009bac:	4770      	bx	lr
 8009bae:	2000      	movs	r0, #0
 8009bb0:	4770      	bx	lr
	...

08009bb4 <__cxa_type_match>:
 8009bb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009bb8:	461e      	mov	r6, r3
 8009bba:	7803      	ldrb	r3, [r0, #0]
 8009bbc:	2b47      	cmp	r3, #71	; 0x47
 8009bbe:	460d      	mov	r5, r1
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	79c1      	ldrb	r1, [r0, #7]
 8009bc4:	d113      	bne.n	8009bee <__cxa_type_match+0x3a>
 8009bc6:	7843      	ldrb	r3, [r0, #1]
 8009bc8:	2b4e      	cmp	r3, #78	; 0x4e
 8009bca:	d110      	bne.n	8009bee <__cxa_type_match+0x3a>
 8009bcc:	7883      	ldrb	r3, [r0, #2]
 8009bce:	2b55      	cmp	r3, #85	; 0x55
 8009bd0:	d10d      	bne.n	8009bee <__cxa_type_match+0x3a>
 8009bd2:	78c3      	ldrb	r3, [r0, #3]
 8009bd4:	2b43      	cmp	r3, #67	; 0x43
 8009bd6:	d10a      	bne.n	8009bee <__cxa_type_match+0x3a>
 8009bd8:	7903      	ldrb	r3, [r0, #4]
 8009bda:	2b46      	cmp	r3, #70	; 0x46
 8009bdc:	d107      	bne.n	8009bee <__cxa_type_match+0x3a>
 8009bde:	7943      	ldrb	r3, [r0, #5]
 8009be0:	2b4f      	cmp	r3, #79	; 0x4f
 8009be2:	d104      	bne.n	8009bee <__cxa_type_match+0x3a>
 8009be4:	7983      	ldrb	r3, [r0, #6]
 8009be6:	2b52      	cmp	r3, #82	; 0x52
 8009be8:	d101      	bne.n	8009bee <__cxa_type_match+0x3a>
 8009bea:	2900      	cmp	r1, #0
 8009bec:	d031      	beq.n	8009c52 <__cxa_type_match+0x9e>
 8009bee:	4610      	mov	r0, r2
 8009bf0:	f7ff ffc2 	bl	8009b78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8009bf4:	f080 0001 	eor.w	r0, r0, #1
 8009bf8:	b2c0      	uxtb	r0, r0
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	2400      	movs	r4, #0
 8009bfe:	9401      	str	r4, [sp, #4]
 8009c00:	bb53      	cbnz	r3, 8009c58 <__cxa_type_match+0xa4>
 8009c02:	bb58      	cbnz	r0, 8009c5c <__cxa_type_match+0xa8>
 8009c04:	2901      	cmp	r1, #1
 8009c06:	bf0a      	itet	eq
 8009c08:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8009c0c:	f1a2 0320 	subne.w	r3, r2, #32
 8009c10:	3b78      	subeq	r3, #120	; 0x78
 8009c12:	2901      	cmp	r1, #1
 8009c14:	bf08      	it	eq
 8009c16:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8009c1a:	681c      	ldr	r4, [r3, #0]
 8009c1c:	bf18      	it	ne
 8009c1e:	3258      	addne	r2, #88	; 0x58
 8009c20:	9201      	str	r2, [sp, #4]
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	4620      	mov	r0, r4
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	4798      	blx	r3
 8009c2a:	b1c8      	cbz	r0, 8009c60 <__cxa_type_match+0xac>
 8009c2c:	9b01      	ldr	r3, [sp, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	9301      	str	r3, [sp, #4]
 8009c32:	2702      	movs	r7, #2
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	aa01      	add	r2, sp, #4
 8009c38:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	2301      	movs	r3, #1
 8009c40:	4628      	mov	r0, r5
 8009c42:	47c0      	blx	r8
 8009c44:	b170      	cbz	r0, 8009c64 <__cxa_type_match+0xb0>
 8009c46:	9b01      	ldr	r3, [sp, #4]
 8009c48:	6033      	str	r3, [r6, #0]
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	b002      	add	sp, #8
 8009c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c52:	2301      	movs	r3, #1
 8009c54:	4608      	mov	r0, r1
 8009c56:	e7d1      	b.n	8009bfc <__cxa_type_match+0x48>
 8009c58:	4c03      	ldr	r4, [pc, #12]	; (8009c68 <__cxa_type_match+0xb4>)
 8009c5a:	e7e2      	b.n	8009c22 <__cxa_type_match+0x6e>
 8009c5c:	4c03      	ldr	r4, [pc, #12]	; (8009c6c <__cxa_type_match+0xb8>)
 8009c5e:	e7e0      	b.n	8009c22 <__cxa_type_match+0x6e>
 8009c60:	2701      	movs	r7, #1
 8009c62:	e7e7      	b.n	8009c34 <__cxa_type_match+0x80>
 8009c64:	4607      	mov	r7, r0
 8009c66:	e7f0      	b.n	8009c4a <__cxa_type_match+0x96>
 8009c68:	0800b840 	.word	0x0800b840
 8009c6c:	0800b848 	.word	0x0800b848

08009c70 <__cxa_begin_cleanup>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	4604      	mov	r4, r0
 8009c74:	f000 f83a 	bl	8009cec <__cxa_get_globals>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f1a4 0120 	sub.w	r1, r4, #32
 8009c80:	f7ff ff7a 	bl	8009b78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8009c84:	b160      	cbz	r0, 8009ca0 <__cxa_begin_cleanup+0x30>
 8009c86:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c92:	d103      	bne.n	8009c9c <__cxa_begin_cleanup+0x2c>
 8009c94:	6893      	ldr	r3, [r2, #8]
 8009c96:	f844 3c08 	str.w	r3, [r4, #-8]
 8009c9a:	6091      	str	r1, [r2, #8]
 8009c9c:	2001      	movs	r0, #1
 8009c9e:	bd10      	pop	{r4, pc}
 8009ca0:	6893      	ldr	r3, [r2, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0f9      	beq.n	8009c9a <__cxa_begin_cleanup+0x2a>
 8009ca6:	f000 fc8b 	bl	800a5c0 <_ZSt9terminatev>

08009caa <__gnu_end_cleanup>:
 8009caa:	b510      	push	{r4, lr}
 8009cac:	f000 f81e 	bl	8009cec <__cxa_get_globals>
 8009cb0:	6882      	ldr	r2, [r0, #8]
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	b90a      	cbnz	r2, 8009cba <__gnu_end_cleanup+0x10>
 8009cb6:	f000 fc83 	bl	800a5c0 <_ZSt9terminatev>
 8009cba:	f102 0420 	add.w	r4, r2, #32
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f7ff ff5a 	bl	8009b78 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8009cc4:	b140      	cbz	r0, 8009cd8 <__gnu_end_cleanup+0x2e>
 8009cc6:	69d3      	ldr	r3, [r2, #28]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	61d3      	str	r3, [r2, #28]
 8009ccc:	b913      	cbnz	r3, 8009cd4 <__gnu_end_cleanup+0x2a>
 8009cce:	6990      	ldr	r0, [r2, #24]
 8009cd0:	6088      	str	r0, [r1, #8]
 8009cd2:	6193      	str	r3, [r2, #24]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	bd10      	pop	{r4, pc}
 8009cd8:	6088      	str	r0, [r1, #8]
 8009cda:	e7fb      	b.n	8009cd4 <__gnu_end_cleanup+0x2a>

08009cdc <__cxa_pure_virtual>:
 8009cdc:	b508      	push	{r3, lr}
 8009cde:	f000 fc6f 	bl	800a5c0 <_ZSt9terminatev>
	...

08009ce4 <__cxa_get_globals_fast>:
 8009ce4:	4800      	ldr	r0, [pc, #0]	; (8009ce8 <__cxa_get_globals_fast+0x4>)
 8009ce6:	4770      	bx	lr
 8009ce8:	20000e98 	.word	0x20000e98

08009cec <__cxa_get_globals>:
 8009cec:	4800      	ldr	r0, [pc, #0]	; (8009cf0 <__cxa_get_globals+0x4>)
 8009cee:	4770      	bx	lr
 8009cf0:	20000e98 	.word	0x20000e98

08009cf4 <_ZdlPvj>:
 8009cf4:	f000 bc56 	b.w	800a5a4 <_ZdlPv>

08009cf8 <_ZL12read_uleb128PKhPm>:
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8009d00:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8009d04:	f810 5b01 	ldrb.w	r5, [r0], #1
 8009d08:	1994      	adds	r4, r2, r6
 8009d0a:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8009d0e:	40a2      	lsls	r2, r4
 8009d10:	4313      	orrs	r3, r2
 8009d12:	062a      	lsls	r2, r5, #24
 8009d14:	d4f4      	bmi.n	8009d00 <_ZL12read_uleb128PKhPm+0x8>
 8009d16:	600b      	str	r3, [r1, #0]
 8009d18:	bd70      	pop	{r4, r5, r6, pc}

08009d1a <_ZL12read_sleb128PKhPl>:
 8009d1a:	b530      	push	{r4, r5, lr}
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f810 4b01 	ldrb.w	r4, [r0], #1
 8009d24:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8009d28:	4095      	lsls	r5, r2
 8009d2a:	432b      	orrs	r3, r5
 8009d2c:	0625      	lsls	r5, r4, #24
 8009d2e:	f102 0207 	add.w	r2, r2, #7
 8009d32:	d4f5      	bmi.n	8009d20 <_ZL12read_sleb128PKhPl+0x6>
 8009d34:	2a1f      	cmp	r2, #31
 8009d36:	d806      	bhi.n	8009d46 <_ZL12read_sleb128PKhPl+0x2c>
 8009d38:	0664      	lsls	r4, r4, #25
 8009d3a:	bf42      	ittt	mi
 8009d3c:	f04f 34ff 	movmi.w	r4, #4294967295
 8009d40:	fa04 f202 	lslmi.w	r2, r4, r2
 8009d44:	4313      	orrmi	r3, r2
 8009d46:	600b      	str	r3, [r1, #0]
 8009d48:	bd30      	pop	{r4, r5, pc}

08009d4a <_ZL28read_encoded_value_with_basehjPKhPj>:
 8009d4a:	2850      	cmp	r0, #80	; 0x50
 8009d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d4e:	4605      	mov	r5, r0
 8009d50:	460e      	mov	r6, r1
 8009d52:	4614      	mov	r4, r2
 8009d54:	461f      	mov	r7, r3
 8009d56:	d107      	bne.n	8009d68 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8009d58:	1cd0      	adds	r0, r2, #3
 8009d5a:	f020 0003 	bic.w	r0, r0, #3
 8009d5e:	f850 3b04 	ldr.w	r3, [r0], #4
 8009d62:	603b      	str	r3, [r7, #0]
 8009d64:	b003      	add	sp, #12
 8009d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d68:	f000 030f 	and.w	r3, r0, #15
 8009d6c:	2b0c      	cmp	r3, #12
 8009d6e:	d82e      	bhi.n	8009dce <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8009d70:	e8df f003 	tbb	[pc, r3]
 8009d74:	251d0725 	.word	0x251d0725
 8009d78:	2d2d2d29 	.word	0x2d2d2d29
 8009d7c:	2521182d 	.word	0x2521182d
 8009d80:	29          	.byte	0x29
 8009d81:	00          	.byte	0x00
 8009d82:	a901      	add	r1, sp, #4
 8009d84:	4620      	mov	r0, r4
 8009d86:	f7ff ffb7 	bl	8009cf8 <_ZL12read_uleb128PKhPm>
 8009d8a:	9b01      	ldr	r3, [sp, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0e8      	beq.n	8009d62 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8009d90:	f005 0270 	and.w	r2, r5, #112	; 0x70
 8009d94:	2a10      	cmp	r2, #16
 8009d96:	bf08      	it	eq
 8009d98:	4626      	moveq	r6, r4
 8009d9a:	4433      	add	r3, r6
 8009d9c:	062a      	lsls	r2, r5, #24
 8009d9e:	bf48      	it	mi
 8009da0:	681b      	ldrmi	r3, [r3, #0]
 8009da2:	e7de      	b.n	8009d62 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8009da4:	a901      	add	r1, sp, #4
 8009da6:	4620      	mov	r0, r4
 8009da8:	f7ff ffb7 	bl	8009d1a <_ZL12read_sleb128PKhPl>
 8009dac:	e7ed      	b.n	8009d8a <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 8009dae:	4620      	mov	r0, r4
 8009db0:	f830 3b02 	ldrh.w	r3, [r0], #2
 8009db4:	e7ea      	b.n	8009d8c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8009db6:	4620      	mov	r0, r4
 8009db8:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8009dbc:	e7e6      	b.n	8009d8c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f850 3b04 	ldr.w	r3, [r0], #4
 8009dc4:	e7e2      	b.n	8009d8c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f850 3b08 	ldr.w	r3, [r0], #8
 8009dcc:	e7de      	b.n	8009d8c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8009dce:	f000 fe3e 	bl	800aa4e <abort>

08009dd2 <_Unwind_GetGR>:
 8009dd2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dd4:	ab03      	add	r3, sp, #12
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	2300      	movs	r3, #0
 8009dda:	460a      	mov	r2, r1
 8009ddc:	4619      	mov	r1, r3
 8009dde:	f7f6 fd7f 	bl	80008e0 <_Unwind_VRS_Get>
 8009de2:	9803      	ldr	r0, [sp, #12]
 8009de4:	b005      	add	sp, #20
 8009de6:	f85d fb04 	ldr.w	pc, [sp], #4

08009dea <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>:
 8009dea:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009dee:	2820      	cmp	r0, #32
 8009df0:	b508      	push	{r3, lr}
 8009df2:	d010      	beq.n	8009e16 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x2c>
 8009df4:	d804      	bhi.n	8009e00 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x16>
 8009df6:	b1c0      	cbz	r0, 8009e2a <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 8009df8:	2810      	cmp	r0, #16
 8009dfa:	d016      	beq.n	8009e2a <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 8009dfc:	f000 fe27 	bl	800aa4e <abort>
 8009e00:	2840      	cmp	r0, #64	; 0x40
 8009e02:	d00d      	beq.n	8009e20 <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x36>
 8009e04:	2850      	cmp	r0, #80	; 0x50
 8009e06:	d010      	beq.n	8009e2a <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x40>
 8009e08:	2830      	cmp	r0, #48	; 0x30
 8009e0a:	d1f7      	bne.n	8009dfc <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3+0x12>
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e12:	f7f7 bb1b 	b.w	800144c <_Unwind_GetDataRelBase>
 8009e16:	4608      	mov	r0, r1
 8009e18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e1c:	f7f7 bb1a 	b.w	8001454 <_Unwind_GetTextRelBase>
 8009e20:	4608      	mov	r0, r1
 8009e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e26:	f7f7 bb01 	b.w	800142c <_Unwind_GetRegionStart>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	bd08      	pop	{r3, pc}

08009e2e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8009e2e:	29ff      	cmp	r1, #255	; 0xff
 8009e30:	b570      	push	{r4, r5, r6, lr}
 8009e32:	460c      	mov	r4, r1
 8009e34:	4615      	mov	r5, r2
 8009e36:	461e      	mov	r6, r3
 8009e38:	d00b      	beq.n	8009e52 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj+0x24>
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f7ff ffd4 	bl	8009dea <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 8009e42:	4601      	mov	r1, r0
 8009e44:	4633      	mov	r3, r6
 8009e46:	462a      	mov	r2, r5
 8009e48:	4620      	mov	r0, r4
 8009e4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e4e:	f7ff bf7c 	b.w	8009d4a <_ZL28read_encoded_value_with_basehjPKhPj>
 8009e52:	2100      	movs	r1, #0
 8009e54:	e7f6      	b.n	8009e44 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj+0x16>

08009e56 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8009e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e58:	460e      	mov	r6, r1
 8009e5a:	4614      	mov	r4, r2
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	b108      	cbz	r0, 8009e64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 8009e60:	f7f7 fae4 	bl	800142c <_Unwind_GetRegionStart>
 8009e64:	6020      	str	r0, [r4, #0]
 8009e66:	7831      	ldrb	r1, [r6, #0]
 8009e68:	29ff      	cmp	r1, #255	; 0xff
 8009e6a:	f106 0201 	add.w	r2, r6, #1
 8009e6e:	d01d      	beq.n	8009eac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8009e70:	1d23      	adds	r3, r4, #4
 8009e72:	4628      	mov	r0, r5
 8009e74:	f7ff ffdb 	bl	8009e2e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	7813      	ldrb	r3, [r2, #0]
 8009e7c:	7523      	strb	r3, [r4, #20]
 8009e7e:	2bff      	cmp	r3, #255	; 0xff
 8009e80:	f102 0001 	add.w	r0, r2, #1
 8009e84:	d014      	beq.n	8009eb0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8009e86:	2310      	movs	r3, #16
 8009e88:	7523      	strb	r3, [r4, #20]
 8009e8a:	a901      	add	r1, sp, #4
 8009e8c:	f7ff ff34 	bl	8009cf8 <_ZL12read_uleb128PKhPm>
 8009e90:	9b01      	ldr	r3, [sp, #4]
 8009e92:	4403      	add	r3, r0
 8009e94:	60e3      	str	r3, [r4, #12]
 8009e96:	7803      	ldrb	r3, [r0, #0]
 8009e98:	7563      	strb	r3, [r4, #21]
 8009e9a:	a901      	add	r1, sp, #4
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	f7ff ff2b 	bl	8009cf8 <_ZL12read_uleb128PKhPm>
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	4403      	add	r3, r0
 8009ea6:	6123      	str	r3, [r4, #16]
 8009ea8:	b002      	add	sp, #8
 8009eaa:	bd70      	pop	{r4, r5, r6, pc}
 8009eac:	6060      	str	r0, [r4, #4]
 8009eae:	e7e4      	b.n	8009e7a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	e7ef      	b.n	8009e94 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08009eb4 <__gxx_personality_v0>:
 8009eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	b091      	sub	sp, #68	; 0x44
 8009eba:	2300      	movs	r3, #0
 8009ebc:	9304      	str	r3, [sp, #16]
 8009ebe:	f000 0303 	and.w	r3, r0, #3
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	4616      	mov	r6, r2
 8009eca:	d011      	beq.n	8009ef0 <__gxx_personality_v0+0x3c>
 8009ecc:	d303      	bcc.n	8009ed6 <__gxx_personality_v0+0x22>
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d003      	beq.n	8009eda <__gxx_personality_v0+0x26>
 8009ed2:	f000 fdbc 	bl	800aa4e <abort>
 8009ed6:	0702      	lsls	r2, r0, #28
 8009ed8:	d51a      	bpl.n	8009f10 <__gxx_personality_v0+0x5c>
 8009eda:	4631      	mov	r1, r6
 8009edc:	4620      	mov	r0, r4
 8009ede:	f7f7 fa91 	bl	8001404 <__gnu_unwind_frame>
 8009ee2:	b118      	cbz	r0, 8009eec <__gxx_personality_v0+0x38>
 8009ee4:	2009      	movs	r0, #9
 8009ee6:	b011      	add	sp, #68	; 0x44
 8009ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eec:	2008      	movs	r0, #8
 8009eee:	e7fa      	b.n	8009ee6 <__gxx_personality_v0+0x32>
 8009ef0:	f000 0508 	and.w	r5, r0, #8
 8009ef4:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 8009ef8:	bb75      	cbnz	r5, 8009f58 <__gxx_personality_v0+0xa4>
 8009efa:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8009efe:	4610      	mov	r0, r2
 8009f00:	210d      	movs	r1, #13
 8009f02:	f7ff ff66 	bl	8009dd2 <_Unwind_GetGR>
 8009f06:	4581      	cmp	r9, r0
 8009f08:	f040 8145 	bne.w	800a196 <__gxx_personality_v0+0x2e2>
 8009f0c:	2506      	movs	r5, #6
 8009f0e:	e000      	b.n	8009f12 <__gxx_personality_v0+0x5e>
 8009f10:	2501      	movs	r5, #1
 8009f12:	ab10      	add	r3, sp, #64	; 0x40
 8009f14:	f007 0708 	and.w	r7, r7, #8
 8009f18:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	433d      	orrs	r5, r7
 8009f22:	220c      	movs	r2, #12
 8009f24:	4619      	mov	r1, r3
 8009f26:	4630      	mov	r0, r6
 8009f28:	f7f6 fcfc 	bl	8000924 <_Unwind_VRS_Set>
 8009f2c:	2d06      	cmp	r5, #6
 8009f2e:	f040 813e 	bne.w	800a1ae <__gxx_personality_v0+0x2fa>
 8009f32:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8009f34:	e9d4 980a 	ldrd	r9, r8, [r4, #40]	; 0x28
 8009f38:	2f00      	cmp	r7, #0
 8009f3a:	bf0c      	ite	eq
 8009f3c:	f04f 0a01 	moveq.w	sl, #1
 8009f40:	f04f 0a03 	movne.w	sl, #3
 8009f44:	f015 0508 	ands.w	r5, r5, #8
 8009f48:	f000 80c7 	beq.w	800a0da <__gxx_personality_v0+0x226>
 8009f4c:	f1ba 0f01 	cmp.w	sl, #1
 8009f50:	f040 80be 	bne.w	800a0d0 <__gxx_personality_v0+0x21c>
 8009f54:	f000 fb34 	bl	800a5c0 <_ZSt9terminatev>
 8009f58:	2502      	movs	r5, #2
 8009f5a:	e7da      	b.n	8009f12 <__gxx_personality_v0+0x5e>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	e13b      	b.n	800a1d8 <__gxx_personality_v0+0x324>
 8009f60:	9a07      	ldr	r2, [sp, #28]
 8009f62:	4413      	add	r3, r2
 8009f64:	42bb      	cmp	r3, r7
 8009f66:	f240 813f 	bls.w	800a1e8 <__gxx_personality_v0+0x334>
 8009f6a:	9f08      	ldr	r7, [sp, #32]
 8009f6c:	b10f      	cbz	r7, 8009f72 <__gxx_personality_v0+0xbe>
 8009f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f70:	441f      	add	r7, r3
 8009f72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f74:	b110      	cbz	r0, 8009f7c <__gxx_personality_v0+0xc8>
 8009f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f78:	3801      	subs	r0, #1
 8009f7a:	4418      	add	r0, r3
 8009f7c:	2f00      	cmp	r7, #0
 8009f7e:	d0ac      	beq.n	8009eda <__gxx_personality_v0+0x26>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	f000 8104 	beq.w	800a18e <__gxx_personality_v0+0x2da>
 8009f86:	f015 0308 	ands.w	r3, r5, #8
 8009f8a:	9302      	str	r3, [sp, #8]
 8009f8c:	d034      	beq.n	8009ff8 <__gxx_personality_v0+0x144>
 8009f8e:	2347      	movs	r3, #71	; 0x47
 8009f90:	7023      	strb	r3, [r4, #0]
 8009f92:	234e      	movs	r3, #78	; 0x4e
 8009f94:	7063      	strb	r3, [r4, #1]
 8009f96:	2355      	movs	r3, #85	; 0x55
 8009f98:	70a3      	strb	r3, [r4, #2]
 8009f9a:	2343      	movs	r3, #67	; 0x43
 8009f9c:	70e3      	strb	r3, [r4, #3]
 8009f9e:	2346      	movs	r3, #70	; 0x46
 8009fa0:	7123      	strb	r3, [r4, #4]
 8009fa2:	234f      	movs	r3, #79	; 0x4f
 8009fa4:	7163      	strb	r3, [r4, #5]
 8009fa6:	2352      	movs	r3, #82	; 0x52
 8009fa8:	71a3      	strb	r3, [r4, #6]
 8009faa:	2300      	movs	r3, #0
 8009fac:	71e3      	strb	r3, [r4, #7]
 8009fae:	f04f 0a00 	mov.w	sl, #0
 8009fb2:	f06f 0b03 	mvn.w	fp, #3
 8009fb6:	a907      	add	r1, sp, #28
 8009fb8:	f7ff feaf 	bl	8009d1a <_ZL12read_sleb128PKhPl>
 8009fbc:	a908      	add	r1, sp, #32
 8009fbe:	9003      	str	r0, [sp, #12]
 8009fc0:	f7ff feab 	bl	8009d1a <_ZL12read_sleb128PKhPl>
 8009fc4:	9907      	ldr	r1, [sp, #28]
 8009fc6:	2900      	cmp	r1, #0
 8009fc8:	d067      	beq.n	800a09a <__gxx_personality_v0+0x1e6>
 8009fca:	dd3e      	ble.n	800a04a <__gxx_personality_v0+0x196>
 8009fcc:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8009fd0:	28ff      	cmp	r0, #255	; 0xff
 8009fd2:	d034      	beq.n	800a03e <__gxx_personality_v0+0x18a>
 8009fd4:	f000 0307 	and.w	r3, r0, #7
 8009fd8:	2b04      	cmp	r3, #4
 8009fda:	f63f af7a 	bhi.w	8009ed2 <__gxx_personality_v0+0x1e>
 8009fde:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <__gxx_personality_v0+0x130>)
 8009fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe4:	0800a00b 	.word	0x0800a00b
 8009fe8:	08009ed3 	.word	0x08009ed3
 8009fec:	0800a045 	.word	0x0800a045
 8009ff0:	0800a00b 	.word	0x0800a00b
 8009ff4:	0800a039 	.word	0x0800a039
 8009ff8:	79e3      	ldrb	r3, [r4, #7]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	bf0c      	ite	eq
 8009ffe:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 800a002:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 800a006:	9304      	str	r3, [sp, #16]
 800a008:	e7d1      	b.n	8009fae <__gxx_personality_v0+0xfa>
 800a00a:	f04f 0c04 	mov.w	ip, #4
 800a00e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a010:	ab09      	add	r3, sp, #36	; 0x24
 800a012:	fb0c 2211 	mls	r2, ip, r1, r2
 800a016:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a018:	f7ff fe97 	bl	8009d4a <_ZL28read_encoded_value_with_basehjPKhPj>
 800a01c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a01e:	b131      	cbz	r1, 800a02e <__gxx_personality_v0+0x17a>
 800a020:	b37c      	cbz	r4, 800a082 <__gxx_personality_v0+0x1ce>
 800a022:	ab04      	add	r3, sp, #16
 800a024:	2200      	movs	r2, #0
 800a026:	4620      	mov	r0, r4
 800a028:	f7ff fdc4 	bl	8009bb4 <__cxa_type_match>
 800a02c:	b348      	cbz	r0, 800a082 <__gxx_personality_v0+0x1ce>
 800a02e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800a032:	f04f 0a03 	mov.w	sl, #3
 800a036:	e038      	b.n	800a0aa <__gxx_personality_v0+0x1f6>
 800a038:	f04f 0c08 	mov.w	ip, #8
 800a03c:	e7e7      	b.n	800a00e <__gxx_personality_v0+0x15a>
 800a03e:	f04f 0c00 	mov.w	ip, #0
 800a042:	e7e4      	b.n	800a00e <__gxx_personality_v0+0x15a>
 800a044:	f04f 0c02 	mov.w	ip, #2
 800a048:	e7e1      	b.n	800a00e <__gxx_personality_v0+0x15a>
 800a04a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a04c:	fb01 b10b 	mla	r1, r1, fp, fp
 800a050:	eb03 0901 	add.w	r9, r3, r1
 800a054:	b1e4      	cbz	r4, 800a090 <__gxx_personality_v0+0x1dc>
 800a056:	9a02      	ldr	r2, [sp, #8]
 800a058:	b9d2      	cbnz	r2, 800a090 <__gxx_personality_v0+0x1dc>
 800a05a:	9b04      	ldr	r3, [sp, #16]
 800a05c:	9306      	str	r3, [sp, #24]
 800a05e:	f1a9 0904 	sub.w	r9, r9, #4
 800a062:	f859 1f04 	ldr.w	r1, [r9, #4]!
 800a066:	b141      	cbz	r1, 800a07a <__gxx_personality_v0+0x1c6>
 800a068:	ab06      	add	r3, sp, #24
 800a06a:	2200      	movs	r2, #0
 800a06c:	4449      	add	r1, r9
 800a06e:	4620      	mov	r0, r4
 800a070:	f7ff fda0 	bl	8009bb4 <__cxa_type_match>
 800a074:	2800      	cmp	r0, #0
 800a076:	d0f4      	beq.n	800a062 <__gxx_personality_v0+0x1ae>
 800a078:	2101      	movs	r1, #1
 800a07a:	f081 0101 	eor.w	r1, r1, #1
 800a07e:	2900      	cmp	r1, #0
 800a080:	d1d5      	bne.n	800a02e <__gxx_personality_v0+0x17a>
 800a082:	9808      	ldr	r0, [sp, #32]
 800a084:	2800      	cmp	r0, #0
 800a086:	d07e      	beq.n	800a186 <__gxx_personality_v0+0x2d2>
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	4403      	add	r3, r0
 800a08c:	4618      	mov	r0, r3
 800a08e:	e792      	b.n	8009fb6 <__gxx_personality_v0+0x102>
 800a090:	5859      	ldr	r1, [r3, r1]
 800a092:	fab1 f181 	clz	r1, r1
 800a096:	0949      	lsrs	r1, r1, #5
 800a098:	e7f1      	b.n	800a07e <__gxx_personality_v0+0x1ca>
 800a09a:	f04f 0a01 	mov.w	sl, #1
 800a09e:	e7f0      	b.n	800a082 <__gxx_personality_v0+0x1ce>
 800a0a0:	f04f 0900 	mov.w	r9, #0
 800a0a4:	464f      	mov	r7, r9
 800a0a6:	f04f 0a01 	mov.w	sl, #1
 800a0aa:	07eb      	lsls	r3, r5, #31
 800a0ac:	f57f af4a 	bpl.w	8009f44 <__gxx_personality_v0+0x90>
 800a0b0:	f1ba 0f02 	cmp.w	sl, #2
 800a0b4:	f43f af11 	beq.w	8009eda <__gxx_personality_v0+0x26>
 800a0b8:	210d      	movs	r1, #13
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	9d04      	ldr	r5, [sp, #16]
 800a0be:	f7ff fe88 	bl	8009dd2 <_Unwind_GetGR>
 800a0c2:	e9c4 980a 	strd	r9, r8, [r4, #40]	; 0x28
 800a0c6:	e9c4 0508 	strd	r0, r5, [r4, #32]
 800a0ca:	6327      	str	r7, [r4, #48]	; 0x30
 800a0cc:	2006      	movs	r0, #6
 800a0ce:	e70a      	b.n	8009ee6 <__gxx_personality_v0+0x32>
 800a0d0:	f1b9 0f00 	cmp.w	r9, #0
 800a0d4:	da2a      	bge.n	800a12c <__gxx_personality_v0+0x278>
 800a0d6:	f000 fa85 	bl	800a5e4 <_ZSt10unexpectedv>
 800a0da:	f1ba 0f01 	cmp.w	sl, #1
 800a0de:	d102      	bne.n	800a0e6 <__gxx_personality_v0+0x232>
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f000 fb5f 	bl	800a7a4 <__cxa_call_terminate>
 800a0e6:	f1b9 0f00 	cmp.w	r9, #0
 800a0ea:	da1f      	bge.n	800a12c <__gxx_personality_v0+0x278>
 800a0ec:	aa0a      	add	r2, sp, #40	; 0x28
 800a0ee:	4641      	mov	r1, r8
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7ff feb0 	bl	8009e56 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800a0f6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800a0fa:	28ff      	cmp	r0, #255	; 0xff
 800a0fc:	d00f      	beq.n	800a11e <__gxx_personality_v0+0x26a>
 800a0fe:	4631      	mov	r1, r6
 800a100:	f7ff fe73 	bl	8009dea <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800a104:	f06f 0303 	mvn.w	r3, #3
 800a108:	fb09 3203 	mla	r2, r9, r3, r3
 800a10c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a10e:	900c      	str	r0, [sp, #48]	; 0x30
 800a110:	4413      	add	r3, r2
 800a112:	2200      	movs	r2, #0
 800a114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a118:	b119      	cbz	r1, 800a122 <__gxx_personality_v0+0x26e>
 800a11a:	3201      	adds	r2, #1
 800a11c:	e7fa      	b.n	800a114 <__gxx_personality_v0+0x260>
 800a11e:	4628      	mov	r0, r5
 800a120:	e7f0      	b.n	800a104 <__gxx_personality_v0+0x250>
 800a122:	e9c4 200a 	strd	r2, r0, [r4, #40]	; 0x28
 800a126:	2204      	movs	r2, #4
 800a128:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 800a12c:	ab10      	add	r3, sp, #64	; 0x40
 800a12e:	4630      	mov	r0, r6
 800a130:	f843 4d1c 	str.w	r4, [r3, #-28]!
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	2300      	movs	r3, #0
 800a138:	461a      	mov	r2, r3
 800a13a:	4619      	mov	r1, r3
 800a13c:	f7f6 fbf2 	bl	8000924 <_Unwind_VRS_Set>
 800a140:	ab10      	add	r3, sp, #64	; 0x40
 800a142:	2201      	movs	r2, #1
 800a144:	f843 9d20 	str.w	r9, [r3, #-32]!
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	2300      	movs	r3, #0
 800a14c:	4619      	mov	r1, r3
 800a14e:	4630      	mov	r0, r6
 800a150:	f7f6 fbe8 	bl	8000924 <_Unwind_VRS_Set>
 800a154:	210f      	movs	r1, #15
 800a156:	4630      	mov	r0, r6
 800a158:	f7ff fe3b 	bl	8009dd2 <_Unwind_GetGR>
 800a15c:	ab10      	add	r3, sp, #64	; 0x40
 800a15e:	f000 0001 	and.w	r0, r0, #1
 800a162:	4307      	orrs	r7, r0
 800a164:	f843 7d24 	str.w	r7, [r3, #-36]!
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	2300      	movs	r3, #0
 800a16c:	220f      	movs	r2, #15
 800a16e:	4619      	mov	r1, r3
 800a170:	4630      	mov	r0, r6
 800a172:	f7f6 fbd7 	bl	8000924 <_Unwind_VRS_Set>
 800a176:	f1ba 0f02 	cmp.w	sl, #2
 800a17a:	d102      	bne.n	800a182 <__gxx_personality_v0+0x2ce>
 800a17c:	4620      	mov	r0, r4
 800a17e:	f7ff fd77 	bl	8009c70 <__cxa_begin_cleanup>
 800a182:	2007      	movs	r0, #7
 800a184:	e6af      	b.n	8009ee6 <__gxx_personality_v0+0x32>
 800a186:	f1ba 0f00 	cmp.w	sl, #0
 800a18a:	f43f aea6 	beq.w	8009eda <__gxx_personality_v0+0x26>
 800a18e:	4681      	mov	r9, r0
 800a190:	f04f 0a02 	mov.w	sl, #2
 800a194:	e789      	b.n	800a0aa <__gxx_personality_v0+0x1f6>
 800a196:	aa10      	add	r2, sp, #64	; 0x40
 800a198:	4643      	mov	r3, r8
 800a19a:	f842 4d2c 	str.w	r4, [r2, #-44]!
 800a19e:	4641      	mov	r1, r8
 800a1a0:	9200      	str	r2, [sp, #0]
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	220c      	movs	r2, #12
 800a1a6:	f045 0502 	orr.w	r5, r5, #2
 800a1aa:	f7f6 fbbb 	bl	8000924 <_Unwind_VRS_Set>
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f7f7 f942 	bl	8001438 <_Unwind_GetLanguageSpecificData>
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	f43f ae8f 	beq.w	8009eda <__gxx_personality_v0+0x26>
 800a1bc:	4601      	mov	r1, r0
 800a1be:	aa0a      	add	r2, sp, #40	; 0x28
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff fe48 	bl	8009e56 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800a1c6:	4681      	mov	r9, r0
 800a1c8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800a1cc:	28ff      	cmp	r0, #255	; 0xff
 800a1ce:	f43f aec5 	beq.w	8009f5c <__gxx_personality_v0+0xa8>
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	f7ff fe09 	bl	8009dea <_ZL21base_of_encoded_valuehP15_Unwind_Context.part.3>
 800a1d8:	900c      	str	r0, [sp, #48]	; 0x30
 800a1da:	210f      	movs	r1, #15
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f7ff fdf8 	bl	8009dd2 <_Unwind_GetGR>
 800a1e2:	f020 0001 	bic.w	r0, r0, #1
 800a1e6:	1e47      	subs	r7, r0, #1
 800a1e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1ea:	454b      	cmp	r3, r9
 800a1ec:	f67f af58 	bls.w	800a0a0 <__gxx_personality_v0+0x1ec>
 800a1f0:	464a      	mov	r2, r9
 800a1f2:	ab06      	add	r3, sp, #24
 800a1f4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	f7ff fe18 	bl	8009e2e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a1fe:	ab07      	add	r3, sp, #28
 800a200:	4602      	mov	r2, r0
 800a202:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a206:	2000      	movs	r0, #0
 800a208:	f7ff fe11 	bl	8009e2e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a20c:	ab08      	add	r3, sp, #32
 800a20e:	4602      	mov	r2, r0
 800a210:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a214:	2000      	movs	r0, #0
 800a216:	f7ff fe0a 	bl	8009e2e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a21a:	a909      	add	r1, sp, #36	; 0x24
 800a21c:	f7ff fd6c 	bl	8009cf8 <_ZL12read_uleb128PKhPm>
 800a220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a222:	9a06      	ldr	r2, [sp, #24]
 800a224:	4413      	add	r3, r2
 800a226:	42bb      	cmp	r3, r7
 800a228:	4681      	mov	r9, r0
 800a22a:	f67f ae99 	bls.w	8009f60 <__gxx_personality_v0+0xac>
 800a22e:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800a232:	e7d9      	b.n	800a1e8 <__gxx_personality_v0+0x334>

0800a234 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 800a234:	2801      	cmp	r0, #1
 800a236:	b510      	push	{r4, lr}
 800a238:	d903      	bls.n	800a242 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 800a23a:	f851 0c14 	ldr.w	r0, [r1, #-20]
 800a23e:	f000 f9b3 	bl	800a5a8 <_ZN10__cxxabiv111__terminateEPFvvE>
 800a242:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 800a246:	f3bf 8f5b 	dmb	ish
 800a24a:	e853 2f00 	ldrex	r2, [r3]
 800a24e:	3a01      	subs	r2, #1
 800a250:	e843 2000 	strex	r0, r2, [r3]
 800a254:	2800      	cmp	r0, #0
 800a256:	d1f8      	bne.n	800a24a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 800a258:	f3bf 8f5b 	dmb	ish
 800a25c:	b95a      	cbnz	r2, 800a276 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 800a25e:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800a262:	f101 0458 	add.w	r4, r1, #88	; 0x58
 800a266:	b10b      	cbz	r3, 800a26c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x38>
 800a268:	4620      	mov	r0, r4
 800a26a:	4798      	blx	r3
 800a26c:	4620      	mov	r0, r4
 800a26e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a272:	f000 ba33 	b.w	800a6dc <__cxa_free_exception>
 800a276:	bd10      	pop	{r4, pc}

0800a278 <__cxa_init_primary_exception>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	2500      	movs	r5, #0
 800a27c:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 800a280:	f840 5c80 	str.w	r5, [r0, #-128]
 800a284:	4604      	mov	r4, r0
 800a286:	f000 f9a5 	bl	800a5d4 <_ZSt14get_unexpectedv>
 800a28a:	f844 0c70 	str.w	r0, [r4, #-112]
 800a28e:	f000 f98f 	bl	800a5b0 <_ZSt13get_terminatev>
 800a292:	2347      	movs	r3, #71	; 0x47
 800a294:	f804 3c58 	strb.w	r3, [r4, #-88]
 800a298:	234e      	movs	r3, #78	; 0x4e
 800a29a:	f804 3c57 	strb.w	r3, [r4, #-87]
 800a29e:	2355      	movs	r3, #85	; 0x55
 800a2a0:	f804 3c56 	strb.w	r3, [r4, #-86]
 800a2a4:	2343      	movs	r3, #67	; 0x43
 800a2a6:	f804 3c55 	strb.w	r3, [r4, #-85]
 800a2aa:	f804 3c54 	strb.w	r3, [r4, #-84]
 800a2ae:	232b      	movs	r3, #43	; 0x2b
 800a2b0:	f804 3c53 	strb.w	r3, [r4, #-83]
 800a2b4:	f804 3c52 	strb.w	r3, [r4, #-82]
 800a2b8:	4b04      	ldr	r3, [pc, #16]	; (800a2cc <__cxa_init_primary_exception+0x54>)
 800a2ba:	f844 0c6c 	str.w	r0, [r4, #-108]
 800a2be:	f804 5c51 	strb.w	r5, [r4, #-81]
 800a2c2:	f844 3c50 	str.w	r3, [r4, #-80]
 800a2c6:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	0800a235 	.word	0x0800a235

0800a2d0 <__cxa_throw>:
 800a2d0:	b508      	push	{r3, lr}
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	460d      	mov	r5, r1
 800a2d6:	4616      	mov	r6, r2
 800a2d8:	f7ff fd08 	bl	8009cec <__cxa_get_globals>
 800a2dc:	6843      	ldr	r3, [r0, #4]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	6043      	str	r3, [r0, #4]
 800a2e2:	4632      	mov	r2, r6
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f7ff ffc6 	bl	800a278 <__cxa_init_primary_exception>
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	f844 3b28 	str.w	r3, [r4], #40
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f7f6 fe9d 	bl	8001034 <_Unwind_RaiseException>
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f000 f856 	bl	800a3ac <__cxa_begin_catch>
 800a300:	f000 f95e 	bl	800a5c0 <_ZSt9terminatev>

0800a304 <__cxa_rethrow>:
 800a304:	b508      	push	{r3, lr}
 800a306:	f7ff fcf1 	bl	8009cec <__cxa_get_globals>
 800a30a:	e9d0 4200 	ldrd	r4, r2, [r0]
 800a30e:	3201      	adds	r2, #1
 800a310:	6042      	str	r2, [r0, #4]
 800a312:	b34c      	cbz	r4, 800a368 <__cxa_rethrow+0x64>
 800a314:	f894 2020 	ldrb.w	r2, [r4, #32]
 800a318:	2a47      	cmp	r2, #71	; 0x47
 800a31a:	d127      	bne.n	800a36c <__cxa_rethrow+0x68>
 800a31c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800a320:	2a4e      	cmp	r2, #78	; 0x4e
 800a322:	d123      	bne.n	800a36c <__cxa_rethrow+0x68>
 800a324:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800a328:	2a55      	cmp	r2, #85	; 0x55
 800a32a:	d11f      	bne.n	800a36c <__cxa_rethrow+0x68>
 800a32c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800a330:	2a43      	cmp	r2, #67	; 0x43
 800a332:	d11b      	bne.n	800a36c <__cxa_rethrow+0x68>
 800a334:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800a338:	2a43      	cmp	r2, #67	; 0x43
 800a33a:	d117      	bne.n	800a36c <__cxa_rethrow+0x68>
 800a33c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800a340:	2a2b      	cmp	r2, #43	; 0x2b
 800a342:	d113      	bne.n	800a36c <__cxa_rethrow+0x68>
 800a344:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800a348:	2a2b      	cmp	r2, #43	; 0x2b
 800a34a:	d10f      	bne.n	800a36c <__cxa_rethrow+0x68>
 800a34c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800a350:	2a01      	cmp	r2, #1
 800a352:	d80b      	bhi.n	800a36c <__cxa_rethrow+0x68>
 800a354:	6962      	ldr	r2, [r4, #20]
 800a356:	4252      	negs	r2, r2
 800a358:	6162      	str	r2, [r4, #20]
 800a35a:	3420      	adds	r4, #32
 800a35c:	4620      	mov	r0, r4
 800a35e:	f7f6 fe8d 	bl	800107c <_Unwind_Resume_or_Rethrow>
 800a362:	4620      	mov	r0, r4
 800a364:	f000 f822 	bl	800a3ac <__cxa_begin_catch>
 800a368:	f000 f92a 	bl	800a5c0 <_ZSt9terminatev>
 800a36c:	2200      	movs	r2, #0
 800a36e:	6002      	str	r2, [r0, #0]
 800a370:	e7f3      	b.n	800a35a <__cxa_rethrow+0x56>

0800a372 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800a372:	7803      	ldrb	r3, [r0, #0]
 800a374:	2b47      	cmp	r3, #71	; 0x47
 800a376:	d117      	bne.n	800a3a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a378:	7843      	ldrb	r3, [r0, #1]
 800a37a:	2b4e      	cmp	r3, #78	; 0x4e
 800a37c:	d114      	bne.n	800a3a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a37e:	7883      	ldrb	r3, [r0, #2]
 800a380:	2b55      	cmp	r3, #85	; 0x55
 800a382:	d111      	bne.n	800a3a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a384:	78c3      	ldrb	r3, [r0, #3]
 800a386:	2b43      	cmp	r3, #67	; 0x43
 800a388:	d10e      	bne.n	800a3a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a38a:	7903      	ldrb	r3, [r0, #4]
 800a38c:	2b43      	cmp	r3, #67	; 0x43
 800a38e:	d10b      	bne.n	800a3a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a390:	7943      	ldrb	r3, [r0, #5]
 800a392:	2b2b      	cmp	r3, #43	; 0x2b
 800a394:	d108      	bne.n	800a3a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a396:	7983      	ldrb	r3, [r0, #6]
 800a398:	2b2b      	cmp	r3, #43	; 0x2b
 800a39a:	d105      	bne.n	800a3a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a39c:	79c0      	ldrb	r0, [r0, #7]
 800a39e:	2801      	cmp	r0, #1
 800a3a0:	bf8c      	ite	hi
 800a3a2:	2000      	movhi	r0, #0
 800a3a4:	2001      	movls	r0, #1
 800a3a6:	4770      	bx	lr
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	4770      	bx	lr

0800a3ac <__cxa_begin_catch>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4605      	mov	r5, r0
 800a3b0:	f7ff fc9c 	bl	8009cec <__cxa_get_globals>
 800a3b4:	4601      	mov	r1, r0
 800a3b6:	6802      	ldr	r2, [r0, #0]
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f1a5 0420 	sub.w	r4, r5, #32
 800a3be:	f7ff ffd8 	bl	800a372 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a3c2:	b930      	cbnz	r0, 800a3d2 <__cxa_begin_catch+0x26>
 800a3c4:	b10a      	cbz	r2, 800a3ca <__cxa_begin_catch+0x1e>
 800a3c6:	f000 f8fb 	bl	800a5c0 <_ZSt9terminatev>
 800a3ca:	600c      	str	r4, [r1, #0]
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	bd38      	pop	{r3, r4, r5, pc}
 800a3d2:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	bfb4      	ite	lt
 800a3da:	f1c3 0301 	rsblt	r3, r3, #1
 800a3de:	3301      	addge	r3, #1
 800a3e0:	f845 3c0c 	str.w	r3, [r5, #-12]
 800a3e4:	684b      	ldr	r3, [r1, #4]
 800a3e6:	42a2      	cmp	r2, r4
 800a3e8:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3ec:	604b      	str	r3, [r1, #4]
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	bf1c      	itt	ne
 800a3f2:	f845 2c10 	strne.w	r2, [r5, #-16]
 800a3f6:	600c      	strne	r4, [r1, #0]
 800a3f8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800a3fa:	f7f6 fa69 	bl	80008d0 <_Unwind_Complete>
 800a3fe:	e7e6      	b.n	800a3ce <__cxa_begin_catch+0x22>

0800a400 <__cxa_end_catch>:
 800a400:	b510      	push	{r4, lr}
 800a402:	f7ff fc6f 	bl	8009ce4 <__cxa_get_globals_fast>
 800a406:	6802      	ldr	r2, [r0, #0]
 800a408:	4601      	mov	r1, r0
 800a40a:	b19a      	cbz	r2, 800a434 <__cxa_end_catch+0x34>
 800a40c:	f102 0420 	add.w	r4, r2, #32
 800a410:	4620      	mov	r0, r4
 800a412:	f7ff ffae 	bl	800a372 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a416:	b928      	cbnz	r0, 800a424 <__cxa_end_catch+0x24>
 800a418:	6008      	str	r0, [r1, #0]
 800a41a:	4620      	mov	r0, r4
 800a41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a420:	f7f6 ba58 	b.w	80008d4 <_Unwind_DeleteException>
 800a424:	6953      	ldr	r3, [r2, #20]
 800a426:	2b00      	cmp	r3, #0
 800a428:	da05      	bge.n	800a436 <__cxa_end_catch+0x36>
 800a42a:	3301      	adds	r3, #1
 800a42c:	d101      	bne.n	800a432 <__cxa_end_catch+0x32>
 800a42e:	6910      	ldr	r0, [r2, #16]
 800a430:	6008      	str	r0, [r1, #0]
 800a432:	6153      	str	r3, [r2, #20]
 800a434:	bd10      	pop	{r4, pc}
 800a436:	3b01      	subs	r3, #1
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d102      	bne.n	800a442 <__cxa_end_catch+0x42>
 800a43c:	6913      	ldr	r3, [r2, #16]
 800a43e:	600b      	str	r3, [r1, #0]
 800a440:	e7eb      	b.n	800a41a <__cxa_end_catch+0x1a>
 800a442:	daf6      	bge.n	800a432 <__cxa_end_catch+0x32>
 800a444:	f000 f8bc 	bl	800a5c0 <_ZSt9terminatev>

0800a448 <_Znwj>:
 800a448:	b510      	push	{r4, lr}
 800a44a:	2800      	cmp	r0, #0
 800a44c:	bf14      	ite	ne
 800a44e:	4604      	movne	r4, r0
 800a450:	2401      	moveq	r4, #1
 800a452:	4620      	mov	r0, r4
 800a454:	f000 fbf6 	bl	800ac44 <malloc>
 800a458:	b930      	cbnz	r0, 800a468 <_Znwj+0x20>
 800a45a:	f000 f89b 	bl	800a594 <_ZSt15get_new_handlerv>
 800a45e:	b908      	cbnz	r0, 800a464 <_Znwj+0x1c>
 800a460:	f000 faf5 	bl	800aa4e <abort>
 800a464:	4780      	blx	r0
 800a466:	e7f4      	b.n	800a452 <_Znwj+0xa>
 800a468:	bd10      	pop	{r4, pc}
	...

0800a46c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 800a46c:	b510      	push	{r4, lr}
 800a46e:	4b03      	ldr	r3, [pc, #12]	; (800a47c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 800a470:	6003      	str	r3, [r0, #0]
 800a472:	4604      	mov	r4, r0
 800a474:	f000 f95c 	bl	800a730 <_ZNSt9type_infoD1Ev>
 800a478:	4620      	mov	r0, r4
 800a47a:	bd10      	pop	{r4, pc}
 800a47c:	0800b7c8 	.word	0x0800b7c8

0800a480 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 800a480:	b510      	push	{r4, lr}
 800a482:	4604      	mov	r4, r0
 800a484:	f7ff fff2 	bl	800a46c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 800a488:	4620      	mov	r0, r4
 800a48a:	2108      	movs	r1, #8
 800a48c:	f7ff fc32 	bl	8009cf4 <_ZdlPvj>
 800a490:	4620      	mov	r0, r4
 800a492:	bd10      	pop	{r4, pc}

0800a494 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800a494:	b510      	push	{r4, lr}
 800a496:	4b03      	ldr	r3, [pc, #12]	; (800a4a4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800a498:	6003      	str	r3, [r0, #0]
 800a49a:	4604      	mov	r4, r0
 800a49c:	f000 f9fe 	bl	800a89c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	bd10      	pop	{r4, pc}
 800a4a4:	0800b81c 	.word	0x0800b81c

0800a4a8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	f7ff fff2 	bl	800a494 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	210c      	movs	r1, #12
 800a4b4:	f7ff fc1e 	bl	8009cf4 <_ZdlPvj>
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	bd10      	pop	{r4, pc}

0800a4bc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800a4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c0:	9e06      	ldr	r6, [sp, #24]
 800a4c2:	4296      	cmp	r6, r2
 800a4c4:	4607      	mov	r7, r0
 800a4c6:	4688      	mov	r8, r1
 800a4c8:	4615      	mov	r5, r2
 800a4ca:	461c      	mov	r4, r3
 800a4cc:	d00a      	beq.n	800a4e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
 800a4ce:	68b8      	ldr	r0, [r7, #8]
 800a4d0:	6803      	ldr	r3, [r0, #0]
 800a4d2:	9606      	str	r6, [sp, #24]
 800a4d4:	6a1e      	ldr	r6, [r3, #32]
 800a4d6:	462a      	mov	r2, r5
 800a4d8:	4623      	mov	r3, r4
 800a4da:	4641      	mov	r1, r8
 800a4dc:	46b4      	mov	ip, r6
 800a4de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e2:	4760      	bx	ip
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	f000 f928 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d0ef      	beq.n	800a4ce <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x12>
 800a4ee:	2006      	movs	r0, #6
 800a4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a4f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800a4f4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f8:	460e      	mov	r6, r1
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4683      	mov	fp, r0
 800a4fe:	4617      	mov	r7, r2
 800a500:	4699      	mov	r9, r3
 800a502:	e9dd 4a0a 	ldrd	r4, sl, [sp, #40]	; 0x28
 800a506:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	; 0x30
 800a50a:	f000 f916 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a50e:	b190      	cbz	r0, 800a536 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 800a510:	2e00      	cmp	r6, #0
 800a512:	602c      	str	r4, [r5, #0]
 800a514:	712f      	strb	r7, [r5, #4]
 800a516:	db09      	blt.n	800a52c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800a518:	4434      	add	r4, r6
 800a51a:	45a0      	cmp	r8, r4
 800a51c:	bf0c      	ite	eq
 800a51e:	2406      	moveq	r4, #6
 800a520:	2401      	movne	r4, #1
 800a522:	71ac      	strb	r4, [r5, #6]
 800a524:	2000      	movs	r0, #0
 800a526:	b001      	add	sp, #4
 800a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52c:	3602      	adds	r6, #2
 800a52e:	d1f9      	bne.n	800a524 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800a530:	2301      	movs	r3, #1
 800a532:	71ab      	strb	r3, [r5, #6]
 800a534:	e7f6      	b.n	800a524 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800a536:	4544      	cmp	r4, r8
 800a538:	d106      	bne.n	800a548 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800a53a:	4651      	mov	r1, sl
 800a53c:	4658      	mov	r0, fp
 800a53e:	f000 f8fc 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a542:	b108      	cbz	r0, 800a548 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800a544:	716f      	strb	r7, [r5, #5]
 800a546:	e7ed      	b.n	800a524 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800a548:	f8db 0008 	ldr.w	r0, [fp, #8]
 800a54c:	6803      	ldr	r3, [r0, #0]
 800a54e:	e9cd 850c 	strd	r8, r5, [sp, #48]	; 0x30
 800a552:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 800a556:	69dc      	ldr	r4, [r3, #28]
 800a558:	463a      	mov	r2, r7
 800a55a:	464b      	mov	r3, r9
 800a55c:	4631      	mov	r1, r6
 800a55e:	46a4      	mov	ip, r4
 800a560:	b001      	add	sp, #4
 800a562:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a566:	4760      	bx	ip

0800a568 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800a568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a56c:	4604      	mov	r4, r0
 800a56e:	460d      	mov	r5, r1
 800a570:	4616      	mov	r6, r2
 800a572:	461f      	mov	r7, r3
 800a574:	f000 f9c3 	bl	800a8fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800a578:	b948      	cbnz	r0, 800a58e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800a57a:	68a0      	ldr	r0, [r4, #8]
 800a57c:	6803      	ldr	r3, [r0, #0]
 800a57e:	699c      	ldr	r4, [r3, #24]
 800a580:	4632      	mov	r2, r6
 800a582:	463b      	mov	r3, r7
 800a584:	4629      	mov	r1, r5
 800a586:	46a4      	mov	ip, r4
 800a588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a58c:	4760      	bx	ip
 800a58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a594 <_ZSt15get_new_handlerv>:
 800a594:	4b02      	ldr	r3, [pc, #8]	; (800a5a0 <_ZSt15get_new_handlerv+0xc>)
 800a596:	6818      	ldr	r0, [r3, #0]
 800a598:	f3bf 8f5b 	dmb	ish
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	20000ea4 	.word	0x20000ea4

0800a5a4 <_ZdlPv>:
 800a5a4:	f000 bb56 	b.w	800ac54 <free>

0800a5a8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a5a8:	b508      	push	{r3, lr}
 800a5aa:	4780      	blx	r0
 800a5ac:	f000 fa4f 	bl	800aa4e <abort>

0800a5b0 <_ZSt13get_terminatev>:
 800a5b0:	4b02      	ldr	r3, [pc, #8]	; (800a5bc <_ZSt13get_terminatev+0xc>)
 800a5b2:	6818      	ldr	r0, [r3, #0]
 800a5b4:	f3bf 8f5b 	dmb	ish
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	20000018 	.word	0x20000018

0800a5c0 <_ZSt9terminatev>:
 800a5c0:	b508      	push	{r3, lr}
 800a5c2:	f7ff fff5 	bl	800a5b0 <_ZSt13get_terminatev>
 800a5c6:	f7ff ffef 	bl	800a5a8 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a5ca <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800a5ca:	b508      	push	{r3, lr}
 800a5cc:	4780      	blx	r0
 800a5ce:	f7ff fff7 	bl	800a5c0 <_ZSt9terminatev>
	...

0800a5d4 <_ZSt14get_unexpectedv>:
 800a5d4:	4b02      	ldr	r3, [pc, #8]	; (800a5e0 <_ZSt14get_unexpectedv+0xc>)
 800a5d6:	6818      	ldr	r0, [r3, #0]
 800a5d8:	f3bf 8f5b 	dmb	ish
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	20000014 	.word	0x20000014

0800a5e4 <_ZSt10unexpectedv>:
 800a5e4:	b508      	push	{r3, lr}
 800a5e6:	f7ff fff5 	bl	800a5d4 <_ZSt14get_unexpectedv>
 800a5ea:	f7ff ffee 	bl	800a5ca <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

0800a5f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 800a5f0:	4a1c      	ldr	r2, [pc, #112]	; (800a664 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x74>)
 800a5f2:	6853      	ldr	r3, [r2, #4]
 800a5f4:	b570      	push	{r4, r5, r6, lr}
 800a5f6:	f1a0 0408 	sub.w	r4, r0, #8
 800a5fa:	4616      	mov	r6, r2
 800a5fc:	b123      	cbz	r3, 800a608 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x18>
 800a5fe:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a602:	1865      	adds	r5, r4, r1
 800a604:	42ab      	cmp	r3, r5
 800a606:	d903      	bls.n	800a610 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
 800a608:	f840 3c04 	str.w	r3, [r0, #-4]
 800a60c:	6074      	str	r4, [r6, #4]
 800a60e:	bd70      	pop	{r4, r5, r6, pc}
 800a610:	d108      	bne.n	800a624 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x34>
 800a612:	681d      	ldr	r5, [r3, #0]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f840 3c04 	str.w	r3, [r0, #-4]
 800a61a:	4429      	add	r1, r5
 800a61c:	f840 1c08 	str.w	r1, [r0, #-8]
 800a620:	6054      	str	r4, [r2, #4]
 800a622:	e7f4      	b.n	800a60e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x1e>
 800a624:	3204      	adds	r2, #4
 800a626:	685e      	ldr	r6, [r3, #4]
 800a628:	b126      	cbz	r6, 800a634 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 800a62a:	42b5      	cmp	r5, r6
 800a62c:	d202      	bcs.n	800a634 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 800a62e:	1d1a      	adds	r2, r3, #4
 800a630:	4633      	mov	r3, r6
 800a632:	e7f8      	b.n	800a626 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x36>
 800a634:	42b5      	cmp	r5, r6
 800a636:	bf02      	ittt	eq
 800a638:	682e      	ldreq	r6, [r5, #0]
 800a63a:	686d      	ldreq	r5, [r5, #4]
 800a63c:	605d      	streq	r5, [r3, #4]
 800a63e:	6813      	ldr	r3, [r2, #0]
 800a640:	681d      	ldr	r5, [r3, #0]
 800a642:	bf08      	it	eq
 800a644:	1989      	addeq	r1, r1, r6
 800a646:	195e      	adds	r6, r3, r5
 800a648:	42b4      	cmp	r4, r6
 800a64a:	bf1f      	itttt	ne
 800a64c:	685b      	ldrne	r3, [r3, #4]
 800a64e:	f840 3c04 	strne.w	r3, [r0, #-4]
 800a652:	6813      	ldrne	r3, [r2, #0]
 800a654:	f840 1c08 	strne.w	r1, [r0, #-8]
 800a658:	bf06      	itte	eq
 800a65a:	1949      	addeq	r1, r1, r5
 800a65c:	6019      	streq	r1, [r3, #0]
 800a65e:	605c      	strne	r4, [r3, #4]
 800a660:	e7d5      	b.n	800a60e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x1e>
 800a662:	bf00      	nop
 800a664:	20000ea8 	.word	0x20000ea8

0800a668 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 800a668:	f100 0308 	add.w	r3, r0, #8
 800a66c:	b530      	push	{r4, r5, lr}
 800a66e:	2b08      	cmp	r3, #8
 800a670:	4a0e      	ldr	r2, [pc, #56]	; (800a6ac <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x44>)
 800a672:	bf38      	it	cc
 800a674:	2308      	movcc	r3, #8
 800a676:	3307      	adds	r3, #7
 800a678:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a67c:	f023 0307 	bic.w	r3, r3, #7
 800a680:	b168      	cbz	r0, 800a69e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x36>
 800a682:	e9d0 1400 	ldrd	r1, r4, [r0]
 800a686:	428b      	cmp	r3, r1
 800a688:	d90a      	bls.n	800a6a0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x38>
 800a68a:	1d02      	adds	r2, r0, #4
 800a68c:	4620      	mov	r0, r4
 800a68e:	e7f7      	b.n	800a680 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x18>
 800a690:	18c5      	adds	r5, r0, r3
 800a692:	606c      	str	r4, [r5, #4]
 800a694:	50c1      	str	r1, [r0, r3]
 800a696:	6810      	ldr	r0, [r2, #0]
 800a698:	6003      	str	r3, [r0, #0]
 800a69a:	6015      	str	r5, [r2, #0]
 800a69c:	3008      	adds	r0, #8
 800a69e:	bd30      	pop	{r4, r5, pc}
 800a6a0:	1ac9      	subs	r1, r1, r3
 800a6a2:	2907      	cmp	r1, #7
 800a6a4:	d8f4      	bhi.n	800a690 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 800a6a6:	6014      	str	r4, [r2, #0]
 800a6a8:	e7f8      	b.n	800a69c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 800a6aa:	bf00      	nop
 800a6ac:	20000ea8 	.word	0x20000ea8

0800a6b0 <__cxa_allocate_exception>:
 800a6b0:	b510      	push	{r4, lr}
 800a6b2:	f100 0480 	add.w	r4, r0, #128	; 0x80
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f000 fac4 	bl	800ac44 <malloc>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	b930      	cbnz	r0, 800a6ce <__cxa_allocate_exception+0x1e>
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f7ff ffd1 	bl	800a668 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	b908      	cbnz	r0, 800a6ce <__cxa_allocate_exception+0x1e>
 800a6ca:	f7ff ff79 	bl	800a5c0 <_ZSt9terminatev>
 800a6ce:	2280      	movs	r2, #128	; 0x80
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 faea 	bl	800acac <memset>
 800a6d8:	3080      	adds	r0, #128	; 0x80
 800a6da:	bd10      	pop	{r4, pc}

0800a6dc <__cxa_free_exception>:
 800a6dc:	4a06      	ldr	r2, [pc, #24]	; (800a6f8 <__cxa_free_exception+0x1c>)
 800a6de:	6893      	ldr	r3, [r2, #8]
 800a6e0:	3880      	subs	r0, #128	; 0x80
 800a6e2:	4298      	cmp	r0, r3
 800a6e4:	d905      	bls.n	800a6f2 <__cxa_free_exception+0x16>
 800a6e6:	68d2      	ldr	r2, [r2, #12]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	4298      	cmp	r0, r3
 800a6ec:	d201      	bcs.n	800a6f2 <__cxa_free_exception+0x16>
 800a6ee:	f7ff bf7f 	b.w	800a5f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 800a6f2:	f000 baaf 	b.w	800ac54 <free>
 800a6f6:	bf00      	nop
 800a6f8:	20000ea8 	.word	0x20000ea8

0800a6fc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	4c08      	ldr	r4, [pc, #32]	; (800a720 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 800a700:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 800a704:	4628      	mov	r0, r5
 800a706:	60e5      	str	r5, [r4, #12]
 800a708:	f000 fa9c 	bl	800ac44 <malloc>
 800a70c:	60a0      	str	r0, [r4, #8]
 800a70e:	b910      	cbnz	r0, 800a716 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 800a710:	60e0      	str	r0, [r4, #12]
 800a712:	6060      	str	r0, [r4, #4]
 800a714:	bd38      	pop	{r3, r4, r5, pc}
 800a716:	2300      	movs	r3, #0
 800a718:	6060      	str	r0, [r4, #4]
 800a71a:	6005      	str	r5, [r0, #0]
 800a71c:	6043      	str	r3, [r0, #4]
 800a71e:	e7f9      	b.n	800a714 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 800a720:	20000ea8 	.word	0x20000ea8

0800a724 <_ZSt17__throw_bad_allocv>:
 800a724:	b508      	push	{r3, lr}
 800a726:	f000 f992 	bl	800aa4e <abort>

0800a72a <_ZSt20__throw_length_errorPKc>:
 800a72a:	b508      	push	{r3, lr}
 800a72c:	f000 f98f 	bl	800aa4e <abort>

0800a730 <_ZNSt9type_infoD1Ev>:
 800a730:	4770      	bx	lr

0800a732 <_ZNKSt9type_info14__is_pointer_pEv>:
 800a732:	2000      	movs	r0, #0
 800a734:	4770      	bx	lr

0800a736 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 800a736:	2000      	movs	r0, #0
 800a738:	4770      	bx	lr

0800a73a <_ZNKSt9type_infoeqERKS_>:
 800a73a:	4281      	cmp	r1, r0
 800a73c:	b508      	push	{r3, lr}
 800a73e:	d00e      	beq.n	800a75e <_ZNKSt9type_infoeqERKS_+0x24>
 800a740:	6840      	ldr	r0, [r0, #4]
 800a742:	7803      	ldrb	r3, [r0, #0]
 800a744:	2b2a      	cmp	r3, #42	; 0x2a
 800a746:	d00c      	beq.n	800a762 <_ZNKSt9type_infoeqERKS_+0x28>
 800a748:	6849      	ldr	r1, [r1, #4]
 800a74a:	780b      	ldrb	r3, [r1, #0]
 800a74c:	2b2a      	cmp	r3, #42	; 0x2a
 800a74e:	bf08      	it	eq
 800a750:	3101      	addeq	r1, #1
 800a752:	f7f5 fd75 	bl	8000240 <strcmp>
 800a756:	fab0 f080 	clz	r0, r0
 800a75a:	0940      	lsrs	r0, r0, #5
 800a75c:	bd08      	pop	{r3, pc}
 800a75e:	2001      	movs	r0, #1
 800a760:	e7fc      	b.n	800a75c <_ZNKSt9type_infoeqERKS_+0x22>
 800a762:	2000      	movs	r0, #0
 800a764:	e7fa      	b.n	800a75c <_ZNKSt9type_infoeqERKS_+0x22>

0800a766 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 800a766:	f7ff bfe8 	b.w	800a73a <_ZNKSt9type_infoeqERKS_>

0800a76a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800a76a:	7803      	ldrb	r3, [r0, #0]
 800a76c:	2b47      	cmp	r3, #71	; 0x47
 800a76e:	d117      	bne.n	800a7a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a770:	7843      	ldrb	r3, [r0, #1]
 800a772:	2b4e      	cmp	r3, #78	; 0x4e
 800a774:	d114      	bne.n	800a7a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a776:	7883      	ldrb	r3, [r0, #2]
 800a778:	2b55      	cmp	r3, #85	; 0x55
 800a77a:	d111      	bne.n	800a7a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a77c:	78c3      	ldrb	r3, [r0, #3]
 800a77e:	2b43      	cmp	r3, #67	; 0x43
 800a780:	d10e      	bne.n	800a7a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a782:	7903      	ldrb	r3, [r0, #4]
 800a784:	2b43      	cmp	r3, #67	; 0x43
 800a786:	d10b      	bne.n	800a7a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a788:	7943      	ldrb	r3, [r0, #5]
 800a78a:	2b2b      	cmp	r3, #43	; 0x2b
 800a78c:	d108      	bne.n	800a7a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a78e:	7983      	ldrb	r3, [r0, #6]
 800a790:	2b2b      	cmp	r3, #43	; 0x2b
 800a792:	d105      	bne.n	800a7a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a794:	79c0      	ldrb	r0, [r0, #7]
 800a796:	2801      	cmp	r0, #1
 800a798:	bf8c      	ite	hi
 800a79a:	2000      	movhi	r0, #0
 800a79c:	2001      	movls	r0, #1
 800a79e:	4770      	bx	lr
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	4770      	bx	lr

0800a7a4 <__cxa_call_terminate>:
 800a7a4:	b510      	push	{r4, lr}
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	b148      	cbz	r0, 800a7be <__cxa_call_terminate+0x1a>
 800a7aa:	f7ff fdff 	bl	800a3ac <__cxa_begin_catch>
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f7ff ffdb 	bl	800a76a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a7b4:	b118      	cbz	r0, 800a7be <__cxa_call_terminate+0x1a>
 800a7b6:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800a7ba:	f7ff fef5 	bl	800a5a8 <_ZN10__cxxabiv111__terminateEPFvvE>
 800a7be:	f7ff feff 	bl	800a5c0 <_ZSt9terminatev>

0800a7c2 <__cxa_call_unexpected>:
 800a7c2:	b538      	push	{r3, r4, r5, lr}
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	f7ff ffd0 	bl	800a76a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a7ca:	b140      	cbz	r0, 800a7de <__cxa_call_unexpected+0x1c>
 800a7cc:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800a7d0:	2500      	movs	r5, #0
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	f7ff fdea 	bl	800a3ac <__cxa_begin_catch>
 800a7d8:	b125      	cbz	r5, 800a7e4 <__cxa_call_unexpected+0x22>
 800a7da:	f7ff ff03 	bl	800a5e4 <_ZSt10unexpectedv>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	2501      	movs	r5, #1
 800a7e2:	e7f6      	b.n	800a7d2 <__cxa_call_unexpected+0x10>
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f7ff fef0 	bl	800a5ca <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800a7ea <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 800a7ea:	2001      	movs	r0, #1
 800a7ec:	4770      	bx	lr
	...

0800a7f0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	4b03      	ldr	r3, [pc, #12]	; (800a800 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 800a7f4:	6003      	str	r3, [r0, #0]
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	f000 f8ac 	bl	800a954 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	bd10      	pop	{r4, pc}
 800a800:	0800b8e4 	.word	0x0800b8e4

0800a804 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 800a804:	b510      	push	{r4, lr}
 800a806:	4604      	mov	r4, r0
 800a808:	f7ff fff2 	bl	800a7f0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
 800a80c:	4620      	mov	r0, r4
 800a80e:	2110      	movs	r1, #16
 800a810:	f7ff fa70 	bl	8009cf4 <_ZdlPvj>
 800a814:	4620      	mov	r0, r4
 800a816:	bd10      	pop	{r4, pc}

0800a818 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 800a818:	2b01      	cmp	r3, #1
 800a81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81e:	4606      	mov	r6, r0
 800a820:	460c      	mov	r4, r1
 800a822:	4617      	mov	r7, r2
 800a824:	461d      	mov	r5, r3
 800a826:	d804      	bhi.n	800a832 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1a>
 800a828:	490b      	ldr	r1, [pc, #44]	; (800a858 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
 800a82a:	68c0      	ldr	r0, [r0, #12]
 800a82c:	f7ff ff85 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a830:	b948      	cbnz	r0, 800a846 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2e>
 800a832:	68f0      	ldr	r0, [r6, #12]
 800a834:	68e1      	ldr	r1, [r4, #12]
 800a836:	6803      	ldr	r3, [r0, #0]
 800a838:	691e      	ldr	r6, [r3, #16]
 800a83a:	463a      	mov	r2, r7
 800a83c:	1cab      	adds	r3, r5, #2
 800a83e:	46b4      	mov	ip, r6
 800a840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a844:	4760      	bx	ip
 800a846:	68e0      	ldr	r0, [r4, #12]
 800a848:	6803      	ldr	r3, [r0, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	4798      	blx	r3
 800a84e:	f080 0001 	eor.w	r0, r0, #1
 800a852:	b2c0      	uxtb	r0, r0
 800a854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a858:	0800b784 	.word	0x0800b784

0800a85c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800a85c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a85e:	2400      	movs	r4, #0
 800a860:	2310      	movs	r3, #16
 800a862:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a866:	6803      	ldr	r3, [r0, #0]
 800a868:	9400      	str	r4, [sp, #0]
 800a86a:	4615      	mov	r5, r2
 800a86c:	699e      	ldr	r6, [r3, #24]
 800a86e:	f88d 4004 	strb.w	r4, [sp, #4]
 800a872:	466b      	mov	r3, sp
 800a874:	6812      	ldr	r2, [r2, #0]
 800a876:	47b0      	blx	r6
 800a878:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a87c:	f003 0306 	and.w	r3, r3, #6
 800a880:	2b06      	cmp	r3, #6
 800a882:	bf03      	ittte	eq
 800a884:	9b00      	ldreq	r3, [sp, #0]
 800a886:	602b      	streq	r3, [r5, #0]
 800a888:	2001      	moveq	r0, #1
 800a88a:	4620      	movne	r0, r4
 800a88c:	b004      	add	sp, #16
 800a88e:	bd70      	pop	{r4, r5, r6, pc}

0800a890 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800a890:	9800      	ldr	r0, [sp, #0]
 800a892:	4290      	cmp	r0, r2
 800a894:	bf0c      	ite	eq
 800a896:	2006      	moveq	r0, #6
 800a898:	2001      	movne	r0, #1
 800a89a:	4770      	bx	lr

0800a89c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800a89c:	b510      	push	{r4, lr}
 800a89e:	4b03      	ldr	r3, [pc, #12]	; (800a8ac <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800a8a0:	6003      	str	r3, [r0, #0]
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	f7ff ff44 	bl	800a730 <_ZNSt9type_infoD1Ev>
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	bd10      	pop	{r4, pc}
 800a8ac:	0800b938 	.word	0x0800b938

0800a8b0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800a8b0:	b510      	push	{r4, lr}
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	f7ff fff2 	bl	800a89c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	2108      	movs	r1, #8
 800a8bc:	f7ff fa1a 	bl	8009cf4 <_ZdlPvj>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	bd10      	pop	{r4, pc}

0800a8c4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800a8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c8:	4698      	mov	r8, r3
 800a8ca:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800a8ce:	9e06      	ldr	r6, [sp, #24]
 800a8d0:	429e      	cmp	r6, r3
 800a8d2:	4607      	mov	r7, r0
 800a8d4:	4615      	mov	r5, r2
 800a8d6:	d107      	bne.n	800a8e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800a8d8:	9907      	ldr	r1, [sp, #28]
 800a8da:	f7ff ff2e 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a8de:	b118      	cbz	r0, 800a8e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800a8e0:	7165      	strb	r5, [r4, #5]
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e8:	4641      	mov	r1, r8
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	f7ff ff25 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d0f6      	beq.n	800a8e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	6026      	str	r6, [r4, #0]
 800a8f8:	7125      	strb	r5, [r4, #4]
 800a8fa:	71a3      	strb	r3, [r4, #6]
 800a8fc:	e7f1      	b.n	800a8e2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1e>

0800a8fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800a8fe:	b538      	push	{r3, r4, r5, lr}
 800a900:	4615      	mov	r5, r2
 800a902:	461c      	mov	r4, r3
 800a904:	f7ff ff19 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a908:	b120      	cbz	r0, 800a914 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800a90a:	2308      	movs	r3, #8
 800a90c:	60e3      	str	r3, [r4, #12]
 800a90e:	2306      	movs	r3, #6
 800a910:	6025      	str	r5, [r4, #0]
 800a912:	7123      	strb	r3, [r4, #4]
 800a914:	bd38      	pop	{r3, r4, r5, pc}

0800a916 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800a916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91a:	4605      	mov	r5, r0
 800a91c:	460c      	mov	r4, r1
 800a91e:	4616      	mov	r6, r2
 800a920:	461f      	mov	r7, r3
 800a922:	f7ff ff0a 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a926:	b948      	cbnz	r0, 800a93c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800a928:	2f03      	cmp	r7, #3
 800a92a:	d807      	bhi.n	800a93c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	4632      	mov	r2, r6
 800a930:	4629      	mov	r1, r5
 800a932:	4620      	mov	r0, r4
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a93a:	4718      	bx	r3
 800a93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a940 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 800a940:	68c0      	ldr	r0, [r0, #12]
 800a942:	68c9      	ldr	r1, [r1, #12]
 800a944:	b410      	push	{r4}
 800a946:	6804      	ldr	r4, [r0, #0]
 800a948:	6924      	ldr	r4, [r4, #16]
 800a94a:	3302      	adds	r3, #2
 800a94c:	46a4      	mov	ip, r4
 800a94e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a952:	4760      	bx	ip

0800a954 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 800a954:	b510      	push	{r4, lr}
 800a956:	4b03      	ldr	r3, [pc, #12]	; (800a964 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 800a958:	6003      	str	r3, [r0, #0]
 800a95a:	4604      	mov	r4, r0
 800a95c:	f7ff fee8 	bl	800a730 <_ZNSt9type_infoD1Ev>
 800a960:	4620      	mov	r0, r4
 800a962:	bd10      	pop	{r4, pc}
 800a964:	0800b994 	.word	0x0800b994

0800a968 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 800a968:	b510      	push	{r4, lr}
 800a96a:	4604      	mov	r4, r0
 800a96c:	f7ff fff2 	bl	800a954 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800a970:	4620      	mov	r0, r4
 800a972:	2110      	movs	r1, #16
 800a974:	f7ff f9be 	bl	8009cf4 <_ZdlPvj>
 800a978:	4620      	mov	r0, r4
 800a97a:	bd10      	pop	{r4, pc}

0800a97c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 800a97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a980:	4605      	mov	r5, r0
 800a982:	460e      	mov	r6, r1
 800a984:	4617      	mov	r7, r2
 800a986:	4698      	mov	r8, r3
 800a988:	f7ff fed7 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a98c:	4604      	mov	r4, r0
 800a98e:	b9f0      	cbnz	r0, 800a9ce <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800a990:	4928      	ldr	r1, [pc, #160]	; (800aa34 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb8>)
 800a992:	4630      	mov	r0, r6
 800a994:	f7ff fed1 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a998:	b300      	cbz	r0, 800a9dc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800a99a:	682b      	ldr	r3, [r5, #0]
 800a99c:	4926      	ldr	r1, [pc, #152]	; (800aa38 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>)
 800a99e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a9a2:	f7ff feca 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a9a6:	b110      	cbz	r0, 800a9ae <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
 800a9a8:	603c      	str	r4, [r7, #0]
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	e00f      	b.n	800a9ce <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800a9ae:	682b      	ldr	r3, [r5, #0]
 800a9b0:	4922      	ldr	r1, [pc, #136]	; (800aa3c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc0>)
 800a9b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a9b6:	f7ff fec0 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a9ba:	4681      	mov	r9, r0
 800a9bc:	b170      	cbz	r0, 800a9dc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800a9be:	68e8      	ldr	r0, [r5, #12]
 800a9c0:	6803      	ldr	r3, [r0, #0]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	4798      	blx	r3
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	b120      	cbz	r0, 800a9d4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 800a9ca:	4b1d      	ldr	r3, [pc, #116]	; (800aa40 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>)
 800a9cc:	603b      	str	r3, [r7, #0]
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d4:	4b1b      	ldr	r3, [pc, #108]	; (800aa44 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc8>)
 800a9d6:	603b      	str	r3, [r7, #0]
 800a9d8:	464c      	mov	r4, r9
 800a9da:	e7f8      	b.n	800a9ce <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a9e2:	b32e      	cbz	r6, 800aa30 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb4>
 800a9e4:	6833      	ldr	r3, [r6, #0]
 800a9e6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800a9ea:	f7ff fea6 	bl	800a73a <_ZNKSt9type_infoeqERKS_>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d0db      	beq.n	800a9aa <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x2e>
 800a9f2:	f018 0f01 	tst.w	r8, #1
 800a9f6:	d0ea      	beq.n	800a9ce <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800a9f8:	68b3      	ldr	r3, [r6, #8]
 800a9fa:	68aa      	ldr	r2, [r5, #8]
 800a9fc:	f003 0060 	and.w	r0, r3, #96	; 0x60
 800aa00:	f002 0160 	and.w	r1, r2, #96	; 0x60
 800aa04:	ea30 0c01 	bics.w	ip, r0, r1
 800aa08:	bf18      	it	ne
 800aa0a:	400b      	andne	r3, r1
 800aa0c:	4381      	bics	r1, r0
 800aa0e:	d1de      	bne.n	800a9ce <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800aa10:	4393      	bics	r3, r2
 800aa12:	d1dc      	bne.n	800a9ce <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800aa14:	07d3      	lsls	r3, r2, #31
 800aa16:	682b      	ldr	r3, [r5, #0]
 800aa18:	699c      	ldr	r4, [r3, #24]
 800aa1a:	bf58      	it	pl
 800aa1c:	f028 0801 	bicpl.w	r8, r8, #1
 800aa20:	4643      	mov	r3, r8
 800aa22:	463a      	mov	r2, r7
 800aa24:	4631      	mov	r1, r6
 800aa26:	4628      	mov	r0, r5
 800aa28:	46a4      	mov	ip, r4
 800aa2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa2e:	4760      	bx	ip
 800aa30:	f000 f80a 	bl	800aa48 <__cxa_bad_typeid>
 800aa34:	0800b764 	.word	0x0800b764
 800aa38:	0800b8ac 	.word	0x0800b8ac
 800aa3c:	0800b9bc 	.word	0x0800b9bc
 800aa40:	0800b9b4 	.word	0x0800b9b4
 800aa44:	0800b9b0 	.word	0x0800b9b0

0800aa48 <__cxa_bad_typeid>:
 800aa48:	b508      	push	{r3, lr}
 800aa4a:	f000 f800 	bl	800aa4e <abort>

0800aa4e <abort>:
 800aa4e:	b508      	push	{r3, lr}
 800aa50:	2006      	movs	r0, #6
 800aa52:	f000 fad1 	bl	800aff8 <raise>
 800aa56:	2001      	movs	r0, #1
 800aa58:	f7f8 fdfc 	bl	8003654 <_exit>

0800aa5c <__errno>:
 800aa5c:	4b01      	ldr	r3, [pc, #4]	; (800aa64 <__errno+0x8>)
 800aa5e:	6818      	ldr	r0, [r3, #0]
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	2000001c 	.word	0x2000001c

0800aa68 <std>:
 800aa68:	2300      	movs	r3, #0
 800aa6a:	b510      	push	{r4, lr}
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	e9c0 3300 	strd	r3, r3, [r0]
 800aa72:	6083      	str	r3, [r0, #8]
 800aa74:	8181      	strh	r1, [r0, #12]
 800aa76:	6643      	str	r3, [r0, #100]	; 0x64
 800aa78:	81c2      	strh	r2, [r0, #14]
 800aa7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa7e:	6183      	str	r3, [r0, #24]
 800aa80:	4619      	mov	r1, r3
 800aa82:	2208      	movs	r2, #8
 800aa84:	305c      	adds	r0, #92	; 0x5c
 800aa86:	f000 f911 	bl	800acac <memset>
 800aa8a:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <std+0x38>)
 800aa8c:	6263      	str	r3, [r4, #36]	; 0x24
 800aa8e:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <std+0x3c>)
 800aa90:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa92:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <std+0x40>)
 800aa94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa96:	4b05      	ldr	r3, [pc, #20]	; (800aaac <std+0x44>)
 800aa98:	6224      	str	r4, [r4, #32]
 800aa9a:	6323      	str	r3, [r4, #48]	; 0x30
 800aa9c:	bd10      	pop	{r4, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800b031 	.word	0x0800b031
 800aaa4:	0800b053 	.word	0x0800b053
 800aaa8:	0800b08b 	.word	0x0800b08b
 800aaac:	0800b0af 	.word	0x0800b0af

0800aab0 <_cleanup_r>:
 800aab0:	4901      	ldr	r1, [pc, #4]	; (800aab8 <_cleanup_r+0x8>)
 800aab2:	f000 b885 	b.w	800abc0 <_fwalk_reent>
 800aab6:	bf00      	nop
 800aab8:	0800b389 	.word	0x0800b389

0800aabc <__sfmoreglue>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	1e4a      	subs	r2, r1, #1
 800aac0:	2568      	movs	r5, #104	; 0x68
 800aac2:	4355      	muls	r5, r2
 800aac4:	460e      	mov	r6, r1
 800aac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aaca:	f000 f945 	bl	800ad58 <_malloc_r>
 800aace:	4604      	mov	r4, r0
 800aad0:	b140      	cbz	r0, 800aae4 <__sfmoreglue+0x28>
 800aad2:	2100      	movs	r1, #0
 800aad4:	e9c0 1600 	strd	r1, r6, [r0]
 800aad8:	300c      	adds	r0, #12
 800aada:	60a0      	str	r0, [r4, #8]
 800aadc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aae0:	f000 f8e4 	bl	800acac <memset>
 800aae4:	4620      	mov	r0, r4
 800aae6:	bd70      	pop	{r4, r5, r6, pc}

0800aae8 <__sinit>:
 800aae8:	6983      	ldr	r3, [r0, #24]
 800aaea:	b510      	push	{r4, lr}
 800aaec:	4604      	mov	r4, r0
 800aaee:	bb33      	cbnz	r3, 800ab3e <__sinit+0x56>
 800aaf0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800aaf4:	6503      	str	r3, [r0, #80]	; 0x50
 800aaf6:	4b12      	ldr	r3, [pc, #72]	; (800ab40 <__sinit+0x58>)
 800aaf8:	4a12      	ldr	r2, [pc, #72]	; (800ab44 <__sinit+0x5c>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6282      	str	r2, [r0, #40]	; 0x28
 800aafe:	4298      	cmp	r0, r3
 800ab00:	bf04      	itt	eq
 800ab02:	2301      	moveq	r3, #1
 800ab04:	6183      	streq	r3, [r0, #24]
 800ab06:	f000 f81f 	bl	800ab48 <__sfp>
 800ab0a:	6060      	str	r0, [r4, #4]
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 f81b 	bl	800ab48 <__sfp>
 800ab12:	60a0      	str	r0, [r4, #8]
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 f817 	bl	800ab48 <__sfp>
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	60e0      	str	r0, [r4, #12]
 800ab1e:	2104      	movs	r1, #4
 800ab20:	6860      	ldr	r0, [r4, #4]
 800ab22:	f7ff ffa1 	bl	800aa68 <std>
 800ab26:	2201      	movs	r2, #1
 800ab28:	2109      	movs	r1, #9
 800ab2a:	68a0      	ldr	r0, [r4, #8]
 800ab2c:	f7ff ff9c 	bl	800aa68 <std>
 800ab30:	2202      	movs	r2, #2
 800ab32:	2112      	movs	r1, #18
 800ab34:	68e0      	ldr	r0, [r4, #12]
 800ab36:	f7ff ff97 	bl	800aa68 <std>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	61a3      	str	r3, [r4, #24]
 800ab3e:	bd10      	pop	{r4, pc}
 800ab40:	0800ba58 	.word	0x0800ba58
 800ab44:	0800aab1 	.word	0x0800aab1

0800ab48 <__sfp>:
 800ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <__sfp+0x70>)
 800ab4c:	681e      	ldr	r6, [r3, #0]
 800ab4e:	69b3      	ldr	r3, [r6, #24]
 800ab50:	4607      	mov	r7, r0
 800ab52:	b913      	cbnz	r3, 800ab5a <__sfp+0x12>
 800ab54:	4630      	mov	r0, r6
 800ab56:	f7ff ffc7 	bl	800aae8 <__sinit>
 800ab5a:	3648      	adds	r6, #72	; 0x48
 800ab5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab60:	3b01      	subs	r3, #1
 800ab62:	d503      	bpl.n	800ab6c <__sfp+0x24>
 800ab64:	6833      	ldr	r3, [r6, #0]
 800ab66:	b133      	cbz	r3, 800ab76 <__sfp+0x2e>
 800ab68:	6836      	ldr	r6, [r6, #0]
 800ab6a:	e7f7      	b.n	800ab5c <__sfp+0x14>
 800ab6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab70:	b16d      	cbz	r5, 800ab8e <__sfp+0x46>
 800ab72:	3468      	adds	r4, #104	; 0x68
 800ab74:	e7f4      	b.n	800ab60 <__sfp+0x18>
 800ab76:	2104      	movs	r1, #4
 800ab78:	4638      	mov	r0, r7
 800ab7a:	f7ff ff9f 	bl	800aabc <__sfmoreglue>
 800ab7e:	6030      	str	r0, [r6, #0]
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d1f1      	bne.n	800ab68 <__sfp+0x20>
 800ab84:	230c      	movs	r3, #12
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	4604      	mov	r4, r0
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <__sfp+0x74>)
 800ab90:	6665      	str	r5, [r4, #100]	; 0x64
 800ab92:	e9c4 5500 	strd	r5, r5, [r4]
 800ab96:	60a5      	str	r5, [r4, #8]
 800ab98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ab9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800aba0:	2208      	movs	r2, #8
 800aba2:	4629      	mov	r1, r5
 800aba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aba8:	f000 f880 	bl	800acac <memset>
 800abac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abb4:	e7e9      	b.n	800ab8a <__sfp+0x42>
 800abb6:	bf00      	nop
 800abb8:	0800ba58 	.word	0x0800ba58
 800abbc:	ffff0001 	.word	0xffff0001

0800abc0 <_fwalk_reent>:
 800abc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abc4:	4680      	mov	r8, r0
 800abc6:	4689      	mov	r9, r1
 800abc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800abcc:	2600      	movs	r6, #0
 800abce:	b914      	cbnz	r4, 800abd6 <_fwalk_reent+0x16>
 800abd0:	4630      	mov	r0, r6
 800abd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800abda:	3f01      	subs	r7, #1
 800abdc:	d501      	bpl.n	800abe2 <_fwalk_reent+0x22>
 800abde:	6824      	ldr	r4, [r4, #0]
 800abe0:	e7f5      	b.n	800abce <_fwalk_reent+0xe>
 800abe2:	89ab      	ldrh	r3, [r5, #12]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d907      	bls.n	800abf8 <_fwalk_reent+0x38>
 800abe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abec:	3301      	adds	r3, #1
 800abee:	d003      	beq.n	800abf8 <_fwalk_reent+0x38>
 800abf0:	4629      	mov	r1, r5
 800abf2:	4640      	mov	r0, r8
 800abf4:	47c8      	blx	r9
 800abf6:	4306      	orrs	r6, r0
 800abf8:	3568      	adds	r5, #104	; 0x68
 800abfa:	e7ee      	b.n	800abda <_fwalk_reent+0x1a>

0800abfc <__libc_init_array>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	4e0d      	ldr	r6, [pc, #52]	; (800ac34 <__libc_init_array+0x38>)
 800ac00:	4c0d      	ldr	r4, [pc, #52]	; (800ac38 <__libc_init_array+0x3c>)
 800ac02:	1ba4      	subs	r4, r4, r6
 800ac04:	10a4      	asrs	r4, r4, #2
 800ac06:	2500      	movs	r5, #0
 800ac08:	42a5      	cmp	r5, r4
 800ac0a:	d109      	bne.n	800ac20 <__libc_init_array+0x24>
 800ac0c:	4e0b      	ldr	r6, [pc, #44]	; (800ac3c <__libc_init_array+0x40>)
 800ac0e:	4c0c      	ldr	r4, [pc, #48]	; (800ac40 <__libc_init_array+0x44>)
 800ac10:	f000 fc8e 	bl	800b530 <_init>
 800ac14:	1ba4      	subs	r4, r4, r6
 800ac16:	10a4      	asrs	r4, r4, #2
 800ac18:	2500      	movs	r5, #0
 800ac1a:	42a5      	cmp	r5, r4
 800ac1c:	d105      	bne.n	800ac2a <__libc_init_array+0x2e>
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}
 800ac20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac24:	4798      	blx	r3
 800ac26:	3501      	adds	r5, #1
 800ac28:	e7ee      	b.n	800ac08 <__libc_init_array+0xc>
 800ac2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac2e:	4798      	blx	r3
 800ac30:	3501      	adds	r5, #1
 800ac32:	e7f2      	b.n	800ac1a <__libc_init_array+0x1e>
 800ac34:	0800bfcc 	.word	0x0800bfcc
 800ac38:	0800bfcc 	.word	0x0800bfcc
 800ac3c:	0800bfcc 	.word	0x0800bfcc
 800ac40:	0800bfd8 	.word	0x0800bfd8

0800ac44 <malloc>:
 800ac44:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <malloc+0xc>)
 800ac46:	4601      	mov	r1, r0
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	f000 b885 	b.w	800ad58 <_malloc_r>
 800ac4e:	bf00      	nop
 800ac50:	2000001c 	.word	0x2000001c

0800ac54 <free>:
 800ac54:	4b02      	ldr	r3, [pc, #8]	; (800ac60 <free+0xc>)
 800ac56:	4601      	mov	r1, r0
 800ac58:	6818      	ldr	r0, [r3, #0]
 800ac5a:	f000 b82f 	b.w	800acbc <_free_r>
 800ac5e:	bf00      	nop
 800ac60:	2000001c 	.word	0x2000001c

0800ac64 <memcpy>:
 800ac64:	b510      	push	{r4, lr}
 800ac66:	1e43      	subs	r3, r0, #1
 800ac68:	440a      	add	r2, r1
 800ac6a:	4291      	cmp	r1, r2
 800ac6c:	d100      	bne.n	800ac70 <memcpy+0xc>
 800ac6e:	bd10      	pop	{r4, pc}
 800ac70:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac78:	e7f7      	b.n	800ac6a <memcpy+0x6>

0800ac7a <memmove>:
 800ac7a:	4288      	cmp	r0, r1
 800ac7c:	b510      	push	{r4, lr}
 800ac7e:	eb01 0302 	add.w	r3, r1, r2
 800ac82:	d807      	bhi.n	800ac94 <memmove+0x1a>
 800ac84:	1e42      	subs	r2, r0, #1
 800ac86:	4299      	cmp	r1, r3
 800ac88:	d00a      	beq.n	800aca0 <memmove+0x26>
 800ac8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac8e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ac92:	e7f8      	b.n	800ac86 <memmove+0xc>
 800ac94:	4283      	cmp	r3, r0
 800ac96:	d9f5      	bls.n	800ac84 <memmove+0xa>
 800ac98:	1881      	adds	r1, r0, r2
 800ac9a:	1ad2      	subs	r2, r2, r3
 800ac9c:	42d3      	cmn	r3, r2
 800ac9e:	d100      	bne.n	800aca2 <memmove+0x28>
 800aca0:	bd10      	pop	{r4, pc}
 800aca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aca6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800acaa:	e7f7      	b.n	800ac9c <memmove+0x22>

0800acac <memset>:
 800acac:	4402      	add	r2, r0
 800acae:	4603      	mov	r3, r0
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d100      	bne.n	800acb6 <memset+0xa>
 800acb4:	4770      	bx	lr
 800acb6:	f803 1b01 	strb.w	r1, [r3], #1
 800acba:	e7f9      	b.n	800acb0 <memset+0x4>

0800acbc <_free_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4605      	mov	r5, r0
 800acc0:	2900      	cmp	r1, #0
 800acc2:	d045      	beq.n	800ad50 <_free_r+0x94>
 800acc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc8:	1f0c      	subs	r4, r1, #4
 800acca:	2b00      	cmp	r3, #0
 800accc:	bfb8      	it	lt
 800acce:	18e4      	addlt	r4, r4, r3
 800acd0:	f7f6 fc36 	bl	8001540 <__malloc_lock>
 800acd4:	4a1f      	ldr	r2, [pc, #124]	; (800ad54 <_free_r+0x98>)
 800acd6:	6813      	ldr	r3, [r2, #0]
 800acd8:	4610      	mov	r0, r2
 800acda:	b933      	cbnz	r3, 800acea <_free_r+0x2e>
 800acdc:	6063      	str	r3, [r4, #4]
 800acde:	6014      	str	r4, [r2, #0]
 800ace0:	4628      	mov	r0, r5
 800ace2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ace6:	f7f6 bc49 	b.w	800157c <__malloc_unlock>
 800acea:	42a3      	cmp	r3, r4
 800acec:	d90c      	bls.n	800ad08 <_free_r+0x4c>
 800acee:	6821      	ldr	r1, [r4, #0]
 800acf0:	1862      	adds	r2, r4, r1
 800acf2:	4293      	cmp	r3, r2
 800acf4:	bf04      	itt	eq
 800acf6:	681a      	ldreq	r2, [r3, #0]
 800acf8:	685b      	ldreq	r3, [r3, #4]
 800acfa:	6063      	str	r3, [r4, #4]
 800acfc:	bf04      	itt	eq
 800acfe:	1852      	addeq	r2, r2, r1
 800ad00:	6022      	streq	r2, [r4, #0]
 800ad02:	6004      	str	r4, [r0, #0]
 800ad04:	e7ec      	b.n	800ace0 <_free_r+0x24>
 800ad06:	4613      	mov	r3, r2
 800ad08:	685a      	ldr	r2, [r3, #4]
 800ad0a:	b10a      	cbz	r2, 800ad10 <_free_r+0x54>
 800ad0c:	42a2      	cmp	r2, r4
 800ad0e:	d9fa      	bls.n	800ad06 <_free_r+0x4a>
 800ad10:	6819      	ldr	r1, [r3, #0]
 800ad12:	1858      	adds	r0, r3, r1
 800ad14:	42a0      	cmp	r0, r4
 800ad16:	d10b      	bne.n	800ad30 <_free_r+0x74>
 800ad18:	6820      	ldr	r0, [r4, #0]
 800ad1a:	4401      	add	r1, r0
 800ad1c:	1858      	adds	r0, r3, r1
 800ad1e:	4282      	cmp	r2, r0
 800ad20:	6019      	str	r1, [r3, #0]
 800ad22:	d1dd      	bne.n	800ace0 <_free_r+0x24>
 800ad24:	6810      	ldr	r0, [r2, #0]
 800ad26:	6852      	ldr	r2, [r2, #4]
 800ad28:	605a      	str	r2, [r3, #4]
 800ad2a:	4401      	add	r1, r0
 800ad2c:	6019      	str	r1, [r3, #0]
 800ad2e:	e7d7      	b.n	800ace0 <_free_r+0x24>
 800ad30:	d902      	bls.n	800ad38 <_free_r+0x7c>
 800ad32:	230c      	movs	r3, #12
 800ad34:	602b      	str	r3, [r5, #0]
 800ad36:	e7d3      	b.n	800ace0 <_free_r+0x24>
 800ad38:	6820      	ldr	r0, [r4, #0]
 800ad3a:	1821      	adds	r1, r4, r0
 800ad3c:	428a      	cmp	r2, r1
 800ad3e:	bf04      	itt	eq
 800ad40:	6811      	ldreq	r1, [r2, #0]
 800ad42:	6852      	ldreq	r2, [r2, #4]
 800ad44:	6062      	str	r2, [r4, #4]
 800ad46:	bf04      	itt	eq
 800ad48:	1809      	addeq	r1, r1, r0
 800ad4a:	6021      	streq	r1, [r4, #0]
 800ad4c:	605c      	str	r4, [r3, #4]
 800ad4e:	e7c7      	b.n	800ace0 <_free_r+0x24>
 800ad50:	bd38      	pop	{r3, r4, r5, pc}
 800ad52:	bf00      	nop
 800ad54:	20000eb8 	.word	0x20000eb8

0800ad58 <_malloc_r>:
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	1ccd      	adds	r5, r1, #3
 800ad5c:	f025 0503 	bic.w	r5, r5, #3
 800ad60:	3508      	adds	r5, #8
 800ad62:	2d0c      	cmp	r5, #12
 800ad64:	bf38      	it	cc
 800ad66:	250c      	movcc	r5, #12
 800ad68:	2d00      	cmp	r5, #0
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	db01      	blt.n	800ad72 <_malloc_r+0x1a>
 800ad6e:	42a9      	cmp	r1, r5
 800ad70:	d903      	bls.n	800ad7a <_malloc_r+0x22>
 800ad72:	230c      	movs	r3, #12
 800ad74:	6033      	str	r3, [r6, #0]
 800ad76:	2000      	movs	r0, #0
 800ad78:	bd70      	pop	{r4, r5, r6, pc}
 800ad7a:	f7f6 fbe1 	bl	8001540 <__malloc_lock>
 800ad7e:	4a21      	ldr	r2, [pc, #132]	; (800ae04 <_malloc_r+0xac>)
 800ad80:	6814      	ldr	r4, [r2, #0]
 800ad82:	4621      	mov	r1, r4
 800ad84:	b991      	cbnz	r1, 800adac <_malloc_r+0x54>
 800ad86:	4c20      	ldr	r4, [pc, #128]	; (800ae08 <_malloc_r+0xb0>)
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	b91b      	cbnz	r3, 800ad94 <_malloc_r+0x3c>
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f7f6 fb67 	bl	8001460 <_sbrk_r>
 800ad92:	6020      	str	r0, [r4, #0]
 800ad94:	4629      	mov	r1, r5
 800ad96:	4630      	mov	r0, r6
 800ad98:	f7f6 fb62 	bl	8001460 <_sbrk_r>
 800ad9c:	1c43      	adds	r3, r0, #1
 800ad9e:	d124      	bne.n	800adea <_malloc_r+0x92>
 800ada0:	230c      	movs	r3, #12
 800ada2:	6033      	str	r3, [r6, #0]
 800ada4:	4630      	mov	r0, r6
 800ada6:	f7f6 fbe9 	bl	800157c <__malloc_unlock>
 800adaa:	e7e4      	b.n	800ad76 <_malloc_r+0x1e>
 800adac:	680b      	ldr	r3, [r1, #0]
 800adae:	1b5b      	subs	r3, r3, r5
 800adb0:	d418      	bmi.n	800ade4 <_malloc_r+0x8c>
 800adb2:	2b0b      	cmp	r3, #11
 800adb4:	d90f      	bls.n	800add6 <_malloc_r+0x7e>
 800adb6:	600b      	str	r3, [r1, #0]
 800adb8:	50cd      	str	r5, [r1, r3]
 800adba:	18cc      	adds	r4, r1, r3
 800adbc:	4630      	mov	r0, r6
 800adbe:	f7f6 fbdd 	bl	800157c <__malloc_unlock>
 800adc2:	f104 000b 	add.w	r0, r4, #11
 800adc6:	1d23      	adds	r3, r4, #4
 800adc8:	f020 0007 	bic.w	r0, r0, #7
 800adcc:	1ac3      	subs	r3, r0, r3
 800adce:	d0d3      	beq.n	800ad78 <_malloc_r+0x20>
 800add0:	425a      	negs	r2, r3
 800add2:	50e2      	str	r2, [r4, r3]
 800add4:	e7d0      	b.n	800ad78 <_malloc_r+0x20>
 800add6:	428c      	cmp	r4, r1
 800add8:	684b      	ldr	r3, [r1, #4]
 800adda:	bf16      	itet	ne
 800addc:	6063      	strne	r3, [r4, #4]
 800adde:	6013      	streq	r3, [r2, #0]
 800ade0:	460c      	movne	r4, r1
 800ade2:	e7eb      	b.n	800adbc <_malloc_r+0x64>
 800ade4:	460c      	mov	r4, r1
 800ade6:	6849      	ldr	r1, [r1, #4]
 800ade8:	e7cc      	b.n	800ad84 <_malloc_r+0x2c>
 800adea:	1cc4      	adds	r4, r0, #3
 800adec:	f024 0403 	bic.w	r4, r4, #3
 800adf0:	42a0      	cmp	r0, r4
 800adf2:	d005      	beq.n	800ae00 <_malloc_r+0xa8>
 800adf4:	1a21      	subs	r1, r4, r0
 800adf6:	4630      	mov	r0, r6
 800adf8:	f7f6 fb32 	bl	8001460 <_sbrk_r>
 800adfc:	3001      	adds	r0, #1
 800adfe:	d0cf      	beq.n	800ada0 <_malloc_r+0x48>
 800ae00:	6025      	str	r5, [r4, #0]
 800ae02:	e7db      	b.n	800adbc <_malloc_r+0x64>
 800ae04:	20000eb8 	.word	0x20000eb8
 800ae08:	20000ebc 	.word	0x20000ebc

0800ae0c <_puts_r>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	460e      	mov	r6, r1
 800ae10:	4605      	mov	r5, r0
 800ae12:	b118      	cbz	r0, 800ae1c <_puts_r+0x10>
 800ae14:	6983      	ldr	r3, [r0, #24]
 800ae16:	b90b      	cbnz	r3, 800ae1c <_puts_r+0x10>
 800ae18:	f7ff fe66 	bl	800aae8 <__sinit>
 800ae1c:	69ab      	ldr	r3, [r5, #24]
 800ae1e:	68ac      	ldr	r4, [r5, #8]
 800ae20:	b913      	cbnz	r3, 800ae28 <_puts_r+0x1c>
 800ae22:	4628      	mov	r0, r5
 800ae24:	f7ff fe60 	bl	800aae8 <__sinit>
 800ae28:	4b23      	ldr	r3, [pc, #140]	; (800aeb8 <_puts_r+0xac>)
 800ae2a:	429c      	cmp	r4, r3
 800ae2c:	d117      	bne.n	800ae5e <_puts_r+0x52>
 800ae2e:	686c      	ldr	r4, [r5, #4]
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	071b      	lsls	r3, r3, #28
 800ae34:	d51d      	bpl.n	800ae72 <_puts_r+0x66>
 800ae36:	6923      	ldr	r3, [r4, #16]
 800ae38:	b1db      	cbz	r3, 800ae72 <_puts_r+0x66>
 800ae3a:	3e01      	subs	r6, #1
 800ae3c:	68a3      	ldr	r3, [r4, #8]
 800ae3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae42:	3b01      	subs	r3, #1
 800ae44:	60a3      	str	r3, [r4, #8]
 800ae46:	b9e9      	cbnz	r1, 800ae84 <_puts_r+0x78>
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	da2e      	bge.n	800aeaa <_puts_r+0x9e>
 800ae4c:	4622      	mov	r2, r4
 800ae4e:	210a      	movs	r1, #10
 800ae50:	4628      	mov	r0, r5
 800ae52:	f000 f931 	bl	800b0b8 <__swbuf_r>
 800ae56:	3001      	adds	r0, #1
 800ae58:	d011      	beq.n	800ae7e <_puts_r+0x72>
 800ae5a:	200a      	movs	r0, #10
 800ae5c:	e011      	b.n	800ae82 <_puts_r+0x76>
 800ae5e:	4b17      	ldr	r3, [pc, #92]	; (800aebc <_puts_r+0xb0>)
 800ae60:	429c      	cmp	r4, r3
 800ae62:	d101      	bne.n	800ae68 <_puts_r+0x5c>
 800ae64:	68ac      	ldr	r4, [r5, #8]
 800ae66:	e7e3      	b.n	800ae30 <_puts_r+0x24>
 800ae68:	4b15      	ldr	r3, [pc, #84]	; (800aec0 <_puts_r+0xb4>)
 800ae6a:	429c      	cmp	r4, r3
 800ae6c:	bf08      	it	eq
 800ae6e:	68ec      	ldreq	r4, [r5, #12]
 800ae70:	e7de      	b.n	800ae30 <_puts_r+0x24>
 800ae72:	4621      	mov	r1, r4
 800ae74:	4628      	mov	r0, r5
 800ae76:	f000 f983 	bl	800b180 <__swsetup_r>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d0dd      	beq.n	800ae3a <_puts_r+0x2e>
 800ae7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	da04      	bge.n	800ae92 <_puts_r+0x86>
 800ae88:	69a2      	ldr	r2, [r4, #24]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	dc06      	bgt.n	800ae9c <_puts_r+0x90>
 800ae8e:	290a      	cmp	r1, #10
 800ae90:	d004      	beq.n	800ae9c <_puts_r+0x90>
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	1c5a      	adds	r2, r3, #1
 800ae96:	6022      	str	r2, [r4, #0]
 800ae98:	7019      	strb	r1, [r3, #0]
 800ae9a:	e7cf      	b.n	800ae3c <_puts_r+0x30>
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f000 f90a 	bl	800b0b8 <__swbuf_r>
 800aea4:	3001      	adds	r0, #1
 800aea6:	d1c9      	bne.n	800ae3c <_puts_r+0x30>
 800aea8:	e7e9      	b.n	800ae7e <_puts_r+0x72>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	200a      	movs	r0, #10
 800aeae:	1c5a      	adds	r2, r3, #1
 800aeb0:	6022      	str	r2, [r4, #0]
 800aeb2:	7018      	strb	r0, [r3, #0]
 800aeb4:	e7e5      	b.n	800ae82 <_puts_r+0x76>
 800aeb6:	bf00      	nop
 800aeb8:	0800ba18 	.word	0x0800ba18
 800aebc:	0800ba38 	.word	0x0800ba38
 800aec0:	0800b9f8 	.word	0x0800b9f8

0800aec4 <puts>:
 800aec4:	4b02      	ldr	r3, [pc, #8]	; (800aed0 <puts+0xc>)
 800aec6:	4601      	mov	r1, r0
 800aec8:	6818      	ldr	r0, [r3, #0]
 800aeca:	f7ff bf9f 	b.w	800ae0c <_puts_r>
 800aece:	bf00      	nop
 800aed0:	2000001c 	.word	0x2000001c

0800aed4 <cleanup_glue>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	460c      	mov	r4, r1
 800aed8:	6809      	ldr	r1, [r1, #0]
 800aeda:	4605      	mov	r5, r0
 800aedc:	b109      	cbz	r1, 800aee2 <cleanup_glue+0xe>
 800aede:	f7ff fff9 	bl	800aed4 <cleanup_glue>
 800aee2:	4621      	mov	r1, r4
 800aee4:	4628      	mov	r0, r5
 800aee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeea:	f7ff bee7 	b.w	800acbc <_free_r>
	...

0800aef0 <_reclaim_reent>:
 800aef0:	4b2c      	ldr	r3, [pc, #176]	; (800afa4 <_reclaim_reent+0xb4>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4283      	cmp	r3, r0
 800aef6:	b570      	push	{r4, r5, r6, lr}
 800aef8:	4604      	mov	r4, r0
 800aefa:	d051      	beq.n	800afa0 <_reclaim_reent+0xb0>
 800aefc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aefe:	b143      	cbz	r3, 800af12 <_reclaim_reent+0x22>
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d14a      	bne.n	800af9c <_reclaim_reent+0xac>
 800af06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af08:	6819      	ldr	r1, [r3, #0]
 800af0a:	b111      	cbz	r1, 800af12 <_reclaim_reent+0x22>
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7ff fed5 	bl	800acbc <_free_r>
 800af12:	6961      	ldr	r1, [r4, #20]
 800af14:	b111      	cbz	r1, 800af1c <_reclaim_reent+0x2c>
 800af16:	4620      	mov	r0, r4
 800af18:	f7ff fed0 	bl	800acbc <_free_r>
 800af1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800af1e:	b111      	cbz	r1, 800af26 <_reclaim_reent+0x36>
 800af20:	4620      	mov	r0, r4
 800af22:	f7ff fecb 	bl	800acbc <_free_r>
 800af26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800af28:	b111      	cbz	r1, 800af30 <_reclaim_reent+0x40>
 800af2a:	4620      	mov	r0, r4
 800af2c:	f7ff fec6 	bl	800acbc <_free_r>
 800af30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800af32:	b111      	cbz	r1, 800af3a <_reclaim_reent+0x4a>
 800af34:	4620      	mov	r0, r4
 800af36:	f7ff fec1 	bl	800acbc <_free_r>
 800af3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800af3c:	b111      	cbz	r1, 800af44 <_reclaim_reent+0x54>
 800af3e:	4620      	mov	r0, r4
 800af40:	f7ff febc 	bl	800acbc <_free_r>
 800af44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800af46:	b111      	cbz	r1, 800af4e <_reclaim_reent+0x5e>
 800af48:	4620      	mov	r0, r4
 800af4a:	f7ff feb7 	bl	800acbc <_free_r>
 800af4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800af50:	b111      	cbz	r1, 800af58 <_reclaim_reent+0x68>
 800af52:	4620      	mov	r0, r4
 800af54:	f7ff feb2 	bl	800acbc <_free_r>
 800af58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af5a:	b111      	cbz	r1, 800af62 <_reclaim_reent+0x72>
 800af5c:	4620      	mov	r0, r4
 800af5e:	f7ff fead 	bl	800acbc <_free_r>
 800af62:	69a3      	ldr	r3, [r4, #24]
 800af64:	b1e3      	cbz	r3, 800afa0 <_reclaim_reent+0xb0>
 800af66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af68:	4620      	mov	r0, r4
 800af6a:	4798      	blx	r3
 800af6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af6e:	b1b9      	cbz	r1, 800afa0 <_reclaim_reent+0xb0>
 800af70:	4620      	mov	r0, r4
 800af72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af76:	f7ff bfad 	b.w	800aed4 <cleanup_glue>
 800af7a:	5949      	ldr	r1, [r1, r5]
 800af7c:	b941      	cbnz	r1, 800af90 <_reclaim_reent+0xa0>
 800af7e:	3504      	adds	r5, #4
 800af80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af82:	2d80      	cmp	r5, #128	; 0x80
 800af84:	68d9      	ldr	r1, [r3, #12]
 800af86:	d1f8      	bne.n	800af7a <_reclaim_reent+0x8a>
 800af88:	4620      	mov	r0, r4
 800af8a:	f7ff fe97 	bl	800acbc <_free_r>
 800af8e:	e7ba      	b.n	800af06 <_reclaim_reent+0x16>
 800af90:	680e      	ldr	r6, [r1, #0]
 800af92:	4620      	mov	r0, r4
 800af94:	f7ff fe92 	bl	800acbc <_free_r>
 800af98:	4631      	mov	r1, r6
 800af9a:	e7ef      	b.n	800af7c <_reclaim_reent+0x8c>
 800af9c:	2500      	movs	r5, #0
 800af9e:	e7ef      	b.n	800af80 <_reclaim_reent+0x90>
 800afa0:	bd70      	pop	{r4, r5, r6, pc}
 800afa2:	bf00      	nop
 800afa4:	2000001c 	.word	0x2000001c

0800afa8 <_raise_r>:
 800afa8:	291f      	cmp	r1, #31
 800afaa:	b538      	push	{r3, r4, r5, lr}
 800afac:	4604      	mov	r4, r0
 800afae:	460d      	mov	r5, r1
 800afb0:	d904      	bls.n	800afbc <_raise_r+0x14>
 800afb2:	2316      	movs	r3, #22
 800afb4:	6003      	str	r3, [r0, #0]
 800afb6:	f04f 30ff 	mov.w	r0, #4294967295
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afbe:	b112      	cbz	r2, 800afc6 <_raise_r+0x1e>
 800afc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afc4:	b94b      	cbnz	r3, 800afda <_raise_r+0x32>
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 f830 	bl	800b02c <_getpid_r>
 800afcc:	462a      	mov	r2, r5
 800afce:	4601      	mov	r1, r0
 800afd0:	4620      	mov	r0, r4
 800afd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afd6:	f000 b817 	b.w	800b008 <_kill_r>
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d00a      	beq.n	800aff4 <_raise_r+0x4c>
 800afde:	1c59      	adds	r1, r3, #1
 800afe0:	d103      	bne.n	800afea <_raise_r+0x42>
 800afe2:	2316      	movs	r3, #22
 800afe4:	6003      	str	r3, [r0, #0]
 800afe6:	2001      	movs	r0, #1
 800afe8:	e7e7      	b.n	800afba <_raise_r+0x12>
 800afea:	2400      	movs	r4, #0
 800afec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aff0:	4628      	mov	r0, r5
 800aff2:	4798      	blx	r3
 800aff4:	2000      	movs	r0, #0
 800aff6:	e7e0      	b.n	800afba <_raise_r+0x12>

0800aff8 <raise>:
 800aff8:	4b02      	ldr	r3, [pc, #8]	; (800b004 <raise+0xc>)
 800affa:	4601      	mov	r1, r0
 800affc:	6818      	ldr	r0, [r3, #0]
 800affe:	f7ff bfd3 	b.w	800afa8 <_raise_r>
 800b002:	bf00      	nop
 800b004:	2000001c 	.word	0x2000001c

0800b008 <_kill_r>:
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	4c07      	ldr	r4, [pc, #28]	; (800b028 <_kill_r+0x20>)
 800b00c:	2300      	movs	r3, #0
 800b00e:	4605      	mov	r5, r0
 800b010:	4608      	mov	r0, r1
 800b012:	4611      	mov	r1, r2
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	f7f8 fb0d 	bl	8003634 <_kill>
 800b01a:	1c43      	adds	r3, r0, #1
 800b01c:	d102      	bne.n	800b024 <_kill_r+0x1c>
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	b103      	cbz	r3, 800b024 <_kill_r+0x1c>
 800b022:	602b      	str	r3, [r5, #0]
 800b024:	bd38      	pop	{r3, r4, r5, pc}
 800b026:	bf00      	nop
 800b028:	20001458 	.word	0x20001458

0800b02c <_getpid_r>:
 800b02c:	f7f8 bafa 	b.w	8003624 <_getpid>

0800b030 <__sread>:
 800b030:	b510      	push	{r4, lr}
 800b032:	460c      	mov	r4, r1
 800b034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b038:	f000 fa46 	bl	800b4c8 <_read_r>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	bfab      	itete	ge
 800b040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b042:	89a3      	ldrhlt	r3, [r4, #12]
 800b044:	181b      	addge	r3, r3, r0
 800b046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b04a:	bfac      	ite	ge
 800b04c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b04e:	81a3      	strhlt	r3, [r4, #12]
 800b050:	bd10      	pop	{r4, pc}

0800b052 <__swrite>:
 800b052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b056:	461f      	mov	r7, r3
 800b058:	898b      	ldrh	r3, [r1, #12]
 800b05a:	05db      	lsls	r3, r3, #23
 800b05c:	4605      	mov	r5, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	4616      	mov	r6, r2
 800b062:	d505      	bpl.n	800b070 <__swrite+0x1e>
 800b064:	2302      	movs	r3, #2
 800b066:	2200      	movs	r2, #0
 800b068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06c:	f000 f9b6 	bl	800b3dc <_lseek_r>
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b07a:	81a3      	strh	r3, [r4, #12]
 800b07c:	4632      	mov	r2, r6
 800b07e:	463b      	mov	r3, r7
 800b080:	4628      	mov	r0, r5
 800b082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b086:	f000 b869 	b.w	800b15c <_write_r>

0800b08a <__sseek>:
 800b08a:	b510      	push	{r4, lr}
 800b08c:	460c      	mov	r4, r1
 800b08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b092:	f000 f9a3 	bl	800b3dc <_lseek_r>
 800b096:	1c43      	adds	r3, r0, #1
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	bf15      	itete	ne
 800b09c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b09e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b0a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b0a6:	81a3      	strheq	r3, [r4, #12]
 800b0a8:	bf18      	it	ne
 800b0aa:	81a3      	strhne	r3, [r4, #12]
 800b0ac:	bd10      	pop	{r4, pc}

0800b0ae <__sclose>:
 800b0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b2:	f000 b8d3 	b.w	800b25c <_close_r>
	...

0800b0b8 <__swbuf_r>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	460e      	mov	r6, r1
 800b0bc:	4614      	mov	r4, r2
 800b0be:	4605      	mov	r5, r0
 800b0c0:	b118      	cbz	r0, 800b0ca <__swbuf_r+0x12>
 800b0c2:	6983      	ldr	r3, [r0, #24]
 800b0c4:	b90b      	cbnz	r3, 800b0ca <__swbuf_r+0x12>
 800b0c6:	f7ff fd0f 	bl	800aae8 <__sinit>
 800b0ca:	4b21      	ldr	r3, [pc, #132]	; (800b150 <__swbuf_r+0x98>)
 800b0cc:	429c      	cmp	r4, r3
 800b0ce:	d12a      	bne.n	800b126 <__swbuf_r+0x6e>
 800b0d0:	686c      	ldr	r4, [r5, #4]
 800b0d2:	69a3      	ldr	r3, [r4, #24]
 800b0d4:	60a3      	str	r3, [r4, #8]
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	071a      	lsls	r2, r3, #28
 800b0da:	d52e      	bpl.n	800b13a <__swbuf_r+0x82>
 800b0dc:	6923      	ldr	r3, [r4, #16]
 800b0de:	b363      	cbz	r3, 800b13a <__swbuf_r+0x82>
 800b0e0:	6923      	ldr	r3, [r4, #16]
 800b0e2:	6820      	ldr	r0, [r4, #0]
 800b0e4:	1ac0      	subs	r0, r0, r3
 800b0e6:	6963      	ldr	r3, [r4, #20]
 800b0e8:	b2f6      	uxtb	r6, r6
 800b0ea:	4283      	cmp	r3, r0
 800b0ec:	4637      	mov	r7, r6
 800b0ee:	dc04      	bgt.n	800b0fa <__swbuf_r+0x42>
 800b0f0:	4621      	mov	r1, r4
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	f000 f948 	bl	800b388 <_fflush_r>
 800b0f8:	bb28      	cbnz	r0, 800b146 <__swbuf_r+0x8e>
 800b0fa:	68a3      	ldr	r3, [r4, #8]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	60a3      	str	r3, [r4, #8]
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	1c5a      	adds	r2, r3, #1
 800b104:	6022      	str	r2, [r4, #0]
 800b106:	701e      	strb	r6, [r3, #0]
 800b108:	6963      	ldr	r3, [r4, #20]
 800b10a:	3001      	adds	r0, #1
 800b10c:	4283      	cmp	r3, r0
 800b10e:	d004      	beq.n	800b11a <__swbuf_r+0x62>
 800b110:	89a3      	ldrh	r3, [r4, #12]
 800b112:	07db      	lsls	r3, r3, #31
 800b114:	d519      	bpl.n	800b14a <__swbuf_r+0x92>
 800b116:	2e0a      	cmp	r6, #10
 800b118:	d117      	bne.n	800b14a <__swbuf_r+0x92>
 800b11a:	4621      	mov	r1, r4
 800b11c:	4628      	mov	r0, r5
 800b11e:	f000 f933 	bl	800b388 <_fflush_r>
 800b122:	b190      	cbz	r0, 800b14a <__swbuf_r+0x92>
 800b124:	e00f      	b.n	800b146 <__swbuf_r+0x8e>
 800b126:	4b0b      	ldr	r3, [pc, #44]	; (800b154 <__swbuf_r+0x9c>)
 800b128:	429c      	cmp	r4, r3
 800b12a:	d101      	bne.n	800b130 <__swbuf_r+0x78>
 800b12c:	68ac      	ldr	r4, [r5, #8]
 800b12e:	e7d0      	b.n	800b0d2 <__swbuf_r+0x1a>
 800b130:	4b09      	ldr	r3, [pc, #36]	; (800b158 <__swbuf_r+0xa0>)
 800b132:	429c      	cmp	r4, r3
 800b134:	bf08      	it	eq
 800b136:	68ec      	ldreq	r4, [r5, #12]
 800b138:	e7cb      	b.n	800b0d2 <__swbuf_r+0x1a>
 800b13a:	4621      	mov	r1, r4
 800b13c:	4628      	mov	r0, r5
 800b13e:	f000 f81f 	bl	800b180 <__swsetup_r>
 800b142:	2800      	cmp	r0, #0
 800b144:	d0cc      	beq.n	800b0e0 <__swbuf_r+0x28>
 800b146:	f04f 37ff 	mov.w	r7, #4294967295
 800b14a:	4638      	mov	r0, r7
 800b14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b14e:	bf00      	nop
 800b150:	0800ba18 	.word	0x0800ba18
 800b154:	0800ba38 	.word	0x0800ba38
 800b158:	0800b9f8 	.word	0x0800b9f8

0800b15c <_write_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4c07      	ldr	r4, [pc, #28]	; (800b17c <_write_r+0x20>)
 800b160:	4605      	mov	r5, r0
 800b162:	4608      	mov	r0, r1
 800b164:	4611      	mov	r1, r2
 800b166:	2200      	movs	r2, #0
 800b168:	6022      	str	r2, [r4, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	f7f8 fa99 	bl	80036a2 <_write>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	d102      	bne.n	800b17a <_write_r+0x1e>
 800b174:	6823      	ldr	r3, [r4, #0]
 800b176:	b103      	cbz	r3, 800b17a <_write_r+0x1e>
 800b178:	602b      	str	r3, [r5, #0]
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	20001458 	.word	0x20001458

0800b180 <__swsetup_r>:
 800b180:	4b32      	ldr	r3, [pc, #200]	; (800b24c <__swsetup_r+0xcc>)
 800b182:	b570      	push	{r4, r5, r6, lr}
 800b184:	681d      	ldr	r5, [r3, #0]
 800b186:	4606      	mov	r6, r0
 800b188:	460c      	mov	r4, r1
 800b18a:	b125      	cbz	r5, 800b196 <__swsetup_r+0x16>
 800b18c:	69ab      	ldr	r3, [r5, #24]
 800b18e:	b913      	cbnz	r3, 800b196 <__swsetup_r+0x16>
 800b190:	4628      	mov	r0, r5
 800b192:	f7ff fca9 	bl	800aae8 <__sinit>
 800b196:	4b2e      	ldr	r3, [pc, #184]	; (800b250 <__swsetup_r+0xd0>)
 800b198:	429c      	cmp	r4, r3
 800b19a:	d10f      	bne.n	800b1bc <__swsetup_r+0x3c>
 800b19c:	686c      	ldr	r4, [r5, #4]
 800b19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	0715      	lsls	r5, r2, #28
 800b1a6:	d42c      	bmi.n	800b202 <__swsetup_r+0x82>
 800b1a8:	06d0      	lsls	r0, r2, #27
 800b1aa:	d411      	bmi.n	800b1d0 <__swsetup_r+0x50>
 800b1ac:	2209      	movs	r2, #9
 800b1ae:	6032      	str	r2, [r6, #0]
 800b1b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1b4:	81a3      	strh	r3, [r4, #12]
 800b1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ba:	e03e      	b.n	800b23a <__swsetup_r+0xba>
 800b1bc:	4b25      	ldr	r3, [pc, #148]	; (800b254 <__swsetup_r+0xd4>)
 800b1be:	429c      	cmp	r4, r3
 800b1c0:	d101      	bne.n	800b1c6 <__swsetup_r+0x46>
 800b1c2:	68ac      	ldr	r4, [r5, #8]
 800b1c4:	e7eb      	b.n	800b19e <__swsetup_r+0x1e>
 800b1c6:	4b24      	ldr	r3, [pc, #144]	; (800b258 <__swsetup_r+0xd8>)
 800b1c8:	429c      	cmp	r4, r3
 800b1ca:	bf08      	it	eq
 800b1cc:	68ec      	ldreq	r4, [r5, #12]
 800b1ce:	e7e6      	b.n	800b19e <__swsetup_r+0x1e>
 800b1d0:	0751      	lsls	r1, r2, #29
 800b1d2:	d512      	bpl.n	800b1fa <__swsetup_r+0x7a>
 800b1d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1d6:	b141      	cbz	r1, 800b1ea <__swsetup_r+0x6a>
 800b1d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1dc:	4299      	cmp	r1, r3
 800b1de:	d002      	beq.n	800b1e6 <__swsetup_r+0x66>
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f7ff fd6b 	bl	800acbc <_free_r>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	6363      	str	r3, [r4, #52]	; 0x34
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1f0:	81a3      	strh	r3, [r4, #12]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	6063      	str	r3, [r4, #4]
 800b1f6:	6923      	ldr	r3, [r4, #16]
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	89a3      	ldrh	r3, [r4, #12]
 800b1fc:	f043 0308 	orr.w	r3, r3, #8
 800b200:	81a3      	strh	r3, [r4, #12]
 800b202:	6923      	ldr	r3, [r4, #16]
 800b204:	b94b      	cbnz	r3, 800b21a <__swsetup_r+0x9a>
 800b206:	89a3      	ldrh	r3, [r4, #12]
 800b208:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b20c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b210:	d003      	beq.n	800b21a <__swsetup_r+0x9a>
 800b212:	4621      	mov	r1, r4
 800b214:	4630      	mov	r0, r6
 800b216:	f000 f917 	bl	800b448 <__smakebuf_r>
 800b21a:	89a2      	ldrh	r2, [r4, #12]
 800b21c:	f012 0301 	ands.w	r3, r2, #1
 800b220:	d00c      	beq.n	800b23c <__swsetup_r+0xbc>
 800b222:	2300      	movs	r3, #0
 800b224:	60a3      	str	r3, [r4, #8]
 800b226:	6963      	ldr	r3, [r4, #20]
 800b228:	425b      	negs	r3, r3
 800b22a:	61a3      	str	r3, [r4, #24]
 800b22c:	6923      	ldr	r3, [r4, #16]
 800b22e:	b953      	cbnz	r3, 800b246 <__swsetup_r+0xc6>
 800b230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b234:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b238:	d1ba      	bne.n	800b1b0 <__swsetup_r+0x30>
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	0792      	lsls	r2, r2, #30
 800b23e:	bf58      	it	pl
 800b240:	6963      	ldrpl	r3, [r4, #20]
 800b242:	60a3      	str	r3, [r4, #8]
 800b244:	e7f2      	b.n	800b22c <__swsetup_r+0xac>
 800b246:	2000      	movs	r0, #0
 800b248:	e7f7      	b.n	800b23a <__swsetup_r+0xba>
 800b24a:	bf00      	nop
 800b24c:	2000001c 	.word	0x2000001c
 800b250:	0800ba18 	.word	0x0800ba18
 800b254:	0800ba38 	.word	0x0800ba38
 800b258:	0800b9f8 	.word	0x0800b9f8

0800b25c <_close_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	4c06      	ldr	r4, [pc, #24]	; (800b278 <_close_r+0x1c>)
 800b260:	2300      	movs	r3, #0
 800b262:	4605      	mov	r5, r0
 800b264:	4608      	mov	r0, r1
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	f7f8 fa37 	bl	80036da <_close>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d102      	bne.n	800b276 <_close_r+0x1a>
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	b103      	cbz	r3, 800b276 <_close_r+0x1a>
 800b274:	602b      	str	r3, [r5, #0]
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	20001458 	.word	0x20001458

0800b27c <__sflush_r>:
 800b27c:	898a      	ldrh	r2, [r1, #12]
 800b27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b282:	4605      	mov	r5, r0
 800b284:	0710      	lsls	r0, r2, #28
 800b286:	460c      	mov	r4, r1
 800b288:	d458      	bmi.n	800b33c <__sflush_r+0xc0>
 800b28a:	684b      	ldr	r3, [r1, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	dc05      	bgt.n	800b29c <__sflush_r+0x20>
 800b290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b292:	2b00      	cmp	r3, #0
 800b294:	dc02      	bgt.n	800b29c <__sflush_r+0x20>
 800b296:	2000      	movs	r0, #0
 800b298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b29c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b29e:	2e00      	cmp	r6, #0
 800b2a0:	d0f9      	beq.n	800b296 <__sflush_r+0x1a>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2a8:	682f      	ldr	r7, [r5, #0]
 800b2aa:	6a21      	ldr	r1, [r4, #32]
 800b2ac:	602b      	str	r3, [r5, #0]
 800b2ae:	d032      	beq.n	800b316 <__sflush_r+0x9a>
 800b2b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	075a      	lsls	r2, r3, #29
 800b2b6:	d505      	bpl.n	800b2c4 <__sflush_r+0x48>
 800b2b8:	6863      	ldr	r3, [r4, #4]
 800b2ba:	1ac0      	subs	r0, r0, r3
 800b2bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2be:	b10b      	cbz	r3, 800b2c4 <__sflush_r+0x48>
 800b2c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2c2:	1ac0      	subs	r0, r0, r3
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2ca:	6a21      	ldr	r1, [r4, #32]
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	47b0      	blx	r6
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	d106      	bne.n	800b2e4 <__sflush_r+0x68>
 800b2d6:	6829      	ldr	r1, [r5, #0]
 800b2d8:	291d      	cmp	r1, #29
 800b2da:	d848      	bhi.n	800b36e <__sflush_r+0xf2>
 800b2dc:	4a29      	ldr	r2, [pc, #164]	; (800b384 <__sflush_r+0x108>)
 800b2de:	40ca      	lsrs	r2, r1
 800b2e0:	07d6      	lsls	r6, r2, #31
 800b2e2:	d544      	bpl.n	800b36e <__sflush_r+0xf2>
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	6062      	str	r2, [r4, #4]
 800b2e8:	04d9      	lsls	r1, r3, #19
 800b2ea:	6922      	ldr	r2, [r4, #16]
 800b2ec:	6022      	str	r2, [r4, #0]
 800b2ee:	d504      	bpl.n	800b2fa <__sflush_r+0x7e>
 800b2f0:	1c42      	adds	r2, r0, #1
 800b2f2:	d101      	bne.n	800b2f8 <__sflush_r+0x7c>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	b903      	cbnz	r3, 800b2fa <__sflush_r+0x7e>
 800b2f8:	6560      	str	r0, [r4, #84]	; 0x54
 800b2fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2fc:	602f      	str	r7, [r5, #0]
 800b2fe:	2900      	cmp	r1, #0
 800b300:	d0c9      	beq.n	800b296 <__sflush_r+0x1a>
 800b302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b306:	4299      	cmp	r1, r3
 800b308:	d002      	beq.n	800b310 <__sflush_r+0x94>
 800b30a:	4628      	mov	r0, r5
 800b30c:	f7ff fcd6 	bl	800acbc <_free_r>
 800b310:	2000      	movs	r0, #0
 800b312:	6360      	str	r0, [r4, #52]	; 0x34
 800b314:	e7c0      	b.n	800b298 <__sflush_r+0x1c>
 800b316:	2301      	movs	r3, #1
 800b318:	4628      	mov	r0, r5
 800b31a:	47b0      	blx	r6
 800b31c:	1c41      	adds	r1, r0, #1
 800b31e:	d1c8      	bne.n	800b2b2 <__sflush_r+0x36>
 800b320:	682b      	ldr	r3, [r5, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d0c5      	beq.n	800b2b2 <__sflush_r+0x36>
 800b326:	2b1d      	cmp	r3, #29
 800b328:	d001      	beq.n	800b32e <__sflush_r+0xb2>
 800b32a:	2b16      	cmp	r3, #22
 800b32c:	d101      	bne.n	800b332 <__sflush_r+0xb6>
 800b32e:	602f      	str	r7, [r5, #0]
 800b330:	e7b1      	b.n	800b296 <__sflush_r+0x1a>
 800b332:	89a3      	ldrh	r3, [r4, #12]
 800b334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b338:	81a3      	strh	r3, [r4, #12]
 800b33a:	e7ad      	b.n	800b298 <__sflush_r+0x1c>
 800b33c:	690f      	ldr	r7, [r1, #16]
 800b33e:	2f00      	cmp	r7, #0
 800b340:	d0a9      	beq.n	800b296 <__sflush_r+0x1a>
 800b342:	0793      	lsls	r3, r2, #30
 800b344:	680e      	ldr	r6, [r1, #0]
 800b346:	bf08      	it	eq
 800b348:	694b      	ldreq	r3, [r1, #20]
 800b34a:	600f      	str	r7, [r1, #0]
 800b34c:	bf18      	it	ne
 800b34e:	2300      	movne	r3, #0
 800b350:	eba6 0807 	sub.w	r8, r6, r7
 800b354:	608b      	str	r3, [r1, #8]
 800b356:	f1b8 0f00 	cmp.w	r8, #0
 800b35a:	dd9c      	ble.n	800b296 <__sflush_r+0x1a>
 800b35c:	4643      	mov	r3, r8
 800b35e:	463a      	mov	r2, r7
 800b360:	6a21      	ldr	r1, [r4, #32]
 800b362:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b364:	4628      	mov	r0, r5
 800b366:	47b0      	blx	r6
 800b368:	2800      	cmp	r0, #0
 800b36a:	dc06      	bgt.n	800b37a <__sflush_r+0xfe>
 800b36c:	89a3      	ldrh	r3, [r4, #12]
 800b36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b372:	81a3      	strh	r3, [r4, #12]
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	e78e      	b.n	800b298 <__sflush_r+0x1c>
 800b37a:	4407      	add	r7, r0
 800b37c:	eba8 0800 	sub.w	r8, r8, r0
 800b380:	e7e9      	b.n	800b356 <__sflush_r+0xda>
 800b382:	bf00      	nop
 800b384:	20400001 	.word	0x20400001

0800b388 <_fflush_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	690b      	ldr	r3, [r1, #16]
 800b38c:	4605      	mov	r5, r0
 800b38e:	460c      	mov	r4, r1
 800b390:	b1db      	cbz	r3, 800b3ca <_fflush_r+0x42>
 800b392:	b118      	cbz	r0, 800b39c <_fflush_r+0x14>
 800b394:	6983      	ldr	r3, [r0, #24]
 800b396:	b90b      	cbnz	r3, 800b39c <_fflush_r+0x14>
 800b398:	f7ff fba6 	bl	800aae8 <__sinit>
 800b39c:	4b0c      	ldr	r3, [pc, #48]	; (800b3d0 <_fflush_r+0x48>)
 800b39e:	429c      	cmp	r4, r3
 800b3a0:	d109      	bne.n	800b3b6 <_fflush_r+0x2e>
 800b3a2:	686c      	ldr	r4, [r5, #4]
 800b3a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a8:	b17b      	cbz	r3, 800b3ca <_fflush_r+0x42>
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3b2:	f7ff bf63 	b.w	800b27c <__sflush_r>
 800b3b6:	4b07      	ldr	r3, [pc, #28]	; (800b3d4 <_fflush_r+0x4c>)
 800b3b8:	429c      	cmp	r4, r3
 800b3ba:	d101      	bne.n	800b3c0 <_fflush_r+0x38>
 800b3bc:	68ac      	ldr	r4, [r5, #8]
 800b3be:	e7f1      	b.n	800b3a4 <_fflush_r+0x1c>
 800b3c0:	4b05      	ldr	r3, [pc, #20]	; (800b3d8 <_fflush_r+0x50>)
 800b3c2:	429c      	cmp	r4, r3
 800b3c4:	bf08      	it	eq
 800b3c6:	68ec      	ldreq	r4, [r5, #12]
 800b3c8:	e7ec      	b.n	800b3a4 <_fflush_r+0x1c>
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	bd38      	pop	{r3, r4, r5, pc}
 800b3ce:	bf00      	nop
 800b3d0:	0800ba18 	.word	0x0800ba18
 800b3d4:	0800ba38 	.word	0x0800ba38
 800b3d8:	0800b9f8 	.word	0x0800b9f8

0800b3dc <_lseek_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4c07      	ldr	r4, [pc, #28]	; (800b3fc <_lseek_r+0x20>)
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	4608      	mov	r0, r1
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	6022      	str	r2, [r4, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	f7f8 f99c 	bl	8003728 <_lseek>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d102      	bne.n	800b3fa <_lseek_r+0x1e>
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	b103      	cbz	r3, 800b3fa <_lseek_r+0x1e>
 800b3f8:	602b      	str	r3, [r5, #0]
 800b3fa:	bd38      	pop	{r3, r4, r5, pc}
 800b3fc:	20001458 	.word	0x20001458

0800b400 <__swhatbuf_r>:
 800b400:	b570      	push	{r4, r5, r6, lr}
 800b402:	460e      	mov	r6, r1
 800b404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b408:	2900      	cmp	r1, #0
 800b40a:	b096      	sub	sp, #88	; 0x58
 800b40c:	4614      	mov	r4, r2
 800b40e:	461d      	mov	r5, r3
 800b410:	da07      	bge.n	800b422 <__swhatbuf_r+0x22>
 800b412:	2300      	movs	r3, #0
 800b414:	602b      	str	r3, [r5, #0]
 800b416:	89b3      	ldrh	r3, [r6, #12]
 800b418:	061a      	lsls	r2, r3, #24
 800b41a:	d410      	bmi.n	800b43e <__swhatbuf_r+0x3e>
 800b41c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b420:	e00e      	b.n	800b440 <__swhatbuf_r+0x40>
 800b422:	466a      	mov	r2, sp
 800b424:	f000 f862 	bl	800b4ec <_fstat_r>
 800b428:	2800      	cmp	r0, #0
 800b42a:	dbf2      	blt.n	800b412 <__swhatbuf_r+0x12>
 800b42c:	9a01      	ldr	r2, [sp, #4]
 800b42e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b432:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b436:	425a      	negs	r2, r3
 800b438:	415a      	adcs	r2, r3
 800b43a:	602a      	str	r2, [r5, #0]
 800b43c:	e7ee      	b.n	800b41c <__swhatbuf_r+0x1c>
 800b43e:	2340      	movs	r3, #64	; 0x40
 800b440:	2000      	movs	r0, #0
 800b442:	6023      	str	r3, [r4, #0]
 800b444:	b016      	add	sp, #88	; 0x58
 800b446:	bd70      	pop	{r4, r5, r6, pc}

0800b448 <__smakebuf_r>:
 800b448:	898b      	ldrh	r3, [r1, #12]
 800b44a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b44c:	079d      	lsls	r5, r3, #30
 800b44e:	4606      	mov	r6, r0
 800b450:	460c      	mov	r4, r1
 800b452:	d507      	bpl.n	800b464 <__smakebuf_r+0x1c>
 800b454:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	6123      	str	r3, [r4, #16]
 800b45c:	2301      	movs	r3, #1
 800b45e:	6163      	str	r3, [r4, #20]
 800b460:	b002      	add	sp, #8
 800b462:	bd70      	pop	{r4, r5, r6, pc}
 800b464:	ab01      	add	r3, sp, #4
 800b466:	466a      	mov	r2, sp
 800b468:	f7ff ffca 	bl	800b400 <__swhatbuf_r>
 800b46c:	9900      	ldr	r1, [sp, #0]
 800b46e:	4605      	mov	r5, r0
 800b470:	4630      	mov	r0, r6
 800b472:	f7ff fc71 	bl	800ad58 <_malloc_r>
 800b476:	b948      	cbnz	r0, 800b48c <__smakebuf_r+0x44>
 800b478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b47c:	059a      	lsls	r2, r3, #22
 800b47e:	d4ef      	bmi.n	800b460 <__smakebuf_r+0x18>
 800b480:	f023 0303 	bic.w	r3, r3, #3
 800b484:	f043 0302 	orr.w	r3, r3, #2
 800b488:	81a3      	strh	r3, [r4, #12]
 800b48a:	e7e3      	b.n	800b454 <__smakebuf_r+0xc>
 800b48c:	4b0d      	ldr	r3, [pc, #52]	; (800b4c4 <__smakebuf_r+0x7c>)
 800b48e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b490:	89a3      	ldrh	r3, [r4, #12]
 800b492:	6020      	str	r0, [r4, #0]
 800b494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	9b00      	ldr	r3, [sp, #0]
 800b49c:	6163      	str	r3, [r4, #20]
 800b49e:	9b01      	ldr	r3, [sp, #4]
 800b4a0:	6120      	str	r0, [r4, #16]
 800b4a2:	b15b      	cbz	r3, 800b4bc <__smakebuf_r+0x74>
 800b4a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f000 f831 	bl	800b510 <_isatty_r>
 800b4ae:	b128      	cbz	r0, 800b4bc <__smakebuf_r+0x74>
 800b4b0:	89a3      	ldrh	r3, [r4, #12]
 800b4b2:	f023 0303 	bic.w	r3, r3, #3
 800b4b6:	f043 0301 	orr.w	r3, r3, #1
 800b4ba:	81a3      	strh	r3, [r4, #12]
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	431d      	orrs	r5, r3
 800b4c0:	81a5      	strh	r5, [r4, #12]
 800b4c2:	e7cd      	b.n	800b460 <__smakebuf_r+0x18>
 800b4c4:	0800aab1 	.word	0x0800aab1

0800b4c8 <_read_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	4c07      	ldr	r4, [pc, #28]	; (800b4e8 <_read_r+0x20>)
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	4608      	mov	r0, r1
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	6022      	str	r2, [r4, #0]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	f7f8 f8c6 	bl	8003668 <_read>
 800b4dc:	1c43      	adds	r3, r0, #1
 800b4de:	d102      	bne.n	800b4e6 <_read_r+0x1e>
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	b103      	cbz	r3, 800b4e6 <_read_r+0x1e>
 800b4e4:	602b      	str	r3, [r5, #0]
 800b4e6:	bd38      	pop	{r3, r4, r5, pc}
 800b4e8:	20001458 	.word	0x20001458

0800b4ec <_fstat_r>:
 800b4ec:	b538      	push	{r3, r4, r5, lr}
 800b4ee:	4c07      	ldr	r4, [pc, #28]	; (800b50c <_fstat_r+0x20>)
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	4608      	mov	r0, r1
 800b4f6:	4611      	mov	r1, r2
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	f7f8 f8fa 	bl	80036f2 <_fstat>
 800b4fe:	1c43      	adds	r3, r0, #1
 800b500:	d102      	bne.n	800b508 <_fstat_r+0x1c>
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	b103      	cbz	r3, 800b508 <_fstat_r+0x1c>
 800b506:	602b      	str	r3, [r5, #0]
 800b508:	bd38      	pop	{r3, r4, r5, pc}
 800b50a:	bf00      	nop
 800b50c:	20001458 	.word	0x20001458

0800b510 <_isatty_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4c06      	ldr	r4, [pc, #24]	; (800b52c <_isatty_r+0x1c>)
 800b514:	2300      	movs	r3, #0
 800b516:	4605      	mov	r5, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	6023      	str	r3, [r4, #0]
 800b51c:	f7f8 f8f9 	bl	8003712 <_isatty>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_isatty_r+0x1a>
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	b103      	cbz	r3, 800b52a <_isatty_r+0x1a>
 800b528:	602b      	str	r3, [r5, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	20001458 	.word	0x20001458

0800b530 <_init>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	bf00      	nop
 800b534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b536:	bc08      	pop	{r3}
 800b538:	469e      	mov	lr, r3
 800b53a:	4770      	bx	lr

0800b53c <_fini>:
 800b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53e:	bf00      	nop
 800b540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b542:	bc08      	pop	{r3}
 800b544:	469e      	mov	lr, r3
 800b546:	4770      	bx	lr
