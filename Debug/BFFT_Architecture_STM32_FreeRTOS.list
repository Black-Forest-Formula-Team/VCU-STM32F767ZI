
BFFT_Architecture_STM32_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800b8d8  0800b8d8  0001b8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000002c4  0800beb0  0800beb0  0001beb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000340  0800c174  0800c174  0001c174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4b4  0800c4b4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800c4b4  0800c4b4  0001c4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c4c4  0800c4c4  0001c4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c4cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001014  20000080  0800c54c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001094  0800c54c  00021094  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035f22  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b9d  00000000  00000000  00055fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b8  00000000  00000000  0005cb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fa0  00000000  00000000  0005ed28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a636  00000000  00000000  00060cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00010e30  00000000  00000000  0007b2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0008c12e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a724  00000000  00000000  0008c184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b8c0 	.word	0x0800b8c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800b8c0 	.word	0x0800b8c0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <__aeabi_uldivmod>:
 8000254:	b953      	cbnz	r3, 800026c <__aeabi_uldivmod+0x18>
 8000256:	b94a      	cbnz	r2, 800026c <__aeabi_uldivmod+0x18>
 8000258:	2900      	cmp	r1, #0
 800025a:	bf08      	it	eq
 800025c:	2800      	cmpeq	r0, #0
 800025e:	bf1c      	itt	ne
 8000260:	f04f 31ff 	movne.w	r1, #4294967295
 8000264:	f04f 30ff 	movne.w	r0, #4294967295
 8000268:	f001 b8c0 	b.w	80013ec <__aeabi_idiv0>
 800026c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000280:	b004      	add	sp, #16
 8000282:	4770      	bx	lr

08000284 <__udivmoddi4>:
 8000284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000288:	9d08      	ldr	r5, [sp, #32]
 800028a:	4604      	mov	r4, r0
 800028c:	468c      	mov	ip, r1
 800028e:	2b00      	cmp	r3, #0
 8000290:	f040 8083 	bne.w	800039a <__udivmoddi4+0x116>
 8000294:	428a      	cmp	r2, r1
 8000296:	4617      	mov	r7, r2
 8000298:	d947      	bls.n	800032a <__udivmoddi4+0xa6>
 800029a:	fab2 f282 	clz	r2, r2
 800029e:	b142      	cbz	r2, 80002b2 <__udivmoddi4+0x2e>
 80002a0:	f1c2 0020 	rsb	r0, r2, #32
 80002a4:	fa24 f000 	lsr.w	r0, r4, r0
 80002a8:	4091      	lsls	r1, r2
 80002aa:	4097      	lsls	r7, r2
 80002ac:	ea40 0c01 	orr.w	ip, r0, r1
 80002b0:	4094      	lsls	r4, r2
 80002b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	fbbc f6f8 	udiv	r6, ip, r8
 80002bc:	fa1f fe87 	uxth.w	lr, r7
 80002c0:	fb08 c116 	mls	r1, r8, r6, ip
 80002c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c8:	fb06 f10e 	mul.w	r1, r6, lr
 80002cc:	4299      	cmp	r1, r3
 80002ce:	d909      	bls.n	80002e4 <__udivmoddi4+0x60>
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002d6:	f080 8119 	bcs.w	800050c <__udivmoddi4+0x288>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 8116 	bls.w	800050c <__udivmoddi4+0x288>
 80002e0:	3e02      	subs	r6, #2
 80002e2:	443b      	add	r3, r7
 80002e4:	1a5b      	subs	r3, r3, r1
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ec:	fb08 3310 	mls	r3, r8, r0, r3
 80002f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002f8:	45a6      	cmp	lr, r4
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x8c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	f080 8105 	bcs.w	8000510 <__udivmoddi4+0x28c>
 8000306:	45a6      	cmp	lr, r4
 8000308:	f240 8102 	bls.w	8000510 <__udivmoddi4+0x28c>
 800030c:	3802      	subs	r0, #2
 800030e:	443c      	add	r4, r7
 8000310:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000314:	eba4 040e 	sub.w	r4, r4, lr
 8000318:	2600      	movs	r6, #0
 800031a:	b11d      	cbz	r5, 8000324 <__udivmoddi4+0xa0>
 800031c:	40d4      	lsrs	r4, r2
 800031e:	2300      	movs	r3, #0
 8000320:	e9c5 4300 	strd	r4, r3, [r5]
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xaa>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	2a00      	cmp	r2, #0
 8000334:	d150      	bne.n	80003d8 <__udivmoddi4+0x154>
 8000336:	1bcb      	subs	r3, r1, r7
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f f887 	uxth.w	r8, r7
 8000340:	2601      	movs	r6, #1
 8000342:	fbb3 fcfe 	udiv	ip, r3, lr
 8000346:	0c21      	lsrs	r1, r4, #16
 8000348:	fb0e 331c 	mls	r3, lr, ip, r3
 800034c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000350:	fb08 f30c 	mul.w	r3, r8, ip
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xe4>
 8000358:	1879      	adds	r1, r7, r1
 800035a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0xe2>
 8000360:	428b      	cmp	r3, r1
 8000362:	f200 80e9 	bhi.w	8000538 <__udivmoddi4+0x2b4>
 8000366:	4684      	mov	ip, r0
 8000368:	1ac9      	subs	r1, r1, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000370:	fb0e 1110 	mls	r1, lr, r0, r1
 8000374:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000378:	fb08 f800 	mul.w	r8, r8, r0
 800037c:	45a0      	cmp	r8, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x10c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x10a>
 8000388:	45a0      	cmp	r8, r4
 800038a:	f200 80d9 	bhi.w	8000540 <__udivmoddi4+0x2bc>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 0408 	sub.w	r4, r4, r8
 8000394:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000398:	e7bf      	b.n	800031a <__udivmoddi4+0x96>
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0x12e>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80b1 	beq.w	8000506 <__udivmoddi4+0x282>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x1cc>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0x140>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80b8 	bhi.w	8000534 <__udivmoddi4+0x2b0>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	468c      	mov	ip, r1
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0a8      	beq.n	8000324 <__udivmoddi4+0xa0>
 80003d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003d6:	e7a5      	b.n	8000324 <__udivmoddi4+0xa0>
 80003d8:	f1c2 0320 	rsb	r3, r2, #32
 80003dc:	fa20 f603 	lsr.w	r6, r0, r3
 80003e0:	4097      	lsls	r7, r2
 80003e2:	fa01 f002 	lsl.w	r0, r1, r2
 80003e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ea:	40d9      	lsrs	r1, r3
 80003ec:	4330      	orrs	r0, r6
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003f4:	fa1f f887 	uxth.w	r8, r7
 80003f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000400:	fb06 f108 	mul.w	r1, r6, r8
 8000404:	4299      	cmp	r1, r3
 8000406:	fa04 f402 	lsl.w	r4, r4, r2
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x19c>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000412:	f080 808d 	bcs.w	8000530 <__udivmoddi4+0x2ac>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 808a 	bls.w	8000530 <__udivmoddi4+0x2ac>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b281      	uxth	r1, r0
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000430:	fb00 f308 	mul.w	r3, r0, r8
 8000434:	428b      	cmp	r3, r1
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x1c4>
 8000438:	1879      	adds	r1, r7, r1
 800043a:	f100 3cff 	add.w	ip, r0, #4294967295
 800043e:	d273      	bcs.n	8000528 <__udivmoddi4+0x2a4>
 8000440:	428b      	cmp	r3, r1
 8000442:	d971      	bls.n	8000528 <__udivmoddi4+0x2a4>
 8000444:	3802      	subs	r0, #2
 8000446:	4439      	add	r1, r7
 8000448:	1acb      	subs	r3, r1, r3
 800044a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800044e:	e778      	b.n	8000342 <__udivmoddi4+0xbe>
 8000450:	f1c6 0c20 	rsb	ip, r6, #32
 8000454:	fa03 f406 	lsl.w	r4, r3, r6
 8000458:	fa22 f30c 	lsr.w	r3, r2, ip
 800045c:	431c      	orrs	r4, r3
 800045e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800046a:	fa21 f10c 	lsr.w	r1, r1, ip
 800046e:	431f      	orrs	r7, r3
 8000470:	0c3b      	lsrs	r3, r7, #16
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fa1f f884 	uxth.w	r8, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000482:	fb09 fa08 	mul.w	sl, r9, r8
 8000486:	458a      	cmp	sl, r1
 8000488:	fa02 f206 	lsl.w	r2, r2, r6
 800048c:	fa00 f306 	lsl.w	r3, r0, r6
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x220>
 8000492:	1861      	adds	r1, r4, r1
 8000494:	f109 30ff 	add.w	r0, r9, #4294967295
 8000498:	d248      	bcs.n	800052c <__udivmoddi4+0x2a8>
 800049a:	458a      	cmp	sl, r1
 800049c:	d946      	bls.n	800052c <__udivmoddi4+0x2a8>
 800049e:	f1a9 0902 	sub.w	r9, r9, #2
 80004a2:	4421      	add	r1, r4
 80004a4:	eba1 010a 	sub.w	r1, r1, sl
 80004a8:	b2bf      	uxth	r7, r7
 80004aa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ae:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004b6:	fb00 f808 	mul.w	r8, r0, r8
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x24a>
 80004be:	19e7      	adds	r7, r4, r7
 80004c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004c4:	d22e      	bcs.n	8000524 <__udivmoddi4+0x2a0>
 80004c6:	45b8      	cmp	r8, r7
 80004c8:	d92c      	bls.n	8000524 <__udivmoddi4+0x2a0>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4427      	add	r7, r4
 80004ce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004d2:	eba7 0708 	sub.w	r7, r7, r8
 80004d6:	fba0 8902 	umull	r8, r9, r0, r2
 80004da:	454f      	cmp	r7, r9
 80004dc:	46c6      	mov	lr, r8
 80004de:	4649      	mov	r1, r9
 80004e0:	d31a      	bcc.n	8000518 <__udivmoddi4+0x294>
 80004e2:	d017      	beq.n	8000514 <__udivmoddi4+0x290>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x27a>
 80004e6:	ebb3 020e 	subs.w	r2, r3, lr
 80004ea:	eb67 0701 	sbc.w	r7, r7, r1
 80004ee:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004f2:	40f2      	lsrs	r2, r6
 80004f4:	ea4c 0202 	orr.w	r2, ip, r2
 80004f8:	40f7      	lsrs	r7, r6
 80004fa:	e9c5 2700 	strd	r2, r7, [r5]
 80004fe:	2600      	movs	r6, #0
 8000500:	4631      	mov	r1, r6
 8000502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000506:	462e      	mov	r6, r5
 8000508:	4628      	mov	r0, r5
 800050a:	e70b      	b.n	8000324 <__udivmoddi4+0xa0>
 800050c:	4606      	mov	r6, r0
 800050e:	e6e9      	b.n	80002e4 <__udivmoddi4+0x60>
 8000510:	4618      	mov	r0, r3
 8000512:	e6fd      	b.n	8000310 <__udivmoddi4+0x8c>
 8000514:	4543      	cmp	r3, r8
 8000516:	d2e5      	bcs.n	80004e4 <__udivmoddi4+0x260>
 8000518:	ebb8 0e02 	subs.w	lr, r8, r2
 800051c:	eb69 0104 	sbc.w	r1, r9, r4
 8000520:	3801      	subs	r0, #1
 8000522:	e7df      	b.n	80004e4 <__udivmoddi4+0x260>
 8000524:	4608      	mov	r0, r1
 8000526:	e7d2      	b.n	80004ce <__udivmoddi4+0x24a>
 8000528:	4660      	mov	r0, ip
 800052a:	e78d      	b.n	8000448 <__udivmoddi4+0x1c4>
 800052c:	4681      	mov	r9, r0
 800052e:	e7b9      	b.n	80004a4 <__udivmoddi4+0x220>
 8000530:	4666      	mov	r6, ip
 8000532:	e775      	b.n	8000420 <__udivmoddi4+0x19c>
 8000534:	4630      	mov	r0, r6
 8000536:	e74a      	b.n	80003ce <__udivmoddi4+0x14a>
 8000538:	f1ac 0c02 	sub.w	ip, ip, #2
 800053c:	4439      	add	r1, r7
 800053e:	e713      	b.n	8000368 <__udivmoddi4+0xe4>
 8000540:	3802      	subs	r0, #2
 8000542:	443c      	add	r4, r7
 8000544:	e724      	b.n	8000390 <__udivmoddi4+0x10c>
 8000546:	bf00      	nop

08000548 <selfrel_offset31>:
 8000548:	6803      	ldr	r3, [r0, #0]
 800054a:	005a      	lsls	r2, r3, #1
 800054c:	bf4c      	ite	mi
 800054e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000552:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000556:	4418      	add	r0, r3
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <search_EIT_table>:
 800055c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000560:	b329      	cbz	r1, 80005ae <search_EIT_table+0x52>
 8000562:	1e4f      	subs	r7, r1, #1
 8000564:	4604      	mov	r4, r0
 8000566:	4615      	mov	r5, r2
 8000568:	463e      	mov	r6, r7
 800056a:	f04f 0800 	mov.w	r8, #0
 800056e:	eb08 0106 	add.w	r1, r8, r6
 8000572:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000576:	1049      	asrs	r1, r1, #1
 8000578:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 800057c:	4648      	mov	r0, r9
 800057e:	f7ff ffe3 	bl	8000548 <selfrel_offset31>
 8000582:	4603      	mov	r3, r0
 8000584:	00c8      	lsls	r0, r1, #3
 8000586:	3008      	adds	r0, #8
 8000588:	428f      	cmp	r7, r1
 800058a:	4420      	add	r0, r4
 800058c:	d009      	beq.n	80005a2 <search_EIT_table+0x46>
 800058e:	42ab      	cmp	r3, r5
 8000590:	d809      	bhi.n	80005a6 <search_EIT_table+0x4a>
 8000592:	f7ff ffd9 	bl	8000548 <selfrel_offset31>
 8000596:	3801      	subs	r0, #1
 8000598:	42a8      	cmp	r0, r5
 800059a:	d20a      	bcs.n	80005b2 <search_EIT_table+0x56>
 800059c:	f101 0801 	add.w	r8, r1, #1
 80005a0:	e7e5      	b.n	800056e <search_EIT_table+0x12>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d905      	bls.n	80005b2 <search_EIT_table+0x56>
 80005a6:	4588      	cmp	r8, r1
 80005a8:	d001      	beq.n	80005ae <search_EIT_table+0x52>
 80005aa:	1e4e      	subs	r6, r1, #1
 80005ac:	e7df      	b.n	800056e <search_EIT_table+0x12>
 80005ae:	f04f 0900 	mov.w	r9, #0
 80005b2:	4648      	mov	r0, r9
 80005b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080005b8 <__gnu_unwind_get_pr_addr>:
 80005b8:	2801      	cmp	r0, #1
 80005ba:	d007      	beq.n	80005cc <__gnu_unwind_get_pr_addr+0x14>
 80005bc:	2802      	cmp	r0, #2
 80005be:	d007      	beq.n	80005d0 <__gnu_unwind_get_pr_addr+0x18>
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <__gnu_unwind_get_pr_addr+0x1c>)
 80005c2:	2800      	cmp	r0, #0
 80005c4:	bf0c      	ite	eq
 80005c6:	4618      	moveq	r0, r3
 80005c8:	2000      	movne	r0, #0
 80005ca:	4770      	bx	lr
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <__gnu_unwind_get_pr_addr+0x20>)
 80005ce:	4770      	bx	lr
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <__gnu_unwind_get_pr_addr+0x24>)
 80005d2:	4770      	bx	lr
 80005d4:	08000c7d 	.word	0x08000c7d
 80005d8:	08000c81 	.word	0x08000c81
 80005dc:	08000c85 	.word	0x08000c85

080005e0 <get_eit_entry>:
 80005e0:	b530      	push	{r4, r5, lr}
 80005e2:	4b23      	ldr	r3, [pc, #140]	; (8000670 <get_eit_entry+0x90>)
 80005e4:	b083      	sub	sp, #12
 80005e6:	4604      	mov	r4, r0
 80005e8:	1e8d      	subs	r5, r1, #2
 80005ea:	b33b      	cbz	r3, 800063c <get_eit_entry+0x5c>
 80005ec:	a901      	add	r1, sp, #4
 80005ee:	4628      	mov	r0, r5
 80005f0:	f3af 8000 	nop.w
 80005f4:	b1e8      	cbz	r0, 8000632 <get_eit_entry+0x52>
 80005f6:	9901      	ldr	r1, [sp, #4]
 80005f8:	462a      	mov	r2, r5
 80005fa:	f7ff ffaf 	bl	800055c <search_EIT_table>
 80005fe:	4601      	mov	r1, r0
 8000600:	b1b8      	cbz	r0, 8000632 <get_eit_entry+0x52>
 8000602:	f7ff ffa1 	bl	8000548 <selfrel_offset31>
 8000606:	684b      	ldr	r3, [r1, #4]
 8000608:	64a0      	str	r0, [r4, #72]	; 0x48
 800060a:	2b01      	cmp	r3, #1
 800060c:	d02b      	beq.n	8000666 <get_eit_entry+0x86>
 800060e:	2b00      	cmp	r3, #0
 8000610:	f101 0004 	add.w	r0, r1, #4
 8000614:	db23      	blt.n	800065e <get_eit_entry+0x7e>
 8000616:	f7ff ff97 	bl	8000548 <selfrel_offset31>
 800061a:	2300      	movs	r3, #0
 800061c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000620:	6803      	ldr	r3, [r0, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db10      	blt.n	8000648 <get_eit_entry+0x68>
 8000626:	f7ff ff8f 	bl	8000548 <selfrel_offset31>
 800062a:	6120      	str	r0, [r4, #16]
 800062c:	2000      	movs	r0, #0
 800062e:	b003      	add	sp, #12
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	2300      	movs	r3, #0
 8000634:	2009      	movs	r0, #9
 8000636:	6123      	str	r3, [r4, #16]
 8000638:	b003      	add	sp, #12
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	490d      	ldr	r1, [pc, #52]	; (8000674 <get_eit_entry+0x94>)
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <get_eit_entry+0x98>)
 8000640:	1a09      	subs	r1, r1, r0
 8000642:	10c9      	asrs	r1, r1, #3
 8000644:	9101      	str	r1, [sp, #4]
 8000646:	e7d7      	b.n	80005f8 <get_eit_entry+0x18>
 8000648:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800064c:	f7ff ffb4 	bl	80005b8 <__gnu_unwind_get_pr_addr>
 8000650:	2800      	cmp	r0, #0
 8000652:	6120      	str	r0, [r4, #16]
 8000654:	bf14      	ite	ne
 8000656:	2000      	movne	r0, #0
 8000658:	2009      	moveq	r0, #9
 800065a:	b003      	add	sp, #12
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	2301      	movs	r3, #1
 8000660:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000664:	e7dc      	b.n	8000620 <get_eit_entry+0x40>
 8000666:	2300      	movs	r3, #0
 8000668:	6123      	str	r3, [r4, #16]
 800066a:	2005      	movs	r0, #5
 800066c:	e7df      	b.n	800062e <get_eit_entry+0x4e>
 800066e:	bf00      	nop
 8000670:	00000000 	.word	0x00000000
 8000674:	0800c4b4 	.word	0x0800c4b4
 8000678:	0800c174 	.word	0x0800c174

0800067c <restore_non_core_regs>:
 800067c:	6803      	ldr	r3, [r0, #0]
 800067e:	07da      	lsls	r2, r3, #31
 8000680:	b510      	push	{r4, lr}
 8000682:	4604      	mov	r4, r0
 8000684:	d406      	bmi.n	8000694 <restore_non_core_regs+0x18>
 8000686:	079b      	lsls	r3, r3, #30
 8000688:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800068c:	d509      	bpl.n	80006a2 <restore_non_core_regs+0x26>
 800068e:	f000 fc4b 	bl	8000f28 <__gnu_Unwind_Restore_VFP_D>
 8000692:	6823      	ldr	r3, [r4, #0]
 8000694:	0759      	lsls	r1, r3, #29
 8000696:	d509      	bpl.n	80006ac <restore_non_core_regs+0x30>
 8000698:	071a      	lsls	r2, r3, #28
 800069a:	d50e      	bpl.n	80006ba <restore_non_core_regs+0x3e>
 800069c:	06db      	lsls	r3, r3, #27
 800069e:	d513      	bpl.n	80006c8 <restore_non_core_regs+0x4c>
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	f000 fc39 	bl	8000f18 <__gnu_Unwind_Restore_VFP>
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	0759      	lsls	r1, r3, #29
 80006aa:	d4f5      	bmi.n	8000698 <restore_non_core_regs+0x1c>
 80006ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006b0:	f000 fc42 	bl	8000f38 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006b4:	6823      	ldr	r3, [r4, #0]
 80006b6:	071a      	lsls	r2, r3, #28
 80006b8:	d4f0      	bmi.n	800069c <restore_non_core_regs+0x20>
 80006ba:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006be:	f000 fc43 	bl	8000f48 <__gnu_Unwind_Restore_WMMXD>
 80006c2:	6823      	ldr	r3, [r4, #0]
 80006c4:	06db      	lsls	r3, r3, #27
 80006c6:	d4eb      	bmi.n	80006a0 <restore_non_core_regs+0x24>
 80006c8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80006cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006d0:	f000 bc7e 	b.w	8000fd0 <__gnu_Unwind_Restore_WMMXC>

080006d4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006d4:	4603      	mov	r3, r0
 80006d6:	6800      	ldr	r0, [r0, #0]
 80006d8:	b100      	cbz	r0, 80006dc <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 80006da:	4418      	add	r0, r3
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop

080006e0 <__gnu_unwind_24bit.isra.0>:
 80006e0:	2009      	movs	r0, #9
 80006e2:	4770      	bx	lr

080006e4 <_Unwind_DebugHook>:
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <unwind_phase2>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4604      	mov	r4, r0
 80006ec:	460e      	mov	r6, r1
 80006ee:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80006f0:	4620      	mov	r0, r4
 80006f2:	f7ff ff75 	bl	80005e0 <get_eit_entry>
 80006f6:	4605      	mov	r5, r0
 80006f8:	b988      	cbnz	r0, 800071e <unwind_phase2+0x36>
 80006fa:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80006fc:	6163      	str	r3, [r4, #20]
 80006fe:	4632      	mov	r2, r6
 8000700:	6923      	ldr	r3, [r4, #16]
 8000702:	4621      	mov	r1, r4
 8000704:	2001      	movs	r0, #1
 8000706:	4798      	blx	r3
 8000708:	2808      	cmp	r0, #8
 800070a:	d0f0      	beq.n	80006ee <unwind_phase2+0x6>
 800070c:	2807      	cmp	r0, #7
 800070e:	d106      	bne.n	800071e <unwind_phase2+0x36>
 8000710:	4628      	mov	r0, r5
 8000712:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000714:	f7ff ffe6 	bl	80006e4 <_Unwind_DebugHook>
 8000718:	1d30      	adds	r0, r6, #4
 800071a:	f000 fbf1 	bl	8000f00 <__restore_core_regs>
 800071e:	f00a fafe 	bl	800ad1e <abort>
 8000722:	bf00      	nop

08000724 <unwind_phase2_forced>:
 8000724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000728:	1d0d      	adds	r5, r1, #4
 800072a:	4606      	mov	r6, r0
 800072c:	4614      	mov	r4, r2
 800072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000730:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000734:	f10d 0c0c 	add.w	ip, sp, #12
 8000738:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800073c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000748:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800074c:	ad02      	add	r5, sp, #8
 800074e:	68f7      	ldr	r7, [r6, #12]
 8000750:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8000754:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000758:	2300      	movs	r3, #0
 800075a:	602b      	str	r3, [r5, #0]
 800075c:	e021      	b.n	80007a2 <unwind_phase2_forced+0x7e>
 800075e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000760:	6173      	str	r3, [r6, #20]
 8000762:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000766:	4629      	mov	r1, r5
 8000768:	a87a      	add	r0, sp, #488	; 0x1e8
 800076a:	f00a fc13 	bl	800af94 <memcpy>
 800076e:	6933      	ldr	r3, [r6, #16]
 8000770:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000772:	4631      	mov	r1, r6
 8000774:	4650      	mov	r0, sl
 8000776:	4798      	blx	r3
 8000778:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800077a:	e9cd 5800 	strd	r5, r8, [sp]
 800077e:	4621      	mov	r1, r4
 8000780:	646b      	str	r3, [r5, #68]	; 0x44
 8000782:	4681      	mov	r9, r0
 8000784:	4633      	mov	r3, r6
 8000786:	4632      	mov	r2, r6
 8000788:	2001      	movs	r0, #1
 800078a:	47b8      	blx	r7
 800078c:	4604      	mov	r4, r0
 800078e:	b9e8      	cbnz	r0, 80007cc <unwind_phase2_forced+0xa8>
 8000790:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000794:	a97a      	add	r1, sp, #488	; 0x1e8
 8000796:	4628      	mov	r0, r5
 8000798:	f00a fbfc 	bl	800af94 <memcpy>
 800079c:	f1b9 0f08 	cmp.w	r9, #8
 80007a0:	d11b      	bne.n	80007da <unwind_phase2_forced+0xb6>
 80007a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007a4:	4630      	mov	r0, r6
 80007a6:	f7ff ff1b 	bl	80005e0 <get_eit_entry>
 80007aa:	3409      	adds	r4, #9
 80007ac:	fa5f fa84 	uxtb.w	sl, r4
 80007b0:	4681      	mov	r9, r0
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d0d3      	beq.n	800075e <unwind_phase2_forced+0x3a>
 80007b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80007b8:	f04a 0110 	orr.w	r1, sl, #16
 80007bc:	e9cd 5800 	strd	r5, r8, [sp]
 80007c0:	4632      	mov	r2, r6
 80007c2:	646b      	str	r3, [r5, #68]	; 0x44
 80007c4:	2001      	movs	r0, #1
 80007c6:	4633      	mov	r3, r6
 80007c8:	47b8      	blx	r7
 80007ca:	b108      	cbz	r0, 80007d0 <unwind_phase2_forced+0xac>
 80007cc:	f04f 0909 	mov.w	r9, #9
 80007d0:	4648      	mov	r0, r9
 80007d2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007da:	f1b9 0f07 	cmp.w	r9, #7
 80007de:	d1f5      	bne.n	80007cc <unwind_phase2_forced+0xa8>
 80007e0:	4620      	mov	r0, r4
 80007e2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80007e4:	f7ff ff7e 	bl	80006e4 <_Unwind_DebugHook>
 80007e8:	a803      	add	r0, sp, #12
 80007ea:	f000 fb89 	bl	8000f00 <__restore_core_regs>
 80007ee:	bf00      	nop

080007f0 <_Unwind_GetCFA>:
 80007f0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007f2:	4770      	bx	lr

080007f4 <__gnu_Unwind_RaiseException>:
 80007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007f8:	640b      	str	r3, [r1, #64]	; 0x40
 80007fa:	1d0e      	adds	r6, r1, #4
 80007fc:	460f      	mov	r7, r1
 80007fe:	4605      	mov	r5, r0
 8000800:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000802:	b0f9      	sub	sp, #484	; 0x1e4
 8000804:	ac01      	add	r4, sp, #4
 8000806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000808:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800080e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000810:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000814:	f04f 36ff 	mov.w	r6, #4294967295
 8000818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800081c:	9600      	str	r6, [sp, #0]
 800081e:	e006      	b.n	800082e <__gnu_Unwind_RaiseException+0x3a>
 8000820:	692b      	ldr	r3, [r5, #16]
 8000822:	466a      	mov	r2, sp
 8000824:	4629      	mov	r1, r5
 8000826:	4798      	blx	r3
 8000828:	2808      	cmp	r0, #8
 800082a:	4604      	mov	r4, r0
 800082c:	d108      	bne.n	8000840 <__gnu_Unwind_RaiseException+0x4c>
 800082e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000830:	4628      	mov	r0, r5
 8000832:	f7ff fed5 	bl	80005e0 <get_eit_entry>
 8000836:	2800      	cmp	r0, #0
 8000838:	d0f2      	beq.n	8000820 <__gnu_Unwind_RaiseException+0x2c>
 800083a:	2009      	movs	r0, #9
 800083c:	b079      	add	sp, #484	; 0x1e4
 800083e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000840:	4668      	mov	r0, sp
 8000842:	f7ff ff1b 	bl	800067c <restore_non_core_regs>
 8000846:	2c06      	cmp	r4, #6
 8000848:	d1f7      	bne.n	800083a <__gnu_Unwind_RaiseException+0x46>
 800084a:	4639      	mov	r1, r7
 800084c:	4628      	mov	r0, r5
 800084e:	f7ff ff4b 	bl	80006e8 <unwind_phase2>
 8000852:	bf00      	nop

08000854 <__gnu_Unwind_ForcedUnwind>:
 8000854:	b430      	push	{r4, r5}
 8000856:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000858:	60c1      	str	r1, [r0, #12]
 800085a:	6182      	str	r2, [r0, #24]
 800085c:	4619      	mov	r1, r3
 800085e:	641d      	str	r5, [r3, #64]	; 0x40
 8000860:	2200      	movs	r2, #0
 8000862:	bc30      	pop	{r4, r5}
 8000864:	e75e      	b.n	8000724 <unwind_phase2_forced>
 8000866:	bf00      	nop

08000868 <__gnu_Unwind_Resume>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	68c6      	ldr	r6, [r0, #12]
 800086c:	6943      	ldr	r3, [r0, #20]
 800086e:	640b      	str	r3, [r1, #64]	; 0x40
 8000870:	b9ae      	cbnz	r6, 800089e <__gnu_Unwind_Resume+0x36>
 8000872:	6903      	ldr	r3, [r0, #16]
 8000874:	460a      	mov	r2, r1
 8000876:	4604      	mov	r4, r0
 8000878:	460d      	mov	r5, r1
 800087a:	4601      	mov	r1, r0
 800087c:	2002      	movs	r0, #2
 800087e:	4798      	blx	r3
 8000880:	2807      	cmp	r0, #7
 8000882:	d005      	beq.n	8000890 <__gnu_Unwind_Resume+0x28>
 8000884:	2808      	cmp	r0, #8
 8000886:	d10f      	bne.n	80008a8 <__gnu_Unwind_Resume+0x40>
 8000888:	4629      	mov	r1, r5
 800088a:	4620      	mov	r0, r4
 800088c:	f7ff ff2c 	bl	80006e8 <unwind_phase2>
 8000890:	4630      	mov	r0, r6
 8000892:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000894:	f7ff ff26 	bl	80006e4 <_Unwind_DebugHook>
 8000898:	1d28      	adds	r0, r5, #4
 800089a:	f000 fb31 	bl	8000f00 <__restore_core_regs>
 800089e:	2201      	movs	r2, #1
 80008a0:	f7ff ff40 	bl	8000724 <unwind_phase2_forced>
 80008a4:	f00a fa3b 	bl	800ad1e <abort>
 80008a8:	f00a fa39 	bl	800ad1e <abort>

080008ac <__gnu_Unwind_Resume_or_Rethrow>:
 80008ac:	68c2      	ldr	r2, [r0, #12]
 80008ae:	b11a      	cbz	r2, 80008b8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008b0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008b2:	640a      	str	r2, [r1, #64]	; 0x40
 80008b4:	2200      	movs	r2, #0
 80008b6:	e735      	b.n	8000724 <unwind_phase2_forced>
 80008b8:	e79c      	b.n	80007f4 <__gnu_Unwind_RaiseException>
 80008ba:	bf00      	nop

080008bc <_Unwind_Complete>:
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop

080008c0 <_Unwind_DeleteException>:
 80008c0:	6883      	ldr	r3, [r0, #8]
 80008c2:	4601      	mov	r1, r0
 80008c4:	b10b      	cbz	r3, 80008ca <_Unwind_DeleteException+0xa>
 80008c6:	2001      	movs	r0, #1
 80008c8:	4718      	bx	r3
 80008ca:	4770      	bx	lr

080008cc <_Unwind_VRS_Get>:
 80008cc:	2901      	cmp	r1, #1
 80008ce:	d012      	beq.n	80008f6 <_Unwind_VRS_Get+0x2a>
 80008d0:	d809      	bhi.n	80008e6 <_Unwind_VRS_Get+0x1a>
 80008d2:	b973      	cbnz	r3, 80008f2 <_Unwind_VRS_Get+0x26>
 80008d4:	2a0f      	cmp	r2, #15
 80008d6:	d80c      	bhi.n	80008f2 <_Unwind_VRS_Get+0x26>
 80008d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008dc:	4618      	mov	r0, r3
 80008de:	6853      	ldr	r3, [r2, #4]
 80008e0:	9a00      	ldr	r2, [sp, #0]
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4770      	bx	lr
 80008e6:	3903      	subs	r1, #3
 80008e8:	2901      	cmp	r1, #1
 80008ea:	bf94      	ite	ls
 80008ec:	2001      	movls	r0, #1
 80008ee:	2002      	movhi	r0, #2
 80008f0:	4770      	bx	lr
 80008f2:	2002      	movs	r0, #2
 80008f4:	4770      	bx	lr
 80008f6:	4608      	mov	r0, r1
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <_Unwind_GetGR>:
 80008fc:	b510      	push	{r4, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	2300      	movs	r3, #0
 8000902:	ac03      	add	r4, sp, #12
 8000904:	460a      	mov	r2, r1
 8000906:	9400      	str	r4, [sp, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f7ff ffdf 	bl	80008cc <_Unwind_VRS_Get>
 800090e:	9803      	ldr	r0, [sp, #12]
 8000910:	b004      	add	sp, #16
 8000912:	bd10      	pop	{r4, pc}

08000914 <_Unwind_VRS_Set>:
 8000914:	2901      	cmp	r1, #1
 8000916:	d012      	beq.n	800093e <_Unwind_VRS_Set+0x2a>
 8000918:	d809      	bhi.n	800092e <_Unwind_VRS_Set+0x1a>
 800091a:	b973      	cbnz	r3, 800093a <_Unwind_VRS_Set+0x26>
 800091c:	2a0f      	cmp	r2, #15
 800091e:	d80c      	bhi.n	800093a <_Unwind_VRS_Set+0x26>
 8000920:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000924:	9a00      	ldr	r2, [sp, #0]
 8000926:	6812      	ldr	r2, [r2, #0]
 8000928:	6042      	str	r2, [r0, #4]
 800092a:	4618      	mov	r0, r3
 800092c:	4770      	bx	lr
 800092e:	3903      	subs	r1, #3
 8000930:	2901      	cmp	r1, #1
 8000932:	bf94      	ite	ls
 8000934:	2001      	movls	r0, #1
 8000936:	2002      	movhi	r0, #2
 8000938:	4770      	bx	lr
 800093a:	2002      	movs	r0, #2
 800093c:	4770      	bx	lr
 800093e:	4608      	mov	r0, r1
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <_Unwind_SetGR>:
 8000944:	b510      	push	{r4, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	2300      	movs	r3, #0
 800094a:	ac03      	add	r4, sp, #12
 800094c:	9203      	str	r2, [sp, #12]
 800094e:	9400      	str	r4, [sp, #0]
 8000950:	460a      	mov	r2, r1
 8000952:	4619      	mov	r1, r3
 8000954:	f7ff ffde 	bl	8000914 <_Unwind_VRS_Set>
 8000958:	b004      	add	sp, #16
 800095a:	bd10      	pop	{r4, pc}

0800095c <__gnu_Unwind_Backtrace>:
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800095e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	1d15      	adds	r5, r2, #4
 8000964:	468c      	mov	ip, r1
 8000966:	4606      	mov	r6, r0
 8000968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800096e:	ac17      	add	r4, sp, #92	; 0x5c
 8000970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800097a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800097e:	f04f 37ff 	mov.w	r7, #4294967295
 8000982:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000986:	4665      	mov	r5, ip
 8000988:	9716      	str	r7, [sp, #88]	; 0x58
 800098a:	e010      	b.n	80009ae <__gnu_Unwind_Backtrace+0x52>
 800098c:	f7ff ffda 	bl	8000944 <_Unwind_SetGR>
 8000990:	4629      	mov	r1, r5
 8000992:	a816      	add	r0, sp, #88	; 0x58
 8000994:	47b0      	blx	r6
 8000996:	4603      	mov	r3, r0
 8000998:	aa16      	add	r2, sp, #88	; 0x58
 800099a:	4669      	mov	r1, sp
 800099c:	2008      	movs	r0, #8
 800099e:	b983      	cbnz	r3, 80009c2 <__gnu_Unwind_Backtrace+0x66>
 80009a0:	9b04      	ldr	r3, [sp, #16]
 80009a2:	4798      	blx	r3
 80009a4:	2805      	cmp	r0, #5
 80009a6:	4604      	mov	r4, r0
 80009a8:	d00c      	beq.n	80009c4 <__gnu_Unwind_Backtrace+0x68>
 80009aa:	2809      	cmp	r0, #9
 80009ac:	d009      	beq.n	80009c2 <__gnu_Unwind_Backtrace+0x66>
 80009ae:	9926      	ldr	r1, [sp, #152]	; 0x98
 80009b0:	4668      	mov	r0, sp
 80009b2:	f7ff fe15 	bl	80005e0 <get_eit_entry>
 80009b6:	4603      	mov	r3, r0
 80009b8:	466a      	mov	r2, sp
 80009ba:	210c      	movs	r1, #12
 80009bc:	a816      	add	r0, sp, #88	; 0x58
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0e4      	beq.n	800098c <__gnu_Unwind_Backtrace+0x30>
 80009c2:	2409      	movs	r4, #9
 80009c4:	a816      	add	r0, sp, #88	; 0x58
 80009c6:	f7ff fe59 	bl	800067c <restore_non_core_regs>
 80009ca:	4620      	mov	r0, r4
 80009cc:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d2:	bf00      	nop

080009d4 <__gnu_unwind_pr_common>:
 80009d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009d8:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	460d      	mov	r5, r1
 80009de:	f854 1b04 	ldr.w	r1, [r4], #4
 80009e2:	9406      	str	r4, [sp, #24]
 80009e4:	4617      	mov	r7, r2
 80009e6:	f000 0803 	and.w	r8, r0, #3
 80009ea:	461e      	mov	r6, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d079      	beq.n	8000ae4 <__gnu_unwind_pr_common+0x110>
 80009f0:	0c0b      	lsrs	r3, r1, #16
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	0409      	lsls	r1, r1, #16
 80009f6:	f88d 301d 	strb.w	r3, [sp, #29]
 80009fa:	2302      	movs	r3, #2
 80009fc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000a00:	9105      	str	r1, [sp, #20]
 8000a02:	f88d 301c 	strb.w	r3, [sp, #28]
 8000a06:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a08:	f1b8 0f02 	cmp.w	r8, #2
 8000a0c:	bf08      	it	eq
 8000a0e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a10:	f013 0301 	ands.w	r3, r3, #1
 8000a14:	d00c      	beq.n	8000a30 <__gnu_unwind_pr_common+0x5c>
 8000a16:	4638      	mov	r0, r7
 8000a18:	a905      	add	r1, sp, #20
 8000a1a:	f000 fb73 	bl	8001104 <__gnu_unwind_execute>
 8000a1e:	b918      	cbnz	r0, 8000a28 <__gnu_unwind_pr_common+0x54>
 8000a20:	2008      	movs	r0, #8
 8000a22:	b009      	add	sp, #36	; 0x24
 8000a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a28:	2009      	movs	r0, #9
 8000a2a:	b009      	add	sp, #36	; 0x24
 8000a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a30:	f8d4 a000 	ldr.w	sl, [r4]
 8000a34:	f1ba 0f00 	cmp.w	sl, #0
 8000a38:	d0ed      	beq.n	8000a16 <__gnu_unwind_pr_common+0x42>
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	f000 0308 	and.w	r3, r0, #8
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	2e02      	cmp	r6, #2
 8000a44:	d04a      	beq.n	8000adc <__gnu_unwind_pr_common+0x108>
 8000a46:	f8b4 a000 	ldrh.w	sl, [r4]
 8000a4a:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000a4e:	3404      	adds	r4, #4
 8000a50:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000a52:	f029 0b01 	bic.w	fp, r9, #1
 8000a56:	210f      	movs	r1, #15
 8000a58:	4638      	mov	r0, r7
 8000a5a:	4493      	add	fp, r2
 8000a5c:	f7ff ff4e 	bl	80008fc <_Unwind_GetGR>
 8000a60:	4583      	cmp	fp, r0
 8000a62:	d839      	bhi.n	8000ad8 <__gnu_unwind_pr_common+0x104>
 8000a64:	f02a 0201 	bic.w	r2, sl, #1
 8000a68:	445a      	add	r2, fp
 8000a6a:	4282      	cmp	r2, r0
 8000a6c:	bf94      	ite	ls
 8000a6e:	2000      	movls	r0, #0
 8000a70:	2001      	movhi	r0, #1
 8000a72:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	f00a 0a01 	and.w	sl, sl, #1
 8000a7e:	ea43 030a 	orr.w	r3, r3, sl
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d049      	beq.n	8000b1a <__gnu_unwind_pr_common+0x146>
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d032      	beq.n	8000af0 <__gnu_unwind_pr_common+0x11c>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1cc      	bne.n	8000a28 <__gnu_unwind_pr_common+0x54>
 8000a8e:	f1b8 0f00 	cmp.w	r8, #0
 8000a92:	d002      	beq.n	8000a9a <__gnu_unwind_pr_common+0xc6>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	f040 80cd 	bne.w	8000c34 <__gnu_unwind_pr_common+0x260>
 8000a9a:	3404      	adds	r4, #4
 8000a9c:	f8d4 a000 	ldr.w	sl, [r4]
 8000aa0:	f1ba 0f00 	cmp.w	sl, #0
 8000aa4:	d1cd      	bne.n	8000a42 <__gnu_unwind_pr_common+0x6e>
 8000aa6:	a905      	add	r1, sp, #20
 8000aa8:	4638      	mov	r0, r7
 8000aaa:	f000 fb2b 	bl	8001104 <__gnu_unwind_execute>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d1ba      	bne.n	8000a28 <__gnu_unwind_pr_common+0x54>
 8000ab2:	9b01      	ldr	r3, [sp, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0b3      	beq.n	8000a20 <__gnu_unwind_pr_common+0x4c>
 8000ab8:	210f      	movs	r1, #15
 8000aba:	4638      	mov	r0, r7
 8000abc:	f7ff ff1e 	bl	80008fc <_Unwind_GetGR>
 8000ac0:	210e      	movs	r1, #14
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	4638      	mov	r0, r7
 8000ac6:	f7ff ff3d 	bl	8000944 <_Unwind_SetGR>
 8000aca:	4638      	mov	r0, r7
 8000acc:	4a6a      	ldr	r2, [pc, #424]	; (8000c78 <__gnu_unwind_pr_common+0x2a4>)
 8000ace:	210f      	movs	r1, #15
 8000ad0:	f7ff ff38 	bl	8000944 <_Unwind_SetGR>
 8000ad4:	2007      	movs	r0, #7
 8000ad6:	e7a8      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000ad8:	2000      	movs	r0, #0
 8000ada:	e7ca      	b.n	8000a72 <__gnu_unwind_pr_common+0x9e>
 8000adc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000ae0:	3408      	adds	r4, #8
 8000ae2:	e7b5      	b.n	8000a50 <__gnu_unwind_pr_common+0x7c>
 8000ae4:	0209      	lsls	r1, r1, #8
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	9105      	str	r1, [sp, #20]
 8000aea:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000aee:	e78a      	b.n	8000a06 <__gnu_unwind_pr_common+0x32>
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000af6:	f1b8 0f00 	cmp.w	r8, #0
 8000afa:	d145      	bne.n	8000b88 <__gnu_unwind_pr_common+0x1b4>
 8000afc:	b128      	cbz	r0, 8000b0a <__gnu_unwind_pr_common+0x136>
 8000afe:	9a02      	ldr	r2, [sp, #8]
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	d05c      	beq.n	8000bbe <__gnu_unwind_pr_common+0x1ea>
 8000b04:	f1bb 0f00 	cmp.w	fp, #0
 8000b08:	d074      	beq.n	8000bf4 <__gnu_unwind_pr_common+0x220>
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da00      	bge.n	8000b10 <__gnu_unwind_pr_common+0x13c>
 8000b0e:	3404      	adds	r4, #4
 8000b10:	f10b 0b01 	add.w	fp, fp, #1
 8000b14:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000b18:	e7c0      	b.n	8000a9c <__gnu_unwind_pr_common+0xc8>
 8000b1a:	f1b8 0f00 	cmp.w	r8, #0
 8000b1e:	d119      	bne.n	8000b54 <__gnu_unwind_pr_common+0x180>
 8000b20:	b1b0      	cbz	r0, 8000b50 <__gnu_unwind_pr_common+0x17c>
 8000b22:	e9d4 2300 	ldrd	r2, r3, [r4]
 8000b26:	1c99      	adds	r1, r3, #2
 8000b28:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b2c:	f43f af7c 	beq.w	8000a28 <__gnu_unwind_pr_common+0x54>
 8000b30:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b34:	3301      	adds	r3, #1
 8000b36:	9104      	str	r1, [sp, #16]
 8000b38:	f000 8090 	beq.w	8000c5c <__gnu_unwind_pr_common+0x288>
 8000b3c:	1d20      	adds	r0, r4, #4
 8000b3e:	f7ff fdc9 	bl	80006d4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b42:	ab04      	add	r3, sp, #16
 8000b44:	4601      	mov	r1, r0
 8000b46:	4628      	mov	r0, r5
 8000b48:	f009 fa52 	bl	8009ff0 <__cxa_type_match>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d15b      	bne.n	8000c08 <__gnu_unwind_pr_common+0x234>
 8000b50:	3408      	adds	r4, #8
 8000b52:	e7a3      	b.n	8000a9c <__gnu_unwind_pr_common+0xc8>
 8000b54:	210d      	movs	r1, #13
 8000b56:	4638      	mov	r0, r7
 8000b58:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000b5c:	f7ff fece 	bl	80008fc <_Unwind_GetGR>
 8000b60:	4581      	cmp	r9, r0
 8000b62:	d1f5      	bne.n	8000b50 <__gnu_unwind_pr_common+0x17c>
 8000b64:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b66:	429c      	cmp	r4, r3
 8000b68:	d1f2      	bne.n	8000b50 <__gnu_unwind_pr_common+0x17c>
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f7ff fcec 	bl	8000548 <selfrel_offset31>
 8000b70:	210f      	movs	r1, #15
 8000b72:	4602      	mov	r2, r0
 8000b74:	4638      	mov	r0, r7
 8000b76:	f7ff fee5 	bl	8000944 <_Unwind_SetGR>
 8000b7a:	4638      	mov	r0, r7
 8000b7c:	462a      	mov	r2, r5
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f7ff fee0 	bl	8000944 <_Unwind_SetGR>
 8000b84:	2007      	movs	r0, #7
 8000b86:	e750      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000b88:	210d      	movs	r1, #13
 8000b8a:	4638      	mov	r0, r7
 8000b8c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000b90:	f7ff feb4 	bl	80008fc <_Unwind_GetGR>
 8000b94:	4581      	cmp	r9, r0
 8000b96:	d001      	beq.n	8000b9c <__gnu_unwind_pr_common+0x1c8>
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	e7b6      	b.n	8000b0a <__gnu_unwind_pr_common+0x136>
 8000b9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b9e:	429c      	cmp	r4, r3
 8000ba0:	d1fa      	bne.n	8000b98 <__gnu_unwind_pr_common+0x1c4>
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 8000baa:	18a3      	adds	r3, r4, r2
 8000bac:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000bb0:	636b      	str	r3, [r5, #52]	; 0x34
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	db59      	blt.n	8000c6c <__gnu_unwind_pr_common+0x298>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9301      	str	r3, [sp, #4]
 8000bbc:	e7a8      	b.n	8000b10 <__gnu_unwind_pr_common+0x13c>
 8000bbe:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bc6:	f104 0a04 	add.w	sl, r4, #4
 8000bca:	46b0      	mov	r8, r6
 8000bcc:	4691      	mov	r9, r2
 8000bce:	461e      	mov	r6, r3
 8000bd0:	e00d      	b.n	8000bee <__gnu_unwind_pr_common+0x21a>
 8000bd2:	9604      	str	r6, [sp, #16]
 8000bd4:	f7ff fd7e 	bl	80006d4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bd8:	ab04      	add	r3, sp, #16
 8000bda:	4601      	mov	r1, r0
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4628      	mov	r0, r5
 8000be0:	f009 fa06 	bl	8009ff0 <__cxa_type_match>
 8000be4:	f109 0901 	add.w	r9, r9, #1
 8000be8:	f10a 0a04 	add.w	sl, sl, #4
 8000bec:	b9e8      	cbnz	r0, 8000c2a <__gnu_unwind_pr_common+0x256>
 8000bee:	45d9      	cmp	r9, fp
 8000bf0:	4650      	mov	r0, sl
 8000bf2:	d1ee      	bne.n	8000bd2 <__gnu_unwind_pr_common+0x1fe>
 8000bf4:	4638      	mov	r0, r7
 8000bf6:	210d      	movs	r1, #13
 8000bf8:	f7ff fe80 	bl	80008fc <_Unwind_GetGR>
 8000bfc:	9b04      	ldr	r3, [sp, #16]
 8000bfe:	6228      	str	r0, [r5, #32]
 8000c00:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000c04:	2006      	movs	r0, #6
 8000c06:	e710      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000c08:	4681      	mov	r9, r0
 8000c0a:	210d      	movs	r1, #13
 8000c0c:	4638      	mov	r0, r7
 8000c0e:	f7ff fe75 	bl	80008fc <_Unwind_GetGR>
 8000c12:	f1b9 0f02 	cmp.w	r9, #2
 8000c16:	6228      	str	r0, [r5, #32]
 8000c18:	d125      	bne.n	8000c66 <__gnu_unwind_pr_common+0x292>
 8000c1a:	462b      	mov	r3, r5
 8000c1c:	9a04      	ldr	r2, [sp, #16]
 8000c1e:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c22:	626b      	str	r3, [r5, #36]	; 0x24
 8000c24:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c26:	2006      	movs	r0, #6
 8000c28:	e6ff      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000c2a:	4646      	mov	r6, r8
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000c32:	e76a      	b.n	8000b0a <__gnu_unwind_pr_common+0x136>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f7ff fc87 	bl	8000548 <selfrel_offset31>
 8000c3a:	3404      	adds	r4, #4
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c40:	4628      	mov	r0, r5
 8000c42:	4614      	mov	r4, r2
 8000c44:	f009 fa32 	bl	800a0ac <__cxa_begin_cleanup>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	f43f aeed 	beq.w	8000a28 <__gnu_unwind_pr_common+0x54>
 8000c4e:	4638      	mov	r0, r7
 8000c50:	4622      	mov	r2, r4
 8000c52:	210f      	movs	r1, #15
 8000c54:	f7ff fe76 	bl	8000944 <_Unwind_SetGR>
 8000c58:	2007      	movs	r0, #7
 8000c5a:	e6e6      	b.n	8000a2a <__gnu_unwind_pr_common+0x56>
 8000c5c:	4638      	mov	r0, r7
 8000c5e:	210d      	movs	r1, #13
 8000c60:	f7ff fe4c 	bl	80008fc <_Unwind_GetGR>
 8000c64:	6228      	str	r0, [r5, #32]
 8000c66:	9b04      	ldr	r3, [sp, #16]
 8000c68:	626b      	str	r3, [r5, #36]	; 0x24
 8000c6a:	e7db      	b.n	8000c24 <__gnu_unwind_pr_common+0x250>
 8000c6c:	f10b 0001 	add.w	r0, fp, #1
 8000c70:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c74:	e77a      	b.n	8000b6c <__gnu_unwind_pr_common+0x198>
 8000c76:	bf00      	nop
 8000c78:	0800abd5 	.word	0x0800abd5

08000c7c <__aeabi_unwind_cpp_pr0>:
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e6a9      	b.n	80009d4 <__gnu_unwind_pr_common>

08000c80 <__aeabi_unwind_cpp_pr1>:
 8000c80:	2301      	movs	r3, #1
 8000c82:	e6a7      	b.n	80009d4 <__gnu_unwind_pr_common>

08000c84 <__aeabi_unwind_cpp_pr2>:
 8000c84:	2302      	movs	r3, #2
 8000c86:	e6a5      	b.n	80009d4 <__gnu_unwind_pr_common>

08000c88 <_Unwind_VRS_Pop>:
 8000c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	b0c3      	sub	sp, #268	; 0x10c
 8000c90:	4615      	mov	r5, r2
 8000c92:	461c      	mov	r4, r3
 8000c94:	2904      	cmp	r1, #4
 8000c96:	f200 80b9 	bhi.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000c9a:	e8df f001 	tbb	[pc, r1]
 8000c9e:	539a      	.short	0x539a
 8000ca0:	29b7      	.short	0x29b7
 8000ca2:	03          	.byte	0x03
 8000ca3:	00          	.byte	0x00
 8000ca4:	2c00      	cmp	r4, #0
 8000ca6:	f040 80b1 	bne.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000caa:	2a10      	cmp	r2, #16
 8000cac:	f200 80ae 	bhi.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000cb0:	6803      	ldr	r3, [r0, #0]
 8000cb2:	06d8      	lsls	r0, r3, #27
 8000cb4:	f100 80f3 	bmi.w	8000e9e <_Unwind_VRS_Pop+0x216>
 8000cb8:	af20      	add	r7, sp, #128	; 0x80
 8000cba:	4638      	mov	r0, r7
 8000cbc:	f000 f992 	bl	8000fe4 <__gnu_Unwind_Save_WMMXC>
 8000cc0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2401      	movs	r4, #1
 8000cc6:	fa04 f203 	lsl.w	r2, r4, r3
 8000cca:	422a      	tst	r2, r5
 8000ccc:	4601      	mov	r1, r0
 8000cce:	d004      	beq.n	8000cda <_Unwind_VRS_Pop+0x52>
 8000cd0:	f851 2b04 	ldr.w	r2, [r1], #4
 8000cd4:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8000cd8:	4608      	mov	r0, r1
 8000cda:	3301      	adds	r3, #1
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d1f2      	bne.n	8000cc6 <_Unwind_VRS_Pop+0x3e>
 8000ce0:	63b0      	str	r0, [r6, #56]	; 0x38
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	f000 f974 	bl	8000fd0 <__gnu_Unwind_Restore_WMMXC>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	b043      	add	sp, #268	; 0x10c
 8000cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cf0:	2c03      	cmp	r4, #3
 8000cf2:	f040 808b 	bne.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000cf6:	b294      	uxth	r4, r2
 8000cf8:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000cfc:	2b10      	cmp	r3, #16
 8000cfe:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000d02:	f200 8083 	bhi.w	8000e0c <_Unwind_VRS_Pop+0x184>
 8000d06:	6803      	ldr	r3, [r0, #0]
 8000d08:	071f      	lsls	r7, r3, #28
 8000d0a:	f100 80d0 	bmi.w	8000eae <_Unwind_VRS_Pop+0x226>
 8000d0e:	af20      	add	r7, sp, #128	; 0x80
 8000d10:	4638      	mov	r0, r7
 8000d12:	f000 f93b 	bl	8000f8c <__gnu_Unwind_Save_WMMXD>
 8000d16:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000d1a:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8000d1c:	b154      	cbz	r4, 8000d34 <_Unwind_VRS_Pop+0xac>
 8000d1e:	460b      	mov	r3, r1
 8000d20:	1ae8      	subs	r0, r5, r3
 8000d22:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000d26:	00e4      	lsls	r4, r4, #3
 8000d28:	581a      	ldr	r2, [r3, r0]
 8000d2a:	f843 2b04 	str.w	r2, [r3], #4
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d1fa      	bne.n	8000d28 <_Unwind_VRS_Pop+0xa0>
 8000d32:	4425      	add	r5, r4
 8000d34:	4638      	mov	r0, r7
 8000d36:	63b5      	str	r5, [r6, #56]	; 0x38
 8000d38:	f000 f906 	bl	8000f48 <__gnu_Unwind_Restore_WMMXD>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	b043      	add	sp, #268	; 0x10c
 8000d40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d44:	2c01      	cmp	r4, #1
 8000d46:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000d4a:	b295      	uxth	r5, r2
 8000d4c:	d05a      	beq.n	8000e04 <_Unwind_VRS_Pop+0x17c>
 8000d4e:	2c05      	cmp	r4, #5
 8000d50:	d15c      	bne.n	8000e0c <_Unwind_VRS_Pop+0x184>
 8000d52:	eb08 0905 	add.w	r9, r8, r5
 8000d56:	f1b9 0f20 	cmp.w	r9, #32
 8000d5a:	d857      	bhi.n	8000e0c <_Unwind_VRS_Pop+0x184>
 8000d5c:	f1b8 0f0f 	cmp.w	r8, #15
 8000d60:	d977      	bls.n	8000e52 <_Unwind_VRS_Pop+0x1ca>
 8000d62:	46a9      	mov	r9, r5
 8000d64:	2d00      	cmp	r5, #0
 8000d66:	f040 8088 	bne.w	8000e7a <_Unwind_VRS_Pop+0x1f2>
 8000d6a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000d6c:	b36d      	cbz	r5, 8000dca <_Unwind_VRS_Pop+0x142>
 8000d6e:	af20      	add	r7, sp, #128	; 0x80
 8000d70:	f04f 0900 	mov.w	r9, #0
 8000d74:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000d78:	3f04      	subs	r7, #4
 8000d7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8000d7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8000d82:	f847 1f04 	str.w	r1, [r7, #4]!
 8000d86:	42ab      	cmp	r3, r5
 8000d88:	d1f9      	bne.n	8000d7e <_Unwind_VRS_Pop+0xf6>
 8000d8a:	f1b9 0f00 	cmp.w	r9, #0
 8000d8e:	d00f      	beq.n	8000db0 <_Unwind_VRS_Pop+0x128>
 8000d90:	466f      	mov	r7, sp
 8000d92:	4641      	mov	r1, r8
 8000d94:	2910      	cmp	r1, #16
 8000d96:	bf38      	it	cc
 8000d98:	2110      	movcc	r1, #16
 8000d9a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000d9e:	3984      	subs	r1, #132	; 0x84
 8000da0:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8000da4:	f853 0b04 	ldr.w	r0, [r3], #4
 8000da8:	f841 0f04 	str.w	r0, [r1, #4]!
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d1f9      	bne.n	8000da4 <_Unwind_VRS_Pop+0x11c>
 8000db0:	2c01      	cmp	r4, #1
 8000db2:	f000 8084 	beq.w	8000ebe <_Unwind_VRS_Pop+0x236>
 8000db6:	f1b8 0f0f 	cmp.w	r8, #15
 8000dba:	63b5      	str	r5, [r6, #56]	; 0x38
 8000dbc:	d945      	bls.n	8000e4a <_Unwind_VRS_Pop+0x1c2>
 8000dbe:	f1b9 0f00 	cmp.w	r9, #0
 8000dc2:	d002      	beq.n	8000dca <_Unwind_VRS_Pop+0x142>
 8000dc4:	4668      	mov	r0, sp
 8000dc6:	f000 f8b7 	bl	8000f38 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000dca:	2000      	movs	r0, #0
 8000dcc:	b043      	add	sp, #268	; 0x10c
 8000dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dd2:	b9dc      	cbnz	r4, 8000e0c <_Unwind_VRS_Pop+0x184>
 8000dd4:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8000dd6:	4623      	mov	r3, r4
 8000dd8:	2001      	movs	r0, #1
 8000dda:	b294      	uxth	r4, r2
 8000ddc:	f106 0c04 	add.w	ip, r6, #4
 8000de0:	fa00 f203 	lsl.w	r2, r0, r3
 8000de4:	4222      	tst	r2, r4
 8000de6:	4639      	mov	r1, r7
 8000de8:	d004      	beq.n	8000df4 <_Unwind_VRS_Pop+0x16c>
 8000dea:	f851 2b04 	ldr.w	r2, [r1], #4
 8000dee:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 8000df2:	460f      	mov	r7, r1
 8000df4:	3301      	adds	r3, #1
 8000df6:	2b10      	cmp	r3, #16
 8000df8:	d1f2      	bne.n	8000de0 <_Unwind_VRS_Pop+0x158>
 8000dfa:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000dfe:	d1e4      	bne.n	8000dca <_Unwind_VRS_Pop+0x142>
 8000e00:	63b7      	str	r7, [r6, #56]	; 0x38
 8000e02:	e004      	b.n	8000e0e <_Unwind_VRS_Pop+0x186>
 8000e04:	eb08 0305 	add.w	r3, r8, r5
 8000e08:	2b10      	cmp	r3, #16
 8000e0a:	d903      	bls.n	8000e14 <_Unwind_VRS_Pop+0x18c>
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	b043      	add	sp, #268	; 0x10c
 8000e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e14:	f1b8 0f0f 	cmp.w	r8, #15
 8000e18:	d8f8      	bhi.n	8000e0c <_Unwind_VRS_Pop+0x184>
 8000e1a:	6833      	ldr	r3, [r6, #0]
 8000e1c:	07da      	lsls	r2, r3, #31
 8000e1e:	d506      	bpl.n	8000e2e <_Unwind_VRS_Pop+0x1a6>
 8000e20:	4630      	mov	r0, r6
 8000e22:	f023 0303 	bic.w	r3, r3, #3
 8000e26:	f840 3b48 	str.w	r3, [r0], #72
 8000e2a:	f000 f879 	bl	8000f20 <__gnu_Unwind_Save_VFP>
 8000e2e:	af20      	add	r7, sp, #128	; 0x80
 8000e30:	4638      	mov	r0, r7
 8000e32:	f000 f875 	bl	8000f20 <__gnu_Unwind_Save_VFP>
 8000e36:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d199      	bne.n	8000d70 <_Unwind_VRS_Pop+0xe8>
 8000e3c:	461d      	mov	r5, r3
 8000e3e:	3504      	adds	r5, #4
 8000e40:	63b5      	str	r5, [r6, #56]	; 0x38
 8000e42:	4638      	mov	r0, r7
 8000e44:	f000 f868 	bl	8000f18 <__gnu_Unwind_Restore_VFP>
 8000e48:	e7bf      	b.n	8000dca <_Unwind_VRS_Pop+0x142>
 8000e4a:	a820      	add	r0, sp, #128	; 0x80
 8000e4c:	f000 f86c 	bl	8000f28 <__gnu_Unwind_Restore_VFP_D>
 8000e50:	e7b5      	b.n	8000dbe <_Unwind_VRS_Pop+0x136>
 8000e52:	f1b9 0f10 	cmp.w	r9, #16
 8000e56:	d940      	bls.n	8000eda <_Unwind_VRS_Pop+0x252>
 8000e58:	f1a9 0910 	sub.w	r9, r9, #16
 8000e5c:	6833      	ldr	r3, [r6, #0]
 8000e5e:	07d9      	lsls	r1, r3, #31
 8000e60:	d508      	bpl.n	8000e74 <_Unwind_VRS_Pop+0x1ec>
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	4630      	mov	r0, r6
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	f840 3b48 	str.w	r3, [r0], #72
 8000e70:	f000 f85e 	bl	8000f30 <__gnu_Unwind_Save_VFP_D>
 8000e74:	f1b9 0f00 	cmp.w	r9, #0
 8000e78:	d032      	beq.n	8000ee0 <_Unwind_VRS_Pop+0x258>
 8000e7a:	6833      	ldr	r3, [r6, #0]
 8000e7c:	075a      	lsls	r2, r3, #29
 8000e7e:	d420      	bmi.n	8000ec2 <_Unwind_VRS_Pop+0x23a>
 8000e80:	f1b8 0f0f 	cmp.w	r8, #15
 8000e84:	d925      	bls.n	8000ed2 <_Unwind_VRS_Pop+0x24a>
 8000e86:	466f      	mov	r7, sp
 8000e88:	4638      	mov	r0, r7
 8000e8a:	f1c8 0510 	rsb	r5, r8, #16
 8000e8e:	f000 f857 	bl	8000f40 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e96:	f77f af7c 	ble.w	8000d92 <_Unwind_VRS_Pop+0x10a>
 8000e9a:	af20      	add	r7, sp, #128	; 0x80
 8000e9c:	e76a      	b.n	8000d74 <_Unwind_VRS_Pop+0xec>
 8000e9e:	f023 0310 	bic.w	r3, r3, #16
 8000ea2:	6033      	str	r3, [r6, #0]
 8000ea4:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000ea8:	f000 f89c 	bl	8000fe4 <__gnu_Unwind_Save_WMMXC>
 8000eac:	e704      	b.n	8000cb8 <_Unwind_VRS_Pop+0x30>
 8000eae:	f023 0308 	bic.w	r3, r3, #8
 8000eb2:	6003      	str	r3, [r0, #0]
 8000eb4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000eb8:	f000 f868 	bl	8000f8c <__gnu_Unwind_Save_WMMXD>
 8000ebc:	e727      	b.n	8000d0e <_Unwind_VRS_Pop+0x86>
 8000ebe:	af20      	add	r7, sp, #128	; 0x80
 8000ec0:	e7bd      	b.n	8000e3e <_Unwind_VRS_Pop+0x1b6>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	f023 0304 	bic.w	r3, r3, #4
 8000ec8:	f840 3bd0 	str.w	r3, [r0], #208
 8000ecc:	f000 f838 	bl	8000f40 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ed0:	e7d6      	b.n	8000e80 <_Unwind_VRS_Pop+0x1f8>
 8000ed2:	a820      	add	r0, sp, #128	; 0x80
 8000ed4:	f000 f82c 	bl	8000f30 <__gnu_Unwind_Save_VFP_D>
 8000ed8:	e7d5      	b.n	8000e86 <_Unwind_VRS_Pop+0x1fe>
 8000eda:	f04f 0900 	mov.w	r9, #0
 8000ede:	e7bd      	b.n	8000e5c <_Unwind_VRS_Pop+0x1d4>
 8000ee0:	f1b8 0f0f 	cmp.w	r8, #15
 8000ee4:	f63f af41 	bhi.w	8000d6a <_Unwind_VRS_Pop+0xe2>
 8000ee8:	af20      	add	r7, sp, #128	; 0x80
 8000eea:	4638      	mov	r0, r7
 8000eec:	f000 f820 	bl	8000f30 <__gnu_Unwind_Save_VFP_D>
 8000ef0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	f47f af3c 	bne.w	8000d70 <_Unwind_VRS_Pop+0xe8>
 8000ef8:	4638      	mov	r0, r7
 8000efa:	f000 f815 	bl	8000f28 <__gnu_Unwind_Restore_VFP_D>
 8000efe:	e764      	b.n	8000dca <_Unwind_VRS_Pop+0x142>

08000f00 <__restore_core_regs>:
 8000f00:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f04:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f08:	469c      	mov	ip, r3
 8000f0a:	46a6      	mov	lr, r4
 8000f0c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f10:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f14:	46e5      	mov	sp, ip
 8000f16:	bd00      	pop	{pc}

08000f18 <__gnu_Unwind_Restore_VFP>:
 8000f18:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__gnu_Unwind_Save_VFP>:
 8000f20:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__gnu_Unwind_Restore_VFP_D>:
 8000f28:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__gnu_Unwind_Save_VFP_D>:
 8000f30:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f38:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f40:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <__gnu_Unwind_Restore_WMMXD>:
 8000f48:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f4c:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f50:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f54:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f58:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f5c:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f60:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f64:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f68:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f6c:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f70:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f74:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f78:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f7c:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f80:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f84:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__gnu_Unwind_Save_WMMXD>:
 8000f8c:	ece0 0102 	stfe	f0, [r0], #8
 8000f90:	ece0 1102 	stfe	f1, [r0], #8
 8000f94:	ece0 2102 	stfe	f2, [r0], #8
 8000f98:	ece0 3102 	stfe	f3, [r0], #8
 8000f9c:	ece0 4102 	stfe	f4, [r0], #8
 8000fa0:	ece0 5102 	stfe	f5, [r0], #8
 8000fa4:	ece0 6102 	stfe	f6, [r0], #8
 8000fa8:	ece0 7102 	stfe	f7, [r0], #8
 8000fac:	ece0 8102 	stfp	f0, [r0], #8
 8000fb0:	ece0 9102 	stfp	f1, [r0], #8
 8000fb4:	ece0 a102 	stfp	f2, [r0], #8
 8000fb8:	ece0 b102 	stfp	f3, [r0], #8
 8000fbc:	ece0 c102 	stfp	f4, [r0], #8
 8000fc0:	ece0 d102 	stfp	f5, [r0], #8
 8000fc4:	ece0 e102 	stfp	f6, [r0], #8
 8000fc8:	ece0 f102 	stfp	f7, [r0], #8
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <__gnu_Unwind_Restore_WMMXC>:
 8000fd0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fd4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fd8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fdc:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__gnu_Unwind_Save_WMMXC>:
 8000fe4:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fe8:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fec:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000ff0:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_Unwind_RaiseException>:
 8000ff8:	46ec      	mov	ip, sp
 8000ffa:	b500      	push	{lr}
 8000ffc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001000:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e92d 000c 	stmdb	sp!, {r2, r3}
 800100c:	a901      	add	r1, sp, #4
 800100e:	f7ff fbf1 	bl	80007f4 <__gnu_Unwind_RaiseException>
 8001012:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001016:	b012      	add	sp, #72	; 0x48
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <_Unwind_Resume>:
 800101c:	46ec      	mov	ip, sp
 800101e:	b500      	push	{lr}
 8001020:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001024:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001030:	a901      	add	r1, sp, #4
 8001032:	f7ff fc19 	bl	8000868 <__gnu_Unwind_Resume>
 8001036:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800103a:	b012      	add	sp, #72	; 0x48
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_Unwind_Resume_or_Rethrow>:
 8001040:	46ec      	mov	ip, sp
 8001042:	b500      	push	{lr}
 8001044:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001048:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001054:	a901      	add	r1, sp, #4
 8001056:	f7ff fc29 	bl	80008ac <__gnu_Unwind_Resume_or_Rethrow>
 800105a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800105e:	b012      	add	sp, #72	; 0x48
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <_Unwind_ForcedUnwind>:
 8001064:	46ec      	mov	ip, sp
 8001066:	b500      	push	{lr}
 8001068:	e92d 5000 	stmdb	sp!, {ip, lr}
 800106c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001078:	ab01      	add	r3, sp, #4
 800107a:	f7ff fbeb 	bl	8000854 <__gnu_Unwind_ForcedUnwind>
 800107e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001082:	b012      	add	sp, #72	; 0x48
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <_Unwind_Backtrace>:
 8001088:	46ec      	mov	ip, sp
 800108a:	b500      	push	{lr}
 800108c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001090:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	e92d 000c 	stmdb	sp!, {r2, r3}
 800109c:	aa01      	add	r2, sp, #4
 800109e:	f7ff fc5d 	bl	800095c <__gnu_Unwind_Backtrace>
 80010a2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010a6:	b012      	add	sp, #72	; 0x48
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <next_unwind_byte>:
 80010ac:	7a02      	ldrb	r2, [r0, #8]
 80010ae:	b97a      	cbnz	r2, 80010d0 <next_unwind_byte+0x24>
 80010b0:	7a43      	ldrb	r3, [r0, #9]
 80010b2:	b1a3      	cbz	r3, 80010de <next_unwind_byte+0x32>
 80010b4:	6842      	ldr	r2, [r0, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	b410      	push	{r4}
 80010ba:	7243      	strb	r3, [r0, #9]
 80010bc:	6813      	ldr	r3, [r2, #0]
 80010be:	2103      	movs	r1, #3
 80010c0:	1d14      	adds	r4, r2, #4
 80010c2:	7201      	strb	r1, [r0, #8]
 80010c4:	021a      	lsls	r2, r3, #8
 80010c6:	6044      	str	r4, [r0, #4]
 80010c8:	6002      	str	r2, [r0, #0]
 80010ca:	bc10      	pop	{r4}
 80010cc:	0e18      	lsrs	r0, r3, #24
 80010ce:	4770      	bx	lr
 80010d0:	6803      	ldr	r3, [r0, #0]
 80010d2:	3a01      	subs	r2, #1
 80010d4:	7202      	strb	r2, [r0, #8]
 80010d6:	021a      	lsls	r2, r3, #8
 80010d8:	6002      	str	r2, [r0, #0]
 80010da:	0e18      	lsrs	r0, r3, #24
 80010dc:	4770      	bx	lr
 80010de:	20b0      	movs	r0, #176	; 0xb0
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <_Unwind_GetGR.constprop.0>:
 80010e4:	b500      	push	{lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	aa03      	add	r2, sp, #12
 80010ea:	2300      	movs	r3, #0
 80010ec:	9200      	str	r2, [sp, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	220c      	movs	r2, #12
 80010f2:	f7ff fbeb 	bl	80008cc <_Unwind_VRS_Get>
 80010f6:	9803      	ldr	r0, [sp, #12]
 80010f8:	b005      	add	sp, #20
 80010fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80010fe:	bf00      	nop

08001100 <unwind_UCB_from_context>:
 8001100:	e7f0      	b.n	80010e4 <_Unwind_GetGR.constprop.0>
 8001102:	bf00      	nop

08001104 <__gnu_unwind_execute>:
 8001104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001108:	4605      	mov	r5, r0
 800110a:	b085      	sub	sp, #20
 800110c:	460e      	mov	r6, r1
 800110e:	f04f 0800 	mov.w	r8, #0
 8001112:	4630      	mov	r0, r6
 8001114:	f7ff ffca 	bl	80010ac <next_unwind_byte>
 8001118:	28b0      	cmp	r0, #176	; 0xb0
 800111a:	4604      	mov	r4, r0
 800111c:	f000 80b2 	beq.w	8001284 <__gnu_unwind_execute+0x180>
 8001120:	0607      	lsls	r7, r0, #24
 8001122:	d520      	bpl.n	8001166 <__gnu_unwind_execute+0x62>
 8001124:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001128:	2b80      	cmp	r3, #128	; 0x80
 800112a:	d04d      	beq.n	80011c8 <__gnu_unwind_execute+0xc4>
 800112c:	2b90      	cmp	r3, #144	; 0x90
 800112e:	d036      	beq.n	800119e <__gnu_unwind_execute+0x9a>
 8001130:	2ba0      	cmp	r3, #160	; 0xa0
 8001132:	d060      	beq.n	80011f6 <__gnu_unwind_execute+0xf2>
 8001134:	2bb0      	cmp	r3, #176	; 0xb0
 8001136:	d074      	beq.n	8001222 <__gnu_unwind_execute+0x11e>
 8001138:	2bc0      	cmp	r3, #192	; 0xc0
 800113a:	f000 808b 	beq.w	8001254 <__gnu_unwind_execute+0x150>
 800113e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001142:	2bd0      	cmp	r3, #208	; 0xd0
 8001144:	d10b      	bne.n	800115e <__gnu_unwind_execute+0x5a>
 8001146:	f000 0207 	and.w	r2, r0, #7
 800114a:	3201      	adds	r2, #1
 800114c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001150:	2305      	movs	r3, #5
 8001152:	2101      	movs	r1, #1
 8001154:	4628      	mov	r0, r5
 8001156:	f7ff fd97 	bl	8000c88 <_Unwind_VRS_Pop>
 800115a:	2800      	cmp	r0, #0
 800115c:	d0d9      	beq.n	8001112 <__gnu_unwind_execute+0xe>
 800115e:	2009      	movs	r0, #9
 8001160:	b005      	add	sp, #20
 8001162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001166:	f10d 090c 	add.w	r9, sp, #12
 800116a:	2300      	movs	r3, #0
 800116c:	4619      	mov	r1, r3
 800116e:	0087      	lsls	r7, r0, #2
 8001170:	f8cd 9000 	str.w	r9, [sp]
 8001174:	220d      	movs	r2, #13
 8001176:	4628      	mov	r0, r5
 8001178:	f7ff fba8 	bl	80008cc <_Unwind_VRS_Get>
 800117c:	b2ff      	uxtb	r7, r7
 800117e:	9b03      	ldr	r3, [sp, #12]
 8001180:	f8cd 9000 	str.w	r9, [sp]
 8001184:	3704      	adds	r7, #4
 8001186:	0660      	lsls	r0, r4, #25
 8001188:	bf4c      	ite	mi
 800118a:	1bdf      	submi	r7, r3, r7
 800118c:	18ff      	addpl	r7, r7, r3
 800118e:	2300      	movs	r3, #0
 8001190:	4619      	mov	r1, r3
 8001192:	220d      	movs	r2, #13
 8001194:	4628      	mov	r0, r5
 8001196:	9703      	str	r7, [sp, #12]
 8001198:	f7ff fbbc 	bl	8000914 <_Unwind_VRS_Set>
 800119c:	e7b9      	b.n	8001112 <__gnu_unwind_execute+0xe>
 800119e:	f000 030d 	and.w	r3, r0, #13
 80011a2:	2b0d      	cmp	r3, #13
 80011a4:	d0db      	beq.n	800115e <__gnu_unwind_execute+0x5a>
 80011a6:	af03      	add	r7, sp, #12
 80011a8:	2300      	movs	r3, #0
 80011aa:	f000 020f 	and.w	r2, r0, #15
 80011ae:	4619      	mov	r1, r3
 80011b0:	9700      	str	r7, [sp, #0]
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff fb8a 	bl	80008cc <_Unwind_VRS_Get>
 80011b8:	2300      	movs	r3, #0
 80011ba:	9700      	str	r7, [sp, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	220d      	movs	r2, #13
 80011c0:	4628      	mov	r0, r5
 80011c2:	f7ff fba7 	bl	8000914 <_Unwind_VRS_Set>
 80011c6:	e7a4      	b.n	8001112 <__gnu_unwind_execute+0xe>
 80011c8:	4630      	mov	r0, r6
 80011ca:	f7ff ff6f 	bl	80010ac <next_unwind_byte>
 80011ce:	0224      	lsls	r4, r4, #8
 80011d0:	4320      	orrs	r0, r4
 80011d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80011d6:	d0c2      	beq.n	800115e <__gnu_unwind_execute+0x5a>
 80011d8:	0104      	lsls	r4, r0, #4
 80011da:	2300      	movs	r3, #0
 80011dc:	b2a2      	uxth	r2, r4
 80011de:	4619      	mov	r1, r3
 80011e0:	4628      	mov	r0, r5
 80011e2:	f7ff fd51 	bl	8000c88 <_Unwind_VRS_Pop>
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d1b9      	bne.n	800115e <__gnu_unwind_execute+0x5a>
 80011ea:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80011ee:	bf18      	it	ne
 80011f0:	f04f 0801 	movne.w	r8, #1
 80011f4:	e78d      	b.n	8001112 <__gnu_unwind_execute+0xe>
 80011f6:	43c2      	mvns	r2, r0
 80011f8:	f002 0307 	and.w	r3, r2, #7
 80011fc:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001200:	411a      	asrs	r2, r3
 8001202:	0701      	lsls	r1, r0, #28
 8001204:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	bf48      	it	mi
 800120e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001212:	4619      	mov	r1, r3
 8001214:	4628      	mov	r0, r5
 8001216:	f7ff fd37 	bl	8000c88 <_Unwind_VRS_Pop>
 800121a:	2800      	cmp	r0, #0
 800121c:	f43f af79 	beq.w	8001112 <__gnu_unwind_execute+0xe>
 8001220:	e79d      	b.n	800115e <__gnu_unwind_execute+0x5a>
 8001222:	28b1      	cmp	r0, #177	; 0xb1
 8001224:	d033      	beq.n	800128e <__gnu_unwind_execute+0x18a>
 8001226:	28b2      	cmp	r0, #178	; 0xb2
 8001228:	f000 808b 	beq.w	8001342 <__gnu_unwind_execute+0x23e>
 800122c:	28b3      	cmp	r0, #179	; 0xb3
 800122e:	d039      	beq.n	80012a4 <__gnu_unwind_execute+0x1a0>
 8001230:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001234:	2bb4      	cmp	r3, #180	; 0xb4
 8001236:	d092      	beq.n	800115e <__gnu_unwind_execute+0x5a>
 8001238:	f000 0207 	and.w	r2, r0, #7
 800123c:	3201      	adds	r2, #1
 800123e:	2301      	movs	r3, #1
 8001240:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001244:	4619      	mov	r1, r3
 8001246:	4628      	mov	r0, r5
 8001248:	f7ff fd1e 	bl	8000c88 <_Unwind_VRS_Pop>
 800124c:	2800      	cmp	r0, #0
 800124e:	f43f af60 	beq.w	8001112 <__gnu_unwind_execute+0xe>
 8001252:	e784      	b.n	800115e <__gnu_unwind_execute+0x5a>
 8001254:	28c6      	cmp	r0, #198	; 0xc6
 8001256:	d042      	beq.n	80012de <__gnu_unwind_execute+0x1da>
 8001258:	28c7      	cmp	r0, #199	; 0xc7
 800125a:	d04c      	beq.n	80012f6 <__gnu_unwind_execute+0x1f2>
 800125c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001260:	2bc0      	cmp	r3, #192	; 0xc0
 8001262:	d05b      	beq.n	800131c <__gnu_unwind_execute+0x218>
 8001264:	28c8      	cmp	r0, #200	; 0xc8
 8001266:	d060      	beq.n	800132a <__gnu_unwind_execute+0x226>
 8001268:	28c9      	cmp	r0, #201	; 0xc9
 800126a:	f47f af78 	bne.w	800115e <__gnu_unwind_execute+0x5a>
 800126e:	4630      	mov	r0, r6
 8001270:	f7ff ff1c 	bl	80010ac <next_unwind_byte>
 8001274:	0302      	lsls	r2, r0, #12
 8001276:	f000 000f 	and.w	r0, r0, #15
 800127a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800127e:	3001      	adds	r0, #1
 8001280:	4302      	orrs	r2, r0
 8001282:	e765      	b.n	8001150 <__gnu_unwind_execute+0x4c>
 8001284:	f1b8 0f00 	cmp.w	r8, #0
 8001288:	d018      	beq.n	80012bc <__gnu_unwind_execute+0x1b8>
 800128a:	2000      	movs	r0, #0
 800128c:	e768      	b.n	8001160 <__gnu_unwind_execute+0x5c>
 800128e:	4630      	mov	r0, r6
 8001290:	f7ff ff0c 	bl	80010ac <next_unwind_byte>
 8001294:	4602      	mov	r2, r0
 8001296:	2800      	cmp	r0, #0
 8001298:	f43f af61 	beq.w	800115e <__gnu_unwind_execute+0x5a>
 800129c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012a0:	d0d0      	beq.n	8001244 <__gnu_unwind_execute+0x140>
 80012a2:	e75c      	b.n	800115e <__gnu_unwind_execute+0x5a>
 80012a4:	4630      	mov	r0, r6
 80012a6:	f7ff ff01 	bl	80010ac <next_unwind_byte>
 80012aa:	0301      	lsls	r1, r0, #12
 80012ac:	f000 000f 	and.w	r0, r0, #15
 80012b0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80012b4:	1c42      	adds	r2, r0, #1
 80012b6:	2301      	movs	r3, #1
 80012b8:	430a      	orrs	r2, r1
 80012ba:	e7c3      	b.n	8001244 <__gnu_unwind_execute+0x140>
 80012bc:	ac03      	add	r4, sp, #12
 80012be:	4643      	mov	r3, r8
 80012c0:	220e      	movs	r2, #14
 80012c2:	4641      	mov	r1, r8
 80012c4:	9400      	str	r4, [sp, #0]
 80012c6:	4628      	mov	r0, r5
 80012c8:	f7ff fb00 	bl	80008cc <_Unwind_VRS_Get>
 80012cc:	9400      	str	r4, [sp, #0]
 80012ce:	4628      	mov	r0, r5
 80012d0:	4643      	mov	r3, r8
 80012d2:	220f      	movs	r2, #15
 80012d4:	4641      	mov	r1, r8
 80012d6:	f7ff fb1d 	bl	8000914 <_Unwind_VRS_Set>
 80012da:	4640      	mov	r0, r8
 80012dc:	e740      	b.n	8001160 <__gnu_unwind_execute+0x5c>
 80012de:	4630      	mov	r0, r6
 80012e0:	f7ff fee4 	bl	80010ac <next_unwind_byte>
 80012e4:	0301      	lsls	r1, r0, #12
 80012e6:	f000 000f 	and.w	r0, r0, #15
 80012ea:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80012ee:	1c42      	adds	r2, r0, #1
 80012f0:	2303      	movs	r3, #3
 80012f2:	430a      	orrs	r2, r1
 80012f4:	e7a6      	b.n	8001244 <__gnu_unwind_execute+0x140>
 80012f6:	4630      	mov	r0, r6
 80012f8:	f7ff fed8 	bl	80010ac <next_unwind_byte>
 80012fc:	4602      	mov	r2, r0
 80012fe:	2800      	cmp	r0, #0
 8001300:	f43f af2d 	beq.w	800115e <__gnu_unwind_execute+0x5a>
 8001304:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001308:	f47f af29 	bne.w	800115e <__gnu_unwind_execute+0x5a>
 800130c:	2104      	movs	r1, #4
 800130e:	4628      	mov	r0, r5
 8001310:	f7ff fcba 	bl	8000c88 <_Unwind_VRS_Pop>
 8001314:	2800      	cmp	r0, #0
 8001316:	f43f aefc 	beq.w	8001112 <__gnu_unwind_execute+0xe>
 800131a:	e720      	b.n	800115e <__gnu_unwind_execute+0x5a>
 800131c:	f000 020f 	and.w	r2, r0, #15
 8001320:	3201      	adds	r2, #1
 8001322:	2303      	movs	r3, #3
 8001324:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001328:	e78c      	b.n	8001244 <__gnu_unwind_execute+0x140>
 800132a:	4630      	mov	r0, r6
 800132c:	f7ff febe 	bl	80010ac <next_unwind_byte>
 8001330:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001334:	f000 030f 	and.w	r3, r0, #15
 8001338:	3210      	adds	r2, #16
 800133a:	3301      	adds	r3, #1
 800133c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001340:	e706      	b.n	8001150 <__gnu_unwind_execute+0x4c>
 8001342:	2300      	movs	r3, #0
 8001344:	f10d 090c 	add.w	r9, sp, #12
 8001348:	220d      	movs	r2, #13
 800134a:	4619      	mov	r1, r3
 800134c:	f8cd 9000 	str.w	r9, [sp]
 8001350:	4628      	mov	r0, r5
 8001352:	f7ff fabb 	bl	80008cc <_Unwind_VRS_Get>
 8001356:	4630      	mov	r0, r6
 8001358:	f7ff fea8 	bl	80010ac <next_unwind_byte>
 800135c:	0602      	lsls	r2, r0, #24
 800135e:	f04f 0702 	mov.w	r7, #2
 8001362:	d50c      	bpl.n	800137e <__gnu_unwind_execute+0x27a>
 8001364:	9b03      	ldr	r3, [sp, #12]
 8001366:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800136a:	40b8      	lsls	r0, r7
 800136c:	4403      	add	r3, r0
 800136e:	4630      	mov	r0, r6
 8001370:	9303      	str	r3, [sp, #12]
 8001372:	f7ff fe9b 	bl	80010ac <next_unwind_byte>
 8001376:	0603      	lsls	r3, r0, #24
 8001378:	f107 0707 	add.w	r7, r7, #7
 800137c:	d4f2      	bmi.n	8001364 <__gnu_unwind_execute+0x260>
 800137e:	9b03      	ldr	r3, [sp, #12]
 8001380:	f8cd 9000 	str.w	r9, [sp]
 8001384:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8001388:	f503 7201 	add.w	r2, r3, #516	; 0x204
 800138c:	40bc      	lsls	r4, r7
 800138e:	2300      	movs	r3, #0
 8001390:	4414      	add	r4, r2
 8001392:	4619      	mov	r1, r3
 8001394:	220d      	movs	r2, #13
 8001396:	4628      	mov	r0, r5
 8001398:	9403      	str	r4, [sp, #12]
 800139a:	f7ff fabb 	bl	8000914 <_Unwind_VRS_Set>
 800139e:	e6b8      	b.n	8001112 <__gnu_unwind_execute+0xe>

080013a0 <__gnu_unwind_frame>:
 80013a0:	b510      	push	{r4, lr}
 80013a2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80013a4:	b084      	sub	sp, #16
 80013a6:	6853      	ldr	r3, [r2, #4]
 80013a8:	2403      	movs	r4, #3
 80013aa:	f88d 400c 	strb.w	r4, [sp, #12]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	f102 0408 	add.w	r4, r2, #8
 80013b4:	4608      	mov	r0, r1
 80013b6:	79d2      	ldrb	r2, [r2, #7]
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	a901      	add	r1, sp, #4
 80013bc:	9402      	str	r4, [sp, #8]
 80013be:	f88d 200d 	strb.w	r2, [sp, #13]
 80013c2:	f7ff fe9f 	bl	8001104 <__gnu_unwind_execute>
 80013c6:	b004      	add	sp, #16
 80013c8:	bd10      	pop	{r4, pc}
 80013ca:	bf00      	nop

080013cc <_Unwind_GetRegionStart>:
 80013cc:	b508      	push	{r3, lr}
 80013ce:	f7ff fe97 	bl	8001100 <unwind_UCB_from_context>
 80013d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013d4:	bd08      	pop	{r3, pc}
 80013d6:	bf00      	nop

080013d8 <_Unwind_GetLanguageSpecificData>:
 80013d8:	b508      	push	{r3, lr}
 80013da:	f7ff fe91 	bl	8001100 <unwind_UCB_from_context>
 80013de:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013e0:	79c3      	ldrb	r3, [r0, #7]
 80013e2:	3302      	adds	r3, #2
 80013e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013e8:	bd08      	pop	{r3, pc}
 80013ea:	bf00      	nop

080013ec <__aeabi_idiv0>:
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <_ZN14ICANSubscriberC1Ev>:
#ifndef ICANSUBSCRIBER_HPP_
#define ICANSUBSCRIBER_HPP_

#include <middleware_layer/can/CANFrame.hpp>

class ICANSubscriber
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <_ZN14ICANSubscriberC1Ev+0x1c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	0800badc 	.word	0x0800badc

08001410 <_ZN14ICANSubscriberD1Ev>:
{
public:
	virtual ~ICANSubscriber() = default;
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <_ZN14ICANSubscriberD1Ev+0x1c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	0800badc 	.word	0x0800badc

08001430 <_ZN14ICANSubscriberD0Ev>:
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ffe9 	bl	8001410 <_ZN14ICANSubscriberD1Ev>
 800143e:	2104      	movs	r1, #4
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f008 fd19 	bl	8009e78 <_ZdlPvj>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_ZN8InverterC1ER13CANController10CANFrameId>:
 * @fn Inverter
 * @brief Constructor
 * @param rCanController: Can controller that is used (provides functionality for CAN communication)
 * @param setTargetRevolutionSpeedId: CANID to set the revolution speed (=> rpm) of the target (f.e. inverter)
 */
Inverter::Inverter(CANController& rCanController, CANFrameId setTargetRevolutionSpeedId) :
 8001450:	b082      	sub	sp, #8
 8001452:	b590      	push	{r4, r7, lr}
 8001454:	b085      	sub	sp, #20
 8001456:	af02      	add	r7, sp, #8
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
 800145c:	f107 0118 	add.w	r1, r7, #24
 8001460:	e881 000c 	stmia.w	r1, {r2, r3}
   _canController(rCanController),
   _setTargetRevolutionSpeedId(setTargetRevolutionSpeedId)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ffc2 	bl	80013f0 <_ZN14ICANSubscriberC1Ev>
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <_ZN8InverterC1ER13CANController10CANFrameId+0x70>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3308      	adds	r3, #8
 800147c:	f107 0218 	add.w	r2, r7, #24
 8001480:	ca07      	ldmia	r2, {r0, r1, r2}
 8001482:	e883 0007 	stmia.w	r3, {r0, r1, r2}
{
   _canController.addSubscriber(_setTargetRevolutionSpeedId, *this);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681c      	ldr	r4, [r3, #0]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	9200      	str	r2, [sp, #0]
 800149a:	3308      	adds	r3, #8
 800149c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800149e:	47a0      	blx	r4
}
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	e005      	b.n	80014b0 <_ZN8InverterC1ER13CANController10CANFrameId+0x60>
   _setTargetRevolutionSpeedId(setTargetRevolutionSpeedId)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ffb2 	bl	8001410 <_ZN14ICANSubscriberD1Ev>
 80014ac:	f008 fd7c 	bl	8009fa8 <__cxa_end_cleanup>
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014ba:	b002      	add	sp, #8
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	0800bac8 	.word	0x0800bac8

080014c4 <_ZN8InverterD1Ev>:
	CANController& _canController;
	CANFrameId _setTargetRevolutionSpeedId;

public:
	Inverter(CANController& rCanController, CANFrameId setTargetRevolutionSpeedId);
	virtual ~Inverter() = default;
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <_ZN8InverterD1Ev+0x20>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff9b 	bl	8001410 <_ZN14ICANSubscriberD1Ev>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	0800bac8 	.word	0x0800bac8

080014e8 <_ZN8InverterD0Ev>:
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ffe7 	bl	80014c4 <_ZN8InverterD1Ev>
 80014f6:	2114      	movs	r1, #20
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f008 fcbd 	bl	8009e78 <_ZdlPvj>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_ZN12InverterLeftC1ER13CANController>:
/**
 * @fn InverterLeft
 * @brief Constructor, sets up the base with CANController and InverterID (cu32CANID)
 * @param canController: Can controller that is used (provides functionality for CAN communication)
 */
InverterLeft::InverterLeft(CANController& rCanController) :
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af02      	add	r7, sp, #8
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
   Inverter(rCanController, CANFrameId(cu32CANID))
 8001512:	687c      	ldr	r4, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f002 f8c0 	bl	80036a4 <_ZN10CANFrameIdC1Em>
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	cb0c      	ldmia	r3, {r2, r3}
 800152e:	6839      	ldr	r1, [r7, #0]
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff ff8d 	bl	8001450 <_ZN8InverterC1ER13CANController10CANFrameId>
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <_ZN12InverterLeftC1ER13CANController+0x44>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	22aa      	movs	r2, #170	; 0xaa
 8001540:	615a      	str	r2, [r3, #20]
{
}
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	0800baf0 	.word	0x0800baf0

08001550 <_ZN12InverterLeft7receiveE8CANFrame>:
 * @fn receive
 * @brief Receive a CAN message
 * @param frame: Defines the CAN frame that should be received
 */
void InverterLeft::receive(CANFrame frame)
{
 8001550:	b084      	sub	sp, #16
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	f107 0014 	add.w	r0, r7, #20
 800155e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
   // TODO: implement receive routine
   puts("InverterLeft: frame received");
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <_ZN12InverterLeft7receiveE8CANFrame+0x28>)
 8001564:	f009 fe5e 	bl	800b224 <puts>
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001572:	b004      	add	sp, #16
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	0800b8d8 	.word	0x0800b8d8

0800157c <_ZN12InverterLeftD1Ev>:
public:
   const uint32_t cu32CANID{0xAAu};

public:
   InverterLeft(CANController& rCanController);
   ~InverterLeft() = default;
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	4a05      	ldr	r2, [pc, #20]	; (800159c <_ZN12InverterLeftD1Ev+0x20>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff99 	bl	80014c4 <_ZN8InverterD1Ev>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	0800baf0 	.word	0x0800baf0

080015a0 <_ZN12InverterLeftD0Ev>:
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ffe7 	bl	800157c <_ZN12InverterLeftD1Ev>
 80015ae:	2118      	movs	r1, #24
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f008 fc61 	bl	8009e78 <_ZdlPvj>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_ZN13InverterRightC1ER13CANController>:
/**
 * @fn InverterRight
 * @brief Constructor, sets up the base with CANController and InverterID (cu32CANID)
 * @param canController: Can controller that is used (provides functionality for CAN communication)
 */
InverterRight::InverterRight(CANController& rCanController) :
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
   Inverter(rCanController, CANFrameId(cu32CANID))
 80015ca:	687c      	ldr	r4, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 f864 	bl	80036a4 <_ZN10CANFrameIdC1Em>
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	cb0c      	ldmia	r3, {r2, r3}
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff ff31 	bl	8001450 <_ZN8InverterC1ER13CANController10CANFrameId>
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <_ZN13InverterRightC1ER13CANController+0x44>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	22bb      	movs	r2, #187	; 0xbb
 80015f8:	615a      	str	r2, [r3, #20]
{
}
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	0800bb04 	.word	0x0800bb04

08001608 <_ZN13InverterRight7receiveE8CANFrame>:
 * @fn receive
 * @brief Receive a CAN message
 * @param frame: Defines the CAN frame that should be received
 */
void InverterRight::receive(CANFrame frame)
{
 8001608:	b084      	sub	sp, #16
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	f107 0014 	add.w	r0, r7, #20
 8001616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
   // TODO: Implement receive routine
   puts("InverterRight: frame received");
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <_ZN13InverterRight7receiveE8CANFrame+0x28>)
 800161c:	f009 fe02 	bl	800b224 <puts>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800162a:	b004      	add	sp, #16
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	0800b8f8 	.word	0x0800b8f8

08001634 <_ZN13InverterRightD1Ev>:
public:
   const uint32_t cu32CANID{0xBBu};

public:
   InverterRight(CANController& rCanController);
   ~InverterRight() = default;
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	4a05      	ldr	r2, [pc, #20]	; (8001654 <_ZN13InverterRightD1Ev+0x20>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff3d 	bl	80014c4 <_ZN8InverterD1Ev>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	0800bb04 	.word	0x0800bb04

08001658 <_ZN13InverterRightD0Ev>:
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ffe7 	bl	8001634 <_ZN13InverterRightD1Ev>
 8001666:	2118      	movs	r1, #24
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f008 fc05 	bl	8009e78 <_ZdlPvj>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_ZN5TicksC1Em>:

/**
 * @fn Ticks
 * @brief Constructor
 */
Ticks::Ticks(const TickType_t cxTicks): cxTicks(cxTicks)
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	601a      	str	r2, [r3, #0]
{
}
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <_Z41__static_initialization_and_destruction_0ii>:
 * @param cu32ms: Defines the length of delay in ms
 */
Ticks Ticks::fromMs(const uint32_t cu32ms)
{
   return Ticks(static_cast<TickType_t>(cu32ms/portTICK_RATE_MS));
}
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d109      	bne.n	80016bc <_Z41__static_initialization_and_destruction_0ii+0x24>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d104      	bne.n	80016bc <_Z41__static_initialization_and_destruction_0ii+0x24>
const Ticks Ticks::cMaxDelay = Ticks(static_cast<TickType_t>(1000u/portTICK_RATE_MS)); // TODO: Max delay has to be defined appropriately
 80016b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016b6:	4803      	ldr	r0, [pc, #12]	; (80016c4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80016b8:	f7ff ffde 	bl	8001678 <_ZN5TicksC1Em>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	2000009c 	.word	0x2000009c

080016c8 <_GLOBAL__sub_I__ZN5Ticks9cMaxDelayE>:
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff ffe1 	bl	8001698 <_Z41__static_initialization_and_destruction_0ii>
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_sbrk_r>:
static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit; // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void* _sbrk_r(struct _reent *pReent, int incr) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
	static char *currentHeapEnd = &__HeapBase;
#ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
	if (TotalHeapSize == 0) {
 80016e2:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <_sbrk_r+0xc8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10e      	bne.n	8001708 <_sbrk_r+0x30>
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 80016ea:	4a2e      	ldr	r2, [pc, #184]	; (80017a4 <_sbrk_r+0xcc>)
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <_sbrk_r+0xd0>)
 80016ee:	1ad3      	subs	r3, r2, r3
				- (&__HeapBase)) - ISR_STACK_LENGTH_BYTES;
 80016f0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 80016f4:	4a2d      	ldr	r2, [pc, #180]	; (80017ac <_sbrk_r+0xd4>)
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <_sbrk_r+0xcc>)
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <_sbrk_r+0xd0>)
 80016fc:	1ad3      	subs	r3, r2, r3
				- (&__HeapBase)) - ISR_STACK_LENGTH_BYTES;
 80016fe:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
		TotalHeapSize = heapBytesRemaining = (int) ((&__HeapLimit)
 8001702:	461a      	mov	r2, r3
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <_sbrk_r+0xc8>)
 8001706:	601a      	str	r2, [r3, #0]
	char* my_heap_limit = &__HeapLimit;
	char* my_heap_isr_stack_limit = &__HeapLimit - ISR_STACK_LENGTH_BYTES;
	*/

	char *limit =
			(xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED) ?
 8001708:	f007 fd3e 	bl	8009188 <xTaskGetSchedulerState>
 800170c:	4603      	mov	r3, r0
					stack_ptr : // Before scheduler is started, limit is stack pointer (risky!)
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <_sbrk_r+0x3e>
 8001712:	466b      	mov	r3, sp
 8001714:	e000      	b.n	8001718 <_sbrk_r+0x40>
 8001716:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <_sbrk_r+0xd8>)
	char *limit =
 8001718:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800171a:	f3ef 8211 	mrs	r2, BASEPRI
 800171e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001722:	b672      	cpsid	i
 8001724:	f383 8811 	msr	BASEPRI, r3
 8001728:	f3bf 8f6f 	isb	sy
 800172c:	f3bf 8f4f 	dsb	sy
 8001730:	b662      	cpsie	i
 8001732:	61ba      	str	r2, [r7, #24]
 8001734:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001736:	69bb      	ldr	r3, [r7, #24]
					&__HeapLimit - ISR_STACK_LENGTH_BYTES; // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
	DRN_ENTER_CRITICAL_SECTION(usis);
 8001738:	623b      	str	r3, [r7, #32]
	char *previousHeapEnd = currentHeapEnd;
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <_sbrk_r+0xdc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	61fb      	str	r3, [r7, #28]
	if (currentHeapEnd + incr > limit) {
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <_sbrk_r+0xdc>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4413      	add	r3, r2
 8001748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174a:	429a      	cmp	r2, r3
 800174c:	d20a      	bcs.n	8001764 <_sbrk_r+0x8c>
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001758:	bf00      	nop
		// Ooops, no more memory available...
#if( configUSE_MALLOC_FAILED_HOOK == 1 )
		{
			extern void vApplicationMallocFailedHook(void);
			DRN_EXIT_CRITICAL_SECTION(usis);
			vApplicationMallocFailedHook();
 800175a:	f002 f8d6 	bl	800390a <vApplicationMallocFailedHook>
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
            DRN_EXIT_CRITICAL_SECTION(usis);
        #endif
		return (char*) -1; // the malloc-family routine that called sbrk will return 0
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e018      	b.n	8001796 <_sbrk_r+0xbe>
	}
	// 'incr' of memory is available: update accounting and return it.
	currentHeapEnd += incr;
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_sbrk_r+0xdc>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <_sbrk_r+0xdc>)
 800176e:	6013      	str	r3, [r2, #0]
	heapBytesRemaining -= incr;
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <_sbrk_r+0xd4>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <_sbrk_r+0xd4>)
 800177a:	6013      	str	r3, [r2, #0]
#ifndef NDEBUG
	totalBytesProvidedBySBRK += incr;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <_sbrk_r+0xe0>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <_sbrk_r+0xe0>)
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f383 8811 	msr	BASEPRI, r3
}
 8001792:	bf00      	nop
#endif
	DRN_EXIT_CRITICAL_SECTION(usis);
	return (char*) previousHeapEnd;
 8001794:	69fb      	ldr	r3, [r7, #28]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000f38 	.word	0x20000f38
 80017a4:	20080000 	.word	0x20080000
 80017a8:	20001098 	.word	0x20001098
 80017ac:	200000a0 	.word	0x200000a0
 80017b0:	2007fe00 	.word	0x2007fe00
 80017b4:	20000000 	.word	0x20000000
 80017b8:	200000a4 	.word	0x200000a4

080017bc <__malloc_lock>:
;

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r) {
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	__asm volatile
 80017c4:	f3ef 8211 	mrs	r2, BASEPRI
 80017c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017cc:	b672      	cpsid	i
 80017ce:	f383 8811 	msr	BASEPRI, r3
 80017d2:	f3bf 8f6f 	isb	sy
 80017d6:	f3bf 8f4f 	dsb	sy
 80017da:	b662      	cpsie	i
 80017dc:	60fa      	str	r2, [r7, #12]
 80017de:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 80017e0:	68fb      	ldr	r3, [r7, #12]
#if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__malloc_lock+0x38>)
 80017e4:	6013      	str	r3, [r2, #0]
		taskDISABLE_INTERRUPTS();
		for( ;; );
	}
	vTaskSuspendAll();
#endif
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	200000a8 	.word	0x200000a8

080017f8 <__malloc_unlock>:
;
void __malloc_unlock(struct _reent *r) {
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
#if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <__malloc_unlock+0x24>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f383 8811 	msr	BASEPRI, r3
}
 800180c:	bf00      	nop
  #else
	(void) xTaskResumeAll();
#endif
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200000a8 	.word	0x200000a8

08001820 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void* pvPortMalloc(size_t xSize) PRIVILEGED_FUNCTION {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	void *p = malloc(xSize);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f009 fba3 	bl	800af74 <malloc>
 800182e:	4603      	mov	r3, r0
 8001830:	60fb      	str	r3, [r7, #12]
	return p;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <vPortFree>:
void vPortFree(void *pv) PRIVILEGED_FUNCTION {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	free(pv);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f009 fb9d 	bl	800af84 <free>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_ZN17CANControllerBase13addSubscriberE10CANFrameIdR14ICANSubscriber>:
{
	std::vector<CANFrameId> _canFrameIds;
	std::vector<ICANSubscriber*> _canSubscribers;

public:
	void addSubscriber(CANFrameId id, ICANSubscriber &subscriber) override
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	4638      	mov	r0, r7
 8001874:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		_canFrameIds.push_back(id);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3304      	adds	r3, #4
 800187c:	463a      	mov	r2, r7
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f981 	bl	8001b88 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_>
		_canSubscribers.push_back(&subscriber);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f103 0210 	add.w	r2, r3, #16
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4610      	mov	r0, r2
 8001898:	f000 f99c 	bl	8001bd4 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE9push_backEOS1_>
	}
 800189c:	bf00      	nop
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_ZN17CANControllerBase7receiveE8CANFrame>:

	void receive(CANFrame frame) override
 80018a4:	b084      	sub	sp, #16
 80018a6:	b5b0      	push	{r4, r5, r7, lr}
 80018a8:	b08c      	sub	sp, #48	; 0x30
 80018aa:	af04      	add	r7, sp, #16
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80018b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	{
		// update each subscriber that listens to the same frame id as the id of the given frame
		for (auto it = _canFrameIds.begin(); it != _canFrameIds.end(); ++it)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3304      	adds	r3, #4
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f99b 	bl	8001bf6 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3304      	adds	r3, #4
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f9a4 	bl	8001c16 <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>
 80018ce:	4603      	mov	r3, r0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	f107 0210 	add.w	r2, r7, #16
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 f9ab 	bl	8001c38 <_ZN9__gnu_cxxneIP10CANFrameIdSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d03e      	beq.n	8001966 <_ZN17CANControllerBase7receiveE8CANFrame+0xc2>
		{
			if (frame.id == *it)
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f9cc 	bl	8001c8a <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEdeEv>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f001 fee2 	bl	80036c4 <_ZNK10CANFrameIdeqERKS_>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d029      	beq.n	800195a <_ZN17CANControllerBase7receiveE8CANFrame+0xb6>
			{
				const int index = it - _canFrameIds.begin();
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3304      	adds	r3, #4
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f973 	bl	8001bf6 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 8001910:	4603      	mov	r3, r0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	f107 0214 	add.w	r2, r7, #20
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f9c0 	bl	8001ca4 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8001924:	61f8      	str	r0, [r7, #28]
				ICANSubscriber *subscriber = _canSubscribers[index];
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3310      	adds	r3, #16
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f9d2 	bl	8001cd8 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEixEj>
 8001934:	4603      	mov	r3, r0
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	61bb      	str	r3, [r7, #24]
				subscriber->receive(frame);
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3308      	adds	r3, #8
 8001940:	681d      	ldr	r5, [r3, #0]
 8001942:	466c      	mov	r4, sp
 8001944:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001948:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800194c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001950:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001956:	69b8      	ldr	r0, [r7, #24]
 8001958:	47a8      	blx	r5
		for (auto it = _canFrameIds.begin(); it != _canFrameIds.end(); ++it)
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f982 	bl	8001c68 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEppEv>
 8001964:	e7ae      	b.n	80018c4 <_ZN17CANControllerBase7receiveE8CANFrame+0x20>
			}
		}
	}
 8001966:	bf00      	nop
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001970:	b004      	add	sp, #16
 8001972:	4770      	bx	lr

08001974 <_ZN17CANControllerBaseD1Ev>:
class CANControllerBase : public ICANController
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <_ZN17CANControllerBaseD1Ev+0x2c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3310      	adds	r3, #16
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f9d1 	bl	8001d2e <_ZNSt6vectorIP14ICANSubscriberSaIS1_EED1Ev>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3304      	adds	r3, #4
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f9b1 	bl	8001cf8 <_ZNSt6vectorI10CANFrameIdSaIS0_EED1Ev>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	0800bb18 	.word	0x0800bb18

080019a4 <_ZN13CANControllerD1Ev>:

#include <middleware_layer/can/CANControllerBase.hpp>
#include <middleware_layer/can/CANHandle.hpp>


class CANController : public CANControllerBase
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <_ZN13CANControllerD1Ev+0x20>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ffdd 	bl	8001974 <_ZN17CANControllerBaseD1Ev>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	0800bb2c 	.word	0x0800bb2c

080019c8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f9c7 	bl	8001d64 <_ZNSaI10CANFrameIdED1Ev>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implD1Ev>:
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f9e5 	bl	8001db8 <_ZNSaIP14ICANSubscriberED1Ev>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <vtestCAN>:

Notes:-
1) Error state is not yet defined or implemented.s
*******************************************************************************************************************/
void vtestCAN (void)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af04      	add	r7, sp, #16

	switch(eMachineState)
 80019fe:	4b5b      	ldr	r3, [pc, #364]	; (8001b6c <vtestCAN+0x174>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	f200 80ac 	bhi.w	8001b60 <vtestCAN+0x168>
 8001a08:	a201      	add	r2, pc, #4	; (adr r2, 8001a10 <vtestCAN+0x18>)
 8001a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0e:	bf00      	nop
 8001a10:	08001a21 	.word	0x08001a21
 8001a14:	08001af9 	.word	0x08001af9
 8001a18:	08001a71 	.word	0x08001a71
 8001a1c:	08001acf 	.word	0x08001acf
	{
		case TEST_INIT:
			/*start the can controller*/
			canController1.start();
 8001a20:	4853      	ldr	r0, [pc, #332]	; (8001b70 <vtestCAN+0x178>)
 8001a22:	f001 fcdb 	bl	80033dc <_ZN13CANController5startEv>
			/*start the Interrupts*/
			canController1.activateInterrupt();
 8001a26:	4852      	ldr	r0, [pc, #328]	; (8001b70 <vtestCAN+0x178>)
 8001a28:	f001 fcfc 	bl	8003424 <_ZN13CANController17activateInterruptEv>
			/*Initializing the payload to be transmitted*/
			payload.bitLength     = 64u;
 8001a2c:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <vtestCAN+0x17c>)
 8001a2e:	2240      	movs	r2, #64	; 0x40
 8001a30:	721a      	strb	r2, [r3, #8]
			payload.isRemoteFrame = false;
 8001a32:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <vtestCAN+0x17c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	725a      	strb	r2, [r3, #9]
			payload.data.uint8[0] = 0x11u ;
 8001a38:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <vtestCAN+0x17c>)
 8001a3a:	2211      	movs	r2, #17
 8001a3c:	701a      	strb	r2, [r3, #0]
         payload.data.uint8[1] = 0x22u;
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <vtestCAN+0x17c>)
 8001a40:	2222      	movs	r2, #34	; 0x22
 8001a42:	705a      	strb	r2, [r3, #1]
         payload.data.uint8[2] = 0x33u;
 8001a44:	4b4b      	ldr	r3, [pc, #300]	; (8001b74 <vtestCAN+0x17c>)
 8001a46:	2233      	movs	r2, #51	; 0x33
 8001a48:	709a      	strb	r2, [r3, #2]
         payload.data.uint8[3] = 0x44u;
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <vtestCAN+0x17c>)
 8001a4c:	2244      	movs	r2, #68	; 0x44
 8001a4e:	70da      	strb	r2, [r3, #3]
         payload.data.uint8[4] = 0x55u;
 8001a50:	4b48      	ldr	r3, [pc, #288]	; (8001b74 <vtestCAN+0x17c>)
 8001a52:	2255      	movs	r2, #85	; 0x55
 8001a54:	711a      	strb	r2, [r3, #4]
         payload.data.uint8[5] = 0x66u;
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <vtestCAN+0x17c>)
 8001a58:	2266      	movs	r2, #102	; 0x66
 8001a5a:	715a      	strb	r2, [r3, #5]
         payload.data.uint8[6] = 0x77u;
 8001a5c:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <vtestCAN+0x17c>)
 8001a5e:	2277      	movs	r2, #119	; 0x77
 8001a60:	719a      	strb	r2, [r3, #6]
         payload.data.uint8[7] = 0x88u;
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <vtestCAN+0x17c>)
 8001a64:	2288      	movs	r2, #136	; 0x88
 8001a66:	71da      	strb	r2, [r3, #7]

			eMachineState=TEST_IF_BUTTON_PRESSED;
 8001a68:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <vtestCAN+0x174>)
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	701a      	strb	r2, [r3, #0]
			break;
 8001a6e:	e078      	b.n	8001b62 <vtestCAN+0x16a>

		case TEST_IF_BUTTON_PRESSED:
		   if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8001a70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a74:	4840      	ldr	r0, [pc, #256]	; (8001b78 <vtestCAN+0x180>)
 8001a76:	f003 fd01 	bl	800547c <HAL_GPIO_ReadPin>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf14      	ite	ne
 8001a80:	2301      	movne	r3, #1
 8001a82:	2300      	moveq	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d01d      	beq.n	8001ac6 <vtestCAN+0xce>
		   {
		      HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	483b      	ldr	r0, [pc, #236]	; (8001b7c <vtestCAN+0x184>)
 8001a8e:	f003 fd26 	bl	80054de <HAL_GPIO_TogglePin>
            /*CAN send*/
            canController1.send(leftInverterFrame);
 8001a92:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <vtestCAN+0x188>)
 8001a94:	466c      	mov	r4, sp
 8001a96:	f103 020c 	add.w	r2, r3, #12
 8001a9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa2:	4833      	ldr	r0, [pc, #204]	; (8001b70 <vtestCAN+0x178>)
 8001aa4:	f001 fc06 	bl	80032b4 <_ZN13CANController4sendE8CANFrame>
            canController1.send(rightInverterFrame);
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <vtestCAN+0x18c>)
 8001aaa:	466c      	mov	r4, sp
 8001aac:	f103 020c 	add.w	r2, r3, #12
 8001ab0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab8:	482d      	ldr	r0, [pc, #180]	; (8001b70 <vtestCAN+0x178>)
 8001aba:	f001 fbfb 	bl	80032b4 <_ZN13CANController4sendE8CANFrame>
            eMachineState=TEST_IF_BUTTON_RELEASED;
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <vtestCAN+0x174>)
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	701a      	strb	r2, [r3, #0]
		   }
		   else
		   {
		      eMachineState = TEST_IF_BUTTON_PRESSED;
		   }
		   break;
 8001ac4:	e04d      	b.n	8001b62 <vtestCAN+0x16a>
		      eMachineState = TEST_IF_BUTTON_PRESSED;
 8001ac6:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <vtestCAN+0x174>)
 8001ac8:	2202      	movs	r2, #2
 8001aca:	701a      	strb	r2, [r3, #0]
		   break;
 8001acc:	e049      	b.n	8001b62 <vtestCAN+0x16a>

		case TEST_IF_BUTTON_RELEASED:
		   if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin))
 8001ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad2:	4829      	ldr	r0, [pc, #164]	; (8001b78 <vtestCAN+0x180>)
 8001ad4:	f003 fcd2 	bl	800547c <HAL_GPIO_ReadPin>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <vtestCAN+0xf8>
		   {
		      eMachineState = TEST_IF_BUTTON_RELEASED;
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <vtestCAN+0x174>)
 8001aea:	2203      	movs	r2, #3
 8001aec:	701a      	strb	r2, [r3, #0]
		   }
		   else
		   {
		      eMachineState = TEST_CHANGE_DATA;
		   }
		   break;
 8001aee:	e038      	b.n	8001b62 <vtestCAN+0x16a>
		      eMachineState = TEST_CHANGE_DATA;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <vtestCAN+0x174>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
		   break;
 8001af6:	e034      	b.n	8001b62 <vtestCAN+0x16a>

		case TEST_CHANGE_DATA:
		   payload.data.uint8[0]++;
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <vtestCAN+0x17c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <vtestCAN+0x17c>)
 8001b02:	701a      	strb	r2, [r3, #0]
		   payload.data.uint8[1]++;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <vtestCAN+0x17c>)
 8001b06:	785b      	ldrb	r3, [r3, #1]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <vtestCAN+0x17c>)
 8001b0e:	705a      	strb	r2, [r3, #1]
		   payload.data.uint8[2]++;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <vtestCAN+0x17c>)
 8001b12:	789b      	ldrb	r3, [r3, #2]
 8001b14:	3301      	adds	r3, #1
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <vtestCAN+0x17c>)
 8001b1a:	709a      	strb	r2, [r3, #2]
		   payload.data.uint8[3]++;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <vtestCAN+0x17c>)
 8001b1e:	78db      	ldrb	r3, [r3, #3]
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <vtestCAN+0x17c>)
 8001b26:	70da      	strb	r2, [r3, #3]
		   payload.data.uint8[4]++;
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <vtestCAN+0x17c>)
 8001b2a:	791b      	ldrb	r3, [r3, #4]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <vtestCAN+0x17c>)
 8001b32:	711a      	strb	r2, [r3, #4]
		   payload.data.uint8[5]++;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <vtestCAN+0x17c>)
 8001b36:	795b      	ldrb	r3, [r3, #5]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <vtestCAN+0x17c>)
 8001b3e:	715a      	strb	r2, [r3, #5]
		   payload.data.uint8[6]++;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <vtestCAN+0x17c>)
 8001b42:	799b      	ldrb	r3, [r3, #6]
 8001b44:	3301      	adds	r3, #1
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <vtestCAN+0x17c>)
 8001b4a:	719a      	strb	r2, [r3, #6]
		   payload.data.uint8[7]++;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <vtestCAN+0x17c>)
 8001b4e:	79db      	ldrb	r3, [r3, #7]
 8001b50:	3301      	adds	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <vtestCAN+0x17c>)
 8001b56:	71da      	strb	r2, [r3, #7]
		   eMachineState = TEST_IF_BUTTON_PRESSED;
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <vtestCAN+0x174>)
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	701a      	strb	r2, [r3, #0]
		   break;
 8001b5e:	e000      	b.n	8001b62 <vtestCAN+0x16a>

		case TEST_ERROR:
		default:
			while(1)
 8001b60:	e7fe      	b.n	8001b60 <vtestCAN+0x168>
			break;

	}


}
 8001b62:	bf00      	nop
 8001b64:	3704      	adds	r7, #4
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000150 	.word	0x20000150
 8001b70:	200000ac 	.word	0x200000ac
 8001b74:	20000114 	.word	0x20000114
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	20000120 	.word	0x20000120
 8001b84:	20000138 	.word	0x20000138

08001b88 <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d00d      	beq.n	8001bba <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f000 f92b 	bl	8001e02 <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f103 020c 	add.w	r2, r3, #12
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8001bb8:	e008      	b.n	8001bcc <_ZNSt6vectorI10CANFrameIdSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f82b 	bl	8001c16 <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f944 	bl	8001e54 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE9push_backEOS1_>:

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8001bde:	6838      	ldr	r0, [r7, #0]
 8001be0:	f000 fa2e 	bl	8002040 <_ZSt4moveIRP14ICANSubscriberEONSt16remove_referenceIT_E4typeEOS4_>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4619      	mov	r1, r3
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fa34 	bl	8002056 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fa53 	bl	80020b2 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <_ZNSt6vectorI10CANFrameIdSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	1d1a      	adds	r2, r3, #4
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fa42 	bl	80020b2 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_ZN9__gnu_cxxneIP10CANFrameIdSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fa45 	bl	80020d2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	681c      	ldr	r4, [r3, #0]
 8001c4c:	6838      	ldr	r0, [r7, #0]
 8001c4e:	f000 fa40 	bl	80020d2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001c52:	4603      	mov	r3, r0
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	429c      	cmp	r4, r3
 8001c58:	bf14      	ite	ne
 8001c5a:	2301      	movne	r3, #1
 8001c5c:	2300      	moveq	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}

08001c68 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f103 020c 	add.w	r2, r3, #12
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	601a      	str	r2, [r3, #0]
	return *this;
 8001c7c:	687b      	ldr	r3, [r7, #4]
      }
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fa0f 	bl	80020d2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	681c      	ldr	r4, [r3, #0]
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	f000 fa0a 	bl	80020d2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	1ae3      	subs	r3, r4, r3
 8001cc4:	109b      	asrs	r3, r3, #2
 8001cc6:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8001cc8:	fb02 f303 	mul.w	r3, r2, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}
 8001cd4:	aaaaaaab 	.word	0xaaaaaaab

08001cd8 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
      }
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_ZNSt6vectorI10CANFrameIdSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001cf8:	b5b0      	push	{r4, r5, r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681c      	ldr	r4, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f9ec 	bl	80020e8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001d10:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d12:	461a      	mov	r2, r3
 8001d14:	4629      	mov	r1, r5
 8001d16:	4620      	mov	r0, r4
 8001d18:	f000 f9f1 	bl	80020fe <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
      }
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f82c 	bl	8001d7c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdb0      	pop	{r4, r5, r7, pc}

08001d2e <_ZNSt6vectorIP14ICANSubscriberSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001d2e:	b5b0      	push	{r4, r5, r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681c      	ldr	r4, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f9ea 	bl	800211a <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8001d46:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f000 f9ef 	bl	8002130 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
      }
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 f83b 	bl	8001dd0 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EED1Ev>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bdb0      	pop	{r4, r5, r7, pc}

08001d64 <_ZNSaI10CANFrameIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f9ed 	bl	800214c <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdED1Ev>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	109b      	asrs	r3, r3, #2
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EED1Ev+0x38>)
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f9e0 	bl	8002162 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fe0f 	bl	80019c8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implD1Ev>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	aaaaaaab 	.word	0xaaaaaaab

08001db8 <_ZNSaIP14ICANSubscriberED1Ev>:
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f9e1 	bl	8002188 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberED1Ev>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8001de8:	461a      	mov	r2, r3
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f9d7 	bl	800219e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
      }
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fdf4 	bl	80019e0 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implD1Ev>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f9d8 	bl	80021c4 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e14:	4603      	mov	r3, r0
 8001e16:	461a      	mov	r2, r3
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f9dd 	bl	80021da <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_ZNSt6vectorI10CANFrameIdSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f805 	bl	8001e3e <_ZNSt6vectorI10CANFrameIdSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8001e34:	4603      	mov	r3, r0
      }
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_ZNSt6vectorI10CANFrameIdSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001e46:	2301      	movs	r3, #1
      }
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b08c      	sub	sp, #48	; 0x30
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8001e60:	4a75      	ldr	r2, [pc, #468]	; (8002038 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1e4>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f9d0 	bl	800220a <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7ff febb 	bl	8001bf6 <_ZNSt6vectorI10CANFrameIdSaIS0_EE5beginEv>
 8001e80:	4603      	mov	r3, r0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	f107 0214 	add.w	r2, r7, #20
 8001e88:	f107 0308 	add.w	r3, r7, #8
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff08 	bl	8001ca4 <_ZN9__gnu_cxxmiIP10CANFrameIdSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8001e94:	4603      	mov	r3, r0
 8001e96:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 f9fb 	bl	8002298 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001eaa:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	189d      	adds	r5, r3, r2
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f981 	bl	80021c4 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7ff ff9a 	bl	8001e02 <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8001ed2:	f7ff ffa9 	bl	8001e28 <_ZNSt6vectorI10CANFrameIdSaIS0_EE15_S_use_relocateEv>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d027      	beq.n	8001f2c <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd8>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f8f6 	bl	80020d2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 f8fb 	bl	80020e8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001ef2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001efa:	f000 f9e1 	bl	80022c0 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8001efe:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	330c      	adds	r3, #12
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f8e1 	bl	80020d2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001f10:	4603      	mov	r3, r0
 8001f12:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f8e6 	bl	80020e8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001f1c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f20:	6a39      	ldr	r1, [r7, #32]
 8001f22:	4620      	mov	r0, r4
 8001f24:	f000 f9cc 	bl	80022c0 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8001f28:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001f2a:	e028      	b.n	8001f7e <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x12a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8001f2c:	f107 0308 	add.w	r3, r7, #8
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f8ce 	bl	80020d2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001f36:	4603      	mov	r3, r0
 8001f38:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 f8d3 	bl	80020e8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001f42:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4621      	mov	r1, r4
 8001f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f4a:	f000 f9cd 	bl	80022e8 <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	330c      	adds	r3, #12
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f8b8 	bl	80020d2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>
 8001f62:	4603      	mov	r3, r0
 8001f64:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f8bd 	bl	80020e8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001f6e:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8001f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f72:	6a39      	ldr	r1, [r7, #32]
 8001f74:	4620      	mov	r0, r4
 8001f76:	f000 f9b7 	bl	80022e8 <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8001f7e:	f7ff ff53 	bl	8001e28 <_ZNSt6vectorI10CANFrameIdSaIS0_EE15_S_use_relocateEv>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f083 0301 	eor.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d009      	beq.n	8001fa2 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x14e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f8a9 	bl	80020e8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	6a39      	ldr	r1, [r7, #32]
 8001f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f9e:	f000 f8ae 	bl	80020fe <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001fa2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	109b      	asrs	r3, r3, #2
 8001fae:	4a23      	ldr	r2, [pc, #140]	; (800203c <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1e8>)
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb8:	f000 f8d3 	bl	8002162 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	441a      	add	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	609a      	str	r2, [r3, #8]
    }
 8001fdc:	e029      	b.n	8002032 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1de>
 8001fde:	4603      	mov	r3, r0
      __catch(...)
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f008 f8b6 	bl	800a152 <__cxa_begin_catch>
	  if (!__new_finish)
 8001fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10c      	bne.n	8002006 <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1b2>
	    _Alloc_traits::destroy(this->_M_impl,
 8001fec:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	461a      	mov	r2, r3
	    _Alloc_traits::destroy(this->_M_impl,
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f000 f98b 	bl	800231a <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>
 8002004:	e009      	b.n	800201a <_ZNSt6vectorI10CANFrameIdSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x1c6>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f86d 	bl	80020e8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 800200e:	4603      	mov	r3, r0
 8002010:	461a      	mov	r2, r3
 8002012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002014:	69b8      	ldr	r0, [r7, #24]
 8002016:	f000 f872 	bl	80020fe <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800201e:	69b9      	ldr	r1, [r7, #24]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 f89e 	bl	8002162 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>
	  __throw_exception_again;
 8002026:	f008 fbf9 	bl	800a81c <__cxa_rethrow>
      __catch(...)
 800202a:	f008 f8bb 	bl	800a1a4 <__cxa_end_catch>
 800202e:	f007 ffbb 	bl	8009fa8 <__cxa_end_cleanup>
    }
 8002032:	3730      	adds	r7, #48	; 0x30
 8002034:	46bd      	mov	sp, r7
 8002036:	bdb0      	pop	{r4, r5, r7, pc}
 8002038:	0800b918 	.word	0x0800b918
 800203c:	aaaaaaab 	.word	0xaaaaaaab

08002040 <_ZSt4moveIRP14ICANSubscriberEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8002056:	b5b0      	push	{r4, r5, r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	429a      	cmp	r2, r3
 800206a:	d011      	beq.n	8002090 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800206c:	687c      	ldr	r4, [r7, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685d      	ldr	r5, [r3, #4]
 8002072:	6838      	ldr	r0, [r7, #0]
 8002074:	f000 f95e 	bl	8002334 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	4629      	mov	r1, r5
 800207e:	4620      	mov	r0, r4
 8002080:	f000 f963 	bl	800234a <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	1d1a      	adds	r2, r3, #4
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	605a      	str	r2, [r3, #4]
      }
 800208e:	e00c      	b.n	80020aa <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f96d 	bl	8002370 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE3endEv>
 8002096:	4604      	mov	r4, r0
 8002098:	6838      	ldr	r0, [r7, #0]
 800209a:	f000 f94b 	bl	8002334 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	4621      	mov	r1, r4
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f98b 	bl	80023c0 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bdb0      	pop	{r4, r5, r7, pc}

080020b2 <_ZN9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_ZNK9__gnu_cxx17__normal_iteratorIP10CANFrameIdSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_ZSt8_DestroyIP10CANFrameIdS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 fa3d 	bl	800258c <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>
    }
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fa31 	bl	80025a6 <_ZSt8_DestroyIPP14ICANSubscriberEvT_S3_>
    }
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
	if (__p)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fa20 	bl	80025c0 <_ZNSt16allocator_traitsISaI10CANFrameIdEE10deallocateERS1_PS0_j>
      }
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberED1Ev>:
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
	if (__p)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fa11 	bl	80025de <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE10deallocateERS2_PS1_j>
      }
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80021da:	b590      	push	{r4, r7, lr}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffec 	bl	80021c4 <_ZSt7forwardIRK10CANFrameIdEOT_RNSt16remove_referenceIS3_E4typeE>
 80021ec:	4604      	mov	r4, r0
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	4619      	mov	r1, r3
 80021f2:	200c      	movs	r0, #12
 80021f4:	f7ff fb2d 	bl	8001852 <_ZnwjPv>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4622      	mov	r2, r4
 80021fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80021fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bd90      	pop	{r4, r7, pc}

0800220a <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800220a:	b590      	push	{r4, r7, lr}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f9f0 	bl	80025fc <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 800221c:	4604      	mov	r4, r0
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f9fe 	bl	8002620 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 8002224:	4603      	mov	r3, r0
 8002226:	1ae2      	subs	r2, r4, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	429a      	cmp	r2, r3
 800222c:	bf34      	ite	cc
 800222e:	2301      	movcc	r3, #1
 8002230:	2300      	movcs	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f008 fc28 	bl	800aa8e <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f9ee 	bl	8002620 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 8002244:	4604      	mov	r4, r0
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f9ea 	bl	8002620 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 800224c:	4603      	mov	r3, r0
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	f107 0208 	add.w	r2, r7, #8
 8002254:	f107 0310 	add.w	r3, r7, #16
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f9f6 	bl	800264c <_ZSt3maxIjERKT_S2_S2_>
 8002260:	4603      	mov	r3, r0
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4423      	add	r3, r4
 8002266:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f9d9 	bl	8002620 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>
 800226e:	4602      	mov	r2, r0
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4293      	cmp	r3, r2
 8002274:	d306      	bcc.n	8002284 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f9c0 	bl	80025fc <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 800227c:	4602      	mov	r2, r0
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	4293      	cmp	r3, r2
 8002282:	d904      	bls.n	800228e <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x84>
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f9b9 	bl	80025fc <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>
 800228a:	4603      	mov	r3, r0
 800228c:	e000      	b.n	8002290 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE12_M_check_lenEjPKc+0x86>
 800228e:	697b      	ldr	r3, [r7, #20]
      }
 8002290:	4618      	mov	r0, r3
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd90      	pop	{r4, r7, pc}

08002298 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj+0x1e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6839      	ldr	r1, [r7, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f9e1 	bl	8002674 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8allocateERS1_j>
 80022b2:	4603      	mov	r3, r0
 80022b4:	e000      	b.n	80022b8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE11_M_allocateEj+0x20>
 80022b6:	2300      	movs	r3, #0
      }
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80022ce:	f88d 4000 	strb.w	r4, [sp]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f9da 	bl	8002692 <_ZNSt6vectorI10CANFrameIdSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80022de:	4603      	mov	r3, r0
      }
 80022e0:	4618      	mov	r0, r3
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd90      	pop	{r4, r7, pc}

080022e8 <_ZSt34__uninitialized_move_if_noexcept_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f9dd 	bl	80026b6 <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>
 80022fc:	4604      	mov	r4, r0
 80022fe:	68b8      	ldr	r0, [r7, #8]
 8002300:	f000 f9d9 	bl	80026b6 <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>
 8002304:	4601      	mov	r1, r0
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4620      	mov	r0, r4
 800230c:	f000 f9e2 	bl	80026d4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CANFrameIdES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8002310:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bd90      	pop	{r4, r7, pc}

0800231a <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
	noexcept(noexcept(__a.destroy(__p)))
	{ __a.destroy(__p); }
 8002324:	6839      	ldr	r1, [r7, #0]
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f9e5 	bl	80026f6 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE7destroyIS1_EEvPT_>
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff ffec 	bl	8002334 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f9d2 	bl	800270c <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_>
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	1d1a      	adds	r2, r3, #4
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f9d8 	bl	8002738 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f805 	bl	80023a8 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 800239e:	4603      	mov	r3, r0
      }
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80023b0:	2301      	movs	r3, #1
      }
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80023c0:	b5b0      	push	{r4, r5, r7, lr}
 80023c2:	b08c      	sub	sp, #48	; 0x30
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
      const size_type __len =
 80023cc:	4a6e      	ldr	r2, [pc, #440]	; (8002588 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1c8>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f9c1 	bl	8002758 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc>
 80023d6:	4603      	mov	r3, r0
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f9fd 	bl	80027e6 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE5beginEv>
 80023ec:	4603      	mov	r3, r0
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	f107 0214 	add.w	r2, r7, #20
 80023f4:	f107 0308 	add.w	r3, r7, #8
 80023f8:	4611      	mov	r1, r2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fa03 	bl	8002806 <_ZN9__gnu_cxxmiIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002400:	4603      	mov	r3, r0
 8002402:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fa11 	bl	8002830 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj>
 800240e:	4603      	mov	r3, r0
 8002410:	61bb      	str	r3, [r7, #24]
      pointer __new_finish(__new_start);
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8002416:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	18d5      	adds	r5, r2, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff87 	bl	8002334 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 8002426:	4603      	mov	r3, r0
 8002428:	461a      	mov	r2, r3
 800242a:	4629      	mov	r1, r5
 800242c:	4620      	mov	r0, r4
 800242e:	f7ff ff8c 	bl	800234a <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8002432:	2300      	movs	r3, #0
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8002436:	f7ff ffac 	bl	8002392 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE15_S_use_relocateEv>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d027      	beq.n	8002490 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd0>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fa1b 	bl	8002880 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 800244a:	4603      	mov	r3, r0
 800244c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fe62 	bl	800211a <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8002456:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4621      	mov	r1, r4
 800245c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800245e:	f000 f9fb 	bl	8002858 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8002462:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002466:	3304      	adds	r3, #4
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fa06 	bl	8002880 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 8002474:	4603      	mov	r3, r0
 8002476:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fe4d 	bl	800211a <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8002480:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8002482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002484:	6a39      	ldr	r1, [r7, #32]
 8002486:	4620      	mov	r0, r4
 8002488:	f000 f9e6 	bl	8002858 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800248c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800248e:	e028      	b.n	80024e2 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x122>
		(__old_start, __position.base(),
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f9f3 	bl	8002880 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 800249a:	4603      	mov	r3, r0
 800249c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fe3a 	bl	800211a <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 80024a6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4621      	mov	r1, r4
 80024ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80024ae:	f000 f9f2 	bl	8002896 <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 80024b2:	4603      	mov	r3, r0
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	      ++__new_finish;
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	3304      	adds	r3, #4
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 80024bc:	f107 0308 	add.w	r3, r7, #8
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f9dd 	bl	8002880 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 80024c6:	4603      	mov	r3, r0
 80024c8:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fe24 	bl	800211a <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 80024d2:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80024d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d6:	6a39      	ldr	r1, [r7, #32]
 80024d8:	4620      	mov	r0, r4
 80024da:	f000 f9dc 	bl	8002896 <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 80024de:	4603      	mov	r3, r0
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80024e2:	f7ff ff56 	bl	8002392 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE15_S_use_relocateEv>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f083 0301 	eor.w	r3, r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x146>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fe10 	bl	800211a <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	6a39      	ldr	r1, [r7, #32]
 8002500:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002502:	f7ff fe15 	bl	8002130 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8002506:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8002512:	461a      	mov	r2, r3
 8002514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002516:	f7ff fe42 	bl	800219e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002524:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	441a      	add	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	609a      	str	r2, [r3, #8]
    }
 8002532:	e025      	b.n	8002580 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1c0>
 8002534:	4603      	mov	r3, r0
      __catch(...)
 8002536:	4618      	mov	r0, r3
 8002538:	f007 fe0b 	bl	800a152 <__cxa_begin_catch>
	  if (!__new_finish)
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d108      	bne.n	8002554 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x194>
	    _Alloc_traits::destroy(this->_M_impl,
 8002542:	68f8      	ldr	r0, [r7, #12]
				   __new_start + __elems_before);
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	009b      	lsls	r3, r3, #2
	    _Alloc_traits::destroy(this->_M_impl,
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4413      	add	r3, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f000 f9bb 	bl	80028c8 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE7destroyIS1_EEvRS2_PT_>
 8002552:	e009      	b.n	8002568 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x1a8>
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fddf 	bl	800211a <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002562:	69b8      	ldr	r0, [r7, #24]
 8002564:	f7ff fde4 	bl	8002130 <_ZSt8_DestroyIPP14ICANSubscriberS1_EvT_S3_RSaIT0_E>
	  _M_deallocate(__new_start, __len);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800256c:	69b9      	ldr	r1, [r7, #24]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fe15 	bl	800219e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE13_M_deallocateEPS1_j>
	  __throw_exception_again;
 8002574:	f008 f952 	bl	800a81c <__cxa_rethrow>
      __catch(...)
 8002578:	f007 fe14 	bl	800a1a4 <__cxa_end_catch>
 800257c:	f007 fd14 	bl	8009fa8 <__cxa_end_cleanup>
    }
 8002580:	3730      	adds	r7, #48	; 0x30
 8002582:	46bd      	mov	sp, r7
 8002584:	bdb0      	pop	{r4, r5, r7, pc}
 8002586:	bf00      	nop
 8002588:	0800b918 	.word	0x0800b918

0800258c <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f9a2 	bl	80028e2 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CANFrameIdEEvT_S4_>
    }
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_ZSt8_DestroyIPP14ICANSubscriberEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f9a0 	bl	80028f8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14ICANSubscriberEEvT_S5_>
    }
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_ZNSt16allocator_traitsISaI10CANFrameIdEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f99c 	bl	800290e <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE10deallocateEPS1_j>
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f99a 	bl	8002928 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE10deallocateEPS2_j>
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZNKSt6vectorI10CANFrameIdSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f9b8 	bl	800297c <_ZNKSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>
 800260c:	4603      	mov	r3, r0
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f998 	bl	8002944 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_max_sizeERKS1_>
 8002614:	4603      	mov	r3, r0
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	109b      	asrs	r3, r3, #2
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <_ZNKSt6vectorI10CANFrameIdSaIS0_EE4sizeEv+0x28>)
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	aaaaaaab 	.word	0xaaaaaaab

0800264c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d201      	bcs.n	8002666 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	e000      	b.n	8002668 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002666:	687b      	ldr	r3, [r7, #4]
    }
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <_ZNSt16allocator_traitsISaI10CANFrameIdEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800267e:	2200      	movs	r2, #0
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f985 	bl	8002992 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv>
 8002688:	4603      	mov	r3, r0
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_ZNSt6vectorI10CANFrameIdSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f994 	bl	80029d4 <_ZSt12__relocate_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 80026ac:	4603      	mov	r3, r0
      }
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <_ZSt32__make_move_if_noexcept_iteratorI10CANFrameIdSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f9a2 	bl	8002a0e <_ZNSt13move_iteratorIP10CANFrameIdEC1ES1_>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP10CANFrameIdES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f9a0 	bl	8002a2c <_ZSt18uninitialized_copyISt13move_iteratorIP10CANFrameIdES2_ET0_T_S5_S4_>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fe0b 	bl	8002334 <_ZSt7forwardIP14ICANSubscriberEOT_RNSt16remove_referenceIS2_E4typeE>
 800271e:	4603      	mov	r3, r0
 8002720:	681c      	ldr	r4, [r3, #0]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	4619      	mov	r1, r3
 8002726:	2004      	movs	r0, #4
 8002728:	f7ff f893 	bl	8001852 <_ZnwjPv>
 800272c:	4603      	mov	r3, r0
 800272e:	601c      	str	r4, [r3, #0]
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bd90      	pop	{r4, r7, pc}

08002738 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f973 	bl	8002a50 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 800276a:	4604      	mov	r4, r0
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f980 	bl	8002a72 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 8002772:	4603      	mov	r3, r0
 8002774:	1ae2      	subs	r2, r4, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	429a      	cmp	r2, r3
 800277a:	bf34      	ite	cc
 800277c:	2301      	movcc	r3, #1
 800277e:	2300      	movcs	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f008 f981 	bl	800aa8e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f970 	bl	8002a72 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 8002792:	4604      	mov	r4, r0
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f96c 	bl	8002a72 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 800279a:	4603      	mov	r3, r0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	f107 0208 	add.w	r2, r7, #8
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff4f 	bl	800264c <_ZSt3maxIjERKT_S2_S2_>
 80027ae:	4603      	mov	r3, r0
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4423      	add	r3, r4
 80027b4:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f95b 	bl	8002a72 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>
 80027bc:	4602      	mov	r2, r0
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d306      	bcc.n	80027d2 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f943 	bl	8002a50 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 80027ca:	4602      	mov	r2, r0
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d904      	bls.n	80027dc <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x84>
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f93c 	bl	8002a50 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>
 80027d8:	4603      	mov	r3, r0
 80027da:	e000      	b.n	80027de <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE12_M_check_lenEjPKc+0x86>
 80027dc:	697b      	ldr	r3, [r7, #20]
      }
 80027de:	4618      	mov	r0, r3
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}

080027e6 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff9e 	bl	8002738 <_ZN9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_ZN9__gnu_cxxmiIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002806:	b590      	push	{r4, r7, lr}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f835 	bl	8002880 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 8002816:	4603      	mov	r3, r0
 8002818:	681c      	ldr	r4, [r3, #0]
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	f000 f830 	bl	8002880 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>
 8002820:	4603      	mov	r3, r0
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	1ae3      	subs	r3, r4, r3
 8002826:	109b      	asrs	r3, r3, #2
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bd90      	pop	{r4, r7, pc}

08002830 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d006      	beq.n	800284e <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj+0x1e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6839      	ldr	r1, [r7, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f000 f924 	bl	8002a92 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8allocateERS2_j>
 800284a:	4603      	mov	r3, r0
 800284c:	e000      	b.n	8002850 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE11_M_allocateEj+0x20>
 800284e:	2300      	movs	r3, #0
      }
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8002866:	f88d 4000 	strb.w	r4, [sp]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 f91d 	bl	8002ab0 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8002876:	4603      	mov	r3, r0
      }
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd90      	pop	{r4, r7, pc}

08002880 <_ZNK9__gnu_cxx17__normal_iteratorIPP14ICANSubscriberSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <_ZSt34__uninitialized_move_if_noexcept_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002896:	b590      	push	{r4, r7, lr}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f915 	bl	8002ad4 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>
 80028aa:	4604      	mov	r4, r0
 80028ac:	68b8      	ldr	r0, [r7, #8]
 80028ae:	f000 f911 	bl	8002ad4 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>
 80028b2:	4601      	mov	r1, r0
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4620      	mov	r0, r4
 80028ba:	f000 f91a 	bl	8002af2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14ICANSubscriberES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80028be:	4603      	mov	r3, r0
    }
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd90      	pop	{r4, r7, pc}

080028c8 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE7destroyIS1_EEvRS2_PT_>:
	destroy(allocator_type& __a, _Up* __p)
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 80028d2:	6839      	ldr	r1, [r7, #0]
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f91d 	bl	8002b14 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE7destroyIS2_EEvPT_>
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <_ZNSt12_Destroy_auxILb1EE9__destroyIP10CANFrameIdEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP14ICANSubscriberEEvT_S5_>:
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 800290e:	b580      	push	{r7, lr}
 8002910:	b084      	sub	sp, #16
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800291a:	68b8      	ldr	r0, [r7, #8]
 800291c:	f007 faaa 	bl	8009e74 <_ZdlPv>
      }
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002934:	68b8      	ldr	r0, [r7, #8]
 8002936:	f007 fa9d 	bl	8009e74 <_ZdlPv>
      }
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <_ZNSt6vectorI10CANFrameIdSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 800294e:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f8ea 	bl	8002b2a <_ZNSt16allocator_traitsISaI10CANFrameIdEE8max_sizeERKS1_>
 8002956:	4603      	mov	r3, r0
 8002958:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800295a:	f107 0208 	add.w	r2, r7, #8
 800295e:	f107 030c 	add.w	r3, r7, #12
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f8ec 	bl	8002b42 <_ZSt3minIjERKT_S2_S2_>
 800296a:	4603      	mov	r3, r0
 800296c:	681b      	ldr	r3, [r3, #0]
      }
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	0aaaaaaa 	.word	0x0aaaaaaa

0800297c <_ZNKSt12_Vector_baseI10CANFrameIdSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f8e4 	bl	8002b6c <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4293      	cmp	r3, r2
 80029aa:	bf8c      	ite	hi
 80029ac:	2301      	movhi	r3, #1
 80029ae:	2300      	movls	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80029b6:	f008 f867 	bl	800aa88 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f007 ff75 	bl	800a8b4 <_Znwj>
 80029ca:	4603      	mov	r3, r0
      }
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZSt12__relocate_aIP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80029d4:	b5b0      	push	{r4, r5, r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f8d0 	bl	8002b88 <_ZSt12__niter_baseIP10CANFrameIdET_S2_>
 80029e8:	4604      	mov	r4, r0
 80029ea:	68b8      	ldr	r0, [r7, #8]
 80029ec:	f000 f8cc 	bl	8002b88 <_ZSt12__niter_baseIP10CANFrameIdET_S2_>
 80029f0:	4605      	mov	r5, r0
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f8c8 	bl	8002b88 <_ZSt12__niter_baseIP10CANFrameIdET_S2_>
 80029f8:	4602      	mov	r2, r0
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	4629      	mov	r1, r5
 80029fe:	4620      	mov	r0, r4
 8002a00:	f000 f8cd 	bl	8002b9e <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002a04:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bdb0      	pop	{r4, r5, r7, pc}

08002a0e <_ZNSt13move_iteratorIP10CANFrameIdEC1ES1_>:
      move_iterator(iterator_type __i)
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <_ZSt18uninitialized_copyISt13move_iteratorIP10CANFrameIdES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f8d2 	bl	8002bea <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_>
 8002a46:	4603      	mov	r3, r0
    }
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f91d 	bl	8002c9a <_ZNKSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f8ff 	bl	8002c66 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_max_sizeERKS2_>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <_ZNKSt6vectorIP14ICANSubscriberSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	109b      	asrs	r3, r3, #2
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f905 	bl	8002cb0 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f911 	bl	8002cec <_ZSt12__relocate_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>
 8002aca:	4603      	mov	r3, r0
      }
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_ZSt32__make_move_if_noexcept_iteratorIP14ICANSubscriberSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f91f 	bl	8002d26 <_ZNSt13move_iteratorIPP14ICANSubscriberEC1ES2_>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP14ICANSubscriberES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f91d 	bl	8002d44 <_ZSt18uninitialized_copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <_ZNSt16allocator_traitsISaI10CANFrameIdEE8max_sizeERKS1_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f81a 	bl	8002b6c <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d201      	bcs.n	8002b5c <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	e000      	b.n	8002b5e <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002b5c:	687b      	ldr	r3, [r7, #4]
    }
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <_ZNK9__gnu_cxx13new_allocatorI10CANFrameIdE8max_sizeEv+0x18>)
      }
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	0aaaaaaa 	.word	0x0aaaaaaa

08002b88 <_ZSt12__niter_baseIP10CANFrameIdET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8002b9e:	b590      	push	{r4, r7, lr}
 8002ba0:	b087      	sub	sp, #28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d013      	beq.n	8002be0 <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8002bb8:	6978      	ldr	r0, [r7, #20]
 8002bba:	f000 f8d5 	bl	8002d68 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f8d1 	bl	8002d68 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f000 f8d6 	bl	8002d7e <_ZSt19__relocate_object_aI10CANFrameIdS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e7e7      	b.n	8002bb0 <_ZSt14__relocate_a_1IP10CANFrameIdS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 8002be0:	697b      	ldr	r3, [r7, #20]
    }
 8002be2:	4618      	mov	r0, r3
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd90      	pop	{r4, r7, pc}

08002bea <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002bea:	b590      	push	{r4, r7, lr}
 8002bec:	b087      	sub	sp, #28
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8002bfa:	f107 0208 	add.w	r2, r7, #8
 8002bfe:	f107 030c 	add.w	r3, r7, #12
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 f8d5 	bl	8002db4 <_ZStneIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d016      	beq.n	8002c3e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8002c10:	6978      	ldr	r0, [r7, #20]
 8002c12:	f000 f8a9 	bl	8002d68 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002c16:	4604      	mov	r4, r0
 8002c18:	f107 030c 	add.w	r3, r7, #12
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f8eb 	bl	8002df8 <_ZNKSt13move_iteratorIP10CANFrameIdEdeEv>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4619      	mov	r1, r3
 8002c26:	4620      	mov	r0, r4
 8002c28:	f000 f8f2 	bl	8002e10 <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8002c2c:	f107 030c 	add.w	r3, r7, #12
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 f8d0 	bl	8002dd6 <_ZNSt13move_iteratorIP10CANFrameIdEppEv>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e7dd      	b.n	8002bfa <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	e00d      	b.n	8002c5e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP10CANFrameIdES4_EET0_T_S7_S6_+0x74>
 8002c42:	4603      	mov	r3, r0
	  __catch(...)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f007 fa84 	bl	800a152 <__cxa_begin_catch>
	      std::_Destroy(__result, __cur);
 8002c4a:	6979      	ldr	r1, [r7, #20]
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fc9d 	bl	800258c <_ZSt8_DestroyIP10CANFrameIdEvT_S2_>
	      __throw_exception_again;
 8002c52:	f007 fde3 	bl	800a81c <__cxa_rethrow>
	  __catch(...)
 8002c56:	f007 faa5 	bl	800a1a4 <__cxa_end_catch>
 8002c5a:	f007 f9a5 	bl	8009fa8 <__cxa_end_cleanup>
	}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd90      	pop	{r4, r7, pc}

08002c66 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002c6e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002c72:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f8e2 	bl	8002e3e <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8max_sizeERKS2_>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002c7e:	f107 0208 	add.w	r2, r7, #8
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff5a 	bl	8002b42 <_ZSt3minIjERKT_S2_S2_>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	681b      	ldr	r3, [r3, #0]
      }
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_ZNKSt12_Vector_baseIP14ICANSubscriberSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f8ca 	bl	8002e56 <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	bf8c      	ite	hi
 8002cca:	2301      	movhi	r3, #1
 8002ccc:	2300      	movls	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002cd4:	f007 fed8 	bl	800aa88 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f007 fde9 	bl	800a8b4 <_Znwj>
 8002ce2:	4603      	mov	r3, r0
      }
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZSt12__relocate_aIPP14ICANSubscriberS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002cec:	b5b0      	push	{r4, r5, r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f8b7 	bl	8002e6e <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002d00:	4604      	mov	r4, r0
 8002d02:	68b8      	ldr	r0, [r7, #8]
 8002d04:	f000 f8b3 	bl	8002e6e <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002d08:	4605      	mov	r5, r0
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8af 	bl	8002e6e <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8002d10:	4602      	mov	r2, r0
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	4629      	mov	r1, r5
 8002d16:	4620      	mov	r0, r4
 8002d18:	f000 f8b4 	bl	8002e84 <_ZSt14__relocate_a_1IP14ICANSubscriberS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002d1c:	4603      	mov	r3, r0
    }
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bdb0      	pop	{r4, r5, r7, pc}

08002d26 <_ZNSt13move_iteratorIPP14ICANSubscriberEC1ES2_>:
      move_iterator(iterator_type __i)
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <_ZSt18uninitialized_copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002d50:	2301      	movs	r3, #1
 8002d52:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f8b1 	bl	8002ec0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14ICANSubscriberES5_EET0_T_S8_S7_>
 8002d5e:	4603      	mov	r3, r0
    }
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_ZSt19__relocate_object_aI10CANFrameIdS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __dest, _Up* __orig, _Allocator& __alloc)
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8002d8a:	68b8      	ldr	r0, [r7, #8]
 8002d8c:	f000 f8a8 	bl	8002ee0 <_ZSt4moveIR10CANFrameIdEONSt16remove_referenceIT_E4typeEOS3_>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	68f9      	ldr	r1, [r7, #12]
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f8ad 	bl	8002ef6 <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8002d9c:	68b8      	ldr	r0, [r7, #8]
 8002d9e:	f7ff ffe3 	bl	8002d68 <_ZSt11__addressofI10CANFrameIdEPT_RS1_>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff fab7 	bl	800231a <_ZNSt16allocator_traitsISaI10CANFrameIdEE7destroyIS0_EEvRS1_PT_>
    }
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <_ZStneIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8002dbe:	6839      	ldr	r1, [r7, #0]
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f8ab 	bl	8002f1c <_ZSteqIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f083 0301 	eor.w	r3, r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <_ZNSt13move_iteratorIP10CANFrameIdEppEv>:
      operator++()
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f103 020c 	add.w	r2, r3, #12
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	601a      	str	r2, [r3, #0]
	return *this;
 8002dea:	687b      	ldr	r3, [r7, #4]
      }
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <_ZNKSt13move_iteratorIP10CANFrameIdEdeEv>:
      operator*() const
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_ZSt10_ConstructI10CANFrameIdJS0_EEvPT_DpOT0_>:
    _Construct(_T1* __p, _Args&&... __args)
 8002e10:	b590      	push	{r4, r7, lr}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
 8002e1a:	6838      	ldr	r0, [r7, #0]
 8002e1c:	f000 f894 	bl	8002f48 <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>
 8002e20:	4604      	mov	r4, r0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4619      	mov	r1, r3
 8002e26:	200c      	movs	r0, #12
 8002e28:	f7fe fd13 	bl	8001852 <_ZnwjPv>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4622      	mov	r2, r4
 8002e30:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd90      	pop	{r4, r7, pc}

08002e3e <_ZNSt16allocator_traitsISaIP14ICANSubscriberEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f805 	bl	8002e56 <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_ZNK9__gnu_cxx13new_allocatorIP14ICANSubscriberE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002e5e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>:
    __niter_base(_Iterator __it)
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <_ZSt14__relocate_a_1IP14ICANSubscriberS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	109b      	asrs	r3, r3, #2
 8002e9a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	dd06      	ble.n	8002eb0 <_ZSt14__relocate_a_1IP14ICANSubscriberS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68f9      	ldr	r1, [r7, #12]
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f008 f880 	bl	800afb0 <memmove>
      return __result + __count;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
    }
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP14ICANSubscriberES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f844 	bl	8002f5e <_ZSt4copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <_ZSt4moveIR10CANFrameIdEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <_ZNSt16allocator_traitsISaI10CANFrameIdEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f820 	bl	8002f48 <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f83d 	bl	8002f8e <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JS1_EEEvPT_DpOT0_>
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_ZSteqIP10CANFrameIdEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f849 	bl	8002fbe <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	6838      	ldr	r0, [r7, #0]
 8002f30:	f000 f845 	bl	8002fbe <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>
 8002f34:	4603      	mov	r3, r0
 8002f36:	429c      	cmp	r4, r3
 8002f38:	bf0c      	ite	eq
 8002f3a:	2301      	moveq	r3, #1
 8002f3c:	2300      	movne	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}

08002f48 <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <_ZSt4copyISt13move_iteratorIPP14ICANSubscriberES3_ET0_T_S6_S5_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002f5e:	b590      	push	{r4, r7, lr}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f833 	bl	8002fd6 <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002f70:	4604      	mov	r4, r0
 8002f72:	68b8      	ldr	r0, [r7, #8]
 8002f74:	f000 f82f 	bl	8002fd6 <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f000 f83a 	bl	8002ff8 <_ZSt14__copy_move_a2ILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>
 8002f84:	4603      	mov	r3, r0
    }
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd90      	pop	{r4, r7, pc}

08002f8e <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002f8e:	b590      	push	{r4, r7, lr}
 8002f90:	b085      	sub	sp, #20
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ffd4 	bl	8002f48 <_ZSt7forwardI10CANFrameIdEOT_RNSt16remove_referenceIS1_E4typeE>
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	200c      	movs	r0, #12
 8002fa8:	f7fe fc53 	bl	8001852 <_ZnwjPv>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4622      	mov	r2, r4
 8002fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd90      	pop	{r4, r7, pc}

08002fbe <_ZNKSt13move_iteratorIP10CANFrameIdE4baseEv>:
      base() const
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <_ZSt12__miter_baseIPP14ICANSubscriberEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8002fde:	1d3b      	adds	r3, r7, #4
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 f82c 	bl	800303e <_ZNKSt13move_iteratorIPP14ICANSubscriberE4baseEv>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f834 	bl	8003056 <_ZSt12__miter_baseIPP14ICANSubscriberET_S3_>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <_ZSt14__copy_move_a2ILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f7ff ff32 	bl	8002e6e <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 800300a:	4604      	mov	r4, r0
 800300c:	68b8      	ldr	r0, [r7, #8]
 800300e:	f7ff ff2e 	bl	8002e6e <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 8003012:	4605      	mov	r5, r0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff ff29 	bl	8002e6e <_ZSt12__niter_baseIPP14ICANSubscriberET_S3_>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	4629      	mov	r1, r5
 8003022:	4620      	mov	r0, r4
 8003024:	f000 f822 	bl	800306c <_ZSt13__copy_move_aILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>
 8003028:	4602      	mov	r2, r0
 800302a:	1d3b      	adds	r3, r7, #4
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f000 f82e 	bl	8003090 <_ZSt12__niter_wrapIPP14ICANSubscriberET_RKS3_S3_>
 8003034:	4603      	mov	r3, r0
    }
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bdb0      	pop	{r4, r5, r7, pc}

0800303e <_ZNKSt13move_iteratorIPP14ICANSubscriberE4baseEv>:
      base() const
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <_ZSt12__miter_baseIPP14ICANSubscriberET_S3_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <_ZSt13__copy_move_aILb1EPP14ICANSubscriberS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	68b9      	ldr	r1, [r7, #8]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f811 	bl	80030a8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_>
 8003086:	4603      	mov	r3, r0
    }
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <_ZSt12__niter_wrapIPP14ICANSubscriberET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
    { return __res; }
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	109b      	asrs	r3, r3, #2
 80030bc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d006      	beq.n	80030d2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP14ICANSubscriberEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	461a      	mov	r2, r3
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f007 ff6f 	bl	800afb0 <memmove>
	  return __result + _Num;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
	}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <_Z41__static_initialization_and_destruction_0ii>:
Called by		: Not used yet (checked call graph)
*******************************************************************************************************************/
void CAN1_irq_receive()
{
	canController1.receiveFromISR();
}
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af04      	add	r7, sp, #16
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d132      	bne.n	800315a <_Z41__static_initialization_and_destruction_0ii+0x76>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d12d      	bne.n	800315a <_Z41__static_initialization_and_destruction_0ii+0x76>
CANController canController1       = CANController(hcan1);
 80030fe:	4921      	ldr	r1, [pc, #132]	; (8003184 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003100:	4821      	ldr	r0, [pc, #132]	; (8003188 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003102:	f000 f8c1 	bl	8003288 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef>
InverterLeft  inverterLeft         = InverterLeft(canController1);
 8003106:	4920      	ldr	r1, [pc, #128]	; (8003188 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003108:	4820      	ldr	r0, [pc, #128]	; (800318c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800310a:	f7fe f9fd 	bl	8001508 <_ZN12InverterLeftC1ER13CANController>
InverterRight inverterRight        = InverterRight(canController1);
 800310e:	491e      	ldr	r1, [pc, #120]	; (8003188 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003110:	481f      	ldr	r0, [pc, #124]	; (8003190 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003112:	f7fe fa55 	bl	80015c0 <_ZN13InverterRightC1ER13CANController>
CANFrameId canFrameIdLeftInverter  = CANFrameId(inverterLeft.cu32CANID);
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4619      	mov	r1, r3
 800311c:	481d      	ldr	r0, [pc, #116]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800311e:	f000 fac1 	bl	80036a4 <_ZN10CANFrameIdC1Em>
CANFrameId canFrameIdRightInverter = CANFrameId(inverterRight.cu32CANID);
 8003122:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	4619      	mov	r1, r3
 8003128:	481b      	ldr	r0, [pc, #108]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800312a:	f000 fabb 	bl	80036a4 <_ZN10CANFrameIdC1Em>
CANFrame leftInverterFrame  = CANFrame(canFrameIdLeftInverter, payload);
 800312e:	4c19      	ldr	r4, [pc, #100]	; (8003194 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8003130:	4a1a      	ldr	r2, [pc, #104]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8003132:	466b      	mov	r3, sp
 8003134:	ca07      	ldmia	r2, {r0, r1, r2}
 8003136:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800313a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800313e:	4818      	ldr	r0, [pc, #96]	; (80031a0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8003140:	f000 fa24 	bl	800358c <_ZN8CANFrameC1E10CANFrameId10CANPayload>
CANFrame rightInverterFrame = CANFrame(canFrameIdRightInverter, payload);
 8003144:	4c14      	ldr	r4, [pc, #80]	; (8003198 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8003146:	4a15      	ldr	r2, [pc, #84]	; (800319c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8003148:	466b      	mov	r3, sp
 800314a:	ca07      	ldmia	r2, {r0, r1, r2}
 800314c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003150:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003154:	4813      	ldr	r0, [pc, #76]	; (80031a4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003156:	f000 fa19 	bl	800358c <_ZN8CANFrameC1E10CANFrameId10CANPayload>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10d      	bne.n	800317c <_Z41__static_initialization_and_destruction_0ii+0x98>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003166:	4293      	cmp	r3, r2
 8003168:	d108      	bne.n	800317c <_Z41__static_initialization_and_destruction_0ii+0x98>
InverterRight inverterRight        = InverterRight(canController1);
 800316a:	4809      	ldr	r0, [pc, #36]	; (8003190 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800316c:	f7fe fa62 	bl	8001634 <_ZN13InverterRightD1Ev>
InverterLeft  inverterLeft         = InverterLeft(canController1);
 8003170:	4806      	ldr	r0, [pc, #24]	; (800318c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003172:	f7fe fa03 	bl	800157c <_ZN12InverterLeftD1Ev>
CANController canController1       = CANController(hcan1);
 8003176:	4804      	ldr	r0, [pc, #16]	; (8003188 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8003178:	f7fe fc14 	bl	80019a4 <_ZN13CANControllerD1Ev>
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}
 8003184:	20000f40 	.word	0x20000f40
 8003188:	200000ac 	.word	0x200000ac
 800318c:	200000cc 	.word	0x200000cc
 8003190:	200000e4 	.word	0x200000e4
 8003194:	200000fc 	.word	0x200000fc
 8003198:	20000108 	.word	0x20000108
 800319c:	20000114 	.word	0x20000114
 80031a0:	20000120 	.word	0x20000120
 80031a4:	20000138 	.word	0x20000138

080031a8 <_GLOBAL__sub_I_canController1>:
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031b0:	2001      	movs	r0, #1
 80031b2:	f7ff ff97 	bl	80030e4 <_Z41__static_initialization_and_destruction_0ii>
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_GLOBAL__sub_D_canController1>:
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7ff ff8f 	bl	80030e4 <_Z41__static_initialization_and_destruction_0ii>
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <_ZN14ICANControllerC1Ev>:
#include <middleware_layer/can/CANFrame.hpp>
#include <middleware_layer/can/CANFrameId.hpp>
#include <middleware_layer/can/ICANSubscriber.hpp>


class ICANController
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <_ZN14ICANControllerC1Ev+0x1c>)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	0800bb40 	.word	0x0800bb40

080031e8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EEC1Ev>:
      _Vector_base() = default;
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f954 	bl	80034a0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implC1Ev>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <_ZNSt6vectorI10CANFrameIdSaIS0_EEC1Ev>:
      vector() = default;
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ffeb 	bl	80031e8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EEC1Ev>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f94a 	bl	80034c0 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implC1Ev>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEC1Ev>:
      vector() = default;
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ffeb 	bl	800321c <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EEC1Ev>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <_ZN17CANControllerBaseC1Ev>:
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ffb4 	bl	80031c8 <_ZN14ICANControllerC1Ev>
 8003260:	4a08      	ldr	r2, [pc, #32]	; (8003284 <_ZN17CANControllerBaseC1Ev+0x34>)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3304      	adds	r3, #4
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ffc9 	bl	8003202 <_ZNSt6vectorI10CANFrameIdSaIS0_EEC1Ev>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3310      	adds	r3, #16
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ffde 	bl	8003236 <_ZNSt6vectorIP14ICANSubscriberSaIS1_EEC1Ev>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	0800bb18 	.word	0x0800bb18

08003288 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef>:

#include <middleware_layer/can/CANController.hpp>



CANController::CANController(CANHandle &canHandle) : _canHandle(canHandle)
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ffdb 	bl	8003250 <_ZN17CANControllerBaseC1Ev>
 800329a:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <_ZN13CANControllerC1ER19__CAN_HandleTypeDef+0x28>)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	61da      	str	r2, [r3, #28]
{
	// do nothing here
}
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	0800bb2c 	.word	0x0800bb2c

080032b4 <_ZN13CANController4sendE8CANFrame>:
	receive(RxFrame);
}


void CANController::send(CANFrame frame)
{
 80032b4:	b084      	sub	sp, #16
 80032b6:	b590      	push	{r4, r7, lr}
 80032b8:	b08b      	sub	sp, #44	; 0x2c
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80032c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	/*Local values*/
	uint32_t u32canTxMailbox = 0;			// Param for the Tx mailbox
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_TxHeaderTypeDef canTxHeader;		// Tx Header set all information for the transmission

/*mailbox handling*/

	/*check if ther are any empty mailboxes*/
	if (HAL_CAN_GetTxMailboxesFreeLevel(&_canHandle))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 fa7b 	bl	80047ca <HAL_CAN_GetTxMailboxesFreeLevel>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	bf14      	ite	ne
 80032da:	2301      	movne	r3, #1
 80032dc:	2300      	moveq	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d024      	beq.n	800332e <_ZN13CANController4sendE8CANFrame+0x7a>
	{/*find the empty mailbox*/
		/*check mailbox 0*/
		if (!HAL_CAN_IsTxMessagePending(&_canHandle, CAN_TX_MAILBOX0))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	2101      	movs	r1, #1
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 faa2 	bl	8004834 <HAL_CAN_IsTxMessagePending>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf0c      	ite	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	2300      	movne	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <_ZN13CANController4sendE8CANFrame+0x52>
		{/*mailbox0 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX0;
 8003300:	2301      	movs	r3, #1
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
 8003304:	e01e      	b.n	8003344 <_ZN13CANController4sendE8CANFrame+0x90>
		}
		else if (!HAL_CAN_IsTxMessagePending(&_canHandle, CAN_TX_MAILBOX1))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	2102      	movs	r1, #2
 800330c:	4618      	mov	r0, r3
 800330e:	f001 fa91 	bl	8004834 <HAL_CAN_IsTxMessagePending>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <_ZN13CANController4sendE8CANFrame+0x74>
		{/*mailbox1 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX1;
 8003322:	2302      	movs	r3, #2
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
 8003326:	e00d      	b.n	8003344 <_ZN13CANController4sendE8CANFrame+0x90>
		}
		else
		{/*mailbox2 is empty, use this for TX_message*/
			u32canTxMailbox = CAN_TX_MAILBOX2;
 8003328:	2304      	movs	r3, #4
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	e00a      	b.n	8003344 <_ZN13CANController4sendE8CANFrame+0x90>
		}
	}
	/*no empty mailbox, throw error-handling*/
	else throw "no empty mailbox";
 800332e:	2004      	movs	r0, #4
 8003330:	f006 fe00 	bl	8009f34 <__cxa_allocate_exception>
 8003334:	4603      	mov	r3, r0
 8003336:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <_ZN13CANController4sendE8CANFrame+0x11c>)
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	4925      	ldr	r1, [pc, #148]	; (80033d4 <_ZN13CANController4sendE8CANFrame+0x120>)
 800333e:	4618      	mov	r0, r3
 8003340:	f007 fa52 	bl	800a7e8 <__cxa_throw>


	/*set the Tx Header with the CAN information*/
	/*set standard and extended Id for transmission*/
	canTxHeader.StdId = frame.id.standardId;
 8003344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003346:	60fb      	str	r3, [r7, #12]
	canTxHeader.ExtId = frame.id.extendedId;
 8003348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334a:	613b      	str	r3, [r7, #16]
	/*specify if standard or extended Id is use*/
	if(frame.id.isExtendedFrame)
 800334c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <_ZN13CANController4sendE8CANFrame+0xa6>
		/*use extended Id*/
		canTxHeader.IDE = CAN_ID_EXT;
 8003354:	2304      	movs	r3, #4
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e001      	b.n	800335e <_ZN13CANController4sendE8CANFrame+0xaa>
	else
		/*use standard Id*/
		canTxHeader.IDE = CAN_ID_STD;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]

	/*specify the type of frame to transmission*/
	if ( frame.payload.isRemoteFrame)
 800335e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <_ZN13CANController4sendE8CANFrame+0xb8>
		/*send remote frame*/
		canTxHeader.RTR = CAN_RTR_REMOTE;
 8003366:	2302      	movs	r3, #2
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	e001      	b.n	8003370 <_ZN13CANController4sendE8CANFrame+0xbc>
	else
		/*send a Data frame*/
		canTxHeader.RTR = CAN_RTR_DATA;
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]

	/*set length of dataframe*/
	canTxHeader.DLC = frame.payload.bitLength/8;
 8003370:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003374:	08db      	lsrs	r3, r3, #3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	61fb      	str	r3, [r7, #28]
	/*diesable TransmitglobalTime*/
	canTxHeader.TransmitGlobalTime = DISABLE;
 800337a:	2300      	movs	r3, #0
 800337c:	f887 3020 	strb.w	r3, [r7, #32]


	/*start transmission*/
	if(HAL_CAN_AddTxMessage(&_canHandle, &canTxHeader, frame.payload.data.uint8, &u32canTxMailbox))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69d8      	ldr	r0, [r3, #28]
 8003384:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8003388:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800338c:	f103 020c 	add.w	r2, r3, #12
 8003390:	f107 010c 	add.w	r1, r7, #12
 8003394:	4623      	mov	r3, r4
 8003396:	f001 f93d 	bl	8004614 <HAL_CAN_AddTxMessage>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf14      	ite	ne
 80033a0:	2301      	movne	r3, #1
 80033a2:	2300      	moveq	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <_ZN13CANController4sendE8CANFrame+0x10c>
		/*transmission failed*/
		throw "send TX is not possible";
 80033aa:	2004      	movs	r0, #4
 80033ac:	f006 fdc2 	bl	8009f34 <__cxa_allocate_exception>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <_ZN13CANController4sendE8CANFrame+0x124>)
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	4906      	ldr	r1, [pc, #24]	; (80033d4 <_ZN13CANController4sendE8CANFrame+0x120>)
 80033ba:	4618      	mov	r0, r3
 80033bc:	f007 fa14 	bl	800a7e8 <__cxa_throw>

}
 80033c0:	bf00      	nop
 80033c2:	372c      	adds	r7, #44	; 0x2c
 80033c4:	46bd      	mov	sp, r7
 80033c6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80033ca:	b004      	add	sp, #16
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	0800b970 	.word	0x0800b970
 80033d4:	0800bc14 	.word	0x0800bc14
 80033d8:	0800b984 	.word	0x0800b984

080033dc <_ZN13CANController5startEv>:
/** function to start the CAN communication*/
void CANController::start(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_Start(&_canHandle)) throw "Can can't start";
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 f8cf 	bl	800458c <HAL_CAN_Start>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <_ZN13CANController5startEv+0x38>
 80033fe:	2004      	movs	r0, #4
 8003400:	f006 fd98 	bl	8009f34 <__cxa_allocate_exception>
 8003404:	4603      	mov	r3, r0
 8003406:	4a05      	ldr	r2, [pc, #20]	; (800341c <_ZN13CANController5startEv+0x40>)
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	2200      	movs	r2, #0
 800340c:	4904      	ldr	r1, [pc, #16]	; (8003420 <_ZN13CANController5startEv+0x44>)
 800340e:	4618      	mov	r0, r3
 8003410:	f007 f9ea 	bl	800a7e8 <__cxa_throw>
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	0800b99c 	.word	0x0800b99c
 8003420:	0800bc14 	.word	0x0800bc14

08003424 <_ZN13CANController17activateInterruptEv>:
/**function to activate the Interrupt for CAN*/
void CANController::activateInterrupt (void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO0_MSG_PENDING)) throw "Interrupt can't activate";
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	2102      	movs	r1, #2
 8003432:	4618      	mov	r0, r3
 8003434:	f001 fb34 	bl	8004aa0 <HAL_CAN_ActivateNotification>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	bf14      	ite	ne
 800343e:	2301      	movne	r3, #1
 8003440:	2300      	moveq	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <_ZN13CANController17activateInterruptEv+0x3a>
 8003448:	2004      	movs	r0, #4
 800344a:	f006 fd73 	bl	8009f34 <__cxa_allocate_exception>
 800344e:	4603      	mov	r3, r0
 8003450:	4a11      	ldr	r2, [pc, #68]	; (8003498 <_ZN13CANController17activateInterruptEv+0x74>)
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	2200      	movs	r2, #0
 8003456:	4911      	ldr	r1, [pc, #68]	; (800349c <_ZN13CANController17activateInterruptEv+0x78>)
 8003458:	4618      	mov	r0, r3
 800345a:	f007 f9c5 	bl	800a7e8 <__cxa_throw>
	if(HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO1_MSG_PENDING)) throw "Interrupt can't activate";
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	2110      	movs	r1, #16
 8003464:	4618      	mov	r0, r3
 8003466:	f001 fb1b 	bl	8004aa0 <HAL_CAN_ActivateNotification>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <_ZN13CANController17activateInterruptEv+0x6c>
 800347a:	2004      	movs	r0, #4
 800347c:	f006 fd5a 	bl	8009f34 <__cxa_allocate_exception>
 8003480:	4603      	mov	r3, r0
 8003482:	4a05      	ldr	r2, [pc, #20]	; (8003498 <_ZN13CANController17activateInterruptEv+0x74>)
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	4904      	ldr	r1, [pc, #16]	; (800349c <_ZN13CANController17activateInterruptEv+0x78>)
 800348a:	4618      	mov	r0, r3
 800348c:	f007 f9ac 	bl	800a7e8 <__cxa_throw>
	//HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO0_FULL);
	//HAL_CAN_ActivateNotification(&_canHandle, CAN_IT_RX_FIFO1_FULL);
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	0800b9ac 	.word	0x0800b9ac
 800349c:	0800bc14 	.word	0x0800bc14

080034a0 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f819 	bl	80034e0 <_ZNSaI10CANFrameIdEC1Ev>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f821 	bl	80034f8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f829 	bl	8003520 <_ZNSaIP14ICANSubscriberEC1Ev>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 f831 	bl	8003538 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_ZNSaI10CANFrameIdEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f839 	bl	8003560 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdEC1Ev>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_ZNSt12_Vector_baseI10CANFrameIdSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
	{ }
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <_ZNSaIP14ICANSubscriberEC1Ev>:
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f824 	bl	8003576 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberEC1Ev>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <_ZNSt12_Vector_baseIP14ICANSubscriberSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	609a      	str	r2, [r3, #8]
	{ }
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <_ZN9__gnu_cxx13new_allocatorI10CANFrameIdEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <_ZN9__gnu_cxx13new_allocatorIP14ICANSubscriberEC1Ev>:
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <_ZN8CANFrameC1E10CANFrameId10CANPayload>:

#include <middleware_layer/can/CANFrame.hpp>



CANFrame::CANFrame(CANFrameId id, CANPayload payload) :
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	4638      	mov	r0, r7
 8003596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
   id(id),
   payload(payload)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	461c      	mov	r4, r3
 800359e:	463b      	mov	r3, r7
 80035a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	330c      	adds	r3, #12
 80035ac:	f107 0220 	add.w	r2, r7, #32
 80035b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80035b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
{
	if (!payload.isValid())
 80035b6:	f107 0020 	add.w	r0, r7, #32
 80035ba:	f000 f8a3 	bl	8003704 <_ZNK10CANPayload7isValidEv>
 80035be:	4603      	mov	r3, r0
 80035c0:	f083 0301 	eor.w	r3, r3, #1
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x54>
	{
	   throw "Invalid CAN frame payload.";
 80035ca:	2004      	movs	r0, #4
 80035cc:	f006 fcb2 	bl	8009f34 <__cxa_allocate_exception>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4a06      	ldr	r2, [pc, #24]	; (80035ec <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x60>)
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	4905      	ldr	r1, [pc, #20]	; (80035f0 <_ZN8CANFrameC1E10CANFrameId10CANPayload+0x64>)
 80035da:	4618      	mov	r0, r3
 80035dc:	f007 f904 	bl	800a7e8 <__cxa_throw>
	}
}
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd90      	pop	{r4, r7, pc}
 80035ea:	bf00      	nop
 80035ec:	0800ba00 	.word	0x0800ba00
 80035f0:	0800bc14 	.word	0x0800bc14

080035f4 <_ZN10CANFrameIdC1Emmb>:
*
*
*/
#include <middleware_layer/can/CANFrameId.hpp>

CANFrameId::CANFrameId(uint32_t standardId, uint32_t extendedId, bool isExtendedFrame) :
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	70fb      	strb	r3, [r7, #3]
	standardId(standardId), extendedId(extendedId), isExtendedFrame(isExtendedFrame)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	721a      	strb	r2, [r3, #8]
{
	// check standard id
	if (standardId & ~0x7FF) throw "Not an 11 bit CAN standard id.";
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	4b1d      	ldr	r3, [pc, #116]	; (800368c <_ZN10CANFrameIdC1Emmb+0x98>)
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <_ZN10CANFrameIdC1Emmb+0x40>
 800361e:	2004      	movs	r0, #4
 8003620:	f006 fc88 	bl	8009f34 <__cxa_allocate_exception>
 8003624:	4603      	mov	r3, r0
 8003626:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <_ZN10CANFrameIdC1Emmb+0x9c>)
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	2200      	movs	r2, #0
 800362c:	4919      	ldr	r1, [pc, #100]	; (8003694 <_ZN10CANFrameIdC1Emmb+0xa0>)
 800362e:	4618      	mov	r0, r3
 8003630:	f007 f8da 	bl	800a7e8 <__cxa_throw>
	// check extended id
	if (!isExtendedFrame && extendedId) throw "CAN extended id is not used but is not zero.";
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	f083 0301 	eor.w	r3, r3, #1
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <_ZN10CANFrameIdC1Emmb+0x68>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <_ZN10CANFrameIdC1Emmb+0x68>
 8003646:	2004      	movs	r0, #4
 8003648:	f006 fc74 	bl	8009f34 <__cxa_allocate_exception>
 800364c:	4603      	mov	r3, r0
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <_ZN10CANFrameIdC1Emmb+0xa4>)
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	2200      	movs	r2, #0
 8003654:	490f      	ldr	r1, [pc, #60]	; (8003694 <_ZN10CANFrameIdC1Emmb+0xa0>)
 8003656:	4618      	mov	r0, r3
 8003658:	f007 f8c6 	bl	800a7e8 <__cxa_throw>
	if (isExtendedFrame && (extendedId & ~0x3FF)) throw "Not an 18 bit CAN extended id.";
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00f      	beq.n	8003682 <_ZN10CANFrameIdC1Emmb+0x8e>
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4b0d      	ldr	r3, [pc, #52]	; (800369c <_ZN10CANFrameIdC1Emmb+0xa8>)
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <_ZN10CANFrameIdC1Emmb+0x8e>
 800366c:	2004      	movs	r0, #4
 800366e:	f006 fc61 	bl	8009f34 <__cxa_allocate_exception>
 8003672:	4603      	mov	r3, r0
 8003674:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <_ZN10CANFrameIdC1Emmb+0xac>)
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	2200      	movs	r2, #0
 800367a:	4906      	ldr	r1, [pc, #24]	; (8003694 <_ZN10CANFrameIdC1Emmb+0xa0>)
 800367c:	4618      	mov	r0, r3
 800367e:	f007 f8b3 	bl	800a7e8 <__cxa_throw>
}
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	fffff800 	.word	0xfffff800
 8003690:	0800ba1c 	.word	0x0800ba1c
 8003694:	0800bc14 	.word	0x0800bc14
 8003698:	0800ba3c 	.word	0x0800ba3c
 800369c:	fffffc00 	.word	0xfffffc00
 80036a0:	0800ba6c 	.word	0x0800ba6c

080036a4 <_ZN10CANFrameIdC1Em>:


CANFrameId::CANFrameId(uint32_t standardId) : CANFrameId(standardId, 0, false)
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
 80036ae:	2300      	movs	r3, #0
 80036b0:	2200      	movs	r2, #0
 80036b2:	6839      	ldr	r1, [r7, #0]
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff9d 	bl	80035f4 <_ZN10CANFrameIdC1Emmb>
{
	// do nothing here
}
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_ZNK10CANFrameIdeqERKS_>:
	// do nothing here
}


bool CANFrameId::operator== (const CANFrameId& other) const
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	return (standardId == other.standardId &&
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
			extendedId == other.extendedId &&
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d10d      	bne.n	80036f6 <_ZNK10CANFrameIdeqERKS_+0x32>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
	return (standardId == other.standardId &&
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d107      	bne.n	80036f6 <_ZNK10CANFrameIdeqERKS_+0x32>
			isExtendedFrame == other.isExtendedFrame);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7a1a      	ldrb	r2, [r3, #8]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	7a1b      	ldrb	r3, [r3, #8]
			extendedId == other.extendedId &&
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d101      	bne.n	80036f6 <_ZNK10CANFrameIdeqERKS_+0x32>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <_ZNK10CANFrameIdeqERKS_+0x34>
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <_ZNK10CANPayload7isValidEv>:
*/

#include <middleware_layer/can/CANPayload.hpp>

bool CANPayload::isValid() const
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	if (isRemoteFrame && bitLength) return false;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7a5b      	ldrb	r3, [r3, #9]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <_ZNK10CANPayload7isValidEv+0x1c>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7a1b      	ldrb	r3, [r3, #8]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <_ZNK10CANPayload7isValidEv+0x1c>
 800371c:	2300      	movs	r3, #0
 800371e:	e024      	b.n	800376a <_ZNK10CANPayload7isValidEv+0x66>
	if (bitLength > 64) return false;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	7a1b      	ldrb	r3, [r3, #8]
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d901      	bls.n	800372c <_ZNK10CANPayload7isValidEv+0x28>
 8003728:	2300      	movs	r3, #0
 800372a:	e01e      	b.n	800376a <_ZNK10CANPayload7isValidEv+0x66>
	if (bitLength <= 32)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7a1b      	ldrb	r3, [r3, #8]
 8003730:	2b20      	cmp	r3, #32
 8003732:	d80e      	bhi.n	8003752 <_ZNK10CANPayload7isValidEv+0x4e>
	{
		if (data.uint32[1]) return false;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <_ZNK10CANPayload7isValidEv+0x3c>
 800373c:	2300      	movs	r3, #0
 800373e:	e014      	b.n	800376a <_ZNK10CANPayload7isValidEv+0x66>
		if (data.uint32[0] >> bitLength) return false;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	7a12      	ldrb	r2, [r2, #8]
 8003748:	40d3      	lsrs	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00c      	beq.n	8003768 <_ZNK10CANPayload7isValidEv+0x64>
 800374e:	2300      	movs	r3, #0
 8003750:	e00b      	b.n	800376a <_ZNK10CANPayload7isValidEv+0x66>
	}
	else if (data.uint32[1] >> (bitLength - 32)) return false;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7a1b      	ldrb	r3, [r3, #8]
 800375a:	3b20      	subs	r3, #32
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <_ZNK10CANPayload7isValidEv+0x64>
 8003764:	2300      	movs	r3, #0
 8003766:	e000      	b.n	800376a <_ZNK10CANPayload7isValidEv+0x66>
	return true;
 8003768:	2301      	movs	r3, #1
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <MX_CAN1_Init+0x64>)
 800377e:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <MX_CAN1_Init+0x68>)
 8003780:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <MX_CAN1_Init+0x64>)
 8003784:	2204      	movs	r2, #4
 8003786:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <MX_CAN1_Init+0x64>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <MX_CAN1_Init+0x64>)
 8003790:	2200      	movs	r2, #0
 8003792:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <MX_CAN1_Init+0x64>)
 8003796:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800379a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <MX_CAN1_Init+0x64>)
 800379e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80037a2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80037a4:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <MX_CAN1_Init+0x64>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80037aa:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <MX_CAN1_Init+0x64>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <MX_CAN1_Init+0x64>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <MX_CAN1_Init+0x64>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <MX_CAN1_Init+0x64>)
 80037be:	2200      	movs	r2, #0
 80037c0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <MX_CAN1_Init+0x64>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80037c8:	4804      	ldr	r0, [pc, #16]	; (80037dc <MX_CAN1_Init+0x64>)
 80037ca:	f000 fcf7 	bl	80041bc <HAL_CAN_Init>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80037d4:	f000 faa2 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000f40 	.word	0x20000f40
 80037e0:	40006400 	.word	0x40006400

080037e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b094      	sub	sp, #80	; 0x50
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a31      	ldr	r2, [pc, #196]	; (80038c8 <HAL_CAN_MspInit+0xe4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d15b      	bne.n	80038be <HAL_CAN_MspInit+0xda>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003806:	4b31      	ldr	r3, [pc, #196]	; (80038cc <HAL_CAN_MspInit+0xe8>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	4a30      	ldr	r2, [pc, #192]	; (80038cc <HAL_CAN_MspInit+0xe8>)
 800380c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003810:	6413      	str	r3, [r2, #64]	; 0x40
 8003812:	4b2e      	ldr	r3, [pc, #184]	; (80038cc <HAL_CAN_MspInit+0xe8>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	63bb      	str	r3, [r7, #56]	; 0x38
 800381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800381e:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_CAN_MspInit+0xe8>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	4a2a      	ldr	r2, [pc, #168]	; (80038cc <HAL_CAN_MspInit+0xe8>)
 8003824:	f043 0308 	orr.w	r3, r3, #8
 8003828:	6313      	str	r3, [r2, #48]	; 0x30
 800382a:	4b28      	ldr	r3, [pc, #160]	; (80038cc <HAL_CAN_MspInit+0xe8>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
 8003834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003836:	2303      	movs	r3, #3
 8003838:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003842:	2303      	movs	r3, #3
 8003844:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003846:	2309      	movs	r3, #9
 8003848:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800384a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800384e:	4619      	mov	r1, r3
 8003850:	481f      	ldr	r0, [pc, #124]	; (80038d0 <HAL_CAN_MspInit+0xec>)
 8003852:	f001 fc67 	bl	8005124 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	2105      	movs	r1, #5
 800385a:	2013      	movs	r0, #19
 800385c:	f001 fc38 	bl	80050d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003860:	2013      	movs	r0, #19
 8003862:	f001 fc51 	bl	8005108 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003866:	2200      	movs	r2, #0
 8003868:	2105      	movs	r1, #5
 800386a:	2014      	movs	r0, #20
 800386c:	f001 fc30 	bl	80050d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003870:	2014      	movs	r0, #20
 8003872:	f001 fc49 	bl	8005108 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2105      	movs	r1, #5
 800387a:	2015      	movs	r0, #21
 800387c:	f001 fc28 	bl	80050d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003880:	2015      	movs	r0, #21
 8003882:	f001 fc41 	bl	8005108 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8003886:	2200      	movs	r2, #0
 8003888:	2105      	movs	r1, #5
 800388a:	2016      	movs	r0, #22
 800388c:	f001 fc20 	bl	80050d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003890:	2016      	movs	r0, #22
 8003892:	f001 fc39 	bl	8005108 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

    CAN_FilterTypeDef xCANFilter;

    xCANFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
    xCANFilter.FilterIdHigh = 1u<<5u;
 800389a:	2320      	movs	r3, #32
 800389c:	60fb      	str	r3, [r7, #12]
    xCANFilter.FilterIdLow = 0u;
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
    xCANFilter.FilterMaskIdHigh = 0u;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
    xCANFilter.FilterMaskIdLow = 0u;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
    xCANFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80038aa:	2301      	movs	r3, #1
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
    xCANFilter.FilterActivation = CAN_FILTER_ENABLE;
 80038ae:	2301      	movs	r3, #1
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c

    HAL_CAN_ConfigFilter(&hcan1, &xCANFilter);
 80038b2:	f107 030c 	add.w	r3, r7, #12
 80038b6:	4619      	mov	r1, r3
 80038b8:	4806      	ldr	r0, [pc, #24]	; (80038d4 <HAL_CAN_MspInit+0xf0>)
 80038ba:	f000 fd7b 	bl	80043b4 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80038be:	bf00      	nop
 80038c0:	3750      	adds	r7, #80	; 0x50
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40006400 	.word	0x40006400
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020c00 	.word	0x40020c00
 80038d4:	20000f40 	.word	0x20000f40

080038d8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 80038e6:	b480      	push	{r7}
 80038e8:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80038ea:	bf00      	nop
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800390e:	bf00      	nop
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800391c:	4a08      	ldr	r2, [pc, #32]	; (8003940 <MX_FREERTOS_Init+0x28>)
 800391e:	2100      	movs	r1, #0
 8003920:	4808      	ldr	r0, [pc, #32]	; (8003944 <MX_FREERTOS_Init+0x2c>)
 8003922:	f003 fe79 	bl	8007618 <osThreadNew>
 8003926:	4603      	mov	r3, r0
 8003928:	4a07      	ldr	r2, [pc, #28]	; (8003948 <MX_FREERTOS_Init+0x30>)
 800392a:	6013      	str	r3, [r2, #0]

  /* creation of vThreadSystemAl */
  vThreadSystemAlHandle = osThreadNew(vThreadSystemAlive, NULL, &vThreadSystemAl_attributes);
 800392c:	4a07      	ldr	r2, [pc, #28]	; (800394c <MX_FREERTOS_Init+0x34>)
 800392e:	2100      	movs	r1, #0
 8003930:	4807      	ldr	r0, [pc, #28]	; (8003950 <MX_FREERTOS_Init+0x38>)
 8003932:	f003 fe71 	bl	8007618 <osThreadNew>
 8003936:	4603      	mov	r3, r0
 8003938:	4a06      	ldr	r2, [pc, #24]	; (8003954 <MX_FREERTOS_Init+0x3c>)
 800393a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}
 8003940:	0800bb4c 	.word	0x0800bb4c
 8003944:	08003959 	.word	0x08003959
 8003948:	20000f68 	.word	0x20000f68
 800394c:	0800bb70 	.word	0x0800bb70
 8003950:	08003981 	.word	0x08003981
 8003954:	20000f6c 	.word	0x20000f6c

08003958 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
   }
   */



  const uint32_t cu32Delay = 250u;
 8003960:	23fa      	movs	r3, #250	; 0xfa
 8003962:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  while(1)
  {
     vtestCAN();
 8003964:	f7fe f848 	bl	80019f8 <vtestCAN>
     HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800396c:	4803      	ldr	r0, [pc, #12]	; (800397c <StartDefaultTask+0x24>)
 800396e:	f001 fdb6 	bl	80054de <HAL_GPIO_TogglePin>
     vTaskDelay((TickType_t)(cu32Delay/portTICK_RATE_MS));
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f004 ff30 	bl	80087d8 <vTaskDelay>
     vtestCAN();
 8003978:	e7f4      	b.n	8003964 <StartDefaultTask+0xc>
 800397a:	bf00      	nop
 800397c:	40020400 	.word	0x40020400

08003980 <vThreadSystemAlive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vThreadSystemAlive */
void vThreadSystemAlive(void *argument)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vThreadSystemAlive */
  /* Infinite loop */
   TickType_t xPreviousWakeTime = xTaskGetTickCount();
 8003988:	f005 f87e 	bl	8008a88 <xTaskGetTickCount>
 800398c:	4603      	mov	r3, r0
 800398e:	60bb      	str	r3, [r7, #8]
   const uint32_t cu32Delay = 250u;
 8003990:	23fa      	movs	r3, #250	; 0xfa
 8003992:	60fb      	str	r3, [r7, #12]
   /* Infinite loop */
   while (1)
   {
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	4805      	ldr	r0, [pc, #20]	; (80039ac <vThreadSystemAlive+0x2c>)
 8003998:	f001 fda1 	bl	80054de <HAL_GPIO_TogglePin>
      vTaskDelayUntil(&xPreviousWakeTime, (TickType_t)(cu32Delay / portTICK_RATE_MS));
 800399c:	f107 0308 	add.w	r3, r7, #8
 80039a0:	68f9      	ldr	r1, [r7, #12]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f004 fe94 	bl	80086d0 <vTaskDelayUntil>
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80039a8:	e7f4      	b.n	8003994 <vThreadSystemAlive+0x14>
 80039aa:	bf00      	nop
 80039ac:	40020400 	.word	0x40020400

080039b0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08c      	sub	sp, #48	; 0x30
 80039b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b6:	f107 031c 	add.w	r3, r7, #28
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	60da      	str	r2, [r3, #12]
 80039c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c6:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a75      	ldr	r2, [pc, #468]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b73      	ldr	r3, [pc, #460]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039de:	4b70      	ldr	r3, [pc, #448]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a6f      	ldr	r2, [pc, #444]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 80039e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f6:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a69      	ldr	r2, [pc, #420]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b67      	ldr	r3, [pc, #412]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a0e:	4b64      	ldr	r3, [pc, #400]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	4a63      	ldr	r2, [pc, #396]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1a:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a26:	4b5e      	ldr	r3, [pc, #376]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	4a5d      	ldr	r2, [pc, #372]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 8003a2c:	f043 0308 	orr.w	r3, r3, #8
 8003a30:	6313      	str	r3, [r2, #48]	; 0x30
 8003a32:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a3e:	4b58      	ldr	r3, [pc, #352]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a57      	ldr	r2, [pc, #348]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 8003a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b55      	ldr	r3, [pc, #340]	; (8003ba0 <MX_GPIO_Init+0x1f0>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003a56:	2200      	movs	r2, #0
 8003a58:	f244 0181 	movw	r1, #16513	; 0x4081
 8003a5c:	4851      	ldr	r0, [pc, #324]	; (8003ba4 <MX_GPIO_Init+0x1f4>)
 8003a5e:	f001 fd25 	bl	80054ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003a62:	2200      	movs	r2, #0
 8003a64:	2140      	movs	r1, #64	; 0x40
 8003a66:	4850      	ldr	r0, [pc, #320]	; (8003ba8 <MX_GPIO_Init+0x1f8>)
 8003a68:	f001 fd20 	bl	80054ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a72:	4b4e      	ldr	r3, [pc, #312]	; (8003bac <MX_GPIO_Init+0x1fc>)
 8003a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003a7a:	f107 031c 	add.w	r3, r7, #28
 8003a7e:	4619      	mov	r1, r3
 8003a80:	484b      	ldr	r0, [pc, #300]	; (8003bb0 <MX_GPIO_Init+0x200>)
 8003a82:	f001 fb4f 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003a86:	2332      	movs	r3, #50	; 0x32
 8003a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a92:	2303      	movs	r3, #3
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a96:	230b      	movs	r3, #11
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a9a:	f107 031c 	add.w	r3, r7, #28
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4843      	ldr	r0, [pc, #268]	; (8003bb0 <MX_GPIO_Init+0x200>)
 8003aa2:	f001 fb3f 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003aa6:	2386      	movs	r3, #134	; 0x86
 8003aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ab6:	230b      	movs	r3, #11
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aba:	f107 031c 	add.w	r3, r7, #28
 8003abe:	4619      	mov	r1, r3
 8003ac0:	483c      	ldr	r0, [pc, #240]	; (8003bb4 <MX_GPIO_Init+0x204>)
 8003ac2:	f001 fb2f 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8003ac6:	f244 0381 	movw	r3, #16513	; 0x4081
 8003aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003acc:	2301      	movs	r3, #1
 8003ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad8:	f107 031c 	add.w	r3, r7, #28
 8003adc:	4619      	mov	r1, r3
 8003ade:	4831      	ldr	r0, [pc, #196]	; (8003ba4 <MX_GPIO_Init+0x1f4>)
 8003ae0:	f001 fb20 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aea:	2302      	movs	r3, #2
 8003aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af2:	2303      	movs	r3, #3
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003af6:	230b      	movs	r3, #11
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003afa:	f107 031c 	add.w	r3, r7, #28
 8003afe:	4619      	mov	r1, r3
 8003b00:	4828      	ldr	r0, [pc, #160]	; (8003ba4 <MX_GPIO_Init+0x1f4>)
 8003b02:	f001 fb0f 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003b06:	2340      	movs	r3, #64	; 0x40
 8003b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b12:	2300      	movs	r3, #0
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003b16:	f107 031c 	add.w	r3, r7, #28
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4822      	ldr	r0, [pc, #136]	; (8003ba8 <MX_GPIO_Init+0x1f8>)
 8003b1e:	f001 fb01 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b26:	2300      	movs	r3, #0
 8003b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003b2e:	f107 031c 	add.w	r3, r7, #28
 8003b32:	4619      	mov	r1, r3
 8003b34:	481c      	ldr	r0, [pc, #112]	; (8003ba8 <MX_GPIO_Init+0x1f8>)
 8003b36:	f001 faf5 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003b3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b40:	2302      	movs	r3, #2
 8003b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003b4c:	230a      	movs	r3, #10
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b50:	f107 031c 	add.w	r3, r7, #28
 8003b54:	4619      	mov	r1, r3
 8003b56:	4817      	ldr	r0, [pc, #92]	; (8003bb4 <MX_GPIO_Init+0x204>)
 8003b58:	f001 fae4 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003b6a:	f107 031c 	add.w	r3, r7, #28
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4810      	ldr	r0, [pc, #64]	; (8003bb4 <MX_GPIO_Init+0x204>)
 8003b72:	f001 fad7 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003b76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b84:	2303      	movs	r3, #3
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b88:	230b      	movs	r3, #11
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	4619      	mov	r1, r3
 8003b92:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <MX_GPIO_Init+0x1f8>)
 8003b94:	f001 fac6 	bl	8005124 <HAL_GPIO_Init>

}
 8003b98:	bf00      	nop
 8003b9a:	3730      	adds	r7, #48	; 0x30
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40020400 	.word	0x40020400
 8003ba8:	40021800 	.word	0x40021800
 8003bac:	10110000 	.word	0x10110000
 8003bb0:	40020800 	.word	0x40020800
 8003bb4:	40020000 	.word	0x40020000

08003bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bbc:	f000 fad1 	bl	8004162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bc0:	f000 f80e 	bl	8003be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bc4:	f7ff fef4 	bl	80039b0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8003bc8:	f000 fa2e 	bl	8004028 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8003bcc:	f7ff fdd4 	bl	8003778 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003bd0:	f003 fcb8 	bl	8007544 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003bd4:	f7ff fea0 	bl	8003918 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003bd8:	f003 fce8 	bl	80075ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003bdc:	e7fe      	b.n	8003bdc <main+0x24>
	...

08003be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b0b8      	sub	sp, #224	; 0xe0
 8003be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003be6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003bea:	2234      	movs	r2, #52	; 0x34
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f007 f9f8 	bl	800afe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bf4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c04:	f107 0308 	add.w	r3, r7, #8
 8003c08:	2290      	movs	r2, #144	; 0x90
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f007 f9e9 	bl	800afe4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003c12:	f001 fc7f 	bl	8005514 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <SystemClock_Config+0x110>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4a35      	ldr	r2, [pc, #212]	; (8003cf0 <SystemClock_Config+0x110>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6413      	str	r3, [r2, #64]	; 0x40
 8003c22:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <SystemClock_Config+0x110>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003c2e:	4b31      	ldr	r3, [pc, #196]	; (8003cf4 <SystemClock_Config+0x114>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c36:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <SystemClock_Config+0x114>)
 8003c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <SystemClock_Config+0x114>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003c50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003c66:	2304      	movs	r3, #4
 8003c68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 144;
 8003c6c:	2390      	movs	r3, #144	; 0x90
 8003c6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c72:	2302      	movs	r3, #2
 8003c74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8003c78:	2306      	movs	r3, #6
 8003c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 fc56 	bl	8005534 <HAL_RCC_OscConfig>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003c8e:	f000 f845 	bl	8003d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c92:	230f      	movs	r3, #15
 8003c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003ca4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003cb4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003cb8:	2104      	movs	r1, #4
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 fee8 	bl	8005a90 <HAL_RCC_ClockConfig>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003cc6:	f000 f829 	bl	8003d1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cce:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cd4:	f107 0308 	add.w	r3, r7, #8
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f002 f90d 	bl	8005ef8 <HAL_RCCEx_PeriphCLKConfig>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8003ce4:	f000 f81a 	bl	8003d1c <Error_Handler>
  }
}
 8003ce8:	bf00      	nop
 8003cea:	37e0      	adds	r7, #224	; 0xe0
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40007000 	.word	0x40007000

08003cf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d101      	bne.n	8003d0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003d0a:	f000 fa37 	bl	800417c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000

08003d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	while(1)
 8003d20:	e7fe      	b.n	8003d20 <Error_Handler+0x4>
	...

08003d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	4a10      	ldr	r2, [pc, #64]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d34:	6413      	str	r3, [r2, #64]	; 0x40
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	210f      	movs	r1, #15
 8003d5e:	f06f 0001 	mvn.w	r0, #1
 8003d62:	f001 f9b5 	bl	80050d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800

08003d74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08c      	sub	sp, #48	; 0x30
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003d84:	2200      	movs	r2, #0
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	2019      	movs	r0, #25
 8003d8a:	f001 f9a1 	bl	80050d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003d8e:	2019      	movs	r0, #25
 8003d90:	f001 f9ba 	bl	8005108 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003d94:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <HAL_InitTick+0xa0>)
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_InitTick+0xa0>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6453      	str	r3, [r2, #68]	; 0x44
 8003da0:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <HAL_InitTick+0xa0>)
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003dac:	f107 0210 	add.w	r2, r7, #16
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f002 f86c 	bl	8005e94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003dbc:	f002 f856 	bl	8005e6c <HAL_RCC_GetPCLK2Freq>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <HAL_InitTick+0xa4>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	0c9b      	lsrs	r3, r3, #18
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_InitTick+0xa8>)
 8003dd6:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <HAL_InitTick+0xac>)
 8003dd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_InitTick+0xa8>)
 8003ddc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003de0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003de2:	4a0e      	ldr	r2, [pc, #56]	; (8003e1c <HAL_InitTick+0xa8>)
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <HAL_InitTick+0xa8>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_InitTick+0xa8>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003df4:	4809      	ldr	r0, [pc, #36]	; (8003e1c <HAL_InitTick+0xa8>)
 8003df6:	f002 fca7 	bl	8006748 <HAL_TIM_Base_Init>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003e00:	4806      	ldr	r0, [pc, #24]	; (8003e1c <HAL_InitTick+0xa8>)
 8003e02:	f002 fd03 	bl	800680c <HAL_TIM_Base_Start_IT>
 8003e06:	4603      	mov	r3, r0
 8003e08:	e000      	b.n	8003e0c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3730      	adds	r7, #48	; 0x30
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	431bde83 	.word	0x431bde83
 8003e1c:	20000f70 	.word	0x20000f70
 8003e20:	40010000 	.word	0x40010000

08003e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e36:	e7fe      	b.n	8003e36 <HardFault_Handler+0x4>

08003e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e3c:	e7fe      	b.n	8003e3c <MemManage_Handler+0x4>

08003e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e42:	e7fe      	b.n	8003e42 <BusFault_Handler+0x4>

08003e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <UsageFault_Handler+0x4>

08003e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e5c:	4802      	ldr	r0, [pc, #8]	; (8003e68 <CAN1_TX_IRQHandler+0x10>)
 8003e5e:	f000 fe45 	bl	8004aec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000f40 	.word	0x20000f40

08003e6c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003e72:	480a      	ldr	r0, [pc, #40]	; (8003e9c <CAN1_RX0_IRQHandler+0x30>)
 8003e74:	f000 fe3a 	bl	8004aec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  //CAN1_irq_receive();
  CAN_RxHeaderTypeDef header;
  uint8_t u8Data[8];
  if (HAL_CAN_GetRxMessage(&hcan1, 0, &header, u8Data) != HAL_OK)
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	f107 020c 	add.w	r2, r7, #12
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4806      	ldr	r0, [pc, #24]	; (8003e9c <CAN1_RX0_IRQHandler+0x30>)
 8003e82:	f000 fcfb 	bl	800487c <HAL_CAN_GetRxMessage>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <CAN1_RX0_IRQHandler+0x26>
  {
     asm("NOP");
 8003e8c:	bf00      	nop
     asm("NOP");
 8003e8e:	bf00      	nop
     asm("NOP");
 8003e90:	bf00      	nop
  }
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	3728      	adds	r7, #40	; 0x28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000f40 	.word	0x20000f40

08003ea0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ea4:	4802      	ldr	r0, [pc, #8]	; (8003eb0 <CAN1_RX1_IRQHandler+0x10>)
 8003ea6:	f000 fe21 	bl	8004aec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
  //CAN1_irq_receive();
  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000f40 	.word	0x20000f40

08003eb4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003eb8:	4802      	ldr	r0, [pc, #8]	; (8003ec4 <CAN1_SCE_IRQHandler+0x10>)
 8003eba:	f000 fe17 	bl	8004aec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000f40 	.word	0x20000f40

08003ec8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ecc:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003ece:	f002 fd15 	bl	80068fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000f70 	.word	0x20000f70

08003edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
	return 1;
 8003ee0:	2301      	movs	r3, #1
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <_kill>:

int _kill(int pid, int sig)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ef6:	f006 ff19 	bl	800ad2c <__errno>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2216      	movs	r2, #22
 8003efe:	601a      	str	r2, [r3, #0]
	return -1;
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_exit>:

void _exit (int status)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f14:	f04f 31ff 	mov.w	r1, #4294967295
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ffe7 	bl	8003eec <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f1e:	e7fe      	b.n	8003f1e <_exit+0x12>

08003f20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e00a      	b.n	8003f48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f32:	f3af 8000 	nop.w
 8003f36:	4601      	mov	r1, r0
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	60ba      	str	r2, [r7, #8]
 8003f3e:	b2ca      	uxtb	r2, r1
 8003f40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	3301      	adds	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	dbf0      	blt.n	8003f32 <_read+0x12>
	}

return len;
 8003f50:	687b      	ldr	r3, [r7, #4]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b086      	sub	sp, #24
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	e009      	b.n	8003f80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	60ba      	str	r2, [r7, #8]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	dbf1      	blt.n	8003f6c <_write+0x12>
	}
	return len;
 8003f88:	687b      	ldr	r3, [r7, #4]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_close>:

int _close(int file)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
	return -1;
 8003f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fba:	605a      	str	r2, [r3, #4]
	return 0;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <_isatty>:

int _isatty(int file)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
	return 1;
 8003fd2:	2301      	movs	r3, #1
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
	return 0;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004000:	4b08      	ldr	r3, [pc, #32]	; (8004024 <SystemInit+0x28>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	4a07      	ldr	r2, [pc, #28]	; (8004024 <SystemInit+0x28>)
 8004008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800400c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <SystemInit+0x28>)
 8004012:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004016:	609a      	str	r2, [r3, #8]
#endif
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800402c:	4b14      	ldr	r3, [pc, #80]	; (8004080 <MX_USART3_UART_Init+0x58>)
 800402e:	4a15      	ldr	r2, [pc, #84]	; (8004084 <MX_USART3_UART_Init+0x5c>)
 8004030:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <MX_USART3_UART_Init+0x58>)
 8004034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004038:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <MX_USART3_UART_Init+0x58>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004040:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <MX_USART3_UART_Init+0x58>)
 8004042:	2200      	movs	r2, #0
 8004044:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004046:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <MX_USART3_UART_Init+0x58>)
 8004048:	2200      	movs	r2, #0
 800404a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <MX_USART3_UART_Init+0x58>)
 800404e:	220c      	movs	r2, #12
 8004050:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <MX_USART3_UART_Init+0x58>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <MX_USART3_UART_Init+0x58>)
 800405a:	2200      	movs	r2, #0
 800405c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <MX_USART3_UART_Init+0x58>)
 8004060:	2200      	movs	r2, #0
 8004062:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <MX_USART3_UART_Init+0x58>)
 8004066:	2200      	movs	r2, #0
 8004068:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800406a:	4805      	ldr	r0, [pc, #20]	; (8004080 <MX_USART3_UART_Init+0x58>)
 800406c:	f002 fe4c 	bl	8006d08 <HAL_UART_Init>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004076:	f7ff fe51 	bl	8003d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000fbc 	.word	0x20000fbc
 8004084:	40004800 	.word	0x40004800

08004088 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	; 0x28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a17      	ldr	r2, [pc, #92]	; (8004104 <HAL_UART_MspInit+0x7c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d128      	bne.n	80040fc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <HAL_UART_MspInit+0x80>)
 80040ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ae:	4a16      	ldr	r2, [pc, #88]	; (8004108 <HAL_UART_MspInit+0x80>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b4:	6413      	str	r3, [r2, #64]	; 0x40
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_UART_MspInit+0x80>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <HAL_UART_MspInit+0x80>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4a10      	ldr	r2, [pc, #64]	; (8004108 <HAL_UART_MspInit+0x80>)
 80040c8:	f043 0308 	orr.w	r3, r3, #8
 80040cc:	6313      	str	r3, [r2, #48]	; 0x30
 80040ce:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <HAL_UART_MspInit+0x80>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80040da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e0:	2302      	movs	r3, #2
 80040e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e8:	2303      	movs	r3, #3
 80040ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040ec:	2307      	movs	r3, #7
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	4619      	mov	r1, r3
 80040f6:	4805      	ldr	r0, [pc, #20]	; (800410c <HAL_UART_MspInit+0x84>)
 80040f8:	f001 f814 	bl	8005124 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80040fc:	bf00      	nop
 80040fe:	3728      	adds	r7, #40	; 0x28
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40004800 	.word	0x40004800
 8004108:	40023800 	.word	0x40023800
 800410c:	40020c00 	.word	0x40020c00

08004110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004148 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004114:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004116:	e003      	b.n	8004120 <LoopCopyDataInit>

08004118 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800411a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800411c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800411e:	3104      	adds	r1, #4

08004120 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004120:	480b      	ldr	r0, [pc, #44]	; (8004150 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004124:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004126:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004128:	d3f6      	bcc.n	8004118 <CopyDataInit>
  ldr  r2, =_sbss
 800412a:	4a0b      	ldr	r2, [pc, #44]	; (8004158 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800412c:	e002      	b.n	8004134 <LoopFillZerobss>

0800412e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800412e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004130:	f842 3b04 	str.w	r3, [r2], #4

08004134 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004136:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004138:	d3f9      	bcc.n	800412e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800413a:	f7ff ff5f 	bl	8003ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800413e:	f006 fef1 	bl	800af24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004142:	f7ff fd39 	bl	8003bb8 <main>
  bx  lr    
 8004146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004148:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800414c:	0800c4cc 	.word	0x0800c4cc
  ldr  r0, =_sdata
 8004150:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004154:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8004158:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800415c:	20001094 	.word	0x20001094

08004160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004160:	e7fe      	b.n	8004160 <ADC_IRQHandler>

08004162 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004166:	2003      	movs	r0, #3
 8004168:	f000 ffa7 	bl	80050ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800416c:	2000      	movs	r0, #0
 800416e:	f7ff fe01 	bl	8003d74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004172:	f7ff fdd7 	bl	8003d24 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004180:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_IncTick+0x20>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <HAL_IncTick+0x24>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4413      	add	r3, r2
 800418c:	4a04      	ldr	r2, [pc, #16]	; (80041a0 <HAL_IncTick+0x24>)
 800418e:	6013      	str	r3, [r2, #0]
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	2000000c 	.word	0x2000000c
 80041a0:	20001040 	.word	0x20001040

080041a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return uwTick;
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <HAL_GetTick+0x14>)
 80041aa:	681b      	ldr	r3, [r3, #0]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20001040 	.word	0x20001040

080041bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0ed      	b.n	80043aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fb02 	bl	80037e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0202 	bic.w	r2, r2, #2
 80041ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041f0:	f7ff ffd8 	bl	80041a4 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80041f6:	e012      	b.n	800421e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041f8:	f7ff ffd4 	bl	80041a4 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b0a      	cmp	r3, #10
 8004204:	d90b      	bls.n	800421e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2205      	movs	r2, #5
 8004216:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e0c5      	b.n	80043aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e5      	bne.n	80041f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800423c:	f7ff ffb2 	bl	80041a4 <HAL_GetTick>
 8004240:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004242:	e012      	b.n	800426a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004244:	f7ff ffae 	bl	80041a4 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b0a      	cmp	r3, #10
 8004250:	d90b      	bls.n	800426a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2205      	movs	r2, #5
 8004262:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e09f      	b.n	80043aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0e5      	beq.n	8004244 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7e1b      	ldrb	r3, [r3, #24]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d108      	bne.n	8004292 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e007      	b.n	80042a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	7e5b      	ldrb	r3, [r3, #25]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d108      	bne.n	80042bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e007      	b.n	80042cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7e9b      	ldrb	r3, [r3, #26]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d108      	bne.n	80042e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0220 	orr.w	r2, r2, #32
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e007      	b.n	80042f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0220 	bic.w	r2, r2, #32
 80042f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7edb      	ldrb	r3, [r3, #27]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d108      	bne.n	8004310 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0210 	bic.w	r2, r2, #16
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e007      	b.n	8004320 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0210 	orr.w	r2, r2, #16
 800431e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	7f1b      	ldrb	r3, [r3, #28]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d108      	bne.n	800433a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0208 	orr.w	r2, r2, #8
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e007      	b.n	800434a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0208 	bic.w	r2, r2, #8
 8004348:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	7f5b      	ldrb	r3, [r3, #29]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d108      	bne.n	8004364 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0204 	orr.w	r2, r2, #4
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e007      	b.n	8004374 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0204 	bic.w	r2, r2, #4
 8004372:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	ea42 0103 	orr.w	r1, r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	1e5a      	subs	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d003      	beq.n	80043da <HAL_CAN_ConfigFilter+0x26>
 80043d2:	7cfb      	ldrb	r3, [r7, #19]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	f040 80c7 	bne.w	8004568 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a69      	ldr	r2, [pc, #420]	; (8004584 <HAL_CAN_ConfigFilter+0x1d0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d001      	beq.n	80043e8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80043e4:	4b68      	ldr	r3, [pc, #416]	; (8004588 <HAL_CAN_ConfigFilter+0x1d4>)
 80043e6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80043ee:	f043 0201 	orr.w	r2, r3, #1
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	4a63      	ldr	r2, [pc, #396]	; (8004588 <HAL_CAN_ConfigFilter+0x1d4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d111      	bne.n	8004424 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004406:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	431a      	orrs	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2201      	movs	r2, #1
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	43db      	mvns	r3, r3
 800443e:	401a      	ands	r2, r3
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d123      	bne.n	8004496 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	43db      	mvns	r3, r3
 8004458:	401a      	ands	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004470:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	3248      	adds	r2, #72	; 0x48
 8004476:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800448a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800448c:	6979      	ldr	r1, [r7, #20]
 800448e:	3348      	adds	r3, #72	; 0x48
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	440b      	add	r3, r1
 8004494:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d122      	bne.n	80044e4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80044be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	3248      	adds	r2, #72	; 0x48
 80044c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80044d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80044da:	6979      	ldr	r1, [r7, #20]
 80044dc:	3348      	adds	r3, #72	; 0x48
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	440b      	add	r3, r1
 80044e2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d109      	bne.n	8004500 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	43db      	mvns	r3, r3
 80044f6:	401a      	ands	r2, r3
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80044fe:	e007      	b.n	8004510 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	431a      	orrs	r2, r3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d109      	bne.n	800452c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	43db      	mvns	r3, r3
 8004522:	401a      	ands	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800452a:	e007      	b.n	800453c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	431a      	orrs	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d107      	bne.n	8004554 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	431a      	orrs	r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800455a:	f023 0201 	bic.w	r2, r3, #1
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	e006      	b.n	8004576 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
  }
}
 8004576:	4618      	mov	r0, r3
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40003400 	.word	0x40003400
 8004588:	40006400 	.word	0x40006400

0800458c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d12e      	bne.n	80045fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045b8:	f7ff fdf4 	bl	80041a4 <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80045be:	e012      	b.n	80045e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045c0:	f7ff fdf0 	bl	80041a4 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b0a      	cmp	r3, #10
 80045cc:	d90b      	bls.n	80045e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2205      	movs	r2, #5
 80045de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e012      	b.n	800460c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e5      	bne.n	80045c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e006      	b.n	800460c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004614:	b480      	push	{r7}
 8004616:	b089      	sub	sp, #36	; 0x24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004628:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004632:	7ffb      	ldrb	r3, [r7, #31]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d003      	beq.n	8004640 <HAL_CAN_AddTxMessage+0x2c>
 8004638:	7ffb      	ldrb	r3, [r7, #31]
 800463a:	2b02      	cmp	r3, #2
 800463c:	f040 80b8 	bne.w	80047b0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80a0 	beq.w	80047a0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	0e1b      	lsrs	r3, r3, #24
 8004664:	f003 0303 	and.w	r3, r3, #3
 8004668:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d907      	bls.n	8004680 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e09e      	b.n	80047be <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004680:	2201      	movs	r2, #1
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	409a      	lsls	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10d      	bne.n	80046ae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800469c:	68f9      	ldr	r1, [r7, #12]
 800469e:	6809      	ldr	r1, [r1, #0]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	3318      	adds	r3, #24
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	440b      	add	r3, r1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e00f      	b.n	80046ce <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046be:	68f9      	ldr	r1, [r7, #12]
 80046c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80046c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	3318      	adds	r3, #24
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	440b      	add	r3, r1
 80046cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	3318      	adds	r3, #24
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	440b      	add	r3, r1
 80046de:	3304      	adds	r3, #4
 80046e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	7d1b      	ldrb	r3, [r3, #20]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d111      	bne.n	800470e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	3318      	adds	r3, #24
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	4413      	add	r3, r2
 80046f6:	3304      	adds	r3, #4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	6811      	ldr	r1, [r2, #0]
 80046fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	3318      	adds	r3, #24
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	440b      	add	r3, r1
 800470a:	3304      	adds	r3, #4
 800470c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3307      	adds	r3, #7
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	061a      	lsls	r2, r3, #24
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3306      	adds	r3, #6
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3305      	adds	r3, #5
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	4313      	orrs	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	3204      	adds	r2, #4
 800472e:	7812      	ldrb	r2, [r2, #0]
 8004730:	4610      	mov	r0, r2
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	6811      	ldr	r1, [r2, #0]
 8004736:	ea43 0200 	orr.w	r2, r3, r0
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	440b      	add	r3, r1
 8004740:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004744:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3303      	adds	r3, #3
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	061a      	lsls	r2, r3, #24
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3302      	adds	r3, #2
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3301      	adds	r3, #1
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	4313      	orrs	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	7812      	ldrb	r2, [r2, #0]
 8004766:	4610      	mov	r0, r2
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	6811      	ldr	r1, [r2, #0]
 800476c:	ea43 0200 	orr.w	r2, r3, r0
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	440b      	add	r3, r1
 8004776:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800477a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	3318      	adds	r3, #24
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	4413      	add	r3, r2
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	6811      	ldr	r1, [r2, #0]
 800478e:	f043 0201 	orr.w	r2, r3, #1
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	3318      	adds	r3, #24
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	440b      	add	r3, r1
 800479a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e00e      	b.n	80047be <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e006      	b.n	80047be <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
  }
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3724      	adds	r7, #36	; 0x24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047dc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80047de:	7afb      	ldrb	r3, [r7, #11]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d002      	beq.n	80047ea <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80047e4:	7afb      	ldrb	r3, [r7, #11]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d11d      	bne.n	8004826 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3301      	adds	r3, #1
 8004810:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004826:	68fb      	ldr	r3, [r7, #12]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004848:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800484a:	7afb      	ldrb	r3, [r7, #11]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d002      	beq.n	8004856 <HAL_CAN_IsTxMessagePending+0x22>
 8004850:	7afb      	ldrb	r3, [r7, #11]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d10b      	bne.n	800486e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	069b      	lsls	r3, r3, #26
 8004860:	401a      	ands	r2, r3
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	069b      	lsls	r3, r3, #26
 8004866:	429a      	cmp	r2, r3
 8004868:	d001      	beq.n	800486e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800486a:	2301      	movs	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800486e:	68fb      	ldr	r3, [r7, #12]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004890:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004892:	7dfb      	ldrb	r3, [r7, #23]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d003      	beq.n	80048a0 <HAL_CAN_GetRxMessage+0x24>
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b02      	cmp	r3, #2
 800489c:	f040 80f3 	bne.w	8004a86 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10e      	bne.n	80048c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d116      	bne.n	80048e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0e7      	b.n	8004a94 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d107      	bne.n	80048e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e0d8      	b.n	8004a94 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	331b      	adds	r3, #27
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	4413      	add	r3, r2
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0204 	and.w	r2, r3, #4
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10c      	bne.n	800491a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	331b      	adds	r3, #27
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	4413      	add	r3, r2
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	0d5b      	lsrs	r3, r3, #21
 8004910:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e00b      	b.n	8004932 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	331b      	adds	r3, #27
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	4413      	add	r3, r2
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	331b      	adds	r3, #27
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	4413      	add	r3, r2
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0202 	and.w	r2, r3, #2
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	331b      	adds	r3, #27
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	4413      	add	r3, r2
 8004954:	3304      	adds	r3, #4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 020f 	and.w	r2, r3, #15
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	331b      	adds	r3, #27
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	4413      	add	r3, r2
 800496c:	3304      	adds	r3, #4
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	b2da      	uxtb	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	331b      	adds	r3, #27
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	4413      	add	r3, r2
 8004984:	3304      	adds	r3, #4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	0c1b      	lsrs	r3, r3, #16
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	4413      	add	r3, r2
 800499a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	0a1a      	lsrs	r2, r3, #8
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	0c1a      	lsrs	r2, r3, #16
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	3302      	adds	r3, #2
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	0e1a      	lsrs	r2, r3, #24
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	3303      	adds	r3, #3
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	3304      	adds	r3, #4
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	0a1a      	lsrs	r2, r3, #8
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	3305      	adds	r3, #5
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	0c1a      	lsrs	r2, r3, #16
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	3306      	adds	r3, #6
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0e1a      	lsrs	r2, r3, #24
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	3307      	adds	r3, #7
 8004a56:	b2d2      	uxtb	r2, r2
 8004a58:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d108      	bne.n	8004a72 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0220 	orr.w	r2, r2, #32
 8004a6e:	60da      	str	r2, [r3, #12]
 8004a70:	e007      	b.n	8004a82 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0220 	orr.w	r2, r2, #32
 8004a80:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e006      	b.n	8004a94 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
  }
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ab0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d002      	beq.n	8004abe <HAL_CAN_ActivateNotification+0x1e>
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d109      	bne.n	8004ad2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6959      	ldr	r1, [r3, #20]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e006      	b.n	8004ae0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
  }
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004af4:	2300      	movs	r3, #0
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d07c      	beq.n	8004c2c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d023      	beq.n	8004b84 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2201      	movs	r2, #1
 8004b42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f983 	bl	8004e5a <HAL_CAN_TxMailbox0CompleteCallback>
 8004b54:	e016      	b.n	8004b84 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
 8004b68:	e00c      	b.n	8004b84 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d004      	beq.n	8004b7e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7c:	e002      	b.n	8004b84 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f989 	bl	8004e96 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d024      	beq.n	8004bd8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f963 	bl	8004e6e <HAL_CAN_TxMailbox1CompleteCallback>
 8004ba8:	e016      	b.n	8004bd8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004bba:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbc:	e00c      	b.n	8004bd8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d004      	beq.n	8004bd2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd0:	e002      	b.n	8004bd8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f969 	bl	8004eaa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d024      	beq.n	8004c2c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f943 	bl	8004e82 <HAL_CAN_TxMailbox2CompleteCallback>
 8004bfc:	e016      	b.n	8004c2c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d004      	beq.n	8004c12 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c10:	e00c      	b.n	8004c2c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
 8004c24:	e002      	b.n	8004c2c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f949 	bl	8004ebe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00b      	beq.n	8004c72 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d006      	beq.n	8004c72 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f93a 	bl	8004ee6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f921 	bl	8004ed2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00c      	beq.n	8004cb4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2210      	movs	r2, #16
 8004cb2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00b      	beq.n	8004cd6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2208      	movs	r2, #8
 8004cce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f91c 	bl	8004f0e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d009      	beq.n	8004cf4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f903 	bl	8004efa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d006      	beq.n	8004d16 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2210      	movs	r2, #16
 8004d0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f906 	bl	8004f22 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00b      	beq.n	8004d38 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d006      	beq.n	8004d38 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2208      	movs	r2, #8
 8004d30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f8ff 	bl	8004f36 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d07b      	beq.n	8004e3a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d072      	beq.n	8004e32 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	f043 0302 	orr.w	r3, r3, #2
 8004d82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d043      	beq.n	8004e32 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d03e      	beq.n	8004e32 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dba:	2b60      	cmp	r3, #96	; 0x60
 8004dbc:	d02b      	beq.n	8004e16 <HAL_CAN_IRQHandler+0x32a>
 8004dbe:	2b60      	cmp	r3, #96	; 0x60
 8004dc0:	d82e      	bhi.n	8004e20 <HAL_CAN_IRQHandler+0x334>
 8004dc2:	2b50      	cmp	r3, #80	; 0x50
 8004dc4:	d022      	beq.n	8004e0c <HAL_CAN_IRQHandler+0x320>
 8004dc6:	2b50      	cmp	r3, #80	; 0x50
 8004dc8:	d82a      	bhi.n	8004e20 <HAL_CAN_IRQHandler+0x334>
 8004dca:	2b40      	cmp	r3, #64	; 0x40
 8004dcc:	d019      	beq.n	8004e02 <HAL_CAN_IRQHandler+0x316>
 8004dce:	2b40      	cmp	r3, #64	; 0x40
 8004dd0:	d826      	bhi.n	8004e20 <HAL_CAN_IRQHandler+0x334>
 8004dd2:	2b30      	cmp	r3, #48	; 0x30
 8004dd4:	d010      	beq.n	8004df8 <HAL_CAN_IRQHandler+0x30c>
 8004dd6:	2b30      	cmp	r3, #48	; 0x30
 8004dd8:	d822      	bhi.n	8004e20 <HAL_CAN_IRQHandler+0x334>
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d002      	beq.n	8004de4 <HAL_CAN_IRQHandler+0x2f8>
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d005      	beq.n	8004dee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004de2:	e01d      	b.n	8004e20 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f043 0308 	orr.w	r3, r3, #8
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004dec:	e019      	b.n	8004e22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	f043 0310 	orr.w	r3, r3, #16
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004df6:	e014      	b.n	8004e22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	f043 0320 	orr.w	r3, r3, #32
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e00:	e00f      	b.n	8004e22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e0a:	e00a      	b.n	8004e22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e14:	e005      	b.n	8004e22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e1e:	e000      	b.n	8004e22 <HAL_CAN_IRQHandler+0x336>
            break;
 8004e20:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004e30:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2204      	movs	r2, #4
 8004e38:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f87c 	bl	8004f4a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e52:	bf00      	nop
 8004e54:	3728      	adds	r7, #40	; 0x28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f8e:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <__NVIC_SetPriorityGrouping+0x40>)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	60d3      	str	r3, [r2, #12]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	e000ed00 	.word	0xe000ed00
 8004fa4:	05fa0000 	.word	0x05fa0000

08004fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fac:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	0a1b      	lsrs	r3, r3, #8
 8004fb2:	f003 0307 	and.w	r3, r3, #7
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	e000ed00 	.word	0xe000ed00

08004fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	db0b      	blt.n	8004fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	f003 021f 	and.w	r2, r3, #31
 8004fdc:	4907      	ldr	r1, [pc, #28]	; (8004ffc <__NVIC_EnableIRQ+0x38>)
 8004fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000e100 	.word	0xe000e100

08005000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800500c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005010:	2b00      	cmp	r3, #0
 8005012:	db0a      	blt.n	800502a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	490c      	ldr	r1, [pc, #48]	; (800504c <__NVIC_SetPriority+0x4c>)
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	0112      	lsls	r2, r2, #4
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	440b      	add	r3, r1
 8005024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005028:	e00a      	b.n	8005040 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	b2da      	uxtb	r2, r3
 800502e:	4908      	ldr	r1, [pc, #32]	; (8005050 <__NVIC_SetPriority+0x50>)
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	3b04      	subs	r3, #4
 8005038:	0112      	lsls	r2, r2, #4
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	440b      	add	r3, r1
 800503e:	761a      	strb	r2, [r3, #24]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000e100 	.word	0xe000e100
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	; 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f1c3 0307 	rsb	r3, r3, #7
 800506e:	2b04      	cmp	r3, #4
 8005070:	bf28      	it	cs
 8005072:	2304      	movcs	r3, #4
 8005074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	3304      	adds	r3, #4
 800507a:	2b06      	cmp	r3, #6
 800507c:	d902      	bls.n	8005084 <NVIC_EncodePriority+0x30>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3b03      	subs	r3, #3
 8005082:	e000      	b.n	8005086 <NVIC_EncodePriority+0x32>
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005088:	f04f 32ff 	mov.w	r2, #4294967295
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43da      	mvns	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	401a      	ands	r2, r3
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800509c:	f04f 31ff 	mov.w	r1, #4294967295
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	fa01 f303 	lsl.w	r3, r1, r3
 80050a6:	43d9      	mvns	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050ac:	4313      	orrs	r3, r2
         );
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3724      	adds	r7, #36	; 0x24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff ff4c 	bl	8004f60 <__NVIC_SetPriorityGrouping>
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050e2:	f7ff ff61 	bl	8004fa8 <__NVIC_GetPriorityGrouping>
 80050e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	6978      	ldr	r0, [r7, #20]
 80050ee:	f7ff ffb1 	bl	8005054 <NVIC_EncodePriority>
 80050f2:	4602      	mov	r2, r0
 80050f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff ff80 	bl	8005000 <__NVIC_SetPriority>
}
 8005100:	bf00      	nop
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff ff54 	bl	8004fc4 <__NVIC_EnableIRQ>
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005124:	b480      	push	{r7}
 8005126:	b089      	sub	sp, #36	; 0x24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	e175      	b.n	8005430 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005144:	2201      	movs	r2, #1
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4013      	ands	r3, r2
 8005156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	f040 8164 	bne.w	800542a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d00b      	beq.n	8005182 <HAL_GPIO_Init+0x5e>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d007      	beq.n	8005182 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005176:	2b11      	cmp	r3, #17
 8005178:	d003      	beq.n	8005182 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b12      	cmp	r3, #18
 8005180:	d130      	bne.n	80051e4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	2203      	movs	r2, #3
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051b8:	2201      	movs	r2, #1
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f003 0201 	and.w	r2, r3, #1
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4313      	orrs	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	2203      	movs	r2, #3
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	43db      	mvns	r3, r3
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4013      	ands	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x100>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b12      	cmp	r3, #18
 8005222:	d123      	bne.n	800526c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	08da      	lsrs	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3208      	adds	r2, #8
 800522c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	220f      	movs	r2, #15
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	08da      	lsrs	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3208      	adds	r2, #8
 8005266:	69b9      	ldr	r1, [r7, #24]
 8005268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	2203      	movs	r2, #3
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 0203 	and.w	r2, r3, #3
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4313      	orrs	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80be 	beq.w	800542a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ae:	4b66      	ldr	r3, [pc, #408]	; (8005448 <HAL_GPIO_Init+0x324>)
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	4a65      	ldr	r2, [pc, #404]	; (8005448 <HAL_GPIO_Init+0x324>)
 80052b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052b8:	6453      	str	r3, [r2, #68]	; 0x44
 80052ba:	4b63      	ldr	r3, [pc, #396]	; (8005448 <HAL_GPIO_Init+0x324>)
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80052c6:	4a61      	ldr	r2, [pc, #388]	; (800544c <HAL_GPIO_Init+0x328>)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	089b      	lsrs	r3, r3, #2
 80052cc:	3302      	adds	r3, #2
 80052ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	220f      	movs	r2, #15
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	43db      	mvns	r3, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4013      	ands	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a58      	ldr	r2, [pc, #352]	; (8005450 <HAL_GPIO_Init+0x32c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d037      	beq.n	8005362 <HAL_GPIO_Init+0x23e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a57      	ldr	r2, [pc, #348]	; (8005454 <HAL_GPIO_Init+0x330>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d031      	beq.n	800535e <HAL_GPIO_Init+0x23a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a56      	ldr	r2, [pc, #344]	; (8005458 <HAL_GPIO_Init+0x334>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02b      	beq.n	800535a <HAL_GPIO_Init+0x236>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a55      	ldr	r2, [pc, #340]	; (800545c <HAL_GPIO_Init+0x338>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d025      	beq.n	8005356 <HAL_GPIO_Init+0x232>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a54      	ldr	r2, [pc, #336]	; (8005460 <HAL_GPIO_Init+0x33c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01f      	beq.n	8005352 <HAL_GPIO_Init+0x22e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a53      	ldr	r2, [pc, #332]	; (8005464 <HAL_GPIO_Init+0x340>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d019      	beq.n	800534e <HAL_GPIO_Init+0x22a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a52      	ldr	r2, [pc, #328]	; (8005468 <HAL_GPIO_Init+0x344>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <HAL_GPIO_Init+0x226>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a51      	ldr	r2, [pc, #324]	; (800546c <HAL_GPIO_Init+0x348>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00d      	beq.n	8005346 <HAL_GPIO_Init+0x222>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a50      	ldr	r2, [pc, #320]	; (8005470 <HAL_GPIO_Init+0x34c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d007      	beq.n	8005342 <HAL_GPIO_Init+0x21e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a4f      	ldr	r2, [pc, #316]	; (8005474 <HAL_GPIO_Init+0x350>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d101      	bne.n	800533e <HAL_GPIO_Init+0x21a>
 800533a:	2309      	movs	r3, #9
 800533c:	e012      	b.n	8005364 <HAL_GPIO_Init+0x240>
 800533e:	230a      	movs	r3, #10
 8005340:	e010      	b.n	8005364 <HAL_GPIO_Init+0x240>
 8005342:	2308      	movs	r3, #8
 8005344:	e00e      	b.n	8005364 <HAL_GPIO_Init+0x240>
 8005346:	2307      	movs	r3, #7
 8005348:	e00c      	b.n	8005364 <HAL_GPIO_Init+0x240>
 800534a:	2306      	movs	r3, #6
 800534c:	e00a      	b.n	8005364 <HAL_GPIO_Init+0x240>
 800534e:	2305      	movs	r3, #5
 8005350:	e008      	b.n	8005364 <HAL_GPIO_Init+0x240>
 8005352:	2304      	movs	r3, #4
 8005354:	e006      	b.n	8005364 <HAL_GPIO_Init+0x240>
 8005356:	2303      	movs	r3, #3
 8005358:	e004      	b.n	8005364 <HAL_GPIO_Init+0x240>
 800535a:	2302      	movs	r3, #2
 800535c:	e002      	b.n	8005364 <HAL_GPIO_Init+0x240>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_GPIO_Init+0x240>
 8005362:	2300      	movs	r3, #0
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	f002 0203 	and.w	r2, r2, #3
 800536a:	0092      	lsls	r2, r2, #2
 800536c:	4093      	lsls	r3, r2
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4313      	orrs	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005374:	4935      	ldr	r1, [pc, #212]	; (800544c <HAL_GPIO_Init+0x328>)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	089b      	lsrs	r3, r3, #2
 800537a:	3302      	adds	r3, #2
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005382:	4b3d      	ldr	r3, [pc, #244]	; (8005478 <HAL_GPIO_Init+0x354>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	43db      	mvns	r3, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4013      	ands	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053a6:	4a34      	ldr	r2, [pc, #208]	; (8005478 <HAL_GPIO_Init+0x354>)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80053ac:	4b32      	ldr	r3, [pc, #200]	; (8005478 <HAL_GPIO_Init+0x354>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053d0:	4a29      	ldr	r2, [pc, #164]	; (8005478 <HAL_GPIO_Init+0x354>)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053d6:	4b28      	ldr	r3, [pc, #160]	; (8005478 <HAL_GPIO_Init+0x354>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	43db      	mvns	r3, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053fa:	4a1f      	ldr	r2, [pc, #124]	; (8005478 <HAL_GPIO_Init+0x354>)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005400:	4b1d      	ldr	r3, [pc, #116]	; (8005478 <HAL_GPIO_Init+0x354>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	43db      	mvns	r3, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4013      	ands	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005424:	4a14      	ldr	r2, [pc, #80]	; (8005478 <HAL_GPIO_Init+0x354>)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3301      	adds	r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b0f      	cmp	r3, #15
 8005434:	f67f ae86 	bls.w	8005144 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3724      	adds	r7, #36	; 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	40013800 	.word	0x40013800
 8005450:	40020000 	.word	0x40020000
 8005454:	40020400 	.word	0x40020400
 8005458:	40020800 	.word	0x40020800
 800545c:	40020c00 	.word	0x40020c00
 8005460:	40021000 	.word	0x40021000
 8005464:	40021400 	.word	0x40021400
 8005468:	40021800 	.word	0x40021800
 800546c:	40021c00 	.word	0x40021c00
 8005470:	40022000 	.word	0x40022000
 8005474:	40022400 	.word	0x40022400
 8005478:	40013c00 	.word	0x40013c00

0800547c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	887b      	ldrh	r3, [r7, #2]
 800548e:	4013      	ands	r3, r2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
 8005498:	e001      	b.n	800549e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800549e:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	807b      	strh	r3, [r7, #2]
 80054b8:	4613      	mov	r3, r2
 80054ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054bc:	787b      	ldrb	r3, [r7, #1]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054c2:	887a      	ldrh	r2, [r7, #2]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80054c8:	e003      	b.n	80054d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80054ca:	887b      	ldrh	r3, [r7, #2]
 80054cc:	041a      	lsls	r2, r3, #16
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	619a      	str	r2, [r3, #24]
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	460b      	mov	r3, r1
 80054e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054f0:	887a      	ldrh	r2, [r7, #2]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4013      	ands	r3, r2
 80054f6:	041a      	lsls	r2, r3, #16
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	43d9      	mvns	r1, r3
 80054fc:	887b      	ldrh	r3, [r7, #2]
 80054fe:	400b      	ands	r3, r1
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	619a      	str	r2, [r3, #24]
}
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a04      	ldr	r2, [pc, #16]	; (8005530 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800551e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005522:	6013      	str	r3, [r2, #0]
}
 8005524:	bf00      	nop
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40007000 	.word	0x40007000

08005534 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800553c:	2300      	movs	r3, #0
 800553e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e29b      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 8087 	beq.w	8005666 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005558:	4b96      	ldr	r3, [pc, #600]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 030c 	and.w	r3, r3, #12
 8005560:	2b04      	cmp	r3, #4
 8005562:	d00c      	beq.n	800557e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005564:	4b93      	ldr	r3, [pc, #588]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b08      	cmp	r3, #8
 800556e:	d112      	bne.n	8005596 <HAL_RCC_OscConfig+0x62>
 8005570:	4b90      	ldr	r3, [pc, #576]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800557c:	d10b      	bne.n	8005596 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557e:	4b8d      	ldr	r3, [pc, #564]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d06c      	beq.n	8005664 <HAL_RCC_OscConfig+0x130>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d168      	bne.n	8005664 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e275      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559e:	d106      	bne.n	80055ae <HAL_RCC_OscConfig+0x7a>
 80055a0:	4b84      	ldr	r3, [pc, #528]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a83      	ldr	r2, [pc, #524]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	e02e      	b.n	800560c <HAL_RCC_OscConfig+0xd8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCC_OscConfig+0x9c>
 80055b6:	4b7f      	ldr	r3, [pc, #508]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a7e      	ldr	r2, [pc, #504]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	4b7c      	ldr	r3, [pc, #496]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a7b      	ldr	r2, [pc, #492]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	e01d      	b.n	800560c <HAL_RCC_OscConfig+0xd8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055d8:	d10c      	bne.n	80055f4 <HAL_RCC_OscConfig+0xc0>
 80055da:	4b76      	ldr	r3, [pc, #472]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a75      	ldr	r2, [pc, #468]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	4b73      	ldr	r3, [pc, #460]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a72      	ldr	r2, [pc, #456]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e00b      	b.n	800560c <HAL_RCC_OscConfig+0xd8>
 80055f4:	4b6f      	ldr	r3, [pc, #444]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a6e      	ldr	r2, [pc, #440]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	4b6c      	ldr	r3, [pc, #432]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a6b      	ldr	r2, [pc, #428]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800560a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d013      	beq.n	800563c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fe fdc6 	bl	80041a4 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800561c:	f7fe fdc2 	bl	80041a4 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	; 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e229      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562e:	4b61      	ldr	r3, [pc, #388]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0xe8>
 800563a:	e014      	b.n	8005666 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563c:	f7fe fdb2 	bl	80041a4 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005644:	f7fe fdae 	bl	80041a4 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b64      	cmp	r3, #100	; 0x64
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e215      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005656:	4b57      	ldr	r3, [pc, #348]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f0      	bne.n	8005644 <HAL_RCC_OscConfig+0x110>
 8005662:	e000      	b.n	8005666 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d069      	beq.n	8005746 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005672:	4b50      	ldr	r3, [pc, #320]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 030c 	and.w	r3, r3, #12
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800567e:	4b4d      	ldr	r3, [pc, #308]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 030c 	and.w	r3, r3, #12
 8005686:	2b08      	cmp	r3, #8
 8005688:	d11c      	bne.n	80056c4 <HAL_RCC_OscConfig+0x190>
 800568a:	4b4a      	ldr	r3, [pc, #296]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d116      	bne.n	80056c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005696:	4b47      	ldr	r3, [pc, #284]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_RCC_OscConfig+0x17a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d001      	beq.n	80056ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e1e9      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ae:	4b41      	ldr	r3, [pc, #260]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	493d      	ldr	r1, [pc, #244]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056c2:	e040      	b.n	8005746 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d023      	beq.n	8005714 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056cc:	4b39      	ldr	r3, [pc, #228]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a38      	ldr	r2, [pc, #224]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fe fd64 	bl	80041a4 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e0:	f7fe fd60 	bl	80041a4 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e1c7      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f2:	4b30      	ldr	r3, [pc, #192]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fe:	4b2d      	ldr	r3, [pc, #180]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4929      	ldr	r1, [pc, #164]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 800570e:	4313      	orrs	r3, r2
 8005710:	600b      	str	r3, [r1, #0]
 8005712:	e018      	b.n	8005746 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005714:	4b27      	ldr	r3, [pc, #156]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a26      	ldr	r2, [pc, #152]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005720:	f7fe fd40 	bl	80041a4 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005728:	f7fe fd3c 	bl	80041a4 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e1a3      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800573a:	4b1e      	ldr	r3, [pc, #120]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f0      	bne.n	8005728 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d038      	beq.n	80057c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d019      	beq.n	800578e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800575a:	4b16      	ldr	r3, [pc, #88]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 800575c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575e:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005766:	f7fe fd1d 	bl	80041a4 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800576e:	f7fe fd19 	bl	80041a4 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e180      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x23a>
 800578c:	e01a      	b.n	80057c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005792:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 8005794:	f023 0301 	bic.w	r3, r3, #1
 8005798:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579a:	f7fe fd03 	bl	80041a4 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a0:	e00a      	b.n	80057b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a2:	f7fe fcff 	bl	80041a4 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d903      	bls.n	80057b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e166      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
 80057b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b8:	4b92      	ldr	r3, [pc, #584]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80057ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1ee      	bne.n	80057a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80a4 	beq.w	800591a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057d2:	4b8c      	ldr	r3, [pc, #560]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10d      	bne.n	80057fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80057de:	4b89      	ldr	r3, [pc, #548]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	4a88      	ldr	r2, [pc, #544]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ea:	4b86      	ldr	r3, [pc, #536]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057fa:	4b83      	ldr	r3, [pc, #524]	; (8005a08 <HAL_RCC_OscConfig+0x4d4>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d118      	bne.n	8005838 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005806:	4b80      	ldr	r3, [pc, #512]	; (8005a08 <HAL_RCC_OscConfig+0x4d4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a7f      	ldr	r2, [pc, #508]	; (8005a08 <HAL_RCC_OscConfig+0x4d4>)
 800580c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005812:	f7fe fcc7 	bl	80041a4 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581a:	f7fe fcc3 	bl	80041a4 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b64      	cmp	r3, #100	; 0x64
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e12a      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800582c:	4b76      	ldr	r3, [pc, #472]	; (8005a08 <HAL_RCC_OscConfig+0x4d4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d106      	bne.n	800584e <HAL_RCC_OscConfig+0x31a>
 8005840:	4b70      	ldr	r3, [pc, #448]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	4a6f      	ldr	r2, [pc, #444]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	6713      	str	r3, [r2, #112]	; 0x70
 800584c:	e02d      	b.n	80058aa <HAL_RCC_OscConfig+0x376>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10c      	bne.n	8005870 <HAL_RCC_OscConfig+0x33c>
 8005856:	4b6b      	ldr	r3, [pc, #428]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	4a6a      	ldr	r2, [pc, #424]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6713      	str	r3, [r2, #112]	; 0x70
 8005862:	4b68      	ldr	r3, [pc, #416]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	4a67      	ldr	r2, [pc, #412]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005868:	f023 0304 	bic.w	r3, r3, #4
 800586c:	6713      	str	r3, [r2, #112]	; 0x70
 800586e:	e01c      	b.n	80058aa <HAL_RCC_OscConfig+0x376>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b05      	cmp	r3, #5
 8005876:	d10c      	bne.n	8005892 <HAL_RCC_OscConfig+0x35e>
 8005878:	4b62      	ldr	r3, [pc, #392]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	4a61      	ldr	r2, [pc, #388]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 800587e:	f043 0304 	orr.w	r3, r3, #4
 8005882:	6713      	str	r3, [r2, #112]	; 0x70
 8005884:	4b5f      	ldr	r3, [pc, #380]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	4a5e      	ldr	r2, [pc, #376]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6713      	str	r3, [r2, #112]	; 0x70
 8005890:	e00b      	b.n	80058aa <HAL_RCC_OscConfig+0x376>
 8005892:	4b5c      	ldr	r3, [pc, #368]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	4a5b      	ldr	r2, [pc, #364]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	6713      	str	r3, [r2, #112]	; 0x70
 800589e:	4b59      	ldr	r3, [pc, #356]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	4a58      	ldr	r2, [pc, #352]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80058a4:	f023 0304 	bic.w	r3, r3, #4
 80058a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d015      	beq.n	80058de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b2:	f7fe fc77 	bl	80041a4 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ba:	f7fe fc73 	bl	80041a4 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0d8      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d0:	4b4c      	ldr	r3, [pc, #304]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ee      	beq.n	80058ba <HAL_RCC_OscConfig+0x386>
 80058dc:	e014      	b.n	8005908 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058de:	f7fe fc61 	bl	80041a4 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e4:	e00a      	b.n	80058fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fe fc5d 	bl	80041a4 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d901      	bls.n	80058fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e0c2      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fc:	4b41      	ldr	r3, [pc, #260]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ee      	bne.n	80058e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800590e:	4b3d      	ldr	r3, [pc, #244]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	4a3c      	ldr	r2, [pc, #240]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005918:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 80ae 	beq.w	8005a80 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005924:	4b37      	ldr	r3, [pc, #220]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d06d      	beq.n	8005a0c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d14b      	bne.n	80059d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005938:	4b32      	ldr	r3, [pc, #200]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a31      	ldr	r2, [pc, #196]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 800593e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005944:	f7fe fc2e 	bl	80041a4 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800594c:	f7fe fc2a 	bl	80041a4 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e091      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800595e:	4b29      	ldr	r3, [pc, #164]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69da      	ldr	r2, [r3, #28]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	019b      	lsls	r3, r3, #6
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	3b01      	subs	r3, #1
 8005984:	041b      	lsls	r3, r3, #16
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	061b      	lsls	r3, r3, #24
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	071b      	lsls	r3, r3, #28
 8005996:	491b      	ldr	r1, [pc, #108]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 8005998:	4313      	orrs	r3, r2
 800599a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800599c:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a18      	ldr	r2, [pc, #96]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80059a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a8:	f7fe fbfc 	bl	80041a4 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b0:	f7fe fbf8 	bl	80041a4 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e05f      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c2:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0x47c>
 80059ce:	e057      	b.n	8005a80 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a0b      	ldr	r2, [pc, #44]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80059d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059dc:	f7fe fbe2 	bl	80041a4 <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e4:	f7fe fbde 	bl	80041a4 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e045      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f6:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <HAL_RCC_OscConfig+0x4d0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0x4b0>
 8005a02:	e03d      	b.n	8005a80 <HAL_RCC_OscConfig+0x54c>
 8005a04:	40023800 	.word	0x40023800
 8005a08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005a0c:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <HAL_RCC_OscConfig+0x558>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d030      	beq.n	8005a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d129      	bne.n	8005a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d122      	bne.n	8005a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d119      	bne.n	8005a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	3b01      	subs	r3, #1
 8005a56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d10f      	bne.n	8005a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d107      	bne.n	8005a7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d001      	beq.n	8005a80 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40023800 	.word	0x40023800

08005a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0d0      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aa8:	4b6a      	ldr	r3, [pc, #424]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d910      	bls.n	8005ad8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ab6:	4b67      	ldr	r3, [pc, #412]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f023 020f 	bic.w	r2, r3, #15
 8005abe:	4965      	ldr	r1, [pc, #404]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac6:	4b63      	ldr	r3, [pc, #396]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d001      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0b8      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d020      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af0:	4b59      	ldr	r3, [pc, #356]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	4a58      	ldr	r2, [pc, #352]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b08:	4b53      	ldr	r3, [pc, #332]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	4a52      	ldr	r2, [pc, #328]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b14:	4b50      	ldr	r3, [pc, #320]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	494d      	ldr	r1, [pc, #308]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d040      	beq.n	8005bb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d107      	bne.n	8005b4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3a:	4b47      	ldr	r3, [pc, #284]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d115      	bne.n	8005b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e07f      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d107      	bne.n	8005b62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b52:	4b41      	ldr	r3, [pc, #260]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d109      	bne.n	8005b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e073      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b62:	4b3d      	ldr	r3, [pc, #244]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e06b      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b72:	4b39      	ldr	r3, [pc, #228]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f023 0203 	bic.w	r2, r3, #3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	4936      	ldr	r1, [pc, #216]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b84:	f7fe fb0e 	bl	80041a4 <HAL_GetTick>
 8005b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8a:	e00a      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b8c:	f7fe fb0a 	bl	80041a4 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e053      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba2:	4b2d      	ldr	r3, [pc, #180]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 020c 	and.w	r2, r3, #12
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d1eb      	bne.n	8005b8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb4:	4b27      	ldr	r3, [pc, #156]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d210      	bcs.n	8005be4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f023 020f 	bic.w	r2, r3, #15
 8005bca:	4922      	ldr	r1, [pc, #136]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd2:	4b20      	ldr	r3, [pc, #128]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e032      	b.n	8005c4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d008      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf0:	4b19      	ldr	r3, [pc, #100]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4916      	ldr	r1, [pc, #88]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c0e:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	490e      	ldr	r1, [pc, #56]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c22:	f000 f821 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8005c26:	4602      	mov	r2, r0
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	091b      	lsrs	r3, r3, #4
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	490a      	ldr	r1, [pc, #40]	; (8005c5c <HAL_RCC_ClockConfig+0x1cc>)
 8005c34:	5ccb      	ldrb	r3, [r1, r3]
 8005c36:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <HAL_RCC_ClockConfig+0x1d0>)
 8005c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <HAL_RCC_ClockConfig+0x1d4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe f896 	bl	8003d74 <HAL_InitTick>

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40023c00 	.word	0x40023c00
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	0800bb94 	.word	0x0800bb94
 8005c60:	20000004 	.word	0x20000004
 8005c64:	20000008 	.word	0x20000008

08005c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	607b      	str	r3, [r7, #4]
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c80:	4b67      	ldr	r3, [pc, #412]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 030c 	and.w	r3, r3, #12
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d00d      	beq.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	f200 80bd 	bhi.w	8005e0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x34>
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c9a:	e0b7      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c9c:	4b61      	ldr	r3, [pc, #388]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c9e:	60bb      	str	r3, [r7, #8]
      break;
 8005ca0:	e0b7      	b.n	8005e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ca2:	4b61      	ldr	r3, [pc, #388]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005ca4:	60bb      	str	r3, [r7, #8]
      break;
 8005ca6:	e0b4      	b.n	8005e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ca8:	4b5d      	ldr	r3, [pc, #372]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cb0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005cb2:	4b5b      	ldr	r3, [pc, #364]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d04d      	beq.n	8005d5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cbe:	4b58      	ldr	r3, [pc, #352]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	099b      	lsrs	r3, r3, #6
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cce:	f04f 0100 	mov.w	r1, #0
 8005cd2:	ea02 0800 	and.w	r8, r2, r0
 8005cd6:	ea03 0901 	and.w	r9, r3, r1
 8005cda:	4640      	mov	r0, r8
 8005cdc:	4649      	mov	r1, r9
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	014b      	lsls	r3, r1, #5
 8005ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005cec:	0142      	lsls	r2, r0, #5
 8005cee:	4610      	mov	r0, r2
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	ebb0 0008 	subs.w	r0, r0, r8
 8005cf6:	eb61 0109 	sbc.w	r1, r1, r9
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	018b      	lsls	r3, r1, #6
 8005d04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d08:	0182      	lsls	r2, r0, #6
 8005d0a:	1a12      	subs	r2, r2, r0
 8005d0c:	eb63 0301 	sbc.w	r3, r3, r1
 8005d10:	f04f 0000 	mov.w	r0, #0
 8005d14:	f04f 0100 	mov.w	r1, #0
 8005d18:	00d9      	lsls	r1, r3, #3
 8005d1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d1e:	00d0      	lsls	r0, r2, #3
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	eb12 0208 	adds.w	r2, r2, r8
 8005d28:	eb43 0309 	adc.w	r3, r3, r9
 8005d2c:	f04f 0000 	mov.w	r0, #0
 8005d30:	f04f 0100 	mov.w	r1, #0
 8005d34:	0259      	lsls	r1, r3, #9
 8005d36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005d3a:	0250      	lsls	r0, r2, #9
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4610      	mov	r0, r2
 8005d42:	4619      	mov	r1, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	f7fa fa82 	bl	8000254 <__aeabi_uldivmod>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4613      	mov	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e04a      	b.n	8005df0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d5a:	4b31      	ldr	r3, [pc, #196]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	099b      	lsrs	r3, r3, #6
 8005d60:	461a      	mov	r2, r3
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d6a:	f04f 0100 	mov.w	r1, #0
 8005d6e:	ea02 0400 	and.w	r4, r2, r0
 8005d72:	ea03 0501 	and.w	r5, r3, r1
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	f04f 0300 	mov.w	r3, #0
 8005d82:	014b      	lsls	r3, r1, #5
 8005d84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d88:	0142      	lsls	r2, r0, #5
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	1b00      	subs	r0, r0, r4
 8005d90:	eb61 0105 	sbc.w	r1, r1, r5
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	018b      	lsls	r3, r1, #6
 8005d9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005da2:	0182      	lsls	r2, r0, #6
 8005da4:	1a12      	subs	r2, r2, r0
 8005da6:	eb63 0301 	sbc.w	r3, r3, r1
 8005daa:	f04f 0000 	mov.w	r0, #0
 8005dae:	f04f 0100 	mov.w	r1, #0
 8005db2:	00d9      	lsls	r1, r3, #3
 8005db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005db8:	00d0      	lsls	r0, r2, #3
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	1912      	adds	r2, r2, r4
 8005dc0:	eb45 0303 	adc.w	r3, r5, r3
 8005dc4:	f04f 0000 	mov.w	r0, #0
 8005dc8:	f04f 0100 	mov.w	r1, #0
 8005dcc:	0299      	lsls	r1, r3, #10
 8005dce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005dd2:	0290      	lsls	r0, r2, #10
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4610      	mov	r0, r2
 8005dda:	4619      	mov	r1, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	461a      	mov	r2, r3
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	f7fa fa36 	bl	8000254 <__aeabi_uldivmod>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4613      	mov	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	60bb      	str	r3, [r7, #8]
      break;
 8005e0a:	e002      	b.n	8005e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e0c:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e0e:	60bb      	str	r3, [r7, #8]
      break;
 8005e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e12:	68bb      	ldr	r3, [r7, #8]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e1e:	bf00      	nop
 8005e20:	40023800 	.word	0x40023800
 8005e24:	00f42400 	.word	0x00f42400
 8005e28:	007a1200 	.word	0x007a1200

08005e2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e30:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e32:	681b      	ldr	r3, [r3, #0]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20000004 	.word	0x20000004

08005e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e48:	f7ff fff0 	bl	8005e2c <HAL_RCC_GetHCLKFreq>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	0a9b      	lsrs	r3, r3, #10
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	4903      	ldr	r1, [pc, #12]	; (8005e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e5a:	5ccb      	ldrb	r3, [r1, r3]
 8005e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40023800 	.word	0x40023800
 8005e68:	0800bba4 	.word	0x0800bba4

08005e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e70:	f7ff ffdc 	bl	8005e2c <HAL_RCC_GetHCLKFreq>
 8005e74:	4602      	mov	r2, r0
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	0b5b      	lsrs	r3, r3, #13
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	4903      	ldr	r1, [pc, #12]	; (8005e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e82:	5ccb      	ldrb	r3, [r1, r3]
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	0800bba4 	.word	0x0800bba4

08005e94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	220f      	movs	r2, #15
 8005ea2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ea4:	4b12      	ldr	r3, [pc, #72]	; (8005ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0203 	and.w	r2, r3, #3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ebc:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005ec8:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	08db      	lsrs	r3, r3, #3
 8005ece:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ed6:	4b07      	ldr	r3, [pc, #28]	; (8005ef4 <HAL_RCC_GetClockConfig+0x60>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 020f 	and.w	r2, r3, #15
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	601a      	str	r2, [r3, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	40023c00 	.word	0x40023c00

08005ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d012      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f20:	4b69      	ldr	r3, [pc, #420]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4a68      	ldr	r2, [pc, #416]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f2a:	6093      	str	r3, [r2, #8]
 8005f2c:	4b66      	ldr	r3, [pc, #408]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	4964      	ldr	r1, [pc, #400]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005f42:	2301      	movs	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d017      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f52:	4b5d      	ldr	r3, [pc, #372]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f60:	4959      	ldr	r1, [pc, #356]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f70:	d101      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f72:	2301      	movs	r3, #1
 8005f74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d017      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f8e:	4b4e      	ldr	r3, [pc, #312]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	494a      	ldr	r1, [pc, #296]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fac:	d101      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 808b 	beq.w	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fdc:	4b3a      	ldr	r3, [pc, #232]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	4a39      	ldr	r2, [pc, #228]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe8:	4b37      	ldr	r3, [pc, #220]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ff4:	4b35      	ldr	r3, [pc, #212]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a34      	ldr	r2, [pc, #208]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006000:	f7fe f8d0 	bl	80041a4 <HAL_GetTick>
 8006004:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006006:	e008      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006008:	f7fe f8cc 	bl	80041a4 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b64      	cmp	r3, #100	; 0x64
 8006014:	d901      	bls.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e38f      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800601a:	4b2c      	ldr	r3, [pc, #176]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0f0      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006026:	4b28      	ldr	r3, [pc, #160]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d035      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	429a      	cmp	r2, r3
 8006042:	d02e      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006044:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800604e:	4b1e      	ldr	r3, [pc, #120]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006058:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800605a:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605e:	4a1a      	ldr	r2, [pc, #104]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006064:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006066:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800606c:	4b16      	ldr	r3, [pc, #88]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b01      	cmp	r3, #1
 8006076:	d114      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006078:	f7fe f894 	bl	80041a4 <HAL_GetTick>
 800607c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607e:	e00a      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006080:	f7fe f890 	bl	80041a4 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f241 3288 	movw	r2, #5000	; 0x1388
 800608e:	4293      	cmp	r3, r2
 8006090:	d901      	bls.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e351      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006096:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0ee      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ae:	d111      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80060b0:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060bc:	4b04      	ldr	r3, [pc, #16]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060be:	400b      	ands	r3, r1
 80060c0:	4901      	ldr	r1, [pc, #4]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	608b      	str	r3, [r1, #8]
 80060c6:	e00b      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80060c8:	40023800 	.word	0x40023800
 80060cc:	40007000 	.word	0x40007000
 80060d0:	0ffffcff 	.word	0x0ffffcff
 80060d4:	4bb3      	ldr	r3, [pc, #716]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	4ab2      	ldr	r2, [pc, #712]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060de:	6093      	str	r3, [r2, #8]
 80060e0:	4bb0      	ldr	r3, [pc, #704]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ec:	49ad      	ldr	r1, [pc, #692]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0310 	and.w	r3, r3, #16
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d010      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060fe:	4ba9      	ldr	r3, [pc, #676]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006104:	4aa7      	ldr	r2, [pc, #668]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800610a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800610e:	4ba5      	ldr	r3, [pc, #660]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006110:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	49a2      	ldr	r1, [pc, #648]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800612c:	4b9d      	ldr	r3, [pc, #628]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006132:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800613a:	499a      	ldr	r1, [pc, #616]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800614e:	4b95      	ldr	r3, [pc, #596]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800615c:	4991      	ldr	r1, [pc, #580]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006170:	4b8c      	ldr	r3, [pc, #560]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800617e:	4989      	ldr	r1, [pc, #548]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006192:	4b84      	ldr	r3, [pc, #528]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	4980      	ldr	r1, [pc, #512]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061b4:	4b7b      	ldr	r3, [pc, #492]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ba:	f023 0203 	bic.w	r2, r3, #3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c2:	4978      	ldr	r1, [pc, #480]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061d6:	4b73      	ldr	r3, [pc, #460]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061dc:	f023 020c 	bic.w	r2, r3, #12
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e4:	496f      	ldr	r1, [pc, #444]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061f8:	4b6a      	ldr	r3, [pc, #424]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006206:	4967      	ldr	r1, [pc, #412]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800621a:	4b62      	ldr	r3, [pc, #392]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800621c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006220:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006228:	495e      	ldr	r1, [pc, #376]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800622a:	4313      	orrs	r3, r2
 800622c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800623c:	4b59      	ldr	r3, [pc, #356]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624a:	4956      	ldr	r1, [pc, #344]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800624c:	4313      	orrs	r3, r2
 800624e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800625e:	4b51      	ldr	r3, [pc, #324]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006264:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626c:	494d      	ldr	r1, [pc, #308]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006280:	4b48      	ldr	r3, [pc, #288]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006286:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628e:	4945      	ldr	r1, [pc, #276]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80062a2:	4b40      	ldr	r3, [pc, #256]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b0:	493c      	ldr	r1, [pc, #240]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062c4:	4b37      	ldr	r3, [pc, #220]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062d2:	4934      	ldr	r1, [pc, #208]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d011      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80062e6:	4b2f      	ldr	r3, [pc, #188]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062f4:	492b      	ldr	r1, [pc, #172]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006304:	d101      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006306:	2301      	movs	r3, #1
 8006308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006316:	2301      	movs	r3, #1
 8006318:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006326:	4b1f      	ldr	r3, [pc, #124]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006334:	491b      	ldr	r1, [pc, #108]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006348:	4b16      	ldr	r3, [pc, #88]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006358:	4912      	ldr	r1, [pc, #72]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800636c:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006372:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800637c:	4909      	ldr	r1, [pc, #36]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00f      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006396:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a0:	e002      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80063a2:	bf00      	nop
 80063a4:	40023800 	.word	0x40023800
 80063a8:	4986      	ldr	r1, [pc, #536]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80063bc:	4b81      	ldr	r3, [pc, #516]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063cc:	497d      	ldr	r1, [pc, #500]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d006      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80d6 	beq.w	8006594 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063e8:	4b76      	ldr	r3, [pc, #472]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a75      	ldr	r2, [pc, #468]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80063ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063f4:	f7fd fed6 	bl	80041a4 <HAL_GetTick>
 80063f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063fa:	e008      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063fc:	f7fd fed2 	bl	80041a4 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b64      	cmp	r3, #100	; 0x64
 8006408:	d901      	bls.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e195      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800640e:	4b6d      	ldr	r3, [pc, #436]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f0      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d021      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642a:	2b00      	cmp	r3, #0
 800642c:	d11d      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800642e:	4b65      	ldr	r3, [pc, #404]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006434:	0c1b      	lsrs	r3, r3, #16
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800643c:	4b61      	ldr	r3, [pc, #388]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800643e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006442:	0e1b      	lsrs	r3, r3, #24
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	019a      	lsls	r2, r3, #6
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	431a      	orrs	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	061b      	lsls	r3, r3, #24
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	071b      	lsls	r3, r3, #28
 8006462:	4958      	ldr	r1, [pc, #352]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d004      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800647e:	d00a      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006488:	2b00      	cmp	r3, #0
 800648a:	d02e      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006494:	d129      	bne.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006496:	4b4b      	ldr	r3, [pc, #300]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800649c:	0c1b      	lsrs	r3, r3, #16
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80064a4:	4b47      	ldr	r3, [pc, #284]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064aa:	0f1b      	lsrs	r3, r3, #28
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	019a      	lsls	r2, r3, #6
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	041b      	lsls	r3, r3, #16
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	061b      	lsls	r3, r3, #24
 80064c4:	431a      	orrs	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	071b      	lsls	r3, r3, #28
 80064ca:	493e      	ldr	r1, [pc, #248]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80064d2:	4b3c      	ldr	r3, [pc, #240]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064d8:	f023 021f 	bic.w	r2, r3, #31
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	3b01      	subs	r3, #1
 80064e2:	4938      	ldr	r1, [pc, #224]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01d      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80064f6:	4b33      	ldr	r3, [pc, #204]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064fc:	0e1b      	lsrs	r3, r3, #24
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006504:	4b2f      	ldr	r3, [pc, #188]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800650a:	0f1b      	lsrs	r3, r3, #28
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	019a      	lsls	r2, r3, #6
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	431a      	orrs	r2, r3
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	061b      	lsls	r3, r3, #24
 8006524:	431a      	orrs	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	071b      	lsls	r3, r3, #28
 800652a:	4926      	ldr	r1, [pc, #152]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800652c:	4313      	orrs	r3, r2
 800652e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d011      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	019a      	lsls	r2, r3, #6
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	041b      	lsls	r3, r3, #16
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	061b      	lsls	r3, r3, #24
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	071b      	lsls	r3, r3, #28
 800655a:	491a      	ldr	r1, [pc, #104]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006562:	4b18      	ldr	r3, [pc, #96]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a17      	ldr	r2, [pc, #92]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006568:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800656c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800656e:	f7fd fe19 	bl	80041a4 <HAL_GetTick>
 8006572:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006574:	e008      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006576:	f7fd fe15 	bl	80041a4 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b64      	cmp	r3, #100	; 0x64
 8006582:	d901      	bls.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e0d8      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006588:	4b0e      	ldr	r3, [pc, #56]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0f0      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b01      	cmp	r3, #1
 8006598:	f040 80ce 	bne.w	8006738 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800659c:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a08      	ldr	r2, [pc, #32]	; (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a8:	f7fd fdfc 	bl	80041a4 <HAL_GetTick>
 80065ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065ae:	e00b      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065b0:	f7fd fdf8 	bl	80041a4 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b64      	cmp	r3, #100	; 0x64
 80065bc:	d904      	bls.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e0bb      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80065c8:	4b5e      	ldr	r3, [pc, #376]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d4:	d0ec      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d02e      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d12a      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065fe:	4b51      	ldr	r3, [pc, #324]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006604:	0c1b      	lsrs	r3, r3, #16
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800660c:	4b4d      	ldr	r3, [pc, #308]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006612:	0f1b      	lsrs	r3, r3, #28
 8006614:	f003 0307 	and.w	r3, r3, #7
 8006618:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	019a      	lsls	r2, r3, #6
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	041b      	lsls	r3, r3, #16
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	061b      	lsls	r3, r3, #24
 800662c:	431a      	orrs	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	071b      	lsls	r3, r3, #28
 8006632:	4944      	ldr	r1, [pc, #272]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006634:	4313      	orrs	r3, r2
 8006636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800663a:	4b42      	ldr	r3, [pc, #264]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800663c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006640:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	3b01      	subs	r3, #1
 800664a:	021b      	lsls	r3, r3, #8
 800664c:	493d      	ldr	r1, [pc, #244]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d022      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006668:	d11d      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800666a:	4b36      	ldr	r3, [pc, #216]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006670:	0e1b      	lsrs	r3, r3, #24
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006678:	4b32      	ldr	r3, [pc, #200]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667e:	0f1b      	lsrs	r3, r3, #28
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	019a      	lsls	r2, r3, #6
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	041b      	lsls	r3, r3, #16
 8006692:	431a      	orrs	r2, r3
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	061b      	lsls	r3, r3, #24
 8006698:	431a      	orrs	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	071b      	lsls	r3, r3, #28
 800669e:	4929      	ldr	r1, [pc, #164]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d028      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80066b2:	4b24      	ldr	r3, [pc, #144]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b8:	0e1b      	lsrs	r3, r3, #24
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80066c0:	4b20      	ldr	r3, [pc, #128]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c6:	0c1b      	lsrs	r3, r3, #16
 80066c8:	f003 0303 	and.w	r3, r3, #3
 80066cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	019a      	lsls	r2, r3, #6
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	041b      	lsls	r3, r3, #16
 80066d8:	431a      	orrs	r2, r3
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	061b      	lsls	r3, r3, #24
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	071b      	lsls	r3, r3, #28
 80066e6:	4917      	ldr	r1, [pc, #92]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066ee:	4b15      	ldr	r3, [pc, #84]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	4911      	ldr	r1, [pc, #68]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006704:	4b0f      	ldr	r3, [pc, #60]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a0e      	ldr	r2, [pc, #56]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800670a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800670e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006710:	f7fd fd48 	bl	80041a4 <HAL_GetTick>
 8006714:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006716:	e008      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006718:	f7fd fd44 	bl	80041a4 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b64      	cmp	r3, #100	; 0x64
 8006724:	d901      	bls.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e007      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800672a:	4b06      	ldr	r3, [pc, #24]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006736:	d1ef      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40023800 	.word	0x40023800

08006748 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e049      	b.n	80067ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f841 	bl	80067f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f000 fa00 	bl	8006b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
	...

0800680c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b01      	cmp	r3, #1
 800681e:	d001      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e054      	b.n	80068ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a26      	ldr	r2, [pc, #152]	; (80068dc <HAL_TIM_Base_Start_IT+0xd0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d022      	beq.n	800688c <HAL_TIM_Base_Start_IT+0x80>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684e:	d01d      	beq.n	800688c <HAL_TIM_Base_Start_IT+0x80>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a22      	ldr	r2, [pc, #136]	; (80068e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d018      	beq.n	800688c <HAL_TIM_Base_Start_IT+0x80>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a21      	ldr	r2, [pc, #132]	; (80068e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d013      	beq.n	800688c <HAL_TIM_Base_Start_IT+0x80>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00e      	beq.n	800688c <HAL_TIM_Base_Start_IT+0x80>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1e      	ldr	r2, [pc, #120]	; (80068ec <HAL_TIM_Base_Start_IT+0xe0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d009      	beq.n	800688c <HAL_TIM_Base_Start_IT+0x80>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1c      	ldr	r2, [pc, #112]	; (80068f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d004      	beq.n	800688c <HAL_TIM_Base_Start_IT+0x80>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a1b      	ldr	r2, [pc, #108]	; (80068f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d115      	bne.n	80068b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	4b19      	ldr	r3, [pc, #100]	; (80068f8 <HAL_TIM_Base_Start_IT+0xec>)
 8006894:	4013      	ands	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b06      	cmp	r3, #6
 800689c:	d015      	beq.n	80068ca <HAL_TIM_Base_Start_IT+0xbe>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a4:	d011      	beq.n	80068ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0201 	orr.w	r2, r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b6:	e008      	b.n	80068ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	e000      	b.n	80068cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40010000 	.word	0x40010000
 80068e0:	40000400 	.word	0x40000400
 80068e4:	40000800 	.word	0x40000800
 80068e8:	40000c00 	.word	0x40000c00
 80068ec:	40010400 	.word	0x40010400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40001800 	.word	0x40001800
 80068f8:	00010007 	.word	0x00010007

080068fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b02      	cmp	r3, #2
 8006910:	d122      	bne.n	8006958 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b02      	cmp	r3, #2
 800691e:	d11b      	bne.n	8006958 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f06f 0202 	mvn.w	r2, #2
 8006928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f905 	bl	8006b4e <HAL_TIM_IC_CaptureCallback>
 8006944:	e005      	b.n	8006952 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f8f7 	bl	8006b3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f908 	bl	8006b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b04      	cmp	r3, #4
 8006964:	d122      	bne.n	80069ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b04      	cmp	r3, #4
 8006972:	d11b      	bne.n	80069ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0204 	mvn.w	r2, #4
 800697c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2202      	movs	r2, #2
 8006982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f8db 	bl	8006b4e <HAL_TIM_IC_CaptureCallback>
 8006998:	e005      	b.n	80069a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f8cd 	bl	8006b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f8de 	bl	8006b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d122      	bne.n	8006a00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d11b      	bne.n	8006a00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0208 	mvn.w	r2, #8
 80069d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2204      	movs	r2, #4
 80069d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f003 0303 	and.w	r3, r3, #3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f8b1 	bl	8006b4e <HAL_TIM_IC_CaptureCallback>
 80069ec:	e005      	b.n	80069fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f8a3 	bl	8006b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f8b4 	bl	8006b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d122      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b10      	cmp	r3, #16
 8006a1a:	d11b      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0210 	mvn.w	r2, #16
 8006a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2208      	movs	r2, #8
 8006a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f887 	bl	8006b4e <HAL_TIM_IC_CaptureCallback>
 8006a40:	e005      	b.n	8006a4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f879 	bl	8006b3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f88a 	bl	8006b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d10e      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d107      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0201 	mvn.w	r2, #1
 8006a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fd f93c 	bl	8003cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8a:	2b80      	cmp	r3, #128	; 0x80
 8006a8c:	d10e      	bne.n	8006aac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a98:	2b80      	cmp	r3, #128	; 0x80
 8006a9a:	d107      	bne.n	8006aac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f91a 	bl	8006ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aba:	d10e      	bne.n	8006ada <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac6:	2b80      	cmp	r3, #128	; 0x80
 8006ac8:	d107      	bne.n	8006ada <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f90d 	bl	8006cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b40      	cmp	r3, #64	; 0x40
 8006ae6:	d10e      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b40      	cmp	r3, #64	; 0x40
 8006af4:	d107      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f838 	bl	8006b76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d10e      	bne.n	8006b32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f003 0320 	and.w	r3, r3, #32
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d107      	bne.n	8006b32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f06f 0220 	mvn.w	r2, #32
 8006b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f8cd 	bl	8006ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a40      	ldr	r2, [pc, #256]	; (8006ca0 <TIM_Base_SetConfig+0x114>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d013      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006baa:	d00f      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a3d      	ldr	r2, [pc, #244]	; (8006ca4 <TIM_Base_SetConfig+0x118>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00b      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3c      	ldr	r2, [pc, #240]	; (8006ca8 <TIM_Base_SetConfig+0x11c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d007      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a3b      	ldr	r2, [pc, #236]	; (8006cac <TIM_Base_SetConfig+0x120>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a3a      	ldr	r2, [pc, #232]	; (8006cb0 <TIM_Base_SetConfig+0x124>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d108      	bne.n	8006bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2f      	ldr	r2, [pc, #188]	; (8006ca0 <TIM_Base_SetConfig+0x114>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d02b      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bec:	d027      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2c      	ldr	r2, [pc, #176]	; (8006ca4 <TIM_Base_SetConfig+0x118>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d023      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a2b      	ldr	r2, [pc, #172]	; (8006ca8 <TIM_Base_SetConfig+0x11c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01f      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a2a      	ldr	r2, [pc, #168]	; (8006cac <TIM_Base_SetConfig+0x120>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01b      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a29      	ldr	r2, [pc, #164]	; (8006cb0 <TIM_Base_SetConfig+0x124>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d017      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a28      	ldr	r2, [pc, #160]	; (8006cb4 <TIM_Base_SetConfig+0x128>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d013      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a27      	ldr	r2, [pc, #156]	; (8006cb8 <TIM_Base_SetConfig+0x12c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00f      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a26      	ldr	r2, [pc, #152]	; (8006cbc <TIM_Base_SetConfig+0x130>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00b      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a25      	ldr	r2, [pc, #148]	; (8006cc0 <TIM_Base_SetConfig+0x134>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a24      	ldr	r2, [pc, #144]	; (8006cc4 <TIM_Base_SetConfig+0x138>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a23      	ldr	r2, [pc, #140]	; (8006cc8 <TIM_Base_SetConfig+0x13c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d108      	bne.n	8006c50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a0a      	ldr	r2, [pc, #40]	; (8006ca0 <TIM_Base_SetConfig+0x114>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_Base_SetConfig+0xf8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a0c      	ldr	r2, [pc, #48]	; (8006cb0 <TIM_Base_SetConfig+0x124>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d103      	bne.n	8006c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	615a      	str	r2, [r3, #20]
}
 8006c92:	bf00      	nop
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40000c00 	.word	0x40000c00
 8006cb0:	40010400 	.word	0x40010400
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40014400 	.word	0x40014400
 8006cbc:	40014800 	.word	0x40014800
 8006cc0:	40001800 	.word	0x40001800
 8006cc4:	40001c00 	.word	0x40001c00
 8006cc8:	40002000 	.word	0x40002000

08006ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e040      	b.n	8006d9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d106      	bne.n	8006d30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fd f9ac 	bl	8004088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2224      	movs	r2, #36	; 0x24
 8006d34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0201 	bic.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f82c 	bl	8006da4 <UART_SetConfig>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e022      	b.n	8006d9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa82 	bl	8007268 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fb09 	bl	80073ac <UART_CheckIdleState>
 8006d9a:	4603      	mov	r3, r0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	431a      	orrs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4ba7      	ldr	r3, [pc, #668]	; (800706c <UART_SetConfig+0x2c8>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6812      	ldr	r2, [r2, #0]
 8006dd6:	6979      	ldr	r1, [r7, #20]
 8006dd8:	430b      	orrs	r3, r1
 8006dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a95      	ldr	r2, [pc, #596]	; (8007070 <UART_SetConfig+0x2cc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d120      	bne.n	8006e62 <UART_SetConfig+0xbe>
 8006e20:	4b94      	ldr	r3, [pc, #592]	; (8007074 <UART_SetConfig+0x2d0>)
 8006e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d816      	bhi.n	8006e5c <UART_SetConfig+0xb8>
 8006e2e:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x90>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e45 	.word	0x08006e45
 8006e38:	08006e51 	.word	0x08006e51
 8006e3c:	08006e4b 	.word	0x08006e4b
 8006e40:	08006e57 	.word	0x08006e57
 8006e44:	2301      	movs	r3, #1
 8006e46:	77fb      	strb	r3, [r7, #31]
 8006e48:	e14f      	b.n	80070ea <UART_SetConfig+0x346>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	77fb      	strb	r3, [r7, #31]
 8006e4e:	e14c      	b.n	80070ea <UART_SetConfig+0x346>
 8006e50:	2304      	movs	r3, #4
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e149      	b.n	80070ea <UART_SetConfig+0x346>
 8006e56:	2308      	movs	r3, #8
 8006e58:	77fb      	strb	r3, [r7, #31]
 8006e5a:	e146      	b.n	80070ea <UART_SetConfig+0x346>
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e143      	b.n	80070ea <UART_SetConfig+0x346>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a84      	ldr	r2, [pc, #528]	; (8007078 <UART_SetConfig+0x2d4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d132      	bne.n	8006ed2 <UART_SetConfig+0x12e>
 8006e6c:	4b81      	ldr	r3, [pc, #516]	; (8007074 <UART_SetConfig+0x2d0>)
 8006e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e72:	f003 030c 	and.w	r3, r3, #12
 8006e76:	2b0c      	cmp	r3, #12
 8006e78:	d828      	bhi.n	8006ecc <UART_SetConfig+0x128>
 8006e7a:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <UART_SetConfig+0xdc>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006eb5 	.word	0x08006eb5
 8006e84:	08006ecd 	.word	0x08006ecd
 8006e88:	08006ecd 	.word	0x08006ecd
 8006e8c:	08006ecd 	.word	0x08006ecd
 8006e90:	08006ec1 	.word	0x08006ec1
 8006e94:	08006ecd 	.word	0x08006ecd
 8006e98:	08006ecd 	.word	0x08006ecd
 8006e9c:	08006ecd 	.word	0x08006ecd
 8006ea0:	08006ebb 	.word	0x08006ebb
 8006ea4:	08006ecd 	.word	0x08006ecd
 8006ea8:	08006ecd 	.word	0x08006ecd
 8006eac:	08006ecd 	.word	0x08006ecd
 8006eb0:	08006ec7 	.word	0x08006ec7
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e117      	b.n	80070ea <UART_SetConfig+0x346>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	e114      	b.n	80070ea <UART_SetConfig+0x346>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	77fb      	strb	r3, [r7, #31]
 8006ec4:	e111      	b.n	80070ea <UART_SetConfig+0x346>
 8006ec6:	2308      	movs	r3, #8
 8006ec8:	77fb      	strb	r3, [r7, #31]
 8006eca:	e10e      	b.n	80070ea <UART_SetConfig+0x346>
 8006ecc:	2310      	movs	r3, #16
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e10b      	b.n	80070ea <UART_SetConfig+0x346>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a69      	ldr	r2, [pc, #420]	; (800707c <UART_SetConfig+0x2d8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d120      	bne.n	8006f1e <UART_SetConfig+0x17a>
 8006edc:	4b65      	ldr	r3, [pc, #404]	; (8007074 <UART_SetConfig+0x2d0>)
 8006ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ee6:	2b30      	cmp	r3, #48	; 0x30
 8006ee8:	d013      	beq.n	8006f12 <UART_SetConfig+0x16e>
 8006eea:	2b30      	cmp	r3, #48	; 0x30
 8006eec:	d814      	bhi.n	8006f18 <UART_SetConfig+0x174>
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d009      	beq.n	8006f06 <UART_SetConfig+0x162>
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d810      	bhi.n	8006f18 <UART_SetConfig+0x174>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <UART_SetConfig+0x15c>
 8006efa:	2b10      	cmp	r3, #16
 8006efc:	d006      	beq.n	8006f0c <UART_SetConfig+0x168>
 8006efe:	e00b      	b.n	8006f18 <UART_SetConfig+0x174>
 8006f00:	2300      	movs	r3, #0
 8006f02:	77fb      	strb	r3, [r7, #31]
 8006f04:	e0f1      	b.n	80070ea <UART_SetConfig+0x346>
 8006f06:	2302      	movs	r3, #2
 8006f08:	77fb      	strb	r3, [r7, #31]
 8006f0a:	e0ee      	b.n	80070ea <UART_SetConfig+0x346>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	77fb      	strb	r3, [r7, #31]
 8006f10:	e0eb      	b.n	80070ea <UART_SetConfig+0x346>
 8006f12:	2308      	movs	r3, #8
 8006f14:	77fb      	strb	r3, [r7, #31]
 8006f16:	e0e8      	b.n	80070ea <UART_SetConfig+0x346>
 8006f18:	2310      	movs	r3, #16
 8006f1a:	77fb      	strb	r3, [r7, #31]
 8006f1c:	e0e5      	b.n	80070ea <UART_SetConfig+0x346>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a57      	ldr	r2, [pc, #348]	; (8007080 <UART_SetConfig+0x2dc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d120      	bne.n	8006f6a <UART_SetConfig+0x1c6>
 8006f28:	4b52      	ldr	r3, [pc, #328]	; (8007074 <UART_SetConfig+0x2d0>)
 8006f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f32:	2bc0      	cmp	r3, #192	; 0xc0
 8006f34:	d013      	beq.n	8006f5e <UART_SetConfig+0x1ba>
 8006f36:	2bc0      	cmp	r3, #192	; 0xc0
 8006f38:	d814      	bhi.n	8006f64 <UART_SetConfig+0x1c0>
 8006f3a:	2b80      	cmp	r3, #128	; 0x80
 8006f3c:	d009      	beq.n	8006f52 <UART_SetConfig+0x1ae>
 8006f3e:	2b80      	cmp	r3, #128	; 0x80
 8006f40:	d810      	bhi.n	8006f64 <UART_SetConfig+0x1c0>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <UART_SetConfig+0x1a8>
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d006      	beq.n	8006f58 <UART_SetConfig+0x1b4>
 8006f4a:	e00b      	b.n	8006f64 <UART_SetConfig+0x1c0>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	77fb      	strb	r3, [r7, #31]
 8006f50:	e0cb      	b.n	80070ea <UART_SetConfig+0x346>
 8006f52:	2302      	movs	r3, #2
 8006f54:	77fb      	strb	r3, [r7, #31]
 8006f56:	e0c8      	b.n	80070ea <UART_SetConfig+0x346>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	77fb      	strb	r3, [r7, #31]
 8006f5c:	e0c5      	b.n	80070ea <UART_SetConfig+0x346>
 8006f5e:	2308      	movs	r3, #8
 8006f60:	77fb      	strb	r3, [r7, #31]
 8006f62:	e0c2      	b.n	80070ea <UART_SetConfig+0x346>
 8006f64:	2310      	movs	r3, #16
 8006f66:	77fb      	strb	r3, [r7, #31]
 8006f68:	e0bf      	b.n	80070ea <UART_SetConfig+0x346>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a45      	ldr	r2, [pc, #276]	; (8007084 <UART_SetConfig+0x2e0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d125      	bne.n	8006fc0 <UART_SetConfig+0x21c>
 8006f74:	4b3f      	ldr	r3, [pc, #252]	; (8007074 <UART_SetConfig+0x2d0>)
 8006f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f82:	d017      	beq.n	8006fb4 <UART_SetConfig+0x210>
 8006f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f88:	d817      	bhi.n	8006fba <UART_SetConfig+0x216>
 8006f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f8e:	d00b      	beq.n	8006fa8 <UART_SetConfig+0x204>
 8006f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f94:	d811      	bhi.n	8006fba <UART_SetConfig+0x216>
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <UART_SetConfig+0x1fe>
 8006f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9e:	d006      	beq.n	8006fae <UART_SetConfig+0x20a>
 8006fa0:	e00b      	b.n	8006fba <UART_SetConfig+0x216>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	77fb      	strb	r3, [r7, #31]
 8006fa6:	e0a0      	b.n	80070ea <UART_SetConfig+0x346>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	77fb      	strb	r3, [r7, #31]
 8006fac:	e09d      	b.n	80070ea <UART_SetConfig+0x346>
 8006fae:	2304      	movs	r3, #4
 8006fb0:	77fb      	strb	r3, [r7, #31]
 8006fb2:	e09a      	b.n	80070ea <UART_SetConfig+0x346>
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	77fb      	strb	r3, [r7, #31]
 8006fb8:	e097      	b.n	80070ea <UART_SetConfig+0x346>
 8006fba:	2310      	movs	r3, #16
 8006fbc:	77fb      	strb	r3, [r7, #31]
 8006fbe:	e094      	b.n	80070ea <UART_SetConfig+0x346>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a30      	ldr	r2, [pc, #192]	; (8007088 <UART_SetConfig+0x2e4>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d125      	bne.n	8007016 <UART_SetConfig+0x272>
 8006fca:	4b2a      	ldr	r3, [pc, #168]	; (8007074 <UART_SetConfig+0x2d0>)
 8006fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fd8:	d017      	beq.n	800700a <UART_SetConfig+0x266>
 8006fda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fde:	d817      	bhi.n	8007010 <UART_SetConfig+0x26c>
 8006fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fe4:	d00b      	beq.n	8006ffe <UART_SetConfig+0x25a>
 8006fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fea:	d811      	bhi.n	8007010 <UART_SetConfig+0x26c>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <UART_SetConfig+0x254>
 8006ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff4:	d006      	beq.n	8007004 <UART_SetConfig+0x260>
 8006ff6:	e00b      	b.n	8007010 <UART_SetConfig+0x26c>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	77fb      	strb	r3, [r7, #31]
 8006ffc:	e075      	b.n	80070ea <UART_SetConfig+0x346>
 8006ffe:	2302      	movs	r3, #2
 8007000:	77fb      	strb	r3, [r7, #31]
 8007002:	e072      	b.n	80070ea <UART_SetConfig+0x346>
 8007004:	2304      	movs	r3, #4
 8007006:	77fb      	strb	r3, [r7, #31]
 8007008:	e06f      	b.n	80070ea <UART_SetConfig+0x346>
 800700a:	2308      	movs	r3, #8
 800700c:	77fb      	strb	r3, [r7, #31]
 800700e:	e06c      	b.n	80070ea <UART_SetConfig+0x346>
 8007010:	2310      	movs	r3, #16
 8007012:	77fb      	strb	r3, [r7, #31]
 8007014:	e069      	b.n	80070ea <UART_SetConfig+0x346>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a1c      	ldr	r2, [pc, #112]	; (800708c <UART_SetConfig+0x2e8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d137      	bne.n	8007090 <UART_SetConfig+0x2ec>
 8007020:	4b14      	ldr	r3, [pc, #80]	; (8007074 <UART_SetConfig+0x2d0>)
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007026:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800702a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800702e:	d017      	beq.n	8007060 <UART_SetConfig+0x2bc>
 8007030:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007034:	d817      	bhi.n	8007066 <UART_SetConfig+0x2c2>
 8007036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800703a:	d00b      	beq.n	8007054 <UART_SetConfig+0x2b0>
 800703c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007040:	d811      	bhi.n	8007066 <UART_SetConfig+0x2c2>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <UART_SetConfig+0x2aa>
 8007046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704a:	d006      	beq.n	800705a <UART_SetConfig+0x2b6>
 800704c:	e00b      	b.n	8007066 <UART_SetConfig+0x2c2>
 800704e:	2300      	movs	r3, #0
 8007050:	77fb      	strb	r3, [r7, #31]
 8007052:	e04a      	b.n	80070ea <UART_SetConfig+0x346>
 8007054:	2302      	movs	r3, #2
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	e047      	b.n	80070ea <UART_SetConfig+0x346>
 800705a:	2304      	movs	r3, #4
 800705c:	77fb      	strb	r3, [r7, #31]
 800705e:	e044      	b.n	80070ea <UART_SetConfig+0x346>
 8007060:	2308      	movs	r3, #8
 8007062:	77fb      	strb	r3, [r7, #31]
 8007064:	e041      	b.n	80070ea <UART_SetConfig+0x346>
 8007066:	2310      	movs	r3, #16
 8007068:	77fb      	strb	r3, [r7, #31]
 800706a:	e03e      	b.n	80070ea <UART_SetConfig+0x346>
 800706c:	efff69f3 	.word	0xefff69f3
 8007070:	40011000 	.word	0x40011000
 8007074:	40023800 	.word	0x40023800
 8007078:	40004400 	.word	0x40004400
 800707c:	40004800 	.word	0x40004800
 8007080:	40004c00 	.word	0x40004c00
 8007084:	40005000 	.word	0x40005000
 8007088:	40011400 	.word	0x40011400
 800708c:	40007800 	.word	0x40007800
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a71      	ldr	r2, [pc, #452]	; (800725c <UART_SetConfig+0x4b8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d125      	bne.n	80070e6 <UART_SetConfig+0x342>
 800709a:	4b71      	ldr	r3, [pc, #452]	; (8007260 <UART_SetConfig+0x4bc>)
 800709c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070a8:	d017      	beq.n	80070da <UART_SetConfig+0x336>
 80070aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070ae:	d817      	bhi.n	80070e0 <UART_SetConfig+0x33c>
 80070b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b4:	d00b      	beq.n	80070ce <UART_SetConfig+0x32a>
 80070b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ba:	d811      	bhi.n	80070e0 <UART_SetConfig+0x33c>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <UART_SetConfig+0x324>
 80070c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070c4:	d006      	beq.n	80070d4 <UART_SetConfig+0x330>
 80070c6:	e00b      	b.n	80070e0 <UART_SetConfig+0x33c>
 80070c8:	2300      	movs	r3, #0
 80070ca:	77fb      	strb	r3, [r7, #31]
 80070cc:	e00d      	b.n	80070ea <UART_SetConfig+0x346>
 80070ce:	2302      	movs	r3, #2
 80070d0:	77fb      	strb	r3, [r7, #31]
 80070d2:	e00a      	b.n	80070ea <UART_SetConfig+0x346>
 80070d4:	2304      	movs	r3, #4
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e007      	b.n	80070ea <UART_SetConfig+0x346>
 80070da:	2308      	movs	r3, #8
 80070dc:	77fb      	strb	r3, [r7, #31]
 80070de:	e004      	b.n	80070ea <UART_SetConfig+0x346>
 80070e0:	2310      	movs	r3, #16
 80070e2:	77fb      	strb	r3, [r7, #31]
 80070e4:	e001      	b.n	80070ea <UART_SetConfig+0x346>
 80070e6:	2310      	movs	r3, #16
 80070e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f2:	d15b      	bne.n	80071ac <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80070f4:	7ffb      	ldrb	r3, [r7, #31]
 80070f6:	2b08      	cmp	r3, #8
 80070f8:	d827      	bhi.n	800714a <UART_SetConfig+0x3a6>
 80070fa:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <UART_SetConfig+0x35c>)
 80070fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007100:	08007125 	.word	0x08007125
 8007104:	0800712d 	.word	0x0800712d
 8007108:	08007135 	.word	0x08007135
 800710c:	0800714b 	.word	0x0800714b
 8007110:	0800713b 	.word	0x0800713b
 8007114:	0800714b 	.word	0x0800714b
 8007118:	0800714b 	.word	0x0800714b
 800711c:	0800714b 	.word	0x0800714b
 8007120:	08007143 	.word	0x08007143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007124:	f7fe fe8e 	bl	8005e44 <HAL_RCC_GetPCLK1Freq>
 8007128:	61b8      	str	r0, [r7, #24]
        break;
 800712a:	e013      	b.n	8007154 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800712c:	f7fe fe9e 	bl	8005e6c <HAL_RCC_GetPCLK2Freq>
 8007130:	61b8      	str	r0, [r7, #24]
        break;
 8007132:	e00f      	b.n	8007154 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007134:	4b4b      	ldr	r3, [pc, #300]	; (8007264 <UART_SetConfig+0x4c0>)
 8007136:	61bb      	str	r3, [r7, #24]
        break;
 8007138:	e00c      	b.n	8007154 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800713a:	f7fe fd95 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 800713e:	61b8      	str	r0, [r7, #24]
        break;
 8007140:	e008      	b.n	8007154 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007146:	61bb      	str	r3, [r7, #24]
        break;
 8007148:	e004      	b.n	8007154 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	77bb      	strb	r3, [r7, #30]
        break;
 8007152:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d074      	beq.n	8007244 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	005a      	lsls	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	085b      	lsrs	r3, r3, #1
 8007164:	441a      	add	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	fbb2 f3f3 	udiv	r3, r2, r3
 800716e:	b29b      	uxth	r3, r3
 8007170:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b0f      	cmp	r3, #15
 8007176:	d916      	bls.n	80071a6 <UART_SetConfig+0x402>
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800717e:	d212      	bcs.n	80071a6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f023 030f 	bic.w	r3, r3, #15
 8007188:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	085b      	lsrs	r3, r3, #1
 800718e:	b29b      	uxth	r3, r3
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	b29a      	uxth	r2, r3
 8007196:	89fb      	ldrh	r3, [r7, #14]
 8007198:	4313      	orrs	r3, r2
 800719a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	89fa      	ldrh	r2, [r7, #14]
 80071a2:	60da      	str	r2, [r3, #12]
 80071a4:	e04e      	b.n	8007244 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	77bb      	strb	r3, [r7, #30]
 80071aa:	e04b      	b.n	8007244 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071ac:	7ffb      	ldrb	r3, [r7, #31]
 80071ae:	2b08      	cmp	r3, #8
 80071b0:	d827      	bhi.n	8007202 <UART_SetConfig+0x45e>
 80071b2:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <UART_SetConfig+0x414>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071e5 	.word	0x080071e5
 80071c0:	080071ed 	.word	0x080071ed
 80071c4:	08007203 	.word	0x08007203
 80071c8:	080071f3 	.word	0x080071f3
 80071cc:	08007203 	.word	0x08007203
 80071d0:	08007203 	.word	0x08007203
 80071d4:	08007203 	.word	0x08007203
 80071d8:	080071fb 	.word	0x080071fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071dc:	f7fe fe32 	bl	8005e44 <HAL_RCC_GetPCLK1Freq>
 80071e0:	61b8      	str	r0, [r7, #24]
        break;
 80071e2:	e013      	b.n	800720c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e4:	f7fe fe42 	bl	8005e6c <HAL_RCC_GetPCLK2Freq>
 80071e8:	61b8      	str	r0, [r7, #24]
        break;
 80071ea:	e00f      	b.n	800720c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071ec:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <UART_SetConfig+0x4c0>)
 80071ee:	61bb      	str	r3, [r7, #24]
        break;
 80071f0:	e00c      	b.n	800720c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071f2:	f7fe fd39 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 80071f6:	61b8      	str	r0, [r7, #24]
        break;
 80071f8:	e008      	b.n	800720c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fe:	61bb      	str	r3, [r7, #24]
        break;
 8007200:	e004      	b.n	800720c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	77bb      	strb	r3, [r7, #30]
        break;
 800720a:	bf00      	nop
    }

    if (pclk != 0U)
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d018      	beq.n	8007244 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	085a      	lsrs	r2, r3, #1
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	441a      	add	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	fbb2 f3f3 	udiv	r3, r2, r3
 8007224:	b29b      	uxth	r3, r3
 8007226:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	2b0f      	cmp	r3, #15
 800722c:	d908      	bls.n	8007240 <UART_SetConfig+0x49c>
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007234:	d204      	bcs.n	8007240 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	60da      	str	r2, [r3, #12]
 800723e:	e001      	b.n	8007244 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007250:	7fbb      	ldrb	r3, [r7, #30]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	40007c00 	.word	0x40007c00
 8007260:	40023800 	.word	0x40023800
 8007264:	00f42400 	.word	0x00f42400

08007268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00a      	beq.n	8007292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	f003 0308 	and.w	r3, r3, #8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00a      	beq.n	800731a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	430a      	orrs	r2, r1
 800733a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01a      	beq.n	800737e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007366:	d10a      	bne.n	800737e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	605a      	str	r2, [r3, #4]
  }
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073bc:	f7fc fef2 	bl	80041a4 <HAL_GetTick>
 80073c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0308 	and.w	r3, r3, #8
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d10e      	bne.n	80073ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f82d 	bl	800743e <UART_WaitOnFlagUntilTimeout>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e023      	b.n	8007436 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d10e      	bne.n	800741a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f817 	bl	800743e <UART_WaitOnFlagUntilTimeout>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e00d      	b.n	8007436 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2220      	movs	r2, #32
 800741e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	4613      	mov	r3, r2
 800744c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800744e:	e05e      	b.n	800750e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d05a      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007458:	f7fc fea4 	bl	80041a4 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	429a      	cmp	r2, r3
 8007466:	d302      	bcc.n	800746e <UART_WaitOnFlagUntilTimeout+0x30>
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d11b      	bne.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800747c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0201 	bic.w	r2, r2, #1
 800748c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2220      	movs	r2, #32
 8007492:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2220      	movs	r2, #32
 8007498:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e043      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 0304 	and.w	r3, r3, #4
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d02c      	beq.n	800750e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c2:	d124      	bne.n	800750e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0201 	bic.w	r2, r2, #1
 80074ec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2220      	movs	r2, #32
 80074f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e00f      	b.n	800752e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69da      	ldr	r2, [r3, #28]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4013      	ands	r3, r2
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	429a      	cmp	r2, r3
 800751c:	bf0c      	ite	eq
 800751e:	2301      	moveq	r3, #1
 8007520:	2300      	movne	r3, #0
 8007522:	b2db      	uxtb	r3, r3
 8007524:	461a      	mov	r2, r3
 8007526:	79fb      	ldrb	r3, [r7, #7]
 8007528:	429a      	cmp	r2, r3
 800752a:	d091      	beq.n	8007450 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007536:	b480      	push	{r7}
 8007538:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800753a:	bf00      	nop
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800754a:	f3ef 8305 	mrs	r3, IPSR
 800754e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007550:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10f      	bne.n	8007576 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007556:	f3ef 8310 	mrs	r3, PRIMASK
 800755a:	607b      	str	r3, [r7, #4]
  return(result);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d105      	bne.n	800756e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007562:	f3ef 8311 	mrs	r3, BASEPRI
 8007566:	603b      	str	r3, [r7, #0]
  return(result);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d007      	beq.n	800757e <osKernelInitialize+0x3a>
 800756e:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <osKernelInitialize+0x64>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d103      	bne.n	800757e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007576:	f06f 0305 	mvn.w	r3, #5
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	e00c      	b.n	8007598 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800757e:	4b0a      	ldr	r3, [pc, #40]	; (80075a8 <osKernelInitialize+0x64>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d105      	bne.n	8007592 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007586:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <osKernelInitialize+0x64>)
 8007588:	2201      	movs	r2, #1
 800758a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e002      	b.n	8007598 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007592:	f04f 33ff 	mov.w	r3, #4294967295
 8007596:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007598:	68fb      	ldr	r3, [r7, #12]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000154 	.word	0x20000154

080075ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b2:	f3ef 8305 	mrs	r3, IPSR
 80075b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80075b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10f      	bne.n	80075de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075be:	f3ef 8310 	mrs	r3, PRIMASK
 80075c2:	607b      	str	r3, [r7, #4]
  return(result);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d105      	bne.n	80075d6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075ca:	f3ef 8311 	mrs	r3, BASEPRI
 80075ce:	603b      	str	r3, [r7, #0]
  return(result);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d007      	beq.n	80075e6 <osKernelStart+0x3a>
 80075d6:	4b0f      	ldr	r3, [pc, #60]	; (8007614 <osKernelStart+0x68>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d103      	bne.n	80075e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80075de:	f06f 0305 	mvn.w	r3, #5
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	e010      	b.n	8007608 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80075e6:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <osKernelStart+0x68>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d109      	bne.n	8007602 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80075ee:	f7ff ffa2 	bl	8007536 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80075f2:	4b08      	ldr	r3, [pc, #32]	; (8007614 <osKernelStart+0x68>)
 80075f4:	2202      	movs	r2, #2
 80075f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80075f8:	f001 f924 	bl	8008844 <vTaskStartScheduler>
      stat = osOK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	e002      	b.n	8007608 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007602:	f04f 33ff 	mov.w	r3, #4294967295
 8007606:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007608:	68fb      	ldr	r3, [r7, #12]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000154 	.word	0x20000154

08007618 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007618:	b580      	push	{r7, lr}
 800761a:	b090      	sub	sp, #64	; 0x40
 800761c:	af04      	add	r7, sp, #16
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007624:	2300      	movs	r3, #0
 8007626:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007628:	f3ef 8305 	mrs	r3, IPSR
 800762c:	61fb      	str	r3, [r7, #28]
  return(result);
 800762e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007630:	2b00      	cmp	r3, #0
 8007632:	f040 808f 	bne.w	8007754 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007636:	f3ef 8310 	mrs	r3, PRIMASK
 800763a:	61bb      	str	r3, [r7, #24]
  return(result);
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d105      	bne.n	800764e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007642:	f3ef 8311 	mrs	r3, BASEPRI
 8007646:	617b      	str	r3, [r7, #20]
  return(result);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <osThreadNew+0x3e>
 800764e:	4b44      	ldr	r3, [pc, #272]	; (8007760 <osThreadNew+0x148>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b02      	cmp	r3, #2
 8007654:	d07e      	beq.n	8007754 <osThreadNew+0x13c>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d07b      	beq.n	8007754 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800765c:	2380      	movs	r3, #128	; 0x80
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007660:	2318      	movs	r3, #24
 8007662:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007664:	2300      	movs	r3, #0
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007668:	f04f 33ff 	mov.w	r3, #4294967295
 800766c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d045      	beq.n	8007700 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <osThreadNew+0x6a>
        name = attr->name;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	2b00      	cmp	r3, #0
 8007694:	d008      	beq.n	80076a8 <osThreadNew+0x90>
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	2b38      	cmp	r3, #56	; 0x38
 800769a:	d805      	bhi.n	80076a8 <osThreadNew+0x90>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <osThreadNew+0x94>
        return (NULL);
 80076a8:	2300      	movs	r3, #0
 80076aa:	e054      	b.n	8007756 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	089b      	lsrs	r3, r3, #2
 80076ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00e      	beq.n	80076e2 <osThreadNew+0xca>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	2bbf      	cmp	r3, #191	; 0xbf
 80076ca:	d90a      	bls.n	80076e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d006      	beq.n	80076e2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <osThreadNew+0xca>
        mem = 1;
 80076dc:	2301      	movs	r3, #1
 80076de:	623b      	str	r3, [r7, #32]
 80076e0:	e010      	b.n	8007704 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10c      	bne.n	8007704 <osThreadNew+0xec>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d108      	bne.n	8007704 <osThreadNew+0xec>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d104      	bne.n	8007704 <osThreadNew+0xec>
          mem = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	623b      	str	r3, [r7, #32]
 80076fe:	e001      	b.n	8007704 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d110      	bne.n	800772c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007712:	9202      	str	r2, [sp, #8]
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800771e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 fe11 	bl	8008348 <xTaskCreateStatic>
 8007726:	4603      	mov	r3, r0
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	e013      	b.n	8007754 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d110      	bne.n	8007754 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	b29a      	uxth	r2, r3
 8007736:	f107 0310 	add.w	r3, r7, #16
 800773a:	9301      	str	r3, [sp, #4]
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 fe62 	bl	800840e <xTaskCreate>
 800774a:	4603      	mov	r3, r0
 800774c:	2b01      	cmp	r3, #1
 800774e:	d001      	beq.n	8007754 <osThreadNew+0x13c>
          hTask = NULL;
 8007750:	2300      	movs	r3, #0
 8007752:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007754:	693b      	ldr	r3, [r7, #16]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3730      	adds	r7, #48	; 0x30
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000154 	.word	0x20000154

08007764 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4a07      	ldr	r2, [pc, #28]	; (8007790 <vApplicationGetIdleTaskMemory+0x2c>)
 8007774:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4a06      	ldr	r2, [pc, #24]	; (8007794 <vApplicationGetIdleTaskMemory+0x30>)
 800777a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2280      	movs	r2, #128	; 0x80
 8007780:	601a      	str	r2, [r3, #0]
}
 8007782:	bf00      	nop
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	20000158 	.word	0x20000158
 8007794:	20000218 	.word	0x20000218

08007798 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	4a07      	ldr	r2, [pc, #28]	; (80077c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80077a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4a06      	ldr	r2, [pc, #24]	; (80077c8 <vApplicationGetTimerTaskMemory+0x30>)
 80077ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077b6:	601a      	str	r2, [r3, #0]
}
 80077b8:	bf00      	nop
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	20000418 	.word	0x20000418
 80077c8:	200004d8 	.word	0x200004d8

080077cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f103 0208 	add.w	r2, r3, #8
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f04f 32ff 	mov.w	r2, #4294967295
 80077e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f103 0208 	add.w	r2, r3, #8
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f103 0208 	add.w	r2, r3, #8
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007826:	b480      	push	{r7}
 8007828:	b085      	sub	sp, #20
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	601a      	str	r2, [r3, #0]
}
 8007862:	bf00      	nop
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d103      	bne.n	800788e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	e00c      	b.n	80078a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3308      	adds	r3, #8
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	e002      	b.n	800789c <vListInsert+0x2e>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d2f6      	bcs.n	8007896 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	601a      	str	r2, [r3, #0]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6892      	ldr	r2, [r2, #8]
 80078f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6852      	ldr	r2, [r2, #4]
 8007900:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d103      	bne.n	8007914 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	1e5a      	subs	r2, r3, #1
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10c      	bne.n	8007962 <xQueueGenericReset+0x2e>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	b672      	cpsid	i
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	b662      	cpsie	i
 800795c:	60bb      	str	r3, [r7, #8]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007962:	f002 f95b 	bl	8009c1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007972:	fb01 f303 	mul.w	r3, r1, r3
 8007976:	441a      	add	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007992:	3b01      	subs	r3, #1
 8007994:	68f9      	ldr	r1, [r7, #12]
 8007996:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007998:	fb01 f303 	mul.w	r3, r1, r3
 800799c:	441a      	add	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	22ff      	movs	r2, #255	; 0xff
 80079a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	22ff      	movs	r2, #255	; 0xff
 80079ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d114      	bne.n	80079e2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01a      	beq.n	80079f6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3310      	adds	r3, #16
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 fa13 	bl	8008df0 <xTaskRemoveFromEventList>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d012      	beq.n	80079f6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079d0:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <xQueueGenericReset+0xd0>)
 80079d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	e009      	b.n	80079f6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3310      	adds	r3, #16
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fef0 	bl	80077cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3324      	adds	r3, #36	; 0x24
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff feeb 	bl	80077cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079f6:	f002 f945 	bl	8009c84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079fa:	2301      	movs	r3, #1
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08e      	sub	sp, #56	; 0x38
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10c      	bne.n	8007a36 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	b672      	cpsid	i
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	b662      	cpsie	i
 8007a30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10c      	bne.n	8007a56 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	b672      	cpsid	i
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	b662      	cpsie	i
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d002      	beq.n	8007a62 <xQueueGenericCreateStatic+0x5a>
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <xQueueGenericCreateStatic+0x5e>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e000      	b.n	8007a68 <xQueueGenericCreateStatic+0x60>
 8007a66:	2300      	movs	r3, #0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10c      	bne.n	8007a86 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	b672      	cpsid	i
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	b662      	cpsie	i
 8007a80:	623b      	str	r3, [r7, #32]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <xQueueGenericCreateStatic+0x8a>
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <xQueueGenericCreateStatic+0x8e>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <xQueueGenericCreateStatic+0x90>
 8007a96:	2300      	movs	r3, #0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10c      	bne.n	8007ab6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	b672      	cpsid	i
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	b662      	cpsie	i
 8007ab0:	61fb      	str	r3, [r7, #28]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ab6:	2350      	movs	r3, #80	; 0x50
 8007ab8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b50      	cmp	r3, #80	; 0x50
 8007abe:	d00c      	beq.n	8007ada <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	b672      	cpsid	i
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	b662      	cpsie	i
 8007ad4:	61bb      	str	r3, [r7, #24]
}
 8007ad6:	bf00      	nop
 8007ad8:	e7fe      	b.n	8007ad8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ada:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00d      	beq.n	8007b02 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007aee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	4613      	mov	r3, r2
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f805 	bl	8007b0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3730      	adds	r7, #48	; 0x30
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d103      	bne.n	8007b28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	e002      	b.n	8007b2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	69b8      	ldr	r0, [r7, #24]
 8007b3e:	f7ff fef9 	bl	8007934 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	78fa      	ldrb	r2, [r7, #3]
 8007b46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08e      	sub	sp, #56	; 0x38
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b62:	2300      	movs	r3, #0
 8007b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10c      	bne.n	8007b8a <xQueueGenericSend+0x36>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	b672      	cpsid	i
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	b662      	cpsie	i
 8007b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d103      	bne.n	8007b98 <xQueueGenericSend+0x44>
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <xQueueGenericSend+0x48>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e000      	b.n	8007b9e <xQueueGenericSend+0x4a>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10c      	bne.n	8007bbc <xQueueGenericSend+0x68>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	b672      	cpsid	i
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	b662      	cpsie	i
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d103      	bne.n	8007bca <xQueueGenericSend+0x76>
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d101      	bne.n	8007bce <xQueueGenericSend+0x7a>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <xQueueGenericSend+0x7c>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10c      	bne.n	8007bee <xQueueGenericSend+0x9a>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	b672      	cpsid	i
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	b662      	cpsie	i
 8007be8:	623b      	str	r3, [r7, #32]
}
 8007bea:	bf00      	nop
 8007bec:	e7fe      	b.n	8007bec <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bee:	f001 facb 	bl	8009188 <xTaskGetSchedulerState>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <xQueueGenericSend+0xaa>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <xQueueGenericSend+0xae>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <xQueueGenericSend+0xb0>
 8007c02:	2300      	movs	r3, #0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10c      	bne.n	8007c22 <xQueueGenericSend+0xce>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	b672      	cpsid	i
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	b662      	cpsie	i
 8007c1c:	61fb      	str	r3, [r7, #28]
}
 8007c1e:	bf00      	nop
 8007c20:	e7fe      	b.n	8007c20 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c22:	f001 fffb 	bl	8009c1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d302      	bcc.n	8007c38 <xQueueGenericSend+0xe4>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d129      	bne.n	8007c8c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c3e:	f000 fa15 	bl	800806c <prvCopyDataToQueue>
 8007c42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d010      	beq.n	8007c6e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	3324      	adds	r3, #36	; 0x24
 8007c50:	4618      	mov	r0, r3
 8007c52:	f001 f8cd 	bl	8008df0 <xTaskRemoveFromEventList>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d013      	beq.n	8007c84 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c5c:	4b3f      	ldr	r3, [pc, #252]	; (8007d5c <xQueueGenericSend+0x208>)
 8007c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	e00a      	b.n	8007c84 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d007      	beq.n	8007c84 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c74:	4b39      	ldr	r3, [pc, #228]	; (8007d5c <xQueueGenericSend+0x208>)
 8007c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c84:	f001 fffe 	bl	8009c84 <vPortExitCritical>
				return pdPASS;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e063      	b.n	8007d54 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d103      	bne.n	8007c9a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c92:	f001 fff7 	bl	8009c84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e05c      	b.n	8007d54 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d106      	bne.n	8007cae <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ca0:	f107 0314 	add.w	r3, r7, #20
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f001 f909 	bl	8008ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007caa:	2301      	movs	r3, #1
 8007cac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cae:	f001 ffe9 	bl	8009c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cb2:	f000 fe3b 	bl	800892c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cb6:	f001 ffb1 	bl	8009c1c <vPortEnterCritical>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cc0:	b25b      	sxtb	r3, r3
 8007cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc6:	d103      	bne.n	8007cd0 <xQueueGenericSend+0x17c>
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cd6:	b25b      	sxtb	r3, r3
 8007cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cdc:	d103      	bne.n	8007ce6 <xQueueGenericSend+0x192>
 8007cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ce6:	f001 ffcd 	bl	8009c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cea:	1d3a      	adds	r2, r7, #4
 8007cec:	f107 0314 	add.w	r3, r7, #20
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f001 f8f8 	bl	8008ee8 <xTaskCheckForTimeOut>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d124      	bne.n	8007d48 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d00:	f000 faac 	bl	800825c <prvIsQueueFull>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d018      	beq.n	8007d3c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	3310      	adds	r3, #16
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	4611      	mov	r1, r2
 8007d12:	4618      	mov	r0, r3
 8007d14:	f001 f818 	bl	8008d48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d1a:	f000 fa37 	bl	800818c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d1e:	f000 fe13 	bl	8008948 <xTaskResumeAll>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f47f af7c 	bne.w	8007c22 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <xQueueGenericSend+0x208>)
 8007d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	e772      	b.n	8007c22 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d3e:	f000 fa25 	bl	800818c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d42:	f000 fe01 	bl	8008948 <xTaskResumeAll>
 8007d46:	e76c      	b.n	8007c22 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d4a:	f000 fa1f 	bl	800818c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d4e:	f000 fdfb 	bl	8008948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3738      	adds	r7, #56	; 0x38
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	e000ed04 	.word	0xe000ed04

08007d60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08e      	sub	sp, #56	; 0x38
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10c      	bne.n	8007d92 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	b672      	cpsid	i
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	b662      	cpsie	i
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d103      	bne.n	8007da0 <xQueueGenericSendFromISR+0x40>
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <xQueueGenericSendFromISR+0x44>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e000      	b.n	8007da6 <xQueueGenericSendFromISR+0x46>
 8007da4:	2300      	movs	r3, #0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10c      	bne.n	8007dc4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	b672      	cpsid	i
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	b662      	cpsie	i
 8007dbe:	623b      	str	r3, [r7, #32]
}
 8007dc0:	bf00      	nop
 8007dc2:	e7fe      	b.n	8007dc2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d103      	bne.n	8007dd2 <xQueueGenericSendFromISR+0x72>
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d101      	bne.n	8007dd6 <xQueueGenericSendFromISR+0x76>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e000      	b.n	8007dd8 <xQueueGenericSendFromISR+0x78>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10c      	bne.n	8007df6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de0:	b672      	cpsid	i
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	b662      	cpsie	i
 8007df0:	61fb      	str	r3, [r7, #28]
}
 8007df2:	bf00      	nop
 8007df4:	e7fe      	b.n	8007df4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007df6:	f001 fff9 	bl	8009dec <vPortValidateInterruptPriority>
	__asm volatile
 8007dfa:	f3ef 8211 	mrs	r2, BASEPRI
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	b672      	cpsid	i
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	b662      	cpsie	i
 8007e12:	61ba      	str	r2, [r7, #24]
 8007e14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007e16:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d302      	bcc.n	8007e2c <xQueueGenericSendFromISR+0xcc>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d12c      	bne.n	8007e86 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e3c:	f000 f916 	bl	800806c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e40:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e48:	d112      	bne.n	8007e70 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d016      	beq.n	8007e80 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	3324      	adds	r3, #36	; 0x24
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 ffca 	bl	8008df0 <xTaskRemoveFromEventList>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00e      	beq.n	8007e80 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	e007      	b.n	8007e80 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e74:	3301      	adds	r3, #1
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	b25a      	sxtb	r2, r3
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e80:	2301      	movs	r3, #1
 8007e82:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007e84:	e001      	b.n	8007e8a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f383 8811 	msr	BASEPRI, r3
}
 8007e94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3738      	adds	r7, #56	; 0x38
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08c      	sub	sp, #48	; 0x30
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007eac:	2300      	movs	r3, #0
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10c      	bne.n	8007ed4 <xQueueReceive+0x34>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	b672      	cpsid	i
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	b662      	cpsie	i
 8007ece:	623b      	str	r3, [r7, #32]
}
 8007ed0:	bf00      	nop
 8007ed2:	e7fe      	b.n	8007ed2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d103      	bne.n	8007ee2 <xQueueReceive+0x42>
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <xQueueReceive+0x46>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <xQueueReceive+0x48>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10c      	bne.n	8007f06 <xQueueReceive+0x66>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	b672      	cpsid	i
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	b662      	cpsie	i
 8007f00:	61fb      	str	r3, [r7, #28]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f06:	f001 f93f 	bl	8009188 <xTaskGetSchedulerState>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <xQueueReceive+0x76>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <xQueueReceive+0x7a>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <xQueueReceive+0x7c>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10c      	bne.n	8007f3a <xQueueReceive+0x9a>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	b672      	cpsid	i
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	b662      	cpsie	i
 8007f34:	61bb      	str	r3, [r7, #24]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f3a:	f001 fe6f 	bl	8009c1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d01f      	beq.n	8007f8a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f4e:	f000 f8f7 	bl	8008140 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	1e5a      	subs	r2, r3, #1
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00f      	beq.n	8007f82 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	3310      	adds	r3, #16
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 ff42 	bl	8008df0 <xTaskRemoveFromEventList>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d007      	beq.n	8007f82 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f72:	4b3d      	ldr	r3, [pc, #244]	; (8008068 <xQueueReceive+0x1c8>)
 8007f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f82:	f001 fe7f 	bl	8009c84 <vPortExitCritical>
				return pdPASS;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e069      	b.n	800805e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d103      	bne.n	8007f98 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f90:	f001 fe78 	bl	8009c84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f94:	2300      	movs	r3, #0
 8007f96:	e062      	b.n	800805e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d106      	bne.n	8007fac <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f9e:	f107 0310 	add.w	r3, r7, #16
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 ff8a 	bl	8008ebc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fac:	f001 fe6a 	bl	8009c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fb0:	f000 fcbc 	bl	800892c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fb4:	f001 fe32 	bl	8009c1c <vPortEnterCritical>
 8007fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fbe:	b25b      	sxtb	r3, r3
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc4:	d103      	bne.n	8007fce <xQueueReceive+0x12e>
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd4:	b25b      	sxtb	r3, r3
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fda:	d103      	bne.n	8007fe4 <xQueueReceive+0x144>
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fe4:	f001 fe4e 	bl	8009c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fe8:	1d3a      	adds	r2, r7, #4
 8007fea:	f107 0310 	add.w	r3, r7, #16
 8007fee:	4611      	mov	r1, r2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 ff79 	bl	8008ee8 <xTaskCheckForTimeOut>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d123      	bne.n	8008044 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ffe:	f000 f917 	bl	8008230 <prvIsQueueEmpty>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d017      	beq.n	8008038 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	3324      	adds	r3, #36	; 0x24
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	4611      	mov	r1, r2
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fe99 	bl	8008d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008018:	f000 f8b8 	bl	800818c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800801c:	f000 fc94 	bl	8008948 <xTaskResumeAll>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d189      	bne.n	8007f3a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008026:	4b10      	ldr	r3, [pc, #64]	; (8008068 <xQueueReceive+0x1c8>)
 8008028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	e780      	b.n	8007f3a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800803a:	f000 f8a7 	bl	800818c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800803e:	f000 fc83 	bl	8008948 <xTaskResumeAll>
 8008042:	e77a      	b.n	8007f3a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008046:	f000 f8a1 	bl	800818c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800804a:	f000 fc7d 	bl	8008948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800804e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008050:	f000 f8ee 	bl	8008230 <prvIsQueueEmpty>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	f43f af6f 	beq.w	8007f3a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800805c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800805e:	4618      	mov	r0, r3
 8008060:	3730      	adds	r7, #48	; 0x30
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	e000ed04 	.word	0xe000ed04

0800806c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10d      	bne.n	80080a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d14d      	bne.n	800812e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	4618      	mov	r0, r3
 8008098:	f001 f894 	bl	80091c4 <xTaskPriorityDisinherit>
 800809c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	609a      	str	r2, [r3, #8]
 80080a4:	e043      	b.n	800812e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d119      	bne.n	80080e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6858      	ldr	r0, [r3, #4]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	461a      	mov	r2, r3
 80080b6:	68b9      	ldr	r1, [r7, #8]
 80080b8:	f002 ff6c 	bl	800af94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	441a      	add	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d32b      	bcc.n	800812e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	605a      	str	r2, [r3, #4]
 80080de:	e026      	b.n	800812e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	68d8      	ldr	r0, [r3, #12]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e8:	461a      	mov	r2, r3
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	f002 ff52 	bl	800af94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	425b      	negs	r3, r3
 80080fa:	441a      	add	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d207      	bcs.n	800811c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008114:	425b      	negs	r3, r3
 8008116:	441a      	add	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b02      	cmp	r3, #2
 8008120:	d105      	bne.n	800812e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	3b01      	subs	r3, #1
 800812c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008136:	697b      	ldr	r3, [r7, #20]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d018      	beq.n	8008184 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	441a      	add	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	429a      	cmp	r2, r3
 800816a:	d303      	bcc.n	8008174 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68d9      	ldr	r1, [r3, #12]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817c:	461a      	mov	r2, r3
 800817e:	6838      	ldr	r0, [r7, #0]
 8008180:	f002 ff08 	bl	800af94 <memcpy>
	}
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008194:	f001 fd42 	bl	8009c1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800819e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081a0:	e011      	b.n	80081c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d012      	beq.n	80081d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3324      	adds	r3, #36	; 0x24
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fe1e 	bl	8008df0 <xTaskRemoveFromEventList>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081ba:	f000 fefb 	bl	8008fb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dce9      	bgt.n	80081a2 <prvUnlockQueue+0x16>
 80081ce:	e000      	b.n	80081d2 <prvUnlockQueue+0x46>
					break;
 80081d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	22ff      	movs	r2, #255	; 0xff
 80081d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081da:	f001 fd53 	bl	8009c84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081de:	f001 fd1d 	bl	8009c1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081ea:	e011      	b.n	8008210 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d012      	beq.n	800821a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3310      	adds	r3, #16
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fdf9 	bl	8008df0 <xTaskRemoveFromEventList>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008204:	f000 fed6 	bl	8008fb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008208:	7bbb      	ldrb	r3, [r7, #14]
 800820a:	3b01      	subs	r3, #1
 800820c:	b2db      	uxtb	r3, r3
 800820e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008214:	2b00      	cmp	r3, #0
 8008216:	dce9      	bgt.n	80081ec <prvUnlockQueue+0x60>
 8008218:	e000      	b.n	800821c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800821a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	22ff      	movs	r2, #255	; 0xff
 8008220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008224:	f001 fd2e 	bl	8009c84 <vPortExitCritical>
}
 8008228:	bf00      	nop
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008238:	f001 fcf0 	bl	8009c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008244:	2301      	movs	r3, #1
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	e001      	b.n	800824e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800824e:	f001 fd19 	bl	8009c84 <vPortExitCritical>

	return xReturn;
 8008252:	68fb      	ldr	r3, [r7, #12]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008264:	f001 fcda 	bl	8009c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008270:	429a      	cmp	r2, r3
 8008272:	d102      	bne.n	800827a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008274:	2301      	movs	r3, #1
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	e001      	b.n	800827e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800827e:	f001 fd01 	bl	8009c84 <vPortExitCritical>

	return xReturn;
 8008282:	68fb      	ldr	r3, [r7, #12]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]
 800829a:	e014      	b.n	80082c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800829c:	4a0f      	ldr	r2, [pc, #60]	; (80082dc <vQueueAddToRegistry+0x50>)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10b      	bne.n	80082c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082a8:	490c      	ldr	r1, [pc, #48]	; (80082dc <vQueueAddToRegistry+0x50>)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082b2:	4a0a      	ldr	r2, [pc, #40]	; (80082dc <vQueueAddToRegistry+0x50>)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	4413      	add	r3, r2
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082be:	e006      	b.n	80082ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3301      	adds	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2b07      	cmp	r3, #7
 80082ca:	d9e7      	bls.n	800829c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	20001044 	.word	0x20001044

080082e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082f0:	f001 fc94 	bl	8009c1c <vPortEnterCritical>
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082fa:	b25b      	sxtb	r3, r3
 80082fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008300:	d103      	bne.n	800830a <vQueueWaitForMessageRestricted+0x2a>
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008310:	b25b      	sxtb	r3, r3
 8008312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008316:	d103      	bne.n	8008320 <vQueueWaitForMessageRestricted+0x40>
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008320:	f001 fcb0 	bl	8009c84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	2b00      	cmp	r3, #0
 800832a:	d106      	bne.n	800833a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	3324      	adds	r3, #36	; 0x24
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fd2d 	bl	8008d94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800833a:	6978      	ldr	r0, [r7, #20]
 800833c:	f7ff ff26 	bl	800818c <prvUnlockQueue>
	}
 8008340:	bf00      	nop
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08e      	sub	sp, #56	; 0x38
 800834c:	af04      	add	r7, sp, #16
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10c      	bne.n	8008376 <xTaskCreateStatic+0x2e>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	b672      	cpsid	i
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	b662      	cpsie	i
 8008370:	623b      	str	r3, [r7, #32]
}
 8008372:	bf00      	nop
 8008374:	e7fe      	b.n	8008374 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10c      	bne.n	8008396 <xTaskCreateStatic+0x4e>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008380:	b672      	cpsid	i
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	b662      	cpsie	i
 8008390:	61fb      	str	r3, [r7, #28]
}
 8008392:	bf00      	nop
 8008394:	e7fe      	b.n	8008394 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008396:	23c0      	movs	r3, #192	; 0xc0
 8008398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2bc0      	cmp	r3, #192	; 0xc0
 800839e:	d00c      	beq.n	80083ba <xTaskCreateStatic+0x72>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	b672      	cpsid	i
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	b662      	cpsie	i
 80083b4:	61bb      	str	r3, [r7, #24]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01e      	beq.n	8008400 <xTaskCreateStatic+0xb8>
 80083c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01b      	beq.n	8008400 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	2202      	movs	r2, #2
 80083d6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083da:	2300      	movs	r3, #0
 80083dc:	9303      	str	r3, [sp, #12]
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	9302      	str	r3, [sp, #8]
 80083e2:	f107 0314 	add.w	r3, r7, #20
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f850 	bl	8008498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083fa:	f000 f8f9 	bl	80085f0 <prvAddNewTaskToReadyList>
 80083fe:	e001      	b.n	8008404 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008400:	2300      	movs	r3, #0
 8008402:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008404:	697b      	ldr	r3, [r7, #20]
	}
 8008406:	4618      	mov	r0, r3
 8008408:	3728      	adds	r7, #40	; 0x28
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800840e:	b580      	push	{r7, lr}
 8008410:	b08c      	sub	sp, #48	; 0x30
 8008412:	af04      	add	r7, sp, #16
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	603b      	str	r3, [r7, #0]
 800841a:	4613      	mov	r3, r2
 800841c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4618      	mov	r0, r3
 8008424:	f7f9 f9fc 	bl	8001820 <pvPortMalloc>
 8008428:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00e      	beq.n	800844e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008430:	20c0      	movs	r0, #192	; 0xc0
 8008432:	f7f9 f9f5 	bl	8001820 <pvPortMalloc>
 8008436:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	631a      	str	r2, [r3, #48]	; 0x30
 8008444:	e005      	b.n	8008452 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008446:	6978      	ldr	r0, [r7, #20]
 8008448:	f7f9 f9f8 	bl	800183c <vPortFree>
 800844c:	e001      	b.n	8008452 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d017      	beq.n	8008488 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008460:	88fa      	ldrh	r2, [r7, #6]
 8008462:	2300      	movs	r3, #0
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68b9      	ldr	r1, [r7, #8]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 f80e 	bl	8008498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800847c:	69f8      	ldr	r0, [r7, #28]
 800847e:	f000 f8b7 	bl	80085f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008482:	2301      	movs	r3, #1
 8008484:	61bb      	str	r3, [r7, #24]
 8008486:	e002      	b.n	800848e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008488:	f04f 33ff 	mov.w	r3, #4294967295
 800848c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800848e:	69bb      	ldr	r3, [r7, #24]
	}
 8008490:	4618      	mov	r0, r3
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	461a      	mov	r2, r3
 80084b0:	21a5      	movs	r1, #165	; 0xa5
 80084b2:	f002 fd97 	bl	800afe4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80084c0:	440b      	add	r3, r1
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	f023 0307 	bic.w	r3, r3, #7
 80084ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	f003 0307 	and.w	r3, r3, #7
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00c      	beq.n	80084f4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	b672      	cpsid	i
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	b662      	cpsie	i
 80084ee:	617b      	str	r3, [r7, #20]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <prvInitialiseNewTask+0x5a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01f      	beq.n	8008540 <prvInitialiseNewTask+0xa8>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008500:	2300      	movs	r3, #0
 8008502:	61fb      	str	r3, [r7, #28]
 8008504:	e012      	b.n	800852c <prvInitialiseNewTask+0x94>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	4413      	add	r3, r2
 800850c:	7819      	ldrb	r1, [r3, #0]
 800850e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	4413      	add	r3, r2
 8008514:	3334      	adds	r3, #52	; 0x34
 8008516:	460a      	mov	r2, r1
 8008518:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	4413      	add	r3, r2
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d006      	beq.n	8008534 <prvInitialiseNewTask+0x9c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	3301      	adds	r3, #1
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	2b0f      	cmp	r3, #15
 8008530:	d9e9      	bls.n	8008506 <prvInitialiseNewTask+0x6e>
 8008532:	e000      	b.n	8008536 <prvInitialiseNewTask+0x9e>
			{
				break;
 8008534:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800853e:	e003      	b.n	8008548 <prvInitialiseNewTask+0xb0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854a:	2b37      	cmp	r3, #55	; 0x37
 800854c:	d901      	bls.n	8008552 <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800854e:	2337      	movs	r3, #55	; 0x37
 8008550:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008556:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800855c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	2200      	movs	r2, #0
 8008562:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	3304      	adds	r3, #4
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff f94f 	bl	800780c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	3318      	adds	r3, #24
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff f94a 	bl	800780c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800857c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008580:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800858c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	2200      	movs	r2, #0
 8008592:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	2200      	movs	r2, #0
 800859a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	3358      	adds	r3, #88	; 0x58
 80085a2:	2260      	movs	r2, #96	; 0x60
 80085a4:	2100      	movs	r1, #0
 80085a6:	4618      	mov	r0, r3
 80085a8:	f002 fd1c 	bl	800afe4 <memset>
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	4a0d      	ldr	r2, [pc, #52]	; (80085e4 <prvInitialiseNewTask+0x14c>)
 80085b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	4a0c      	ldr	r2, [pc, #48]	; (80085e8 <prvInitialiseNewTask+0x150>)
 80085b6:	661a      	str	r2, [r3, #96]	; 0x60
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	4a0c      	ldr	r2, [pc, #48]	; (80085ec <prvInitialiseNewTask+0x154>)
 80085bc:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	68f9      	ldr	r1, [r7, #12]
 80085c2:	69b8      	ldr	r0, [r7, #24]
 80085c4:	f001 fa20 	bl	8009a08 <pxPortInitialiseStack>
 80085c8:	4602      	mov	r2, r0
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085da:	bf00      	nop
 80085dc:	3720      	adds	r7, #32
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	0800be6c 	.word	0x0800be6c
 80085e8:	0800be8c 	.word	0x0800be8c
 80085ec:	0800be4c 	.word	0x0800be4c

080085f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085f8:	f001 fb10 	bl	8009c1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085fc:	4b2d      	ldr	r3, [pc, #180]	; (80086b4 <prvAddNewTaskToReadyList+0xc4>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	4a2c      	ldr	r2, [pc, #176]	; (80086b4 <prvAddNewTaskToReadyList+0xc4>)
 8008604:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008606:	4b2c      	ldr	r3, [pc, #176]	; (80086b8 <prvAddNewTaskToReadyList+0xc8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d109      	bne.n	8008622 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800860e:	4a2a      	ldr	r2, [pc, #168]	; (80086b8 <prvAddNewTaskToReadyList+0xc8>)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008614:	4b27      	ldr	r3, [pc, #156]	; (80086b4 <prvAddNewTaskToReadyList+0xc4>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d110      	bne.n	800863e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800861c:	f000 fcf0 	bl	8009000 <prvInitialiseTaskLists>
 8008620:	e00d      	b.n	800863e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008622:	4b26      	ldr	r3, [pc, #152]	; (80086bc <prvAddNewTaskToReadyList+0xcc>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d109      	bne.n	800863e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800862a:	4b23      	ldr	r3, [pc, #140]	; (80086b8 <prvAddNewTaskToReadyList+0xc8>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	429a      	cmp	r2, r3
 8008636:	d802      	bhi.n	800863e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008638:	4a1f      	ldr	r2, [pc, #124]	; (80086b8 <prvAddNewTaskToReadyList+0xc8>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800863e:	4b20      	ldr	r3, [pc, #128]	; (80086c0 <prvAddNewTaskToReadyList+0xd0>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3301      	adds	r3, #1
 8008644:	4a1e      	ldr	r2, [pc, #120]	; (80086c0 <prvAddNewTaskToReadyList+0xd0>)
 8008646:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008648:	4b1d      	ldr	r3, [pc, #116]	; (80086c0 <prvAddNewTaskToReadyList+0xd0>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008654:	4b1b      	ldr	r3, [pc, #108]	; (80086c4 <prvAddNewTaskToReadyList+0xd4>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	429a      	cmp	r2, r3
 800865a:	d903      	bls.n	8008664 <prvAddNewTaskToReadyList+0x74>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	4a18      	ldr	r2, [pc, #96]	; (80086c4 <prvAddNewTaskToReadyList+0xd4>)
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4a15      	ldr	r2, [pc, #84]	; (80086c8 <prvAddNewTaskToReadyList+0xd8>)
 8008672:	441a      	add	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3304      	adds	r3, #4
 8008678:	4619      	mov	r1, r3
 800867a:	4610      	mov	r0, r2
 800867c:	f7ff f8d3 	bl	8007826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008680:	f001 fb00 	bl	8009c84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008684:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <prvAddNewTaskToReadyList+0xcc>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00e      	beq.n	80086aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800868c:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <prvAddNewTaskToReadyList+0xc8>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008696:	429a      	cmp	r2, r3
 8008698:	d207      	bcs.n	80086aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800869a:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <prvAddNewTaskToReadyList+0xdc>)
 800869c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086aa:	bf00      	nop
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20000dac 	.word	0x20000dac
 80086b8:	200008d8 	.word	0x200008d8
 80086bc:	20000db8 	.word	0x20000db8
 80086c0:	20000dc8 	.word	0x20000dc8
 80086c4:	20000db4 	.word	0x20000db4
 80086c8:	200008dc 	.word	0x200008dc
 80086cc:	e000ed04 	.word	0xe000ed04

080086d0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08a      	sub	sp, #40	; 0x28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80086da:	2300      	movs	r3, #0
 80086dc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10c      	bne.n	80086fe <vTaskDelayUntil+0x2e>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	b672      	cpsid	i
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	b662      	cpsie	i
 80086f8:	617b      	str	r3, [r7, #20]
}
 80086fa:	bf00      	nop
 80086fc:	e7fe      	b.n	80086fc <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10c      	bne.n	800871e <vTaskDelayUntil+0x4e>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	b672      	cpsid	i
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	b662      	cpsie	i
 8008718:	613b      	str	r3, [r7, #16]
}
 800871a:	bf00      	nop
 800871c:	e7fe      	b.n	800871c <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800871e:	4b2b      	ldr	r3, [pc, #172]	; (80087cc <vTaskDelayUntil+0xfc>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00c      	beq.n	8008740 <vTaskDelayUntil+0x70>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872a:	b672      	cpsid	i
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	b662      	cpsie	i
 800873a:	60fb      	str	r3, [r7, #12]
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8008740:	f000 f8f4 	bl	800892c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008744:	4b22      	ldr	r3, [pc, #136]	; (80087d0 <vTaskDelayUntil+0x100>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	4413      	add	r3, r2
 8008752:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6a3a      	ldr	r2, [r7, #32]
 800875a:	429a      	cmp	r2, r3
 800875c:	d20b      	bcs.n	8008776 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	429a      	cmp	r2, r3
 8008766:	d211      	bcs.n	800878c <vTaskDelayUntil+0xbc>
 8008768:	69fa      	ldr	r2, [r7, #28]
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	429a      	cmp	r2, r3
 800876e:	d90d      	bls.n	800878c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8008770:	2301      	movs	r3, #1
 8008772:	627b      	str	r3, [r7, #36]	; 0x24
 8008774:	e00a      	b.n	800878c <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	429a      	cmp	r2, r3
 800877e:	d303      	bcc.n	8008788 <vTaskDelayUntil+0xb8>
 8008780:	69fa      	ldr	r2, [r7, #28]
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	429a      	cmp	r2, r3
 8008786:	d901      	bls.n	800878c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8008788:	2301      	movs	r3, #1
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	69fa      	ldr	r2, [r7, #28]
 8008790:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	d006      	beq.n	80087a6 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fd81 	bl	80092a8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80087a6:	f000 f8cf 	bl	8008948 <xTaskResumeAll>
 80087aa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d107      	bne.n	80087c2 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 80087b2:	4b08      	ldr	r3, [pc, #32]	; (80087d4 <vTaskDelayUntil+0x104>)
 80087b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087c2:	bf00      	nop
 80087c4:	3728      	adds	r7, #40	; 0x28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20000dd4 	.word	0x20000dd4
 80087d0:	20000db0 	.word	0x20000db0
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d019      	beq.n	800881e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087ea:	4b14      	ldr	r3, [pc, #80]	; (800883c <vTaskDelay+0x64>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00c      	beq.n	800880c <vTaskDelay+0x34>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	b672      	cpsid	i
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	b662      	cpsie	i
 8008806:	60bb      	str	r3, [r7, #8]
}
 8008808:	bf00      	nop
 800880a:	e7fe      	b.n	800880a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800880c:	f000 f88e 	bl	800892c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008810:	2100      	movs	r1, #0
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fd48 	bl	80092a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008818:	f000 f896 	bl	8008948 <xTaskResumeAll>
 800881c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d107      	bne.n	8008834 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008824:	4b06      	ldr	r3, [pc, #24]	; (8008840 <vTaskDelay+0x68>)
 8008826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008834:	bf00      	nop
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20000dd4 	.word	0x20000dd4
 8008840:	e000ed04 	.word	0xe000ed04

08008844 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b08a      	sub	sp, #40	; 0x28
 8008848:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008852:	463a      	mov	r2, r7
 8008854:	1d39      	adds	r1, r7, #4
 8008856:	f107 0308 	add.w	r3, r7, #8
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe ff82 	bl	8007764 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	9202      	str	r2, [sp, #8]
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	2300      	movs	r3, #0
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2300      	movs	r3, #0
 8008870:	460a      	mov	r2, r1
 8008872:	4926      	ldr	r1, [pc, #152]	; (800890c <vTaskStartScheduler+0xc8>)
 8008874:	4826      	ldr	r0, [pc, #152]	; (8008910 <vTaskStartScheduler+0xcc>)
 8008876:	f7ff fd67 	bl	8008348 <xTaskCreateStatic>
 800887a:	4603      	mov	r3, r0
 800887c:	4a25      	ldr	r2, [pc, #148]	; (8008914 <vTaskStartScheduler+0xd0>)
 800887e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008880:	4b24      	ldr	r3, [pc, #144]	; (8008914 <vTaskStartScheduler+0xd0>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008888:	2301      	movs	r3, #1
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	e001      	b.n	8008892 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d102      	bne.n	800889e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008898:	f000 fd5a 	bl	8009350 <xTimerCreateTimerTask>
 800889c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d11d      	bne.n	80088e0 <vTaskStartScheduler+0x9c>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	b672      	cpsid	i
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	b662      	cpsie	i
 80088b8:	613b      	str	r3, [r7, #16]
}
 80088ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088bc:	4b16      	ldr	r3, [pc, #88]	; (8008918 <vTaskStartScheduler+0xd4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3358      	adds	r3, #88	; 0x58
 80088c2:	4a16      	ldr	r2, [pc, #88]	; (800891c <vTaskStartScheduler+0xd8>)
 80088c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088c6:	4b16      	ldr	r3, [pc, #88]	; (8008920 <vTaskStartScheduler+0xdc>)
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088ce:	4b15      	ldr	r3, [pc, #84]	; (8008924 <vTaskStartScheduler+0xe0>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088d4:	4b14      	ldr	r3, [pc, #80]	; (8008928 <vTaskStartScheduler+0xe4>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088da:	f001 f921 	bl	8009b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088de:	e010      	b.n	8008902 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d10c      	bne.n	8008902 <vTaskStartScheduler+0xbe>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	b672      	cpsid	i
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	b662      	cpsie	i
 80088fc:	60fb      	str	r3, [r7, #12]
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <vTaskStartScheduler+0xbc>
}
 8008902:	bf00      	nop
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	0800baa8 	.word	0x0800baa8
 8008910:	08008fcd 	.word	0x08008fcd
 8008914:	20000dd0 	.word	0x20000dd0
 8008918:	200008d8 	.word	0x200008d8
 800891c:	2000001c 	.word	0x2000001c
 8008920:	20000dcc 	.word	0x20000dcc
 8008924:	20000db8 	.word	0x20000db8
 8008928:	20000db0 	.word	0x20000db0

0800892c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008930:	4b04      	ldr	r3, [pc, #16]	; (8008944 <vTaskSuspendAll+0x18>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	4a03      	ldr	r2, [pc, #12]	; (8008944 <vTaskSuspendAll+0x18>)
 8008938:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800893a:	bf00      	nop
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	20000dd4 	.word	0x20000dd4

08008948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008956:	4b43      	ldr	r3, [pc, #268]	; (8008a64 <xTaskResumeAll+0x11c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10c      	bne.n	8008978 <xTaskResumeAll+0x30>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	b672      	cpsid	i
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	b662      	cpsie	i
 8008972:	603b      	str	r3, [r7, #0]
}
 8008974:	bf00      	nop
 8008976:	e7fe      	b.n	8008976 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008978:	f001 f950 	bl	8009c1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800897c:	4b39      	ldr	r3, [pc, #228]	; (8008a64 <xTaskResumeAll+0x11c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3b01      	subs	r3, #1
 8008982:	4a38      	ldr	r2, [pc, #224]	; (8008a64 <xTaskResumeAll+0x11c>)
 8008984:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008986:	4b37      	ldr	r3, [pc, #220]	; (8008a64 <xTaskResumeAll+0x11c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d162      	bne.n	8008a54 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800898e:	4b36      	ldr	r3, [pc, #216]	; (8008a68 <xTaskResumeAll+0x120>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d05e      	beq.n	8008a54 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008996:	e02f      	b.n	80089f8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008998:	4b34      	ldr	r3, [pc, #208]	; (8008a6c <xTaskResumeAll+0x124>)
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3318      	adds	r3, #24
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe ff9b 	bl	80078e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe ff96 	bl	80078e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	4b2d      	ldr	r3, [pc, #180]	; (8008a70 <xTaskResumeAll+0x128>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d903      	bls.n	80089c8 <xTaskResumeAll+0x80>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	4a2a      	ldr	r2, [pc, #168]	; (8008a70 <xTaskResumeAll+0x128>)
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4a27      	ldr	r2, [pc, #156]	; (8008a74 <xTaskResumeAll+0x12c>)
 80089d6:	441a      	add	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7fe ff21 	bl	8007826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e8:	4b23      	ldr	r3, [pc, #140]	; (8008a78 <xTaskResumeAll+0x130>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d302      	bcc.n	80089f8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80089f2:	4b22      	ldr	r3, [pc, #136]	; (8008a7c <xTaskResumeAll+0x134>)
 80089f4:	2201      	movs	r2, #1
 80089f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089f8:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <xTaskResumeAll+0x124>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1cb      	bne.n	8008998 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a06:	f000 fb9f 	bl	8009148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a0a:	4b1d      	ldr	r3, [pc, #116]	; (8008a80 <xTaskResumeAll+0x138>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d010      	beq.n	8008a38 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a16:	f000 f847 	bl	8008aa8 <xTaskIncrementTick>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008a20:	4b16      	ldr	r3, [pc, #88]	; (8008a7c <xTaskResumeAll+0x134>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1f1      	bne.n	8008a16 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <xTaskResumeAll+0x138>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a38:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <xTaskResumeAll+0x134>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d009      	beq.n	8008a54 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a44:	4b0f      	ldr	r3, [pc, #60]	; (8008a84 <xTaskResumeAll+0x13c>)
 8008a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a54:	f001 f916 	bl	8009c84 <vPortExitCritical>

	return xAlreadyYielded;
 8008a58:	68bb      	ldr	r3, [r7, #8]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000dd4 	.word	0x20000dd4
 8008a68:	20000dac 	.word	0x20000dac
 8008a6c:	20000d6c 	.word	0x20000d6c
 8008a70:	20000db4 	.word	0x20000db4
 8008a74:	200008dc 	.word	0x200008dc
 8008a78:	200008d8 	.word	0x200008d8
 8008a7c:	20000dc0 	.word	0x20000dc0
 8008a80:	20000dbc 	.word	0x20000dbc
 8008a84:	e000ed04 	.word	0xe000ed04

08008a88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <xTaskGetTickCount+0x1c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a94:	687b      	ldr	r3, [r7, #4]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	20000db0 	.word	0x20000db0

08008aa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ab2:	4b54      	ldr	r3, [pc, #336]	; (8008c04 <xTaskIncrementTick+0x15c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f040 8091 	bne.w	8008bde <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008abc:	4b52      	ldr	r3, [pc, #328]	; (8008c08 <xTaskIncrementTick+0x160>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ac4:	4a50      	ldr	r2, [pc, #320]	; (8008c08 <xTaskIncrementTick+0x160>)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d122      	bne.n	8008b16 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ad0:	4b4e      	ldr	r3, [pc, #312]	; (8008c0c <xTaskIncrementTick+0x164>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00c      	beq.n	8008af4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	b672      	cpsid	i
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	b662      	cpsie	i
 8008aee:	603b      	str	r3, [r7, #0]
}
 8008af0:	bf00      	nop
 8008af2:	e7fe      	b.n	8008af2 <xTaskIncrementTick+0x4a>
 8008af4:	4b45      	ldr	r3, [pc, #276]	; (8008c0c <xTaskIncrementTick+0x164>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	4b45      	ldr	r3, [pc, #276]	; (8008c10 <xTaskIncrementTick+0x168>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a43      	ldr	r2, [pc, #268]	; (8008c0c <xTaskIncrementTick+0x164>)
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	4a43      	ldr	r2, [pc, #268]	; (8008c10 <xTaskIncrementTick+0x168>)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	4b42      	ldr	r3, [pc, #264]	; (8008c14 <xTaskIncrementTick+0x16c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	4a41      	ldr	r2, [pc, #260]	; (8008c14 <xTaskIncrementTick+0x16c>)
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	f000 fb19 	bl	8009148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b16:	4b40      	ldr	r3, [pc, #256]	; (8008c18 <xTaskIncrementTick+0x170>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d349      	bcc.n	8008bb4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b20:	4b3a      	ldr	r3, [pc, #232]	; (8008c0c <xTaskIncrementTick+0x164>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d104      	bne.n	8008b34 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b2a:	4b3b      	ldr	r3, [pc, #236]	; (8008c18 <xTaskIncrementTick+0x170>)
 8008b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b30:	601a      	str	r2, [r3, #0]
					break;
 8008b32:	e03f      	b.n	8008bb4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b34:	4b35      	ldr	r3, [pc, #212]	; (8008c0c <xTaskIncrementTick+0x164>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d203      	bcs.n	8008b54 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b4c:	4a32      	ldr	r2, [pc, #200]	; (8008c18 <xTaskIncrementTick+0x170>)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b52:	e02f      	b.n	8008bb4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fe fec1 	bl	80078e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d004      	beq.n	8008b70 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	3318      	adds	r3, #24
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe feb8 	bl	80078e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b74:	4b29      	ldr	r3, [pc, #164]	; (8008c1c <xTaskIncrementTick+0x174>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d903      	bls.n	8008b84 <xTaskIncrementTick+0xdc>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	4a26      	ldr	r2, [pc, #152]	; (8008c1c <xTaskIncrementTick+0x174>)
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b88:	4613      	mov	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4a23      	ldr	r2, [pc, #140]	; (8008c20 <xTaskIncrementTick+0x178>)
 8008b92:	441a      	add	r2, r3
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f7fe fe43 	bl	8007826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba4:	4b1f      	ldr	r3, [pc, #124]	; (8008c24 <xTaskIncrementTick+0x17c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d3b8      	bcc.n	8008b20 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bb2:	e7b5      	b.n	8008b20 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bb4:	4b1b      	ldr	r3, [pc, #108]	; (8008c24 <xTaskIncrementTick+0x17c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bba:	4919      	ldr	r1, [pc, #100]	; (8008c20 <xTaskIncrementTick+0x178>)
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	4413      	add	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	440b      	add	r3, r1
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d901      	bls.n	8008bd0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8008bd0:	4b15      	ldr	r3, [pc, #84]	; (8008c28 <xTaskIncrementTick+0x180>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d109      	bne.n	8008bec <xTaskIncrementTick+0x144>
			{
				vApplicationTickHook();
 8008bd8:	f7fa fe85 	bl	80038e6 <vApplicationTickHook>
 8008bdc:	e006      	b.n	8008bec <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bde:	4b12      	ldr	r3, [pc, #72]	; (8008c28 <xTaskIncrementTick+0x180>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a10      	ldr	r2, [pc, #64]	; (8008c28 <xTaskIncrementTick+0x180>)
 8008be6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8008be8:	f7fa fe7d 	bl	80038e6 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008bec:	4b0f      	ldr	r3, [pc, #60]	; (8008c2c <xTaskIncrementTick+0x184>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <xTaskIncrementTick+0x150>
		{
			xSwitchRequired = pdTRUE;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008bf8:	697b      	ldr	r3, [r7, #20]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000dd4 	.word	0x20000dd4
 8008c08:	20000db0 	.word	0x20000db0
 8008c0c:	20000d64 	.word	0x20000d64
 8008c10:	20000d68 	.word	0x20000d68
 8008c14:	20000dc4 	.word	0x20000dc4
 8008c18:	20000dcc 	.word	0x20000dcc
 8008c1c:	20000db4 	.word	0x20000db4
 8008c20:	200008dc 	.word	0x200008dc
 8008c24:	200008d8 	.word	0x200008d8
 8008c28:	20000dbc 	.word	0x20000dbc
 8008c2c:	20000dc0 	.word	0x20000dc0

08008c30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c36:	4b3e      	ldr	r3, [pc, #248]	; (8008d30 <vTaskSwitchContext+0x100>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c3e:	4b3d      	ldr	r3, [pc, #244]	; (8008d34 <vTaskSwitchContext+0x104>)
 8008c40:	2201      	movs	r2, #1
 8008c42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c44:	e06f      	b.n	8008d26 <vTaskSwitchContext+0xf6>
		xYieldPending = pdFALSE;
 8008c46:	4b3b      	ldr	r3, [pc, #236]	; (8008d34 <vTaskSwitchContext+0x104>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008c4c:	4b3a      	ldr	r3, [pc, #232]	; (8008d38 <vTaskSwitchContext+0x108>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c52:	613b      	str	r3, [r7, #16]
 8008c54:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d111      	bne.n	8008c88 <vTaskSwitchContext+0x58>
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	3304      	adds	r3, #4
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d10b      	bne.n	8008c88 <vTaskSwitchContext+0x58>
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	3308      	adds	r3, #8
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d105      	bne.n	8008c88 <vTaskSwitchContext+0x58>
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	330c      	adds	r3, #12
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d008      	beq.n	8008c9a <vTaskSwitchContext+0x6a>
 8008c88:	4b2b      	ldr	r3, [pc, #172]	; (8008d38 <vTaskSwitchContext+0x108>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	4b2a      	ldr	r3, [pc, #168]	; (8008d38 <vTaskSwitchContext+0x108>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3334      	adds	r3, #52	; 0x34
 8008c92:	4619      	mov	r1, r3
 8008c94:	4610      	mov	r0, r2
 8008c96:	f7fa fe2d 	bl	80038f4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c9a:	4b28      	ldr	r3, [pc, #160]	; (8008d3c <vTaskSwitchContext+0x10c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	e012      	b.n	8008cc8 <vTaskSwitchContext+0x98>
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10c      	bne.n	8008cc2 <vTaskSwitchContext+0x92>
	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	b672      	cpsid	i
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	b662      	cpsie	i
 8008cbc:	607b      	str	r3, [r7, #4]
}
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <vTaskSwitchContext+0x90>
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	491d      	ldr	r1, [pc, #116]	; (8008d40 <vTaskSwitchContext+0x110>)
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	440b      	add	r3, r1
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0e2      	beq.n	8008ca2 <vTaskSwitchContext+0x72>
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4a16      	ldr	r2, [pc, #88]	; (8008d40 <vTaskSwitchContext+0x110>)
 8008ce8:	4413      	add	r3, r2
 8008cea:	60bb      	str	r3, [r7, #8]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	605a      	str	r2, [r3, #4]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d104      	bne.n	8008d0c <vTaskSwitchContext+0xdc>
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	605a      	str	r2, [r3, #4]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	4a09      	ldr	r2, [pc, #36]	; (8008d38 <vTaskSwitchContext+0x108>)
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	4a09      	ldr	r2, [pc, #36]	; (8008d3c <vTaskSwitchContext+0x10c>)
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d1c:	4b06      	ldr	r3, [pc, #24]	; (8008d38 <vTaskSwitchContext+0x108>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3358      	adds	r3, #88	; 0x58
 8008d22:	4a08      	ldr	r2, [pc, #32]	; (8008d44 <vTaskSwitchContext+0x114>)
 8008d24:	6013      	str	r3, [r2, #0]
}
 8008d26:	bf00      	nop
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20000dd4 	.word	0x20000dd4
 8008d34:	20000dc0 	.word	0x20000dc0
 8008d38:	200008d8 	.word	0x200008d8
 8008d3c:	20000db4 	.word	0x20000db4
 8008d40:	200008dc 	.word	0x200008dc
 8008d44:	2000001c 	.word	0x2000001c

08008d48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10c      	bne.n	8008d72 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	b672      	cpsid	i
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	b662      	cpsie	i
 8008d6c:	60fb      	str	r3, [r7, #12]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d72:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <vTaskPlaceOnEventList+0x48>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3318      	adds	r3, #24
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7fe fd77 	bl	800786e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d80:	2101      	movs	r1, #1
 8008d82:	6838      	ldr	r0, [r7, #0]
 8008d84:	f000 fa90 	bl	80092a8 <prvAddCurrentTaskToDelayedList>
}
 8008d88:	bf00      	nop
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	200008d8 	.word	0x200008d8

08008d94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10c      	bne.n	8008dc0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008daa:	b672      	cpsid	i
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	b662      	cpsie	i
 8008dba:	617b      	str	r3, [r7, #20]
}
 8008dbc:	bf00      	nop
 8008dbe:	e7fe      	b.n	8008dbe <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dc0:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <vTaskPlaceOnEventListRestricted+0x58>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3318      	adds	r3, #24
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7fe fd2c 	bl	8007826 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	68b8      	ldr	r0, [r7, #8]
 8008dde:	f000 fa63 	bl	80092a8 <prvAddCurrentTaskToDelayedList>
	}
 8008de2:	bf00      	nop
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	200008d8 	.word	0x200008d8

08008df0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10c      	bne.n	8008e20 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	b672      	cpsid	i
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	b662      	cpsie	i
 8008e1a:	60fb      	str	r3, [r7, #12]
}
 8008e1c:	bf00      	nop
 8008e1e:	e7fe      	b.n	8008e1e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	3318      	adds	r3, #24
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fe fd5b 	bl	80078e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ea4 <xTaskRemoveFromEventList+0xb4>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d11d      	bne.n	8008e6e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	3304      	adds	r3, #4
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fd52 	bl	80078e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e40:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <xTaskRemoveFromEventList+0xb8>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d903      	bls.n	8008e50 <xTaskRemoveFromEventList+0x60>
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	4a16      	ldr	r2, [pc, #88]	; (8008ea8 <xTaskRemoveFromEventList+0xb8>)
 8008e4e:	6013      	str	r3, [r2, #0]
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e54:	4613      	mov	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4a13      	ldr	r2, [pc, #76]	; (8008eac <xTaskRemoveFromEventList+0xbc>)
 8008e5e:	441a      	add	r2, r3
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	3304      	adds	r3, #4
 8008e64:	4619      	mov	r1, r3
 8008e66:	4610      	mov	r0, r2
 8008e68:	f7fe fcdd 	bl	8007826 <vListInsertEnd>
 8008e6c:	e005      	b.n	8008e7a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	3318      	adds	r3, #24
 8008e72:	4619      	mov	r1, r3
 8008e74:	480e      	ldr	r0, [pc, #56]	; (8008eb0 <xTaskRemoveFromEventList+0xc0>)
 8008e76:	f7fe fcd6 	bl	8007826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7e:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <xTaskRemoveFromEventList+0xc4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d905      	bls.n	8008e94 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <xTaskRemoveFromEventList+0xc8>)
 8008e8e:	2201      	movs	r2, #1
 8008e90:	601a      	str	r2, [r3, #0]
 8008e92:	e001      	b.n	8008e98 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008e94:	2300      	movs	r3, #0
 8008e96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e98:	697b      	ldr	r3, [r7, #20]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000dd4 	.word	0x20000dd4
 8008ea8:	20000db4 	.word	0x20000db4
 8008eac:	200008dc 	.word	0x200008dc
 8008eb0:	20000d6c 	.word	0x20000d6c
 8008eb4:	200008d8 	.word	0x200008d8
 8008eb8:	20000dc0 	.word	0x20000dc0

08008ebc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ec4:	4b06      	ldr	r3, [pc, #24]	; (8008ee0 <vTaskInternalSetTimeOutState+0x24>)
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ecc:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <vTaskInternalSetTimeOutState+0x28>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	605a      	str	r2, [r3, #4]
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	20000dc4 	.word	0x20000dc4
 8008ee4:	20000db0 	.word	0x20000db0

08008ee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10c      	bne.n	8008f12 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	b672      	cpsid	i
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	b662      	cpsie	i
 8008f0c:	613b      	str	r3, [r7, #16]
}
 8008f0e:	bf00      	nop
 8008f10:	e7fe      	b.n	8008f10 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10c      	bne.n	8008f32 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1c:	b672      	cpsid	i
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	b662      	cpsie	i
 8008f2c:	60fb      	str	r3, [r7, #12]
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008f32:	f000 fe73 	bl	8009c1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f36:	4b1d      	ldr	r3, [pc, #116]	; (8008fac <xTaskCheckForTimeOut+0xc4>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	1ad3      	subs	r3, r2, r3
 8008f44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4e:	d102      	bne.n	8008f56 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f50:	2300      	movs	r3, #0
 8008f52:	61fb      	str	r3, [r7, #28]
 8008f54:	e023      	b.n	8008f9e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <xTaskCheckForTimeOut+0xc8>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d007      	beq.n	8008f72 <xTaskCheckForTimeOut+0x8a>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d302      	bcc.n	8008f72 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	61fb      	str	r3, [r7, #28]
 8008f70:	e015      	b.n	8008f9e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d20b      	bcs.n	8008f94 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	1ad2      	subs	r2, r2, r3
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff ff97 	bl	8008ebc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61fb      	str	r3, [r7, #28]
 8008f92:	e004      	b.n	8008f9e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f9e:	f000 fe71 	bl	8009c84 <vPortExitCritical>

	return xReturn;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20000db0 	.word	0x20000db0
 8008fb0:	20000dc4 	.word	0x20000dc4

08008fb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008fb8:	4b03      	ldr	r3, [pc, #12]	; (8008fc8 <vTaskMissedYield+0x14>)
 8008fba:	2201      	movs	r2, #1
 8008fbc:	601a      	str	r2, [r3, #0]
}
 8008fbe:	bf00      	nop
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	20000dc0 	.word	0x20000dc0

08008fcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fd4:	f000 f854 	bl	8009080 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fd8:	4b07      	ldr	r3, [pc, #28]	; (8008ff8 <prvIdleTask+0x2c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d907      	bls.n	8008ff0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008fe0:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <prvIdleTask+0x30>)
 8008fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008ff0:	f7fa fc72 	bl	80038d8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008ff4:	e7ee      	b.n	8008fd4 <prvIdleTask+0x8>
 8008ff6:	bf00      	nop
 8008ff8:	200008dc 	.word	0x200008dc
 8008ffc:	e000ed04 	.word	0xe000ed04

08009000 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009006:	2300      	movs	r3, #0
 8009008:	607b      	str	r3, [r7, #4]
 800900a:	e00c      	b.n	8009026 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4a12      	ldr	r2, [pc, #72]	; (8009060 <prvInitialiseTaskLists+0x60>)
 8009018:	4413      	add	r3, r2
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe fbd6 	bl	80077cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3301      	adds	r3, #1
 8009024:	607b      	str	r3, [r7, #4]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b37      	cmp	r3, #55	; 0x37
 800902a:	d9ef      	bls.n	800900c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800902c:	480d      	ldr	r0, [pc, #52]	; (8009064 <prvInitialiseTaskLists+0x64>)
 800902e:	f7fe fbcd 	bl	80077cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009032:	480d      	ldr	r0, [pc, #52]	; (8009068 <prvInitialiseTaskLists+0x68>)
 8009034:	f7fe fbca 	bl	80077cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009038:	480c      	ldr	r0, [pc, #48]	; (800906c <prvInitialiseTaskLists+0x6c>)
 800903a:	f7fe fbc7 	bl	80077cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800903e:	480c      	ldr	r0, [pc, #48]	; (8009070 <prvInitialiseTaskLists+0x70>)
 8009040:	f7fe fbc4 	bl	80077cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009044:	480b      	ldr	r0, [pc, #44]	; (8009074 <prvInitialiseTaskLists+0x74>)
 8009046:	f7fe fbc1 	bl	80077cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800904a:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <prvInitialiseTaskLists+0x78>)
 800904c:	4a05      	ldr	r2, [pc, #20]	; (8009064 <prvInitialiseTaskLists+0x64>)
 800904e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009050:	4b0a      	ldr	r3, [pc, #40]	; (800907c <prvInitialiseTaskLists+0x7c>)
 8009052:	4a05      	ldr	r2, [pc, #20]	; (8009068 <prvInitialiseTaskLists+0x68>)
 8009054:	601a      	str	r2, [r3, #0]
}
 8009056:	bf00      	nop
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	200008dc 	.word	0x200008dc
 8009064:	20000d3c 	.word	0x20000d3c
 8009068:	20000d50 	.word	0x20000d50
 800906c:	20000d6c 	.word	0x20000d6c
 8009070:	20000d80 	.word	0x20000d80
 8009074:	20000d98 	.word	0x20000d98
 8009078:	20000d64 	.word	0x20000d64
 800907c:	20000d68 	.word	0x20000d68

08009080 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009086:	e019      	b.n	80090bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009088:	f000 fdc8 	bl	8009c1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800908c:	4b10      	ldr	r3, [pc, #64]	; (80090d0 <prvCheckTasksWaitingTermination+0x50>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3304      	adds	r3, #4
 8009098:	4618      	mov	r0, r3
 800909a:	f7fe fc21 	bl	80078e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800909e:	4b0d      	ldr	r3, [pc, #52]	; (80090d4 <prvCheckTasksWaitingTermination+0x54>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	4a0b      	ldr	r2, [pc, #44]	; (80090d4 <prvCheckTasksWaitingTermination+0x54>)
 80090a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80090a8:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <prvCheckTasksWaitingTermination+0x58>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	4a0a      	ldr	r2, [pc, #40]	; (80090d8 <prvCheckTasksWaitingTermination+0x58>)
 80090b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80090b2:	f000 fde7 	bl	8009c84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f810 	bl	80090dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <prvCheckTasksWaitingTermination+0x58>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e1      	bne.n	8009088 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80090c4:	bf00      	nop
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000d80 	.word	0x20000d80
 80090d4:	20000dac 	.word	0x20000dac
 80090d8:	20000d94 	.word	0x20000d94

080090dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3358      	adds	r3, #88	; 0x58
 80090e8:	4618      	mov	r0, r3
 80090ea:	f002 f8b1 	bl	800b250 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d108      	bne.n	800910a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7f8 fb9d 	bl	800183c <vPortFree>
				vPortFree( pxTCB );
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7f8 fb9a 	bl	800183c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009108:	e01a      	b.n	8009140 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009110:	2b01      	cmp	r3, #1
 8009112:	d103      	bne.n	800911c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7f8 fb91 	bl	800183c <vPortFree>
	}
 800911a:	e011      	b.n	8009140 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8009122:	2b02      	cmp	r3, #2
 8009124:	d00c      	beq.n	8009140 <prvDeleteTCB+0x64>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	b672      	cpsid	i
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	b662      	cpsie	i
 800913a:	60fb      	str	r3, [r7, #12]
}
 800913c:	bf00      	nop
 800913e:	e7fe      	b.n	800913e <prvDeleteTCB+0x62>
	}
 8009140:	bf00      	nop
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <prvResetNextTaskUnblockTime+0x38>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d104      	bne.n	8009162 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009158:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <prvResetNextTaskUnblockTime+0x3c>)
 800915a:	f04f 32ff 	mov.w	r2, #4294967295
 800915e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009160:	e008      	b.n	8009174 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009162:	4b07      	ldr	r3, [pc, #28]	; (8009180 <prvResetNextTaskUnblockTime+0x38>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	4a04      	ldr	r2, [pc, #16]	; (8009184 <prvResetNextTaskUnblockTime+0x3c>)
 8009172:	6013      	str	r3, [r2, #0]
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	20000d64 	.word	0x20000d64
 8009184:	20000dcc 	.word	0x20000dcc

08009188 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <xTaskGetSchedulerState+0x34>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d102      	bne.n	800919c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009196:	2301      	movs	r3, #1
 8009198:	607b      	str	r3, [r7, #4]
 800919a:	e008      	b.n	80091ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800919c:	4b08      	ldr	r3, [pc, #32]	; (80091c0 <xTaskGetSchedulerState+0x38>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d102      	bne.n	80091aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091a4:	2302      	movs	r3, #2
 80091a6:	607b      	str	r3, [r7, #4]
 80091a8:	e001      	b.n	80091ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091aa:	2300      	movs	r3, #0
 80091ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091ae:	687b      	ldr	r3, [r7, #4]
	}
 80091b0:	4618      	mov	r0, r3
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	20000db8 	.word	0x20000db8
 80091c0:	20000dd4 	.word	0x20000dd4

080091c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80091d0:	2300      	movs	r3, #0
 80091d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d05a      	beq.n	8009290 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80091da:	4b30      	ldr	r3, [pc, #192]	; (800929c <xTaskPriorityDisinherit+0xd8>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d00c      	beq.n	80091fe <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	b672      	cpsid	i
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	b662      	cpsie	i
 80091f8:	60fb      	str	r3, [r7, #12]
}
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10c      	bne.n	8009220 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920a:	b672      	cpsid	i
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	b662      	cpsie	i
 800921a:	60bb      	str	r3, [r7, #8]
}
 800921c:	bf00      	nop
 800921e:	e7fe      	b.n	800921e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009224:	1e5a      	subs	r2, r3, #1
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009232:	429a      	cmp	r2, r3
 8009234:	d02c      	beq.n	8009290 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923a:	2b00      	cmp	r3, #0
 800923c:	d128      	bne.n	8009290 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	3304      	adds	r3, #4
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe fb4c 	bl	80078e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009254:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009260:	4b0f      	ldr	r3, [pc, #60]	; (80092a0 <xTaskPriorityDisinherit+0xdc>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	429a      	cmp	r2, r3
 8009266:	d903      	bls.n	8009270 <xTaskPriorityDisinherit+0xac>
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926c:	4a0c      	ldr	r2, [pc, #48]	; (80092a0 <xTaskPriorityDisinherit+0xdc>)
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009274:	4613      	mov	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4a09      	ldr	r2, [pc, #36]	; (80092a4 <xTaskPriorityDisinherit+0xe0>)
 800927e:	441a      	add	r2, r3
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	3304      	adds	r3, #4
 8009284:	4619      	mov	r1, r3
 8009286:	4610      	mov	r0, r2
 8009288:	f7fe facd 	bl	8007826 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800928c:	2301      	movs	r3, #1
 800928e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009290:	697b      	ldr	r3, [r7, #20]
	}
 8009292:	4618      	mov	r0, r3
 8009294:	3718      	adds	r7, #24
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	200008d8 	.word	0x200008d8
 80092a0:	20000db4 	.word	0x20000db4
 80092a4:	200008dc 	.word	0x200008dc

080092a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092b2:	4b21      	ldr	r3, [pc, #132]	; (8009338 <prvAddCurrentTaskToDelayedList+0x90>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092b8:	4b20      	ldr	r3, [pc, #128]	; (800933c <prvAddCurrentTaskToDelayedList+0x94>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3304      	adds	r3, #4
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe fb0e 	bl	80078e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ca:	d10a      	bne.n	80092e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d007      	beq.n	80092e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092d2:	4b1a      	ldr	r3, [pc, #104]	; (800933c <prvAddCurrentTaskToDelayedList+0x94>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4619      	mov	r1, r3
 80092da:	4819      	ldr	r0, [pc, #100]	; (8009340 <prvAddCurrentTaskToDelayedList+0x98>)
 80092dc:	f7fe faa3 	bl	8007826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092e0:	e026      	b.n	8009330 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4413      	add	r3, r2
 80092e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092ea:	4b14      	ldr	r3, [pc, #80]	; (800933c <prvAddCurrentTaskToDelayedList+0x94>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d209      	bcs.n	800930e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092fa:	4b12      	ldr	r3, [pc, #72]	; (8009344 <prvAddCurrentTaskToDelayedList+0x9c>)
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	4b0f      	ldr	r3, [pc, #60]	; (800933c <prvAddCurrentTaskToDelayedList+0x94>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3304      	adds	r3, #4
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f7fe fab1 	bl	800786e <vListInsert>
}
 800930c:	e010      	b.n	8009330 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800930e:	4b0e      	ldr	r3, [pc, #56]	; (8009348 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	4b0a      	ldr	r3, [pc, #40]	; (800933c <prvAddCurrentTaskToDelayedList+0x94>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3304      	adds	r3, #4
 8009318:	4619      	mov	r1, r3
 800931a:	4610      	mov	r0, r2
 800931c:	f7fe faa7 	bl	800786e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009320:	4b0a      	ldr	r3, [pc, #40]	; (800934c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	429a      	cmp	r2, r3
 8009328:	d202      	bcs.n	8009330 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800932a:	4a08      	ldr	r2, [pc, #32]	; (800934c <prvAddCurrentTaskToDelayedList+0xa4>)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6013      	str	r3, [r2, #0]
}
 8009330:	bf00      	nop
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20000db0 	.word	0x20000db0
 800933c:	200008d8 	.word	0x200008d8
 8009340:	20000d98 	.word	0x20000d98
 8009344:	20000d68 	.word	0x20000d68
 8009348:	20000d64 	.word	0x20000d64
 800934c:	20000dcc 	.word	0x20000dcc

08009350 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08a      	sub	sp, #40	; 0x28
 8009354:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800935a:	f000 fb15 	bl	8009988 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800935e:	4b1d      	ldr	r3, [pc, #116]	; (80093d4 <xTimerCreateTimerTask+0x84>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d021      	beq.n	80093aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800936a:	2300      	movs	r3, #0
 800936c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800936e:	1d3a      	adds	r2, r7, #4
 8009370:	f107 0108 	add.w	r1, r7, #8
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe fa0d 	bl	8007798 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	9202      	str	r2, [sp, #8]
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	2302      	movs	r3, #2
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	2300      	movs	r3, #0
 800938e:	460a      	mov	r2, r1
 8009390:	4911      	ldr	r1, [pc, #68]	; (80093d8 <xTimerCreateTimerTask+0x88>)
 8009392:	4812      	ldr	r0, [pc, #72]	; (80093dc <xTimerCreateTimerTask+0x8c>)
 8009394:	f7fe ffd8 	bl	8008348 <xTaskCreateStatic>
 8009398:	4603      	mov	r3, r0
 800939a:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <xTimerCreateTimerTask+0x90>)
 800939c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800939e:	4b10      	ldr	r3, [pc, #64]	; (80093e0 <xTimerCreateTimerTask+0x90>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093a6:	2301      	movs	r3, #1
 80093a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10c      	bne.n	80093ca <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	b672      	cpsid	i
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	b662      	cpsie	i
 80093c4:	613b      	str	r3, [r7, #16]
}
 80093c6:	bf00      	nop
 80093c8:	e7fe      	b.n	80093c8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80093ca:	697b      	ldr	r3, [r7, #20]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	20000e08 	.word	0x20000e08
 80093d8:	0800bab0 	.word	0x0800bab0
 80093dc:	08009521 	.word	0x08009521
 80093e0:	20000e0c 	.word	0x20000e0c

080093e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08a      	sub	sp, #40	; 0x28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093f2:	2300      	movs	r3, #0
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10c      	bne.n	8009416 <xTimerGenericCommand+0x32>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	b672      	cpsid	i
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	b662      	cpsie	i
 8009410:	623b      	str	r3, [r7, #32]
}
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009416:	4b1a      	ldr	r3, [pc, #104]	; (8009480 <xTimerGenericCommand+0x9c>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d02a      	beq.n	8009474 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b05      	cmp	r3, #5
 800942e:	dc18      	bgt.n	8009462 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009430:	f7ff feaa 	bl	8009188 <xTaskGetSchedulerState>
 8009434:	4603      	mov	r3, r0
 8009436:	2b02      	cmp	r3, #2
 8009438:	d109      	bne.n	800944e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800943a:	4b11      	ldr	r3, [pc, #68]	; (8009480 <xTimerGenericCommand+0x9c>)
 800943c:	6818      	ldr	r0, [r3, #0]
 800943e:	f107 0110 	add.w	r1, r7, #16
 8009442:	2300      	movs	r3, #0
 8009444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009446:	f7fe fb85 	bl	8007b54 <xQueueGenericSend>
 800944a:	6278      	str	r0, [r7, #36]	; 0x24
 800944c:	e012      	b.n	8009474 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800944e:	4b0c      	ldr	r3, [pc, #48]	; (8009480 <xTimerGenericCommand+0x9c>)
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	f107 0110 	add.w	r1, r7, #16
 8009456:	2300      	movs	r3, #0
 8009458:	2200      	movs	r2, #0
 800945a:	f7fe fb7b 	bl	8007b54 <xQueueGenericSend>
 800945e:	6278      	str	r0, [r7, #36]	; 0x24
 8009460:	e008      	b.n	8009474 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009462:	4b07      	ldr	r3, [pc, #28]	; (8009480 <xTimerGenericCommand+0x9c>)
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	f107 0110 	add.w	r1, r7, #16
 800946a:	2300      	movs	r3, #0
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	f7fe fc77 	bl	8007d60 <xQueueGenericSendFromISR>
 8009472:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009476:	4618      	mov	r0, r3
 8009478:	3728      	adds	r7, #40	; 0x28
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20000e08 	.word	0x20000e08

08009484 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b088      	sub	sp, #32
 8009488:	af02      	add	r7, sp, #8
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800948e:	4b23      	ldr	r3, [pc, #140]	; (800951c <prvProcessExpiredTimer+0x98>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	3304      	adds	r3, #4
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe fa1f 	bl	80078e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d024      	beq.n	80094fa <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	699a      	ldr	r2, [r3, #24]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	18d1      	adds	r1, r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	6978      	ldr	r0, [r7, #20]
 80094be:	f000 f8d3 	bl	8009668 <prvInsertTimerInActiveList>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d021      	beq.n	800950c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094c8:	2300      	movs	r3, #0
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	2300      	movs	r3, #0
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	2100      	movs	r1, #0
 80094d2:	6978      	ldr	r0, [r7, #20]
 80094d4:	f7ff ff86 	bl	80093e4 <xTimerGenericCommand>
 80094d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d115      	bne.n	800950c <prvProcessExpiredTimer+0x88>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	b672      	cpsid	i
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	b662      	cpsie	i
 80094f4:	60fb      	str	r3, [r7, #12]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009500:	f023 0301 	bic.w	r3, r3, #1
 8009504:	b2da      	uxtb	r2, r3
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	6978      	ldr	r0, [r7, #20]
 8009512:	4798      	blx	r3
}
 8009514:	bf00      	nop
 8009516:	3718      	adds	r7, #24
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	20000e00 	.word	0x20000e00

08009520 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009528:	f107 0308 	add.w	r3, r7, #8
 800952c:	4618      	mov	r0, r3
 800952e:	f000 f857 	bl	80095e0 <prvGetNextExpireTime>
 8009532:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	4619      	mov	r1, r3
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 f803 	bl	8009544 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800953e:	f000 f8d5 	bl	80096ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009542:	e7f1      	b.n	8009528 <prvTimerTask+0x8>

08009544 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800954e:	f7ff f9ed 	bl	800892c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009552:	f107 0308 	add.w	r3, r7, #8
 8009556:	4618      	mov	r0, r3
 8009558:	f000 f866 	bl	8009628 <prvSampleTimeNow>
 800955c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d130      	bne.n	80095c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <prvProcessTimerOrBlockTask+0x3c>
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	429a      	cmp	r2, r3
 8009570:	d806      	bhi.n	8009580 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009572:	f7ff f9e9 	bl	8008948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009576:	68f9      	ldr	r1, [r7, #12]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff ff83 	bl	8009484 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800957e:	e024      	b.n	80095ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d008      	beq.n	8009598 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009586:	4b13      	ldr	r3, [pc, #76]	; (80095d4 <prvProcessTimerOrBlockTask+0x90>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <prvProcessTimerOrBlockTask+0x50>
 8009590:	2301      	movs	r3, #1
 8009592:	e000      	b.n	8009596 <prvProcessTimerOrBlockTask+0x52>
 8009594:	2300      	movs	r3, #0
 8009596:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009598:	4b0f      	ldr	r3, [pc, #60]	; (80095d8 <prvProcessTimerOrBlockTask+0x94>)
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	4619      	mov	r1, r3
 80095a6:	f7fe fe9b 	bl	80082e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095aa:	f7ff f9cd 	bl	8008948 <xTaskResumeAll>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10a      	bne.n	80095ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80095b4:	4b09      	ldr	r3, [pc, #36]	; (80095dc <prvProcessTimerOrBlockTask+0x98>)
 80095b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	f3bf 8f6f 	isb	sy
}
 80095c4:	e001      	b.n	80095ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80095c6:	f7ff f9bf 	bl	8008948 <xTaskResumeAll>
}
 80095ca:	bf00      	nop
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20000e04 	.word	0x20000e04
 80095d8:	20000e08 	.word	0x20000e08
 80095dc:	e000ed04 	.word	0xe000ed04

080095e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095e8:	4b0e      	ldr	r3, [pc, #56]	; (8009624 <prvGetNextExpireTime+0x44>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <prvGetNextExpireTime+0x16>
 80095f2:	2201      	movs	r2, #1
 80095f4:	e000      	b.n	80095f8 <prvGetNextExpireTime+0x18>
 80095f6:	2200      	movs	r2, #0
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d105      	bne.n	8009610 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009604:	4b07      	ldr	r3, [pc, #28]	; (8009624 <prvGetNextExpireTime+0x44>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	60fb      	str	r3, [r7, #12]
 800960e:	e001      	b.n	8009614 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009614:	68fb      	ldr	r3, [r7, #12]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	20000e00 	.word	0x20000e00

08009628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009630:	f7ff fa2a 	bl	8008a88 <xTaskGetTickCount>
 8009634:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009636:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <prvSampleTimeNow+0x3c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	429a      	cmp	r2, r3
 800963e:	d205      	bcs.n	800964c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009640:	f000 f93c 	bl	80098bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	e002      	b.n	8009652 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009652:	4a04      	ldr	r2, [pc, #16]	; (8009664 <prvSampleTimeNow+0x3c>)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009658:	68fb      	ldr	r3, [r7, #12]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000e10 	.word	0x20000e10

08009668 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009676:	2300      	movs	r3, #0
 8009678:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	429a      	cmp	r2, r3
 800968c:	d812      	bhi.n	80096b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	1ad2      	subs	r2, r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	429a      	cmp	r2, r3
 800969a:	d302      	bcc.n	80096a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800969c:	2301      	movs	r3, #1
 800969e:	617b      	str	r3, [r7, #20]
 80096a0:	e01b      	b.n	80096da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80096a2:	4b10      	ldr	r3, [pc, #64]	; (80096e4 <prvInsertTimerInActiveList+0x7c>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3304      	adds	r3, #4
 80096aa:	4619      	mov	r1, r3
 80096ac:	4610      	mov	r0, r2
 80096ae:	f7fe f8de 	bl	800786e <vListInsert>
 80096b2:	e012      	b.n	80096da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d206      	bcs.n	80096ca <prvInsertTimerInActiveList+0x62>
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d302      	bcc.n	80096ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80096c4:	2301      	movs	r3, #1
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	e007      	b.n	80096da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096ca:	4b07      	ldr	r3, [pc, #28]	; (80096e8 <prvInsertTimerInActiveList+0x80>)
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3304      	adds	r3, #4
 80096d2:	4619      	mov	r1, r3
 80096d4:	4610      	mov	r0, r2
 80096d6:	f7fe f8ca 	bl	800786e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80096da:	697b      	ldr	r3, [r7, #20]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	20000e04 	.word	0x20000e04
 80096e8:	20000e00 	.word	0x20000e00

080096ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08e      	sub	sp, #56	; 0x38
 80096f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096f2:	e0d0      	b.n	8009896 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	da1a      	bge.n	8009730 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80096fa:	1d3b      	adds	r3, r7, #4
 80096fc:	3304      	adds	r3, #4
 80096fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10c      	bne.n	8009720 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	b672      	cpsid	i
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	b662      	cpsie	i
 800971a:	61fb      	str	r3, [r7, #28]
}
 800971c:	bf00      	nop
 800971e:	e7fe      	b.n	800971e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009726:	6850      	ldr	r0, [r2, #4]
 8009728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800972a:	6892      	ldr	r2, [r2, #8]
 800972c:	4611      	mov	r1, r2
 800972e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	f2c0 80ae 	blt.w	8009894 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d004      	beq.n	800974e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	3304      	adds	r3, #4
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe f8c9 	bl	80078e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800974e:	463b      	mov	r3, r7
 8009750:	4618      	mov	r0, r3
 8009752:	f7ff ff69 	bl	8009628 <prvSampleTimeNow>
 8009756:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b09      	cmp	r3, #9
 800975c:	f200 809b 	bhi.w	8009896 <prvProcessReceivedCommands+0x1aa>
 8009760:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <prvProcessReceivedCommands+0x7c>)
 8009762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009766:	bf00      	nop
 8009768:	08009791 	.word	0x08009791
 800976c:	08009791 	.word	0x08009791
 8009770:	08009791 	.word	0x08009791
 8009774:	08009809 	.word	0x08009809
 8009778:	0800981d 	.word	0x0800981d
 800977c:	0800986b 	.word	0x0800986b
 8009780:	08009791 	.word	0x08009791
 8009784:	08009791 	.word	0x08009791
 8009788:	08009809 	.word	0x08009809
 800978c:	0800981d 	.word	0x0800981d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009796:	f043 0301 	orr.w	r3, r3, #1
 800979a:	b2da      	uxtb	r2, r3
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	18d1      	adds	r1, r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097b0:	f7ff ff5a 	bl	8009668 <prvInsertTimerInActiveList>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d06d      	beq.n	8009896 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097c8:	f003 0304 	and.w	r3, r3, #4
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d062      	beq.n	8009896 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	441a      	add	r2, r3
 80097d8:	2300      	movs	r3, #0
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	2300      	movs	r3, #0
 80097de:	2100      	movs	r1, #0
 80097e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e2:	f7ff fdff 	bl	80093e4 <xTimerGenericCommand>
 80097e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d153      	bne.n	8009896 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	b672      	cpsid	i
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	b662      	cpsie	i
 8009802:	61bb      	str	r3, [r7, #24]
}
 8009804:	bf00      	nop
 8009806:	e7fe      	b.n	8009806 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800980e:	f023 0301 	bic.w	r3, r3, #1
 8009812:	b2da      	uxtb	r2, r3
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800981a:	e03c      	b.n	8009896 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009822:	f043 0301 	orr.w	r3, r3, #1
 8009826:	b2da      	uxtb	r2, r3
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009832:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10c      	bne.n	8009856 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	b672      	cpsid	i
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	b662      	cpsie	i
 8009850:	617b      	str	r3, [r7, #20]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009858:	699a      	ldr	r2, [r3, #24]
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	18d1      	adds	r1, r2, r3
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009864:	f7ff ff00 	bl	8009668 <prvInsertTimerInActiveList>
					break;
 8009868:	e015      	b.n	8009896 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009870:	f003 0302 	and.w	r3, r3, #2
 8009874:	2b00      	cmp	r3, #0
 8009876:	d103      	bne.n	8009880 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800987a:	f7f7 ffdf 	bl	800183c <vPortFree>
 800987e:	e00a      	b.n	8009896 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009886:	f023 0301 	bic.w	r3, r3, #1
 800988a:	b2da      	uxtb	r2, r3
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009892:	e000      	b.n	8009896 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009894:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009896:	4b08      	ldr	r3, [pc, #32]	; (80098b8 <prvProcessReceivedCommands+0x1cc>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	1d39      	adds	r1, r7, #4
 800989c:	2200      	movs	r2, #0
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe fafe 	bl	8007ea0 <xQueueReceive>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f47f af24 	bne.w	80096f4 <prvProcessReceivedCommands+0x8>
	}
}
 80098ac:	bf00      	nop
 80098ae:	bf00      	nop
 80098b0:	3730      	adds	r7, #48	; 0x30
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20000e08 	.word	0x20000e08

080098bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098c2:	e04a      	b.n	800995a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098c4:	4b2e      	ldr	r3, [pc, #184]	; (8009980 <prvSwitchTimerLists+0xc4>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ce:	4b2c      	ldr	r3, [pc, #176]	; (8009980 <prvSwitchTimerLists+0xc4>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3304      	adds	r3, #4
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fd ffff 	bl	80078e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098f0:	f003 0304 	and.w	r3, r3, #4
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d030      	beq.n	800995a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4413      	add	r3, r2
 8009900:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	429a      	cmp	r2, r3
 8009908:	d90e      	bls.n	8009928 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009916:	4b1a      	ldr	r3, [pc, #104]	; (8009980 <prvSwitchTimerLists+0xc4>)
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3304      	adds	r3, #4
 800991e:	4619      	mov	r1, r3
 8009920:	4610      	mov	r0, r2
 8009922:	f7fd ffa4 	bl	800786e <vListInsert>
 8009926:	e018      	b.n	800995a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009928:	2300      	movs	r3, #0
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	2300      	movs	r3, #0
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	2100      	movs	r1, #0
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f7ff fd56 	bl	80093e4 <xTimerGenericCommand>
 8009938:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10c      	bne.n	800995a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009944:	b672      	cpsid	i
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	b662      	cpsie	i
 8009954:	603b      	str	r3, [r7, #0]
}
 8009956:	bf00      	nop
 8009958:	e7fe      	b.n	8009958 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800995a:	4b09      	ldr	r3, [pc, #36]	; (8009980 <prvSwitchTimerLists+0xc4>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1af      	bne.n	80098c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009964:	4b06      	ldr	r3, [pc, #24]	; (8009980 <prvSwitchTimerLists+0xc4>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800996a:	4b06      	ldr	r3, [pc, #24]	; (8009984 <prvSwitchTimerLists+0xc8>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a04      	ldr	r2, [pc, #16]	; (8009980 <prvSwitchTimerLists+0xc4>)
 8009970:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009972:	4a04      	ldr	r2, [pc, #16]	; (8009984 <prvSwitchTimerLists+0xc8>)
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	6013      	str	r3, [r2, #0]
}
 8009978:	bf00      	nop
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	20000e00 	.word	0x20000e00
 8009984:	20000e04 	.word	0x20000e04

08009988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800998e:	f000 f945 	bl	8009c1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009992:	4b15      	ldr	r3, [pc, #84]	; (80099e8 <prvCheckForValidListAndQueue+0x60>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d120      	bne.n	80099dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800999a:	4814      	ldr	r0, [pc, #80]	; (80099ec <prvCheckForValidListAndQueue+0x64>)
 800999c:	f7fd ff16 	bl	80077cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099a0:	4813      	ldr	r0, [pc, #76]	; (80099f0 <prvCheckForValidListAndQueue+0x68>)
 80099a2:	f7fd ff13 	bl	80077cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099a6:	4b13      	ldr	r3, [pc, #76]	; (80099f4 <prvCheckForValidListAndQueue+0x6c>)
 80099a8:	4a10      	ldr	r2, [pc, #64]	; (80099ec <prvCheckForValidListAndQueue+0x64>)
 80099aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099ac:	4b12      	ldr	r3, [pc, #72]	; (80099f8 <prvCheckForValidListAndQueue+0x70>)
 80099ae:	4a10      	ldr	r2, [pc, #64]	; (80099f0 <prvCheckForValidListAndQueue+0x68>)
 80099b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099b2:	2300      	movs	r3, #0
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	4b11      	ldr	r3, [pc, #68]	; (80099fc <prvCheckForValidListAndQueue+0x74>)
 80099b8:	4a11      	ldr	r2, [pc, #68]	; (8009a00 <prvCheckForValidListAndQueue+0x78>)
 80099ba:	2110      	movs	r1, #16
 80099bc:	200a      	movs	r0, #10
 80099be:	f7fe f823 	bl	8007a08 <xQueueGenericCreateStatic>
 80099c2:	4603      	mov	r3, r0
 80099c4:	4a08      	ldr	r2, [pc, #32]	; (80099e8 <prvCheckForValidListAndQueue+0x60>)
 80099c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099c8:	4b07      	ldr	r3, [pc, #28]	; (80099e8 <prvCheckForValidListAndQueue+0x60>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d005      	beq.n	80099dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099d0:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <prvCheckForValidListAndQueue+0x60>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	490b      	ldr	r1, [pc, #44]	; (8009a04 <prvCheckForValidListAndQueue+0x7c>)
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fc58 	bl	800828c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099dc:	f000 f952 	bl	8009c84 <vPortExitCritical>
}
 80099e0:	bf00      	nop
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	20000e08 	.word	0x20000e08
 80099ec:	20000dd8 	.word	0x20000dd8
 80099f0:	20000dec 	.word	0x20000dec
 80099f4:	20000e00 	.word	0x20000e00
 80099f8:	20000e04 	.word	0x20000e04
 80099fc:	20000eb4 	.word	0x20000eb4
 8009a00:	20000e14 	.word	0x20000e14
 8009a04:	0800bab8 	.word	0x0800bab8

08009a08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3b04      	subs	r3, #4
 8009a18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3b04      	subs	r3, #4
 8009a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f023 0201 	bic.w	r2, r3, #1
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3b04      	subs	r3, #4
 8009a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a38:	4a0c      	ldr	r2, [pc, #48]	; (8009a6c <pxPortInitialiseStack+0x64>)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3b14      	subs	r3, #20
 8009a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3b04      	subs	r3, #4
 8009a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f06f 0202 	mvn.w	r2, #2
 8009a56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3b20      	subs	r3, #32
 8009a5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr
 8009a6c:	08009a71 	.word	0x08009a71

08009a70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a7a:	4b14      	ldr	r3, [pc, #80]	; (8009acc <prvTaskExitError+0x5c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a82:	d00c      	beq.n	8009a9e <prvTaskExitError+0x2e>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	b672      	cpsid	i
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	b662      	cpsie	i
 8009a98:	60fb      	str	r3, [r7, #12]
}
 8009a9a:	bf00      	nop
 8009a9c:	e7fe      	b.n	8009a9c <prvTaskExitError+0x2c>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	b672      	cpsid	i
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	b662      	cpsie	i
 8009ab2:	60bb      	str	r3, [r7, #8]
}
 8009ab4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ab6:	bf00      	nop
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d0fc      	beq.n	8009ab8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	20000010 	.word	0x20000010

08009ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ad0:	4b07      	ldr	r3, [pc, #28]	; (8009af0 <pxCurrentTCBConst2>)
 8009ad2:	6819      	ldr	r1, [r3, #0]
 8009ad4:	6808      	ldr	r0, [r1, #0]
 8009ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ada:	f380 8809 	msr	PSP, r0
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f04f 0000 	mov.w	r0, #0
 8009ae6:	f380 8811 	msr	BASEPRI, r0
 8009aea:	4770      	bx	lr
 8009aec:	f3af 8000 	nop.w

08009af0 <pxCurrentTCBConst2>:
 8009af0:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop

08009af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009af8:	4808      	ldr	r0, [pc, #32]	; (8009b1c <prvPortStartFirstTask+0x24>)
 8009afa:	6800      	ldr	r0, [r0, #0]
 8009afc:	6800      	ldr	r0, [r0, #0]
 8009afe:	f380 8808 	msr	MSP, r0
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	f380 8814 	msr	CONTROL, r0
 8009b0a:	b662      	cpsie	i
 8009b0c:	b661      	cpsie	f
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	df00      	svc	0
 8009b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b1a:	bf00      	nop
 8009b1c:	e000ed08 	.word	0xe000ed08

08009b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b26:	4b37      	ldr	r3, [pc, #220]	; (8009c04 <xPortStartScheduler+0xe4>)
 8009b28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	22ff      	movs	r2, #255	; 0xff
 8009b36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b40:	78fb      	ldrb	r3, [r7, #3]
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	4b2f      	ldr	r3, [pc, #188]	; (8009c08 <xPortStartScheduler+0xe8>)
 8009b4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b4e:	4b2f      	ldr	r3, [pc, #188]	; (8009c0c <xPortStartScheduler+0xec>)
 8009b50:	2207      	movs	r2, #7
 8009b52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b54:	e009      	b.n	8009b6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009b56:	4b2d      	ldr	r3, [pc, #180]	; (8009c0c <xPortStartScheduler+0xec>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	4a2b      	ldr	r2, [pc, #172]	; (8009c0c <xPortStartScheduler+0xec>)
 8009b5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b6a:	78fb      	ldrb	r3, [r7, #3]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b72:	2b80      	cmp	r3, #128	; 0x80
 8009b74:	d0ef      	beq.n	8009b56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b76:	4b25      	ldr	r3, [pc, #148]	; (8009c0c <xPortStartScheduler+0xec>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f1c3 0307 	rsb	r3, r3, #7
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d00c      	beq.n	8009b9c <xPortStartScheduler+0x7c>
	__asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	b672      	cpsid	i
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	b662      	cpsie	i
 8009b96:	60bb      	str	r3, [r7, #8]
}
 8009b98:	bf00      	nop
 8009b9a:	e7fe      	b.n	8009b9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b9c:	4b1b      	ldr	r3, [pc, #108]	; (8009c0c <xPortStartScheduler+0xec>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	021b      	lsls	r3, r3, #8
 8009ba2:	4a1a      	ldr	r2, [pc, #104]	; (8009c0c <xPortStartScheduler+0xec>)
 8009ba4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ba6:	4b19      	ldr	r3, [pc, #100]	; (8009c0c <xPortStartScheduler+0xec>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009bae:	4a17      	ldr	r2, [pc, #92]	; (8009c0c <xPortStartScheduler+0xec>)
 8009bb0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009bba:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <xPortStartScheduler+0xf0>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a14      	ldr	r2, [pc, #80]	; (8009c10 <xPortStartScheduler+0xf0>)
 8009bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009bc4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009bc6:	4b12      	ldr	r3, [pc, #72]	; (8009c10 <xPortStartScheduler+0xf0>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a11      	ldr	r2, [pc, #68]	; (8009c10 <xPortStartScheduler+0xf0>)
 8009bcc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009bd0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009bd2:	f000 f8dd 	bl	8009d90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <xPortStartScheduler+0xf4>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009bdc:	f000 f8fc 	bl	8009dd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009be0:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <xPortStartScheduler+0xf8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a0c      	ldr	r2, [pc, #48]	; (8009c18 <xPortStartScheduler+0xf8>)
 8009be6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009bea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bec:	f7ff ff84 	bl	8009af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bf0:	f7ff f81e 	bl	8008c30 <vTaskSwitchContext>
	prvTaskExitError();
 8009bf4:	f7ff ff3c 	bl	8009a70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	e000e400 	.word	0xe000e400
 8009c08:	20000f04 	.word	0x20000f04
 8009c0c:	20000f08 	.word	0x20000f08
 8009c10:	e000ed20 	.word	0xe000ed20
 8009c14:	20000010 	.word	0x20000010
 8009c18:	e000ef34 	.word	0xe000ef34

08009c1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	b672      	cpsid	i
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	b662      	cpsie	i
 8009c36:	607b      	str	r3, [r7, #4]
}
 8009c38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c3a:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <vPortEnterCritical+0x60>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	4a0e      	ldr	r2, [pc, #56]	; (8009c7c <vPortEnterCritical+0x60>)
 8009c42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c44:	4b0d      	ldr	r3, [pc, #52]	; (8009c7c <vPortEnterCritical+0x60>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d111      	bne.n	8009c70 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c4c:	4b0c      	ldr	r3, [pc, #48]	; (8009c80 <vPortEnterCritical+0x64>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00c      	beq.n	8009c70 <vPortEnterCritical+0x54>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	b672      	cpsid	i
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	b662      	cpsie	i
 8009c6a:	603b      	str	r3, [r7, #0]
}
 8009c6c:	bf00      	nop
 8009c6e:	e7fe      	b.n	8009c6e <vPortEnterCritical+0x52>
	}
}
 8009c70:	bf00      	nop
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	20000010 	.word	0x20000010
 8009c80:	e000ed04 	.word	0xe000ed04

08009c84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c8a:	4b13      	ldr	r3, [pc, #76]	; (8009cd8 <vPortExitCritical+0x54>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10c      	bne.n	8009cac <vPortExitCritical+0x28>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	b672      	cpsid	i
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	b662      	cpsie	i
 8009ca6:	607b      	str	r3, [r7, #4]
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009cac:	4b0a      	ldr	r3, [pc, #40]	; (8009cd8 <vPortExitCritical+0x54>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	4a09      	ldr	r2, [pc, #36]	; (8009cd8 <vPortExitCritical+0x54>)
 8009cb4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009cb6:	4b08      	ldr	r3, [pc, #32]	; (8009cd8 <vPortExitCritical+0x54>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d105      	bne.n	8009cca <vPortExitCritical+0x46>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	f383 8811 	msr	BASEPRI, r3
}
 8009cc8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	20000010 	.word	0x20000010
 8009cdc:	00000000 	.word	0x00000000

08009ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ce0:	f3ef 8009 	mrs	r0, PSP
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	4b15      	ldr	r3, [pc, #84]	; (8009d40 <pxCurrentTCBConst>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	f01e 0f10 	tst.w	lr, #16
 8009cf0:	bf08      	it	eq
 8009cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfa:	6010      	str	r0, [r2, #0]
 8009cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d04:	b672      	cpsid	i
 8009d06:	f380 8811 	msr	BASEPRI, r0
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	b662      	cpsie	i
 8009d14:	f7fe ff8c 	bl	8008c30 <vTaskSwitchContext>
 8009d18:	f04f 0000 	mov.w	r0, #0
 8009d1c:	f380 8811 	msr	BASEPRI, r0
 8009d20:	bc09      	pop	{r0, r3}
 8009d22:	6819      	ldr	r1, [r3, #0]
 8009d24:	6808      	ldr	r0, [r1, #0]
 8009d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2a:	f01e 0f10 	tst.w	lr, #16
 8009d2e:	bf08      	it	eq
 8009d30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d34:	f380 8809 	msr	PSP, r0
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop

08009d40 <pxCurrentTCBConst>:
 8009d40:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d44:	bf00      	nop
 8009d46:	bf00      	nop

08009d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	b672      	cpsid	i
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	b662      	cpsie	i
 8009d62:	607b      	str	r3, [r7, #4]
}
 8009d64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d66:	f7fe fe9f 	bl	8008aa8 <xTaskIncrementTick>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d70:	4b06      	ldr	r3, [pc, #24]	; (8009d8c <SysTick_Handler+0x44>)
 8009d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d76:	601a      	str	r2, [r3, #0]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	f383 8811 	msr	BASEPRI, r3
}
 8009d82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d84:	bf00      	nop
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	e000ed04 	.word	0xe000ed04

08009d90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d94:	4b0b      	ldr	r3, [pc, #44]	; (8009dc4 <vPortSetupTimerInterrupt+0x34>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d9a:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <vPortSetupTimerInterrupt+0x38>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009da0:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <vPortSetupTimerInterrupt+0x3c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a0a      	ldr	r2, [pc, #40]	; (8009dd0 <vPortSetupTimerInterrupt+0x40>)
 8009da6:	fba2 2303 	umull	r2, r3, r2, r3
 8009daa:	099b      	lsrs	r3, r3, #6
 8009dac:	4a09      	ldr	r2, [pc, #36]	; (8009dd4 <vPortSetupTimerInterrupt+0x44>)
 8009dae:	3b01      	subs	r3, #1
 8009db0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009db2:	4b04      	ldr	r3, [pc, #16]	; (8009dc4 <vPortSetupTimerInterrupt+0x34>)
 8009db4:	2207      	movs	r2, #7
 8009db6:	601a      	str	r2, [r3, #0]
}
 8009db8:	bf00      	nop
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	e000e010 	.word	0xe000e010
 8009dc8:	e000e018 	.word	0xe000e018
 8009dcc:	20000004 	.word	0x20000004
 8009dd0:	10624dd3 	.word	0x10624dd3
 8009dd4:	e000e014 	.word	0xe000e014

08009dd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009dd8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009de8 <vPortEnableVFP+0x10>
 8009ddc:	6801      	ldr	r1, [r0, #0]
 8009dde:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009de2:	6001      	str	r1, [r0, #0]
 8009de4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009de6:	bf00      	nop
 8009de8:	e000ed88 	.word	0xe000ed88

08009dec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009df2:	f3ef 8305 	mrs	r3, IPSR
 8009df6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2b0f      	cmp	r3, #15
 8009dfc:	d916      	bls.n	8009e2c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009dfe:	4a19      	ldr	r2, [pc, #100]	; (8009e64 <vPortValidateInterruptPriority+0x78>)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4413      	add	r3, r2
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e08:	4b17      	ldr	r3, [pc, #92]	; (8009e68 <vPortValidateInterruptPriority+0x7c>)
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	7afa      	ldrb	r2, [r7, #11]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d20c      	bcs.n	8009e2c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e16:	b672      	cpsid	i
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	b662      	cpsie	i
 8009e26:	607b      	str	r3, [r7, #4]
}
 8009e28:	bf00      	nop
 8009e2a:	e7fe      	b.n	8009e2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e2c:	4b0f      	ldr	r3, [pc, #60]	; (8009e6c <vPortValidateInterruptPriority+0x80>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e34:	4b0e      	ldr	r3, [pc, #56]	; (8009e70 <vPortValidateInterruptPriority+0x84>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d90c      	bls.n	8009e56 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	b672      	cpsid	i
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	b662      	cpsie	i
 8009e50:	603b      	str	r3, [r7, #0]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <vPortValidateInterruptPriority+0x68>
	}
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	e000e3f0 	.word	0xe000e3f0
 8009e68:	20000f04 	.word	0x20000f04
 8009e6c:	e000ed0c 	.word	0xe000ed0c
 8009e70:	20000f08 	.word	0x20000f08

08009e74 <_ZdlPv>:
 8009e74:	f001 b886 	b.w	800af84 <free>

08009e78 <_ZdlPvj>:
 8009e78:	f7ff bffc 	b.w	8009e74 <_ZdlPv>

08009e7c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 8009e7c:	4a1a      	ldr	r2, [pc, #104]	; (8009ee8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6c>)
 8009e7e:	6853      	ldr	r3, [r2, #4]
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	f1a0 0408 	sub.w	r4, r0, #8
 8009e86:	4616      	mov	r6, r2
 8009e88:	b123      	cbz	r3, 8009e94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x18>
 8009e8a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009e8e:	1865      	adds	r5, r4, r1
 8009e90:	42ab      	cmp	r3, r5
 8009e92:	d903      	bls.n	8009e9c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x20>
 8009e94:	f840 3c04 	str.w	r3, [r0, #-4]
 8009e98:	6074      	str	r4, [r6, #4]
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
 8009e9c:	d106      	bne.n	8009eac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
 8009e9e:	e9d3 3500 	ldrd	r3, r5, [r3]
 8009ea2:	4419      	add	r1, r3
 8009ea4:	e940 1502 	strd	r1, r5, [r0, #-8]
 8009ea8:	6054      	str	r4, [r2, #4]
 8009eaa:	e7f6      	b.n	8009e9a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 8009eac:	3204      	adds	r2, #4
 8009eae:	685e      	ldr	r6, [r3, #4]
 8009eb0:	b14e      	cbz	r6, 8009ec6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x4a>
 8009eb2:	42b5      	cmp	r5, r6
 8009eb4:	d202      	bcs.n	8009ebc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x40>
 8009eb6:	1d1a      	adds	r2, r3, #4
 8009eb8:	4633      	mov	r3, r6
 8009eba:	e7f8      	b.n	8009eae <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x32>
 8009ebc:	bf01      	itttt	eq
 8009ebe:	682e      	ldreq	r6, [r5, #0]
 8009ec0:	686d      	ldreq	r5, [r5, #4]
 8009ec2:	605d      	streq	r5, [r3, #4]
 8009ec4:	1989      	addeq	r1, r1, r6
 8009ec6:	6813      	ldr	r3, [r2, #0]
 8009ec8:	681d      	ldr	r5, [r3, #0]
 8009eca:	195e      	adds	r6, r3, r5
 8009ecc:	42b4      	cmp	r4, r6
 8009ece:	bf1f      	itttt	ne
 8009ed0:	685b      	ldrne	r3, [r3, #4]
 8009ed2:	f840 3c04 	strne.w	r3, [r0, #-4]
 8009ed6:	6813      	ldrne	r3, [r2, #0]
 8009ed8:	f840 1c08 	strne.w	r1, [r0, #-8]
 8009edc:	bf06      	itte	eq
 8009ede:	1949      	addeq	r1, r1, r5
 8009ee0:	6019      	streq	r1, [r3, #0]
 8009ee2:	605c      	strne	r4, [r3, #4]
 8009ee4:	e7d9      	b.n	8009e9a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 8009ee6:	bf00      	nop
 8009ee8:	20000f0c 	.word	0x20000f0c

08009eec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 8009eec:	f100 0308 	add.w	r3, r0, #8
 8009ef0:	b530      	push	{r4, r5, lr}
 8009ef2:	2b08      	cmp	r3, #8
 8009ef4:	4a0e      	ldr	r2, [pc, #56]	; (8009f30 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 8009ef6:	bf38      	it	cc
 8009ef8:	2308      	movcc	r3, #8
 8009efa:	3307      	adds	r3, #7
 8009efc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009f00:	f023 0307 	bic.w	r3, r3, #7
 8009f04:	b168      	cbz	r0, 8009f22 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x36>
 8009f06:	e9d0 1400 	ldrd	r1, r4, [r0]
 8009f0a:	428b      	cmp	r3, r1
 8009f0c:	d90a      	bls.n	8009f24 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x38>
 8009f0e:	1d02      	adds	r2, r0, #4
 8009f10:	4620      	mov	r0, r4
 8009f12:	e7f7      	b.n	8009f04 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x18>
 8009f14:	18c5      	adds	r5, r0, r3
 8009f16:	606c      	str	r4, [r5, #4]
 8009f18:	50c1      	str	r1, [r0, r3]
 8009f1a:	6810      	ldr	r0, [r2, #0]
 8009f1c:	6003      	str	r3, [r0, #0]
 8009f1e:	6015      	str	r5, [r2, #0]
 8009f20:	3008      	adds	r0, #8
 8009f22:	bd30      	pop	{r4, r5, pc}
 8009f24:	1ac9      	subs	r1, r1, r3
 8009f26:	2907      	cmp	r1, #7
 8009f28:	d8f4      	bhi.n	8009f14 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x28>
 8009f2a:	6014      	str	r4, [r2, #0]
 8009f2c:	e7f8      	b.n	8009f20 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
 8009f2e:	bf00      	nop
 8009f30:	20000f0c 	.word	0x20000f0c

08009f34 <__cxa_allocate_exception>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	f100 0480 	add.w	r4, r0, #128	; 0x80
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f001 f81a 	bl	800af74 <malloc>
 8009f40:	4603      	mov	r3, r0
 8009f42:	b930      	cbnz	r0, 8009f52 <__cxa_allocate_exception+0x1e>
 8009f44:	4620      	mov	r0, r4
 8009f46:	f7ff ffd1 	bl	8009eec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	b908      	cbnz	r0, 8009f52 <__cxa_allocate_exception+0x1e>
 8009f4e:	f000 fbe3 	bl	800a718 <_ZSt9terminatev>
 8009f52:	2280      	movs	r2, #128	; 0x80
 8009f54:	2100      	movs	r1, #0
 8009f56:	4618      	mov	r0, r3
 8009f58:	f001 f844 	bl	800afe4 <memset>
 8009f5c:	3080      	adds	r0, #128	; 0x80
 8009f5e:	bd10      	pop	{r4, pc}

08009f60 <__cxa_free_exception>:
 8009f60:	4a06      	ldr	r2, [pc, #24]	; (8009f7c <__cxa_free_exception+0x1c>)
 8009f62:	6893      	ldr	r3, [r2, #8]
 8009f64:	3880      	subs	r0, #128	; 0x80
 8009f66:	4298      	cmp	r0, r3
 8009f68:	d905      	bls.n	8009f76 <__cxa_free_exception+0x16>
 8009f6a:	68d2      	ldr	r2, [r2, #12]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	4298      	cmp	r0, r3
 8009f70:	d201      	bcs.n	8009f76 <__cxa_free_exception+0x16>
 8009f72:	f7ff bf83 	b.w	8009e7c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 8009f76:	f001 b805 	b.w	800af84 <free>
 8009f7a:	bf00      	nop
 8009f7c:	20000f0c 	.word	0x20000f0c

08009f80 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4c08      	ldr	r4, [pc, #32]	; (8009fa4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8009f84:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8009f88:	4628      	mov	r0, r5
 8009f8a:	60e5      	str	r5, [r4, #12]
 8009f8c:	f000 fff2 	bl	800af74 <malloc>
 8009f90:	60a0      	str	r0, [r4, #8]
 8009f92:	b910      	cbnz	r0, 8009f9a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8009f94:	60e0      	str	r0, [r4, #12]
 8009f96:	6060      	str	r0, [r4, #4]
 8009f98:	bd38      	pop	{r3, r4, r5, pc}
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	6060      	str	r0, [r4, #4]
 8009f9e:	6005      	str	r5, [r0, #0]
 8009fa0:	6043      	str	r3, [r0, #4]
 8009fa2:	e7f9      	b.n	8009f98 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8009fa4:	20000f0c 	.word	0x20000f0c

08009fa8 <__cxa_end_cleanup>:
 8009fa8:	b41e      	push	{r1, r2, r3, r4}
 8009faa:	f000 f89c 	bl	800a0e6 <__gnu_end_cleanup>
 8009fae:	bc1e      	pop	{r1, r2, r3, r4}
 8009fb0:	f7f7 f834 	bl	800101c <_Unwind_Resume>

08009fb4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8009fb4:	7803      	ldrb	r3, [r0, #0]
 8009fb6:	2b47      	cmp	r3, #71	; 0x47
 8009fb8:	d117      	bne.n	8009fea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fba:	7843      	ldrb	r3, [r0, #1]
 8009fbc:	2b4e      	cmp	r3, #78	; 0x4e
 8009fbe:	d114      	bne.n	8009fea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fc0:	7883      	ldrb	r3, [r0, #2]
 8009fc2:	2b55      	cmp	r3, #85	; 0x55
 8009fc4:	d111      	bne.n	8009fea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fc6:	78c3      	ldrb	r3, [r0, #3]
 8009fc8:	2b43      	cmp	r3, #67	; 0x43
 8009fca:	d10e      	bne.n	8009fea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fcc:	7903      	ldrb	r3, [r0, #4]
 8009fce:	2b43      	cmp	r3, #67	; 0x43
 8009fd0:	d10b      	bne.n	8009fea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fd2:	7943      	ldrb	r3, [r0, #5]
 8009fd4:	2b2b      	cmp	r3, #43	; 0x2b
 8009fd6:	d108      	bne.n	8009fea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fd8:	7983      	ldrb	r3, [r0, #6]
 8009fda:	2b2b      	cmp	r3, #43	; 0x2b
 8009fdc:	d105      	bne.n	8009fea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8009fde:	79c0      	ldrb	r0, [r0, #7]
 8009fe0:	2801      	cmp	r0, #1
 8009fe2:	bf8c      	ite	hi
 8009fe4:	2000      	movhi	r0, #0
 8009fe6:	2001      	movls	r0, #1
 8009fe8:	4770      	bx	lr
 8009fea:	2000      	movs	r0, #0
 8009fec:	4770      	bx	lr
	...

08009ff0 <__cxa_type_match>:
 8009ff0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009ff4:	461d      	mov	r5, r3
 8009ff6:	7803      	ldrb	r3, [r0, #0]
 8009ff8:	2b47      	cmp	r3, #71	; 0x47
 8009ffa:	460e      	mov	r6, r1
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	79c1      	ldrb	r1, [r0, #7]
 800a000:	d113      	bne.n	800a02a <__cxa_type_match+0x3a>
 800a002:	7843      	ldrb	r3, [r0, #1]
 800a004:	2b4e      	cmp	r3, #78	; 0x4e
 800a006:	d110      	bne.n	800a02a <__cxa_type_match+0x3a>
 800a008:	7883      	ldrb	r3, [r0, #2]
 800a00a:	2b55      	cmp	r3, #85	; 0x55
 800a00c:	d10d      	bne.n	800a02a <__cxa_type_match+0x3a>
 800a00e:	78c3      	ldrb	r3, [r0, #3]
 800a010:	2b43      	cmp	r3, #67	; 0x43
 800a012:	d10a      	bne.n	800a02a <__cxa_type_match+0x3a>
 800a014:	7903      	ldrb	r3, [r0, #4]
 800a016:	2b46      	cmp	r3, #70	; 0x46
 800a018:	d107      	bne.n	800a02a <__cxa_type_match+0x3a>
 800a01a:	7943      	ldrb	r3, [r0, #5]
 800a01c:	2b4f      	cmp	r3, #79	; 0x4f
 800a01e:	d104      	bne.n	800a02a <__cxa_type_match+0x3a>
 800a020:	7983      	ldrb	r3, [r0, #6]
 800a022:	2b52      	cmp	r3, #82	; 0x52
 800a024:	d101      	bne.n	800a02a <__cxa_type_match+0x3a>
 800a026:	2900      	cmp	r1, #0
 800a028:	d031      	beq.n	800a08e <__cxa_type_match+0x9e>
 800a02a:	4610      	mov	r0, r2
 800a02c:	f7ff ffc2 	bl	8009fb4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a030:	f080 0001 	eor.w	r0, r0, #1
 800a034:	b2c0      	uxtb	r0, r0
 800a036:	2300      	movs	r3, #0
 800a038:	2400      	movs	r4, #0
 800a03a:	9401      	str	r4, [sp, #4]
 800a03c:	bb53      	cbnz	r3, 800a094 <__cxa_type_match+0xa4>
 800a03e:	bb58      	cbnz	r0, 800a098 <__cxa_type_match+0xa8>
 800a040:	2901      	cmp	r1, #1
 800a042:	bf0a      	itet	eq
 800a044:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 800a048:	f1a2 0320 	subne.w	r3, r2, #32
 800a04c:	3b78      	subeq	r3, #120	; 0x78
 800a04e:	2901      	cmp	r1, #1
 800a050:	bf08      	it	eq
 800a052:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 800a056:	681c      	ldr	r4, [r3, #0]
 800a058:	bf18      	it	ne
 800a05a:	3258      	addne	r2, #88	; 0x58
 800a05c:	9201      	str	r2, [sp, #4]
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	4620      	mov	r0, r4
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	4798      	blx	r3
 800a066:	b1c8      	cbz	r0, 800a09c <__cxa_type_match+0xac>
 800a068:	9b01      	ldr	r3, [sp, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	9301      	str	r3, [sp, #4]
 800a06e:	2702      	movs	r7, #2
 800a070:	6833      	ldr	r3, [r6, #0]
 800a072:	aa01      	add	r2, sp, #4
 800a074:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800a078:	4621      	mov	r1, r4
 800a07a:	2301      	movs	r3, #1
 800a07c:	4630      	mov	r0, r6
 800a07e:	47c0      	blx	r8
 800a080:	b170      	cbz	r0, 800a0a0 <__cxa_type_match+0xb0>
 800a082:	9b01      	ldr	r3, [sp, #4]
 800a084:	602b      	str	r3, [r5, #0]
 800a086:	4638      	mov	r0, r7
 800a088:	b002      	add	sp, #8
 800a08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a08e:	2301      	movs	r3, #1
 800a090:	4608      	mov	r0, r1
 800a092:	e7d1      	b.n	800a038 <__cxa_type_match+0x48>
 800a094:	4c03      	ldr	r4, [pc, #12]	; (800a0a4 <__cxa_type_match+0xb4>)
 800a096:	e7e2      	b.n	800a05e <__cxa_type_match+0x6e>
 800a098:	4c03      	ldr	r4, [pc, #12]	; (800a0a8 <__cxa_type_match+0xb8>)
 800a09a:	e7e0      	b.n	800a05e <__cxa_type_match+0x6e>
 800a09c:	2701      	movs	r7, #1
 800a09e:	e7e7      	b.n	800a070 <__cxa_type_match+0x80>
 800a0a0:	4607      	mov	r7, r0
 800a0a2:	e7f0      	b.n	800a086 <__cxa_type_match+0x96>
 800a0a4:	0800bbac 	.word	0x0800bbac
 800a0a8:	0800bbb4 	.word	0x0800bbb4

0800a0ac <__cxa_begin_cleanup>:
 800a0ac:	b510      	push	{r4, lr}
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	f000 f8a0 	bl	800a1f4 <__cxa_get_globals>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f1a4 0120 	sub.w	r1, r4, #32
 800a0bc:	f7ff ff7a 	bl	8009fb4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a0c0:	b160      	cbz	r0, 800a0dc <__cxa_begin_cleanup+0x30>
 800a0c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0ce:	d103      	bne.n	800a0d8 <__cxa_begin_cleanup+0x2c>
 800a0d0:	6893      	ldr	r3, [r2, #8]
 800a0d2:	f844 3c08 	str.w	r3, [r4, #-8]
 800a0d6:	6091      	str	r1, [r2, #8]
 800a0d8:	2001      	movs	r0, #1
 800a0da:	bd10      	pop	{r4, pc}
 800a0dc:	6893      	ldr	r3, [r2, #8]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d0f9      	beq.n	800a0d6 <__cxa_begin_cleanup+0x2a>
 800a0e2:	f000 fb19 	bl	800a718 <_ZSt9terminatev>

0800a0e6 <__gnu_end_cleanup>:
 800a0e6:	b510      	push	{r4, lr}
 800a0e8:	f000 f884 	bl	800a1f4 <__cxa_get_globals>
 800a0ec:	6882      	ldr	r2, [r0, #8]
 800a0ee:	4601      	mov	r1, r0
 800a0f0:	b90a      	cbnz	r2, 800a0f6 <__gnu_end_cleanup+0x10>
 800a0f2:	f000 fb11 	bl	800a718 <_ZSt9terminatev>
 800a0f6:	f102 0420 	add.w	r4, r2, #32
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f7ff ff5a 	bl	8009fb4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a100:	b140      	cbz	r0, 800a114 <__gnu_end_cleanup+0x2e>
 800a102:	69d3      	ldr	r3, [r2, #28]
 800a104:	3b01      	subs	r3, #1
 800a106:	61d3      	str	r3, [r2, #28]
 800a108:	b913      	cbnz	r3, 800a110 <__gnu_end_cleanup+0x2a>
 800a10a:	6990      	ldr	r0, [r2, #24]
 800a10c:	6088      	str	r0, [r1, #8]
 800a10e:	6193      	str	r3, [r2, #24]
 800a110:	4620      	mov	r0, r4
 800a112:	bd10      	pop	{r4, pc}
 800a114:	6088      	str	r0, [r1, #8]
 800a116:	e7fb      	b.n	800a110 <__gnu_end_cleanup+0x2a>

0800a118 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800a118:	7803      	ldrb	r3, [r0, #0]
 800a11a:	2b47      	cmp	r3, #71	; 0x47
 800a11c:	d117      	bne.n	800a14e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a11e:	7843      	ldrb	r3, [r0, #1]
 800a120:	2b4e      	cmp	r3, #78	; 0x4e
 800a122:	d114      	bne.n	800a14e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a124:	7883      	ldrb	r3, [r0, #2]
 800a126:	2b55      	cmp	r3, #85	; 0x55
 800a128:	d111      	bne.n	800a14e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a12a:	78c3      	ldrb	r3, [r0, #3]
 800a12c:	2b43      	cmp	r3, #67	; 0x43
 800a12e:	d10e      	bne.n	800a14e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a130:	7903      	ldrb	r3, [r0, #4]
 800a132:	2b43      	cmp	r3, #67	; 0x43
 800a134:	d10b      	bne.n	800a14e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a136:	7943      	ldrb	r3, [r0, #5]
 800a138:	2b2b      	cmp	r3, #43	; 0x2b
 800a13a:	d108      	bne.n	800a14e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a13c:	7983      	ldrb	r3, [r0, #6]
 800a13e:	2b2b      	cmp	r3, #43	; 0x2b
 800a140:	d105      	bne.n	800a14e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800a142:	79c0      	ldrb	r0, [r0, #7]
 800a144:	2801      	cmp	r0, #1
 800a146:	bf8c      	ite	hi
 800a148:	2000      	movhi	r0, #0
 800a14a:	2001      	movls	r0, #1
 800a14c:	4770      	bx	lr
 800a14e:	2000      	movs	r0, #0
 800a150:	4770      	bx	lr

0800a152 <__cxa_begin_catch>:
 800a152:	b538      	push	{r3, r4, r5, lr}
 800a154:	4604      	mov	r4, r0
 800a156:	f000 f84d 	bl	800a1f4 <__cxa_get_globals>
 800a15a:	6805      	ldr	r5, [r0, #0]
 800a15c:	4602      	mov	r2, r0
 800a15e:	4620      	mov	r0, r4
 800a160:	f1a4 0120 	sub.w	r1, r4, #32
 800a164:	f7ff ffd8 	bl	800a118 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a168:	b928      	cbnz	r0, 800a176 <__cxa_begin_catch+0x24>
 800a16a:	b10d      	cbz	r5, 800a170 <__cxa_begin_catch+0x1e>
 800a16c:	f000 fad4 	bl	800a718 <_ZSt9terminatev>
 800a170:	6011      	str	r1, [r2, #0]
 800a172:	4628      	mov	r0, r5
 800a174:	bd38      	pop	{r3, r4, r5, pc}
 800a176:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	bfb4      	ite	lt
 800a17e:	f1c3 0301 	rsblt	r3, r3, #1
 800a182:	3301      	addge	r3, #1
 800a184:	f844 3c0c 	str.w	r3, [r4, #-12]
 800a188:	6853      	ldr	r3, [r2, #4]
 800a18a:	428d      	cmp	r5, r1
 800a18c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a190:	6053      	str	r3, [r2, #4]
 800a192:	4620      	mov	r0, r4
 800a194:	bf1c      	itt	ne
 800a196:	f844 5c10 	strne.w	r5, [r4, #-16]
 800a19a:	6011      	strne	r1, [r2, #0]
 800a19c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a19e:	f7f6 fb8d 	bl	80008bc <_Unwind_Complete>
 800a1a2:	e7e6      	b.n	800a172 <__cxa_begin_catch+0x20>

0800a1a4 <__cxa_end_catch>:
 800a1a4:	b510      	push	{r4, lr}
 800a1a6:	f000 f821 	bl	800a1ec <__cxa_get_globals_fast>
 800a1aa:	6802      	ldr	r2, [r0, #0]
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	b19a      	cbz	r2, 800a1d8 <__cxa_end_catch+0x34>
 800a1b0:	f102 0420 	add.w	r4, r2, #32
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f7ff ffaf 	bl	800a118 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800a1ba:	b928      	cbnz	r0, 800a1c8 <__cxa_end_catch+0x24>
 800a1bc:	6008      	str	r0, [r1, #0]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1c4:	f7f6 bb7c 	b.w	80008c0 <_Unwind_DeleteException>
 800a1c8:	6953      	ldr	r3, [r2, #20]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	da05      	bge.n	800a1da <__cxa_end_catch+0x36>
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	d101      	bne.n	800a1d6 <__cxa_end_catch+0x32>
 800a1d2:	6910      	ldr	r0, [r2, #16]
 800a1d4:	6008      	str	r0, [r1, #0]
 800a1d6:	6153      	str	r3, [r2, #20]
 800a1d8:	bd10      	pop	{r4, pc}
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	d102      	bne.n	800a1e4 <__cxa_end_catch+0x40>
 800a1de:	6913      	ldr	r3, [r2, #16]
 800a1e0:	600b      	str	r3, [r1, #0]
 800a1e2:	e7ec      	b.n	800a1be <__cxa_end_catch+0x1a>
 800a1e4:	1c59      	adds	r1, r3, #1
 800a1e6:	d1f6      	bne.n	800a1d6 <__cxa_end_catch+0x32>
 800a1e8:	f000 fa96 	bl	800a718 <_ZSt9terminatev>

0800a1ec <__cxa_get_globals_fast>:
 800a1ec:	4800      	ldr	r0, [pc, #0]	; (800a1f0 <__cxa_get_globals_fast+0x4>)
 800a1ee:	4770      	bx	lr
 800a1f0:	20000f1c 	.word	0x20000f1c

0800a1f4 <__cxa_get_globals>:
 800a1f4:	4800      	ldr	r0, [pc, #0]	; (800a1f8 <__cxa_get_globals+0x4>)
 800a1f6:	4770      	bx	lr
 800a1f8:	20000f1c 	.word	0x20000f1c

0800a1fc <_ZL12read_uleb128PKhPm>:
 800a1fc:	b530      	push	{r4, r5, lr}
 800a1fe:	2300      	movs	r3, #0
 800a200:	461a      	mov	r2, r3
 800a202:	f810 5b01 	ldrb.w	r5, [r0], #1
 800a206:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 800a20a:	4094      	lsls	r4, r2
 800a20c:	4323      	orrs	r3, r4
 800a20e:	062c      	lsls	r4, r5, #24
 800a210:	f102 0207 	add.w	r2, r2, #7
 800a214:	d4f5      	bmi.n	800a202 <_ZL12read_uleb128PKhPm+0x6>
 800a216:	600b      	str	r3, [r1, #0]
 800a218:	bd30      	pop	{r4, r5, pc}

0800a21a <_ZL12read_sleb128PKhPl>:
 800a21a:	b530      	push	{r4, r5, lr}
 800a21c:	2300      	movs	r3, #0
 800a21e:	461a      	mov	r2, r3
 800a220:	f810 4b01 	ldrb.w	r4, [r0], #1
 800a224:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800a228:	4095      	lsls	r5, r2
 800a22a:	432b      	orrs	r3, r5
 800a22c:	0625      	lsls	r5, r4, #24
 800a22e:	f102 0207 	add.w	r2, r2, #7
 800a232:	d4f5      	bmi.n	800a220 <_ZL12read_sleb128PKhPl+0x6>
 800a234:	2a1f      	cmp	r2, #31
 800a236:	d806      	bhi.n	800a246 <_ZL12read_sleb128PKhPl+0x2c>
 800a238:	0664      	lsls	r4, r4, #25
 800a23a:	bf42      	ittt	mi
 800a23c:	f04f 34ff 	movmi.w	r4, #4294967295
 800a240:	fa04 f202 	lslmi.w	r2, r4, r2
 800a244:	4313      	orrmi	r3, r2
 800a246:	600b      	str	r3, [r1, #0]
 800a248:	bd30      	pop	{r4, r5, pc}

0800a24a <_ZL28read_encoded_value_with_basehjPKhPj>:
 800a24a:	2850      	cmp	r0, #80	; 0x50
 800a24c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a250:	4606      	mov	r6, r0
 800a252:	4688      	mov	r8, r1
 800a254:	4615      	mov	r5, r2
 800a256:	461f      	mov	r7, r3
 800a258:	d108      	bne.n	800a26c <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 800a25a:	3203      	adds	r2, #3
 800a25c:	f022 0003 	bic.w	r0, r2, #3
 800a260:	f850 4b04 	ldr.w	r4, [r0], #4
 800a264:	603c      	str	r4, [r7, #0]
 800a266:	b002      	add	sp, #8
 800a268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a26c:	f000 030f 	and.w	r3, r0, #15
 800a270:	2b0c      	cmp	r3, #12
 800a272:	d82e      	bhi.n	800a2d2 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 800a274:	e8df f003 	tbb	[pc, r3]
 800a278:	251d0725 	.word	0x251d0725
 800a27c:	2d2d2d29 	.word	0x2d2d2d29
 800a280:	2521182d 	.word	0x2521182d
 800a284:	29          	.byte	0x29
 800a285:	00          	.byte	0x00
 800a286:	a901      	add	r1, sp, #4
 800a288:	4628      	mov	r0, r5
 800a28a:	f7ff ffb7 	bl	800a1fc <_ZL12read_uleb128PKhPm>
 800a28e:	9c01      	ldr	r4, [sp, #4]
 800a290:	2c00      	cmp	r4, #0
 800a292:	d0e7      	beq.n	800a264 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 800a294:	f006 0370 	and.w	r3, r6, #112	; 0x70
 800a298:	2b10      	cmp	r3, #16
 800a29a:	bf08      	it	eq
 800a29c:	46a8      	moveq	r8, r5
 800a29e:	4444      	add	r4, r8
 800a2a0:	0633      	lsls	r3, r6, #24
 800a2a2:	bf48      	it	mi
 800a2a4:	6824      	ldrmi	r4, [r4, #0]
 800a2a6:	e7dd      	b.n	800a264 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 800a2a8:	a901      	add	r1, sp, #4
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f7ff ffb5 	bl	800a21a <_ZL12read_sleb128PKhPl>
 800a2b0:	e7ed      	b.n	800a28e <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	f830 4b02 	ldrh.w	r4, [r0], #2
 800a2b8:	e7ea      	b.n	800a290 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f930 4b02 	ldrsh.w	r4, [r0], #2
 800a2c0:	e7e6      	b.n	800a290 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	f850 4b04 	ldr.w	r4, [r0], #4
 800a2c8:	e7e2      	b.n	800a290 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	f850 4b08 	ldr.w	r4, [r0], #8
 800a2d0:	e7de      	b.n	800a290 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800a2d2:	f000 fd24 	bl	800ad1e <abort>

0800a2d6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800a2d6:	b508      	push	{r3, lr}
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2bff      	cmp	r3, #255	; 0xff
 800a2dc:	4608      	mov	r0, r1
 800a2de:	d010      	beq.n	800a302 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800a2e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a2e4:	2a30      	cmp	r2, #48	; 0x30
 800a2e6:	d012      	beq.n	800a30e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 800a2e8:	d807      	bhi.n	800a2fa <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 800a2ea:	2a20      	cmp	r2, #32
 800a2ec:	d00b      	beq.n	800a306 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 800a2ee:	d802      	bhi.n	800a2f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800a2f0:	f013 0f60 	tst.w	r3, #96	; 0x60
 800a2f4:	d005      	beq.n	800a302 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800a2f6:	f000 fd12 	bl	800ad1e <abort>
 800a2fa:	2a40      	cmp	r2, #64	; 0x40
 800a2fc:	d00b      	beq.n	800a316 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 800a2fe:	2a50      	cmp	r2, #80	; 0x50
 800a300:	d1f9      	bne.n	800a2f6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800a302:	2000      	movs	r0, #0
 800a304:	bd08      	pop	{r3, pc}
 800a306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a30a:	f001 bad6 	b.w	800b8ba <_Unwind_GetTextRelBase>
 800a30e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a312:	f001 bacf 	b.w	800b8b4 <_Unwind_GetDataRelBase>
 800a316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a31a:	f7f7 b857 	b.w	80013cc <_Unwind_GetRegionStart>

0800a31e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 800a31e:	b513      	push	{r0, r1, r4, lr}
 800a320:	460c      	mov	r4, r1
 800a322:	4601      	mov	r1, r0
 800a324:	4620      	mov	r0, r4
 800a326:	e9cd 3200 	strd	r3, r2, [sp]
 800a32a:	f7ff ffd4 	bl	800a2d6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a32e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a332:	4601      	mov	r1, r0
 800a334:	4620      	mov	r0, r4
 800a336:	b002      	add	sp, #8
 800a338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a33c:	f7ff bf85 	b.w	800a24a <_ZL28read_encoded_value_with_basehjPKhPj>

0800a340 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800a340:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a342:	460c      	mov	r4, r1
 800a344:	4615      	mov	r5, r2
 800a346:	4606      	mov	r6, r0
 800a348:	b328      	cbz	r0, 800a396 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800a34a:	f7f7 f83f 	bl	80013cc <_Unwind_GetRegionStart>
 800a34e:	4603      	mov	r3, r0
 800a350:	4620      	mov	r0, r4
 800a352:	602b      	str	r3, [r5, #0]
 800a354:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a358:	29ff      	cmp	r1, #255	; 0xff
 800a35a:	d01e      	beq.n	800a39a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 800a35c:	4602      	mov	r2, r0
 800a35e:	1d2b      	adds	r3, r5, #4
 800a360:	4630      	mov	r0, r6
 800a362:	f7ff ffdc 	bl	800a31e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a366:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a36a:	752b      	strb	r3, [r5, #20]
 800a36c:	2bff      	cmp	r3, #255	; 0xff
 800a36e:	d016      	beq.n	800a39e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 800a370:	2310      	movs	r3, #16
 800a372:	752b      	strb	r3, [r5, #20]
 800a374:	a901      	add	r1, sp, #4
 800a376:	f7ff ff41 	bl	800a1fc <_ZL12read_uleb128PKhPm>
 800a37a:	9b01      	ldr	r3, [sp, #4]
 800a37c:	4403      	add	r3, r0
 800a37e:	60eb      	str	r3, [r5, #12]
 800a380:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a384:	756b      	strb	r3, [r5, #21]
 800a386:	a901      	add	r1, sp, #4
 800a388:	f7ff ff38 	bl	800a1fc <_ZL12read_uleb128PKhPm>
 800a38c:	9b01      	ldr	r3, [sp, #4]
 800a38e:	4403      	add	r3, r0
 800a390:	612b      	str	r3, [r5, #16]
 800a392:	b002      	add	sp, #8
 800a394:	bd70      	pop	{r4, r5, r6, pc}
 800a396:	4603      	mov	r3, r0
 800a398:	e7da      	b.n	800a350 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 800a39a:	606b      	str	r3, [r5, #4]
 800a39c:	e7e3      	b.n	800a366 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e7ed      	b.n	800a37e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

0800a3a2 <_Unwind_GetGR>:
 800a3a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3a4:	ab03      	add	r3, sp, #12
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	460a      	mov	r2, r1
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	f7f6 fa8d 	bl	80008cc <_Unwind_VRS_Get>
 800a3b2:	9803      	ldr	r0, [sp, #12]
 800a3b4:	b005      	add	sp, #20
 800a3b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a3bc <__gxx_personality_v0>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	b091      	sub	sp, #68	; 0x44
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	9305      	str	r3, [sp, #20]
 800a3c6:	f000 0303 	and.w	r3, r0, #3
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	4617      	mov	r7, r2
 800a3d2:	d00e      	beq.n	800a3f2 <__gxx_personality_v0+0x36>
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d003      	beq.n	800a3e0 <__gxx_personality_v0+0x24>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d13b      	bne.n	800a454 <__gxx_personality_v0+0x98>
 800a3dc:	0701      	lsls	r1, r0, #28
 800a3de:	d53b      	bpl.n	800a458 <__gxx_personality_v0+0x9c>
 800a3e0:	4639      	mov	r1, r7
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f7f6 ffdc 	bl	80013a0 <__gnu_unwind_frame>
 800a3e8:	b390      	cbz	r0, 800a450 <__gxx_personality_v0+0x94>
 800a3ea:	2009      	movs	r0, #9
 800a3ec:	b011      	add	sp, #68	; 0x44
 800a3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f2:	0702      	lsls	r2, r0, #28
 800a3f4:	d406      	bmi.n	800a404 <__gxx_personality_v0+0x48>
 800a3f6:	6a0d      	ldr	r5, [r1, #32]
 800a3f8:	4638      	mov	r0, r7
 800a3fa:	210d      	movs	r1, #13
 800a3fc:	f7ff ffd1 	bl	800a3a2 <_Unwind_GetGR>
 800a400:	4285      	cmp	r5, r0
 800a402:	d02b      	beq.n	800a45c <__gxx_personality_v0+0xa0>
 800a404:	2002      	movs	r0, #2
 800a406:	2300      	movs	r3, #0
 800a408:	f006 0608 	and.w	r6, r6, #8
 800a40c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 800a410:	4306      	orrs	r6, r0
 800a412:	f8cd a000 	str.w	sl, [sp]
 800a416:	220c      	movs	r2, #12
 800a418:	4619      	mov	r1, r3
 800a41a:	4638      	mov	r0, r7
 800a41c:	940a      	str	r4, [sp, #40]	; 0x28
 800a41e:	f7f6 fa79 	bl	8000914 <_Unwind_VRS_Set>
 800a422:	2e06      	cmp	r6, #6
 800a424:	d11c      	bne.n	800a460 <__gxx_personality_v0+0xa4>
 800a426:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800a42a:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 800a42e:	f1b8 0f00 	cmp.w	r8, #0
 800a432:	bf0c      	ite	eq
 800a434:	f04f 0b01 	moveq.w	fp, #1
 800a438:	f04f 0b03 	movne.w	fp, #3
 800a43c:	f016 0608 	ands.w	r6, r6, #8
 800a440:	f000 810c 	beq.w	800a65c <__gxx_personality_v0+0x2a0>
 800a444:	f1bb 0f01 	cmp.w	fp, #1
 800a448:	f040 8104 	bne.w	800a654 <__gxx_personality_v0+0x298>
 800a44c:	f000 f964 	bl	800a718 <_ZSt9terminatev>
 800a450:	2008      	movs	r0, #8
 800a452:	e7cb      	b.n	800a3ec <__gxx_personality_v0+0x30>
 800a454:	f000 fc63 	bl	800ad1e <abort>
 800a458:	2001      	movs	r0, #1
 800a45a:	e7d4      	b.n	800a406 <__gxx_personality_v0+0x4a>
 800a45c:	2006      	movs	r0, #6
 800a45e:	e7d2      	b.n	800a406 <__gxx_personality_v0+0x4a>
 800a460:	4638      	mov	r0, r7
 800a462:	f7f6 ffb9 	bl	80013d8 <_Unwind_GetLanguageSpecificData>
 800a466:	4681      	mov	r9, r0
 800a468:	2800      	cmp	r0, #0
 800a46a:	d0b9      	beq.n	800a3e0 <__gxx_personality_v0+0x24>
 800a46c:	4652      	mov	r2, sl
 800a46e:	4601      	mov	r1, r0
 800a470:	4638      	mov	r0, r7
 800a472:	f7ff ff65 	bl	800a340 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800a476:	4639      	mov	r1, r7
 800a478:	4605      	mov	r5, r0
 800a47a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800a47e:	f7ff ff2a 	bl	800a2d6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a482:	210f      	movs	r1, #15
 800a484:	900c      	str	r0, [sp, #48]	; 0x30
 800a486:	4638      	mov	r0, r7
 800a488:	f7ff ff8b 	bl	800a3a2 <_Unwind_GetGR>
 800a48c:	f020 0801 	bic.w	r8, r0, #1
 800a490:	f108 38ff 	add.w	r8, r8, #4294967295
 800a494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a496:	42ab      	cmp	r3, r5
 800a498:	f240 80c4 	bls.w	800a624 <__gxx_personality_v0+0x268>
 800a49c:	462a      	mov	r2, r5
 800a49e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a4a2:	ab06      	add	r3, sp, #24
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f7ff ff3a 	bl	800a31e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a4aa:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	ab07      	add	r3, sp, #28
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	f7ff ff33 	bl	800a31e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a4b8:	ab08      	add	r3, sp, #32
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	f7ff ff2c 	bl	800a31e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800a4c6:	a909      	add	r1, sp, #36	; 0x24
 800a4c8:	f7ff fe98 	bl	800a1fc <_ZL12read_uleb128PKhPm>
 800a4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ce:	9a06      	ldr	r2, [sp, #24]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	4543      	cmp	r3, r8
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	d901      	bls.n	800a4dc <__gxx_personality_v0+0x120>
 800a4d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a4da:	e7db      	b.n	800a494 <__gxx_personality_v0+0xd8>
 800a4dc:	9a07      	ldr	r2, [sp, #28]
 800a4de:	4413      	add	r3, r2
 800a4e0:	4543      	cmp	r3, r8
 800a4e2:	d9d7      	bls.n	800a494 <__gxx_personality_v0+0xd8>
 800a4e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4e8:	f1b8 0f00 	cmp.w	r8, #0
 800a4ec:	d001      	beq.n	800a4f2 <__gxx_personality_v0+0x136>
 800a4ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4f0:	4498      	add	r8, r3
 800a4f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a4f4:	b115      	cbz	r5, 800a4fc <__gxx_personality_v0+0x140>
 800a4f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a4f8:	3d01      	subs	r5, #1
 800a4fa:	4405      	add	r5, r0
 800a4fc:	f1b8 0f00 	cmp.w	r8, #0
 800a500:	f43f af6e 	beq.w	800a3e0 <__gxx_personality_v0+0x24>
 800a504:	2d00      	cmp	r5, #0
 800a506:	f000 80f7 	beq.w	800a6f8 <__gxx_personality_v0+0x33c>
 800a50a:	f016 0308 	ands.w	r3, r6, #8
 800a50e:	9302      	str	r3, [sp, #8]
 800a510:	d034      	beq.n	800a57c <__gxx_personality_v0+0x1c0>
 800a512:	2347      	movs	r3, #71	; 0x47
 800a514:	7023      	strb	r3, [r4, #0]
 800a516:	234e      	movs	r3, #78	; 0x4e
 800a518:	7063      	strb	r3, [r4, #1]
 800a51a:	2355      	movs	r3, #85	; 0x55
 800a51c:	70a3      	strb	r3, [r4, #2]
 800a51e:	2343      	movs	r3, #67	; 0x43
 800a520:	70e3      	strb	r3, [r4, #3]
 800a522:	2346      	movs	r3, #70	; 0x46
 800a524:	7123      	strb	r3, [r4, #4]
 800a526:	234f      	movs	r3, #79	; 0x4f
 800a528:	7163      	strb	r3, [r4, #5]
 800a52a:	2352      	movs	r3, #82	; 0x52
 800a52c:	71a3      	strb	r3, [r4, #6]
 800a52e:	2300      	movs	r3, #0
 800a530:	71e3      	strb	r3, [r4, #7]
 800a532:	f04f 0b00 	mov.w	fp, #0
 800a536:	a907      	add	r1, sp, #28
 800a538:	4628      	mov	r0, r5
 800a53a:	f7ff fe6e 	bl	800a21a <_ZL12read_sleb128PKhPl>
 800a53e:	a908      	add	r1, sp, #32
 800a540:	9003      	str	r0, [sp, #12]
 800a542:	f7ff fe6a 	bl	800a21a <_ZL12read_sleb128PKhPl>
 800a546:	9907      	ldr	r1, [sp, #28]
 800a548:	2900      	cmp	r1, #0
 800a54a:	d068      	beq.n	800a61e <__gxx_personality_v0+0x262>
 800a54c:	dd3a      	ble.n	800a5c4 <__gxx_personality_v0+0x208>
 800a54e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800a552:	28ff      	cmp	r0, #255	; 0xff
 800a554:	d032      	beq.n	800a5bc <__gxx_personality_v0+0x200>
 800a556:	f000 0307 	and.w	r3, r0, #7
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	f63f af7a 	bhi.w	800a454 <__gxx_personality_v0+0x98>
 800a560:	a201      	add	r2, pc, #4	; (adr r2, 800a568 <__gxx_personality_v0+0x1ac>)
 800a562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a566:	bf00      	nop
 800a568:	0800a5c1 	.word	0x0800a5c1
 800a56c:	0800a455 	.word	0x0800a455
 800a570:	0800a58f 	.word	0x0800a58f
 800a574:	0800a5c1 	.word	0x0800a5c1
 800a578:	0800a5b9 	.word	0x0800a5b9
 800a57c:	79e3      	ldrb	r3, [r4, #7]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	bf0c      	ite	eq
 800a582:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 800a586:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 800a58a:	9305      	str	r3, [sp, #20]
 800a58c:	e7d1      	b.n	800a532 <__gxx_personality_v0+0x176>
 800a58e:	2502      	movs	r5, #2
 800a590:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a592:	ab09      	add	r3, sp, #36	; 0x24
 800a594:	fb05 2211 	mls	r2, r5, r1, r2
 800a598:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a59a:	f7ff fe56 	bl	800a24a <_ZL28read_encoded_value_with_basehjPKhPj>
 800a59e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5a0:	b131      	cbz	r1, 800a5b0 <__gxx_personality_v0+0x1f4>
 800a5a2:	b37c      	cbz	r4, 800a604 <__gxx_personality_v0+0x248>
 800a5a4:	ab05      	add	r3, sp, #20
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f7ff fd21 	bl	8009ff0 <__cxa_type_match>
 800a5ae:	b348      	cbz	r0, 800a604 <__gxx_personality_v0+0x248>
 800a5b0:	9d07      	ldr	r5, [sp, #28]
 800a5b2:	f04f 0b03 	mov.w	fp, #3
 800a5b6:	e039      	b.n	800a62c <__gxx_personality_v0+0x270>
 800a5b8:	2508      	movs	r5, #8
 800a5ba:	e7e9      	b.n	800a590 <__gxx_personality_v0+0x1d4>
 800a5bc:	2500      	movs	r5, #0
 800a5be:	e7e7      	b.n	800a590 <__gxx_personality_v0+0x1d4>
 800a5c0:	2504      	movs	r5, #4
 800a5c2:	e7e5      	b.n	800a590 <__gxx_personality_v0+0x1d4>
 800a5c4:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 800a5c8:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 800a5cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5ce:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 800a5d2:	313f      	adds	r1, #63	; 0x3f
 800a5d4:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 800a5d8:	b1dc      	cbz	r4, 800a612 <__gxx_personality_v0+0x256>
 800a5da:	9a02      	ldr	r2, [sp, #8]
 800a5dc:	b9ca      	cbnz	r2, 800a612 <__gxx_personality_v0+0x256>
 800a5de:	9b05      	ldr	r3, [sp, #20]
 800a5e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e2:	3d04      	subs	r5, #4
 800a5e4:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800a5e8:	b141      	cbz	r1, 800a5fc <__gxx_personality_v0+0x240>
 800a5ea:	ab09      	add	r3, sp, #36	; 0x24
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4429      	add	r1, r5
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f7ff fcfd 	bl	8009ff0 <__cxa_type_match>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d0f4      	beq.n	800a5e4 <__gxx_personality_v0+0x228>
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	f081 0101 	eor.w	r1, r1, #1
 800a600:	2900      	cmp	r1, #0
 800a602:	d1d5      	bne.n	800a5b0 <__gxx_personality_v0+0x1f4>
 800a604:	9d08      	ldr	r5, [sp, #32]
 800a606:	2d00      	cmp	r5, #0
 800a608:	d072      	beq.n	800a6f0 <__gxx_personality_v0+0x334>
 800a60a:	9b03      	ldr	r3, [sp, #12]
 800a60c:	442b      	add	r3, r5
 800a60e:	461d      	mov	r5, r3
 800a610:	e791      	b.n	800a536 <__gxx_personality_v0+0x17a>
 800a612:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800a616:	fab1 f181 	clz	r1, r1
 800a61a:	0949      	lsrs	r1, r1, #5
 800a61c:	e7f0      	b.n	800a600 <__gxx_personality_v0+0x244>
 800a61e:	f04f 0b01 	mov.w	fp, #1
 800a622:	e7ef      	b.n	800a604 <__gxx_personality_v0+0x248>
 800a624:	2500      	movs	r5, #0
 800a626:	46a8      	mov	r8, r5
 800a628:	f04f 0b01 	mov.w	fp, #1
 800a62c:	07f3      	lsls	r3, r6, #31
 800a62e:	f57f af05 	bpl.w	800a43c <__gxx_personality_v0+0x80>
 800a632:	f1bb 0f02 	cmp.w	fp, #2
 800a636:	f43f aed3 	beq.w	800a3e0 <__gxx_personality_v0+0x24>
 800a63a:	210d      	movs	r1, #13
 800a63c:	4638      	mov	r0, r7
 800a63e:	9e05      	ldr	r6, [sp, #20]
 800a640:	f7ff feaf 	bl	800a3a2 <_Unwind_GetGR>
 800a644:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 800a648:	e9c4 0608 	strd	r0, r6, [r4, #32]
 800a64c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 800a650:	2006      	movs	r0, #6
 800a652:	e6cb      	b.n	800a3ec <__gxx_personality_v0+0x30>
 800a654:	2d00      	cmp	r5, #0
 800a656:	da22      	bge.n	800a69e <__gxx_personality_v0+0x2e2>
 800a658:	f000 f870 	bl	800a73c <_ZSt10unexpectedv>
 800a65c:	f1bb 0f01 	cmp.w	fp, #1
 800a660:	d102      	bne.n	800a668 <__gxx_personality_v0+0x2ac>
 800a662:	4620      	mov	r0, r4
 800a664:	f000 faa7 	bl	800abb6 <__cxa_call_terminate>
 800a668:	2d00      	cmp	r5, #0
 800a66a:	da18      	bge.n	800a69e <__gxx_personality_v0+0x2e2>
 800a66c:	4652      	mov	r2, sl
 800a66e:	4649      	mov	r1, r9
 800a670:	4638      	mov	r0, r7
 800a672:	f7ff fe65 	bl	800a340 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800a676:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800a67a:	4639      	mov	r1, r7
 800a67c:	f7ff fe2b 	bl	800a2d6 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800a680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a682:	900c      	str	r0, [sp, #48]	; 0x30
 800a684:	43eb      	mvns	r3, r5
 800a686:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a68a:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 800a68e:	b10a      	cbz	r2, 800a694 <__gxx_personality_v0+0x2d8>
 800a690:	3601      	adds	r6, #1
 800a692:	e7fa      	b.n	800a68a <__gxx_personality_v0+0x2ce>
 800a694:	2204      	movs	r2, #4
 800a696:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 800a69a:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 800a69e:	2300      	movs	r3, #0
 800a6a0:	ae09      	add	r6, sp, #36	; 0x24
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	9600      	str	r6, [sp, #0]
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	9409      	str	r4, [sp, #36]	; 0x24
 800a6ac:	f7f6 f932 	bl	8000914 <_Unwind_VRS_Set>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	9600      	str	r6, [sp, #0]
 800a6b8:	4638      	mov	r0, r7
 800a6ba:	9509      	str	r5, [sp, #36]	; 0x24
 800a6bc:	f7f6 f92a 	bl	8000914 <_Unwind_VRS_Set>
 800a6c0:	210f      	movs	r1, #15
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	f7ff fe6d 	bl	800a3a2 <_Unwind_GetGR>
 800a6c8:	f000 0001 	and.w	r0, r0, #1
 800a6cc:	ea40 0008 	orr.w	r0, r0, r8
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9009      	str	r0, [sp, #36]	; 0x24
 800a6d4:	9600      	str	r6, [sp, #0]
 800a6d6:	220f      	movs	r2, #15
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4638      	mov	r0, r7
 800a6dc:	f7f6 f91a 	bl	8000914 <_Unwind_VRS_Set>
 800a6e0:	f1bb 0f02 	cmp.w	fp, #2
 800a6e4:	d102      	bne.n	800a6ec <__gxx_personality_v0+0x330>
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7ff fce0 	bl	800a0ac <__cxa_begin_cleanup>
 800a6ec:	2007      	movs	r0, #7
 800a6ee:	e67d      	b.n	800a3ec <__gxx_personality_v0+0x30>
 800a6f0:	f1bb 0f00 	cmp.w	fp, #0
 800a6f4:	f43f ae74 	beq.w	800a3e0 <__gxx_personality_v0+0x24>
 800a6f8:	f04f 0b02 	mov.w	fp, #2
 800a6fc:	e796      	b.n	800a62c <__gxx_personality_v0+0x270>
 800a6fe:	bf00      	nop

0800a700 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a700:	b508      	push	{r3, lr}
 800a702:	4780      	blx	r0
 800a704:	f000 fb0b 	bl	800ad1e <abort>

0800a708 <_ZSt13get_terminatev>:
 800a708:	4b02      	ldr	r3, [pc, #8]	; (800a714 <_ZSt13get_terminatev+0xc>)
 800a70a:	6818      	ldr	r0, [r3, #0]
 800a70c:	f3bf 8f5b 	dmb	ish
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	20000018 	.word	0x20000018

0800a718 <_ZSt9terminatev>:
 800a718:	b508      	push	{r3, lr}
 800a71a:	f7ff fff5 	bl	800a708 <_ZSt13get_terminatev>
 800a71e:	f7ff ffef 	bl	800a700 <_ZN10__cxxabiv111__terminateEPFvvE>

0800a722 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800a722:	b508      	push	{r3, lr}
 800a724:	4780      	blx	r0
 800a726:	f7ff fff7 	bl	800a718 <_ZSt9terminatev>
	...

0800a72c <_ZSt14get_unexpectedv>:
 800a72c:	4b02      	ldr	r3, [pc, #8]	; (800a738 <_ZSt14get_unexpectedv+0xc>)
 800a72e:	6818      	ldr	r0, [r3, #0]
 800a730:	f3bf 8f5b 	dmb	ish
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	20000014 	.word	0x20000014

0800a73c <_ZSt10unexpectedv>:
 800a73c:	b508      	push	{r3, lr}
 800a73e:	f7ff fff5 	bl	800a72c <_ZSt14get_unexpectedv>
 800a742:	f7ff ffee 	bl	800a722 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800a746 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 800a746:	2801      	cmp	r0, #1
 800a748:	b507      	push	{r0, r1, r2, lr}
 800a74a:	d903      	bls.n	800a754 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 800a74c:	f851 0c14 	ldr.w	r0, [r1, #-20]
 800a750:	f7ff ffd6 	bl	800a700 <_ZN10__cxxabiv111__terminateEPFvvE>
 800a754:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 800a758:	f3bf 8f5b 	dmb	ish
 800a75c:	e853 2f00 	ldrex	r2, [r3]
 800a760:	3a01      	subs	r2, #1
 800a762:	e843 2000 	strex	r0, r2, [r3]
 800a766:	2800      	cmp	r0, #0
 800a768:	d1f8      	bne.n	800a75c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 800a76a:	f3bf 8f5b 	dmb	ish
 800a76e:	b962      	cbnz	r2, 800a78a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x44>
 800a770:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800a774:	f101 0058 	add.w	r0, r1, #88	; 0x58
 800a778:	b113      	cbz	r3, 800a780 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 800a77a:	9001      	str	r0, [sp, #4]
 800a77c:	4798      	blx	r3
 800a77e:	9801      	ldr	r0, [sp, #4]
 800a780:	b003      	add	sp, #12
 800a782:	f85d eb04 	ldr.w	lr, [sp], #4
 800a786:	f7ff bbeb 	b.w	8009f60 <__cxa_free_exception>
 800a78a:	b003      	add	sp, #12
 800a78c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a790 <__cxa_init_primary_exception>:
 800a790:	b538      	push	{r3, r4, r5, lr}
 800a792:	2500      	movs	r5, #0
 800a794:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 800a798:	f840 5c80 	str.w	r5, [r0, #-128]
 800a79c:	4604      	mov	r4, r0
 800a79e:	f7ff ffc5 	bl	800a72c <_ZSt14get_unexpectedv>
 800a7a2:	f844 0c70 	str.w	r0, [r4, #-112]
 800a7a6:	f7ff ffaf 	bl	800a708 <_ZSt13get_terminatev>
 800a7aa:	2347      	movs	r3, #71	; 0x47
 800a7ac:	f804 3c58 	strb.w	r3, [r4, #-88]
 800a7b0:	234e      	movs	r3, #78	; 0x4e
 800a7b2:	f804 3c57 	strb.w	r3, [r4, #-87]
 800a7b6:	2355      	movs	r3, #85	; 0x55
 800a7b8:	f804 3c56 	strb.w	r3, [r4, #-86]
 800a7bc:	2343      	movs	r3, #67	; 0x43
 800a7be:	f804 3c55 	strb.w	r3, [r4, #-85]
 800a7c2:	f804 3c54 	strb.w	r3, [r4, #-84]
 800a7c6:	232b      	movs	r3, #43	; 0x2b
 800a7c8:	f804 3c53 	strb.w	r3, [r4, #-83]
 800a7cc:	f804 3c52 	strb.w	r3, [r4, #-82]
 800a7d0:	4b04      	ldr	r3, [pc, #16]	; (800a7e4 <__cxa_init_primary_exception+0x54>)
 800a7d2:	f844 0c6c 	str.w	r0, [r4, #-108]
 800a7d6:	f804 5c51 	strb.w	r5, [r4, #-81]
 800a7da:	f844 3c50 	str.w	r3, [r4, #-80]
 800a7de:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 800a7e2:	bd38      	pop	{r3, r4, r5, pc}
 800a7e4:	0800a747 	.word	0x0800a747

0800a7e8 <__cxa_throw>:
 800a7e8:	b507      	push	{r0, r1, r2, lr}
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	e9cd 2100 	strd	r2, r1, [sp]
 800a7f0:	f7ff fd00 	bl	800a1f4 <__cxa_get_globals>
 800a7f4:	6843      	ldr	r3, [r0, #4]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	e9dd 2100 	ldrd	r2, r1, [sp]
 800a7fc:	6043      	str	r3, [r0, #4]
 800a7fe:	4620      	mov	r0, r4
 800a800:	f7ff ffc6 	bl	800a790 <__cxa_init_primary_exception>
 800a804:	4604      	mov	r4, r0
 800a806:	2301      	movs	r3, #1
 800a808:	f844 3b28 	str.w	r3, [r4], #40
 800a80c:	4620      	mov	r0, r4
 800a80e:	f7f6 fbf3 	bl	8000ff8 <_Unwind_RaiseException>
 800a812:	4620      	mov	r0, r4
 800a814:	f7ff fc9d 	bl	800a152 <__cxa_begin_catch>
 800a818:	f7ff ff7e 	bl	800a718 <_ZSt9terminatev>

0800a81c <__cxa_rethrow>:
 800a81c:	b508      	push	{r3, lr}
 800a81e:	f7ff fce9 	bl	800a1f4 <__cxa_get_globals>
 800a822:	e9d0 4200 	ldrd	r4, r2, [r0]
 800a826:	3201      	adds	r2, #1
 800a828:	6042      	str	r2, [r0, #4]
 800a82a:	b34c      	cbz	r4, 800a880 <__cxa_rethrow+0x64>
 800a82c:	f894 2020 	ldrb.w	r2, [r4, #32]
 800a830:	2a47      	cmp	r2, #71	; 0x47
 800a832:	d127      	bne.n	800a884 <__cxa_rethrow+0x68>
 800a834:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800a838:	2a4e      	cmp	r2, #78	; 0x4e
 800a83a:	d123      	bne.n	800a884 <__cxa_rethrow+0x68>
 800a83c:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800a840:	2a55      	cmp	r2, #85	; 0x55
 800a842:	d11f      	bne.n	800a884 <__cxa_rethrow+0x68>
 800a844:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800a848:	2a43      	cmp	r2, #67	; 0x43
 800a84a:	d11b      	bne.n	800a884 <__cxa_rethrow+0x68>
 800a84c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800a850:	2a43      	cmp	r2, #67	; 0x43
 800a852:	d117      	bne.n	800a884 <__cxa_rethrow+0x68>
 800a854:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800a858:	2a2b      	cmp	r2, #43	; 0x2b
 800a85a:	d113      	bne.n	800a884 <__cxa_rethrow+0x68>
 800a85c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800a860:	2a2b      	cmp	r2, #43	; 0x2b
 800a862:	d10f      	bne.n	800a884 <__cxa_rethrow+0x68>
 800a864:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800a868:	2a01      	cmp	r2, #1
 800a86a:	d80b      	bhi.n	800a884 <__cxa_rethrow+0x68>
 800a86c:	6962      	ldr	r2, [r4, #20]
 800a86e:	4252      	negs	r2, r2
 800a870:	6162      	str	r2, [r4, #20]
 800a872:	3420      	adds	r4, #32
 800a874:	4620      	mov	r0, r4
 800a876:	f7f6 fbe3 	bl	8001040 <_Unwind_Resume_or_Rethrow>
 800a87a:	4620      	mov	r0, r4
 800a87c:	f7ff fc69 	bl	800a152 <__cxa_begin_catch>
 800a880:	f7ff ff4a 	bl	800a718 <_ZSt9terminatev>
 800a884:	2200      	movs	r2, #0
 800a886:	6002      	str	r2, [r0, #0]
 800a888:	e7f3      	b.n	800a872 <__cxa_rethrow+0x56>
	...

0800a88c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
 800a88c:	b510      	push	{r4, lr}
 800a88e:	4b03      	ldr	r3, [pc, #12]	; (800a89c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
 800a890:	6003      	str	r3, [r0, #0]
 800a892:	4604      	mov	r4, r0
 800a894:	f000 f8db 	bl	800aa4e <_ZNSt9type_infoD1Ev>
 800a898:	4620      	mov	r0, r4
 800a89a:	bd10      	pop	{r4, pc}
 800a89c:	0800bc70 	.word	0x0800bc70

0800a8a0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
 800a8a0:	b510      	push	{r4, lr}
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	f7ff fff2 	bl	800a88c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	2108      	movs	r1, #8
 800a8ac:	f7ff fae4 	bl	8009e78 <_ZdlPvj>
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	bd10      	pop	{r4, pc}

0800a8b4 <_Znwj>:
 800a8b4:	2801      	cmp	r0, #1
 800a8b6:	bf38      	it	cc
 800a8b8:	2001      	movcc	r0, #1
 800a8ba:	b510      	push	{r4, lr}
 800a8bc:	4604      	mov	r4, r0
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 fb58 	bl	800af74 <malloc>
 800a8c4:	b930      	cbnz	r0, 800a8d4 <_Znwj+0x20>
 800a8c6:	f000 f999 	bl	800abfc <_ZSt15get_new_handlerv>
 800a8ca:	b908      	cbnz	r0, 800a8d0 <_Znwj+0x1c>
 800a8cc:	f000 fa27 	bl	800ad1e <abort>
 800a8d0:	4780      	blx	r0
 800a8d2:	e7f4      	b.n	800a8be <_Znwj+0xa>
 800a8d4:	bd10      	pop	{r4, pc}

0800a8d6 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
 800a8d6:	2001      	movs	r0, #1
 800a8d8:	4770      	bx	lr
	...

0800a8dc <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
 800a8dc:	b510      	push	{r4, lr}
 800a8de:	4b03      	ldr	r3, [pc, #12]	; (800a8ec <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
 800a8e0:	6003      	str	r3, [r0, #0]
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	f000 f99c 	bl	800ac20 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	bd10      	pop	{r4, pc}
 800a8ec:	0800bcc0 	.word	0x0800bcc0

0800a8f0 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
 800a8f0:	b510      	push	{r4, lr}
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	f7ff fff2 	bl	800a8dc <_ZN10__cxxabiv119__pointer_type_infoD1Ev>
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	2110      	movs	r1, #16
 800a8fc:	f7ff fabc 	bl	8009e78 <_ZdlPvj>
 800a900:	4620      	mov	r0, r4
 800a902:	bd10      	pop	{r4, pc}

0800a904 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
 800a904:	2b01      	cmp	r3, #1
 800a906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a908:	4606      	mov	r6, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	461d      	mov	r5, r3
 800a90e:	d80f      	bhi.n	800a930 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2c>
 800a910:	490c      	ldr	r1, [pc, #48]	; (800a944 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
 800a912:	68c0      	ldr	r0, [r0, #12]
 800a914:	9201      	str	r2, [sp, #4]
 800a916:	f000 f89f 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800a91a:	9a01      	ldr	r2, [sp, #4]
 800a91c:	b140      	cbz	r0, 800a930 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x2c>
 800a91e:	68e0      	ldr	r0, [r4, #12]
 800a920:	6803      	ldr	r3, [r0, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	4798      	blx	r3
 800a926:	f080 0001 	eor.w	r0, r0, #1
 800a92a:	b2c0      	uxtb	r0, r0
 800a92c:	b002      	add	sp, #8
 800a92e:	bd70      	pop	{r4, r5, r6, pc}
 800a930:	68f0      	ldr	r0, [r6, #12]
 800a932:	68e1      	ldr	r1, [r4, #12]
 800a934:	6803      	ldr	r3, [r0, #0]
 800a936:	691e      	ldr	r6, [r3, #16]
 800a938:	1cab      	adds	r3, r5, #2
 800a93a:	46b4      	mov	ip, r6
 800a93c:	b002      	add	sp, #8
 800a93e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a942:	4760      	bx	ip
 800a944:	0800bc2c 	.word	0x0800bc2c

0800a948 <__cxa_pure_virtual>:
 800a948:	b508      	push	{r3, lr}
 800a94a:	f7ff fee5 	bl	800a718 <_ZSt9terminatev>
	...

0800a950 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800a950:	b510      	push	{r4, lr}
 800a952:	4b03      	ldr	r3, [pc, #12]	; (800a960 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800a954:	6003      	str	r3, [r0, #0]
 800a956:	4604      	mov	r4, r0
 800a958:	f000 f8bc 	bl	800aad4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800a95c:	4620      	mov	r0, r4
 800a95e:	bd10      	pop	{r4, pc}
 800a960:	0800bd18 	.word	0x0800bd18

0800a964 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800a964:	b510      	push	{r4, lr}
 800a966:	4604      	mov	r4, r0
 800a968:	f7ff fff2 	bl	800a950 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800a96c:	4620      	mov	r0, r4
 800a96e:	210c      	movs	r1, #12
 800a970:	f7ff fa82 	bl	8009e78 <_ZdlPvj>
 800a974:	4620      	mov	r0, r4
 800a976:	bd10      	pop	{r4, pc}

0800a978 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800a978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a97a:	9f08      	ldr	r7, [sp, #32]
 800a97c:	4297      	cmp	r7, r2
 800a97e:	4605      	mov	r5, r0
 800a980:	460e      	mov	r6, r1
 800a982:	4614      	mov	r4, r2
 800a984:	d00a      	beq.n	800a99c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 800a986:	68a8      	ldr	r0, [r5, #8]
 800a988:	6802      	ldr	r2, [r0, #0]
 800a98a:	9708      	str	r7, [sp, #32]
 800a98c:	6a15      	ldr	r5, [r2, #32]
 800a98e:	4631      	mov	r1, r6
 800a990:	4622      	mov	r2, r4
 800a992:	46ac      	mov	ip, r5
 800a994:	b003      	add	sp, #12
 800a996:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a99a:	4760      	bx	ip
 800a99c:	4619      	mov	r1, r3
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	f000 f85a 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800a9a4:	9b01      	ldr	r3, [sp, #4]
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d0ed      	beq.n	800a986 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800a9aa:	2006      	movs	r0, #6
 800a9ac:	b003      	add	sp, #12
 800a9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a9b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800a9b0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	460d      	mov	r5, r1
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 800a9bc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 800a9c0:	4681      	mov	r9, r0
 800a9c2:	4617      	mov	r7, r2
 800a9c4:	4698      	mov	r8, r3
 800a9c6:	f000 f847 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800a9ca:	b190      	cbz	r0, 800a9f2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 800a9cc:	2d00      	cmp	r5, #0
 800a9ce:	6034      	str	r4, [r6, #0]
 800a9d0:	7137      	strb	r7, [r6, #4]
 800a9d2:	db09      	blt.n	800a9e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800a9d4:	1961      	adds	r1, r4, r5
 800a9d6:	458a      	cmp	sl, r1
 800a9d8:	bf0c      	ite	eq
 800a9da:	2106      	moveq	r1, #6
 800a9dc:	2101      	movne	r1, #1
 800a9de:	71b1      	strb	r1, [r6, #6]
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	b001      	add	sp, #4
 800a9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e8:	3502      	adds	r5, #2
 800a9ea:	d1f9      	bne.n	800a9e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	71b3      	strb	r3, [r6, #6]
 800a9f0:	e7f6      	b.n	800a9e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800a9f2:	4554      	cmp	r4, sl
 800a9f4:	d106      	bne.n	800aa04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800a9f6:	4659      	mov	r1, fp
 800a9f8:	4648      	mov	r0, r9
 800a9fa:	f000 f82d 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800a9fe:	b108      	cbz	r0, 800aa04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800aa00:	7177      	strb	r7, [r6, #5]
 800aa02:	e7ed      	b.n	800a9e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 800aa04:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800aa08:	6803      	ldr	r3, [r0, #0]
 800aa0a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 800aa0e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 800aa12:	69dc      	ldr	r4, [r3, #28]
 800aa14:	463a      	mov	r2, r7
 800aa16:	4643      	mov	r3, r8
 800aa18:	4629      	mov	r1, r5
 800aa1a:	46a4      	mov	ip, r4
 800aa1c:	b001      	add	sp, #4
 800aa1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa22:	4760      	bx	ip

0800aa24 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800aa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa28:	4607      	mov	r7, r0
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	4615      	mov	r5, r2
 800aa2e:	461e      	mov	r6, r3
 800aa30:	f000 f883 	bl	800ab3a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800aa34:	b948      	cbnz	r0, 800aa4a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800aa36:	68b8      	ldr	r0, [r7, #8]
 800aa38:	6803      	ldr	r3, [r0, #0]
 800aa3a:	699f      	ldr	r7, [r3, #24]
 800aa3c:	462a      	mov	r2, r5
 800aa3e:	4633      	mov	r3, r6
 800aa40:	4621      	mov	r1, r4
 800aa42:	46bc      	mov	ip, r7
 800aa44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa48:	4760      	bx	ip
 800aa4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aa4e <_ZNSt9type_infoD1Ev>:
 800aa4e:	4770      	bx	lr

0800aa50 <_ZNKSt9type_info14__is_pointer_pEv>:
 800aa50:	2000      	movs	r0, #0
 800aa52:	4770      	bx	lr

0800aa54 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 800aa54:	2000      	movs	r0, #0
 800aa56:	4770      	bx	lr

0800aa58 <_ZNKSt9type_infoeqERKS_>:
 800aa58:	4281      	cmp	r1, r0
 800aa5a:	b508      	push	{r3, lr}
 800aa5c:	d00e      	beq.n	800aa7c <_ZNKSt9type_infoeqERKS_+0x24>
 800aa5e:	6840      	ldr	r0, [r0, #4]
 800aa60:	7803      	ldrb	r3, [r0, #0]
 800aa62:	2b2a      	cmp	r3, #42	; 0x2a
 800aa64:	d00c      	beq.n	800aa80 <_ZNKSt9type_infoeqERKS_+0x28>
 800aa66:	6849      	ldr	r1, [r1, #4]
 800aa68:	780b      	ldrb	r3, [r1, #0]
 800aa6a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa6c:	bf08      	it	eq
 800aa6e:	3101      	addeq	r1, #1
 800aa70:	f7f5 fbe6 	bl	8000240 <strcmp>
 800aa74:	fab0 f080 	clz	r0, r0
 800aa78:	0940      	lsrs	r0, r0, #5
 800aa7a:	bd08      	pop	{r3, pc}
 800aa7c:	2001      	movs	r0, #1
 800aa7e:	e7fc      	b.n	800aa7a <_ZNKSt9type_infoeqERKS_+0x22>
 800aa80:	2000      	movs	r0, #0
 800aa82:	e7fa      	b.n	800aa7a <_ZNKSt9type_infoeqERKS_+0x22>

0800aa84 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 800aa84:	f7ff bfe8 	b.w	800aa58 <_ZNKSt9type_infoeqERKS_>

0800aa88 <_ZSt17__throw_bad_allocv>:
 800aa88:	b508      	push	{r3, lr}
 800aa8a:	f000 f948 	bl	800ad1e <abort>

0800aa8e <_ZSt20__throw_length_errorPKc>:
 800aa8e:	b508      	push	{r3, lr}
 800aa90:	f000 f945 	bl	800ad1e <abort>

0800aa94 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800aa94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800aa96:	2400      	movs	r4, #0
 800aa98:	2310      	movs	r3, #16
 800aa9a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aa9e:	6803      	ldr	r3, [r0, #0]
 800aaa0:	9400      	str	r4, [sp, #0]
 800aaa2:	699e      	ldr	r6, [r3, #24]
 800aaa4:	f88d 4004 	strb.w	r4, [sp, #4]
 800aaa8:	4615      	mov	r5, r2
 800aaaa:	466b      	mov	r3, sp
 800aaac:	6812      	ldr	r2, [r2, #0]
 800aaae:	47b0      	blx	r6
 800aab0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aab4:	f003 0306 	and.w	r3, r3, #6
 800aab8:	2b06      	cmp	r3, #6
 800aaba:	bf03      	ittte	eq
 800aabc:	9b00      	ldreq	r3, [sp, #0]
 800aabe:	602b      	streq	r3, [r5, #0]
 800aac0:	2001      	moveq	r0, #1
 800aac2:	4620      	movne	r0, r4
 800aac4:	b004      	add	sp, #16
 800aac6:	bd70      	pop	{r4, r5, r6, pc}

0800aac8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800aac8:	9800      	ldr	r0, [sp, #0]
 800aaca:	4290      	cmp	r0, r2
 800aacc:	bf14      	ite	ne
 800aace:	2001      	movne	r0, #1
 800aad0:	2006      	moveq	r0, #6
 800aad2:	4770      	bx	lr

0800aad4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800aad4:	b510      	push	{r4, lr}
 800aad6:	4b03      	ldr	r3, [pc, #12]	; (800aae4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800aad8:	6003      	str	r3, [r0, #0]
 800aada:	4604      	mov	r4, r0
 800aadc:	f7ff ffb7 	bl	800aa4e <_ZNSt9type_infoD1Ev>
 800aae0:	4620      	mov	r0, r4
 800aae2:	bd10      	pop	{r4, pc}
 800aae4:	0800bd8c 	.word	0x0800bd8c

0800aae8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800aae8:	b510      	push	{r4, lr}
 800aaea:	4604      	mov	r4, r0
 800aaec:	f7ff fff2 	bl	800aad4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	2108      	movs	r1, #8
 800aaf4:	f7ff f9c0 	bl	8009e78 <_ZdlPvj>
 800aaf8:	4620      	mov	r0, r4
 800aafa:	bd10      	pop	{r4, pc}

0800aafc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab00:	461f      	mov	r7, r3
 800ab02:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800ab06:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ab0a:	4598      	cmp	r8, r3
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	4615      	mov	r5, r2
 800ab10:	d107      	bne.n	800ab22 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800ab12:	9907      	ldr	r1, [sp, #28]
 800ab14:	f7ff ffa0 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800ab18:	b118      	cbz	r0, 800ab22 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800ab1a:	7165      	strb	r5, [r4, #5]
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab22:	4639      	mov	r1, r7
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7ff ff97 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d0f6      	beq.n	800ab1c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	f8c4 8000 	str.w	r8, [r4]
 800ab34:	7125      	strb	r5, [r4, #4]
 800ab36:	71a3      	strb	r3, [r4, #6]
 800ab38:	e7f0      	b.n	800ab1c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0800ab3a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800ab3a:	b538      	push	{r3, r4, r5, lr}
 800ab3c:	4615      	mov	r5, r2
 800ab3e:	461c      	mov	r4, r3
 800ab40:	f7ff ff8a 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800ab44:	b120      	cbz	r0, 800ab50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800ab46:	2308      	movs	r3, #8
 800ab48:	60e3      	str	r3, [r4, #12]
 800ab4a:	2306      	movs	r3, #6
 800ab4c:	6025      	str	r5, [r4, #0]
 800ab4e:	7123      	strb	r3, [r4, #4]
 800ab50:	bd38      	pop	{r3, r4, r5, pc}

0800ab52 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800ab52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab54:	4605      	mov	r5, r0
 800ab56:	460c      	mov	r4, r1
 800ab58:	9201      	str	r2, [sp, #4]
 800ab5a:	461e      	mov	r6, r3
 800ab5c:	f7ff ff7c 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800ab60:	b950      	cbnz	r0, 800ab78 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800ab62:	2e03      	cmp	r6, #3
 800ab64:	d808      	bhi.n	800ab78 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800ab66:	6823      	ldr	r3, [r4, #0]
 800ab68:	9a01      	ldr	r2, [sp, #4]
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	4620      	mov	r0, r4
 800ab70:	b002      	add	sp, #8
 800ab72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab76:	4718      	bx	r3
 800ab78:	b002      	add	sp, #8
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}

0800ab7c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800ab7c:	7803      	ldrb	r3, [r0, #0]
 800ab7e:	2b47      	cmp	r3, #71	; 0x47
 800ab80:	d117      	bne.n	800abb2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ab82:	7843      	ldrb	r3, [r0, #1]
 800ab84:	2b4e      	cmp	r3, #78	; 0x4e
 800ab86:	d114      	bne.n	800abb2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ab88:	7883      	ldrb	r3, [r0, #2]
 800ab8a:	2b55      	cmp	r3, #85	; 0x55
 800ab8c:	d111      	bne.n	800abb2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ab8e:	78c3      	ldrb	r3, [r0, #3]
 800ab90:	2b43      	cmp	r3, #67	; 0x43
 800ab92:	d10e      	bne.n	800abb2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ab94:	7903      	ldrb	r3, [r0, #4]
 800ab96:	2b43      	cmp	r3, #67	; 0x43
 800ab98:	d10b      	bne.n	800abb2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800ab9a:	7943      	ldrb	r3, [r0, #5]
 800ab9c:	2b2b      	cmp	r3, #43	; 0x2b
 800ab9e:	d108      	bne.n	800abb2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800aba0:	7983      	ldrb	r3, [r0, #6]
 800aba2:	2b2b      	cmp	r3, #43	; 0x2b
 800aba4:	d105      	bne.n	800abb2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800aba6:	79c0      	ldrb	r0, [r0, #7]
 800aba8:	2801      	cmp	r0, #1
 800abaa:	bf8c      	ite	hi
 800abac:	2000      	movhi	r0, #0
 800abae:	2001      	movls	r0, #1
 800abb0:	4770      	bx	lr
 800abb2:	2000      	movs	r0, #0
 800abb4:	4770      	bx	lr

0800abb6 <__cxa_call_terminate>:
 800abb6:	b510      	push	{r4, lr}
 800abb8:	4604      	mov	r4, r0
 800abba:	b148      	cbz	r0, 800abd0 <__cxa_call_terminate+0x1a>
 800abbc:	f7ff fac9 	bl	800a152 <__cxa_begin_catch>
 800abc0:	4620      	mov	r0, r4
 800abc2:	f7ff ffdb 	bl	800ab7c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800abc6:	b118      	cbz	r0, 800abd0 <__cxa_call_terminate+0x1a>
 800abc8:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800abcc:	f7ff fd98 	bl	800a700 <_ZN10__cxxabiv111__terminateEPFvvE>
 800abd0:	f7ff fda2 	bl	800a718 <_ZSt9terminatev>

0800abd4 <__cxa_call_unexpected>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4602      	mov	r2, r0
 800abd8:	f7ff ffd0 	bl	800ab7c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800abdc:	b140      	cbz	r0, 800abf0 <__cxa_call_unexpected+0x1c>
 800abde:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800abe2:	2500      	movs	r5, #0
 800abe4:	4610      	mov	r0, r2
 800abe6:	f7ff fab4 	bl	800a152 <__cxa_begin_catch>
 800abea:	b125      	cbz	r5, 800abf6 <__cxa_call_unexpected+0x22>
 800abec:	f7ff fda6 	bl	800a73c <_ZSt10unexpectedv>
 800abf0:	4604      	mov	r4, r0
 800abf2:	2501      	movs	r5, #1
 800abf4:	e7f6      	b.n	800abe4 <__cxa_call_unexpected+0x10>
 800abf6:	4620      	mov	r0, r4
 800abf8:	f7ff fd93 	bl	800a722 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800abfc <_ZSt15get_new_handlerv>:
 800abfc:	4b02      	ldr	r3, [pc, #8]	; (800ac08 <_ZSt15get_new_handlerv+0xc>)
 800abfe:	6818      	ldr	r0, [r3, #0]
 800ac00:	f3bf 8f5b 	dmb	ish
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	20000f28 	.word	0x20000f28

0800ac0c <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
 800ac0c:	68c0      	ldr	r0, [r0, #12]
 800ac0e:	68c9      	ldr	r1, [r1, #12]
 800ac10:	b410      	push	{r4}
 800ac12:	6804      	ldr	r4, [r0, #0]
 800ac14:	6924      	ldr	r4, [r4, #16]
 800ac16:	3302      	adds	r3, #2
 800ac18:	46a4      	mov	ip, r4
 800ac1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac1e:	4760      	bx	ip

0800ac20 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
 800ac20:	b510      	push	{r4, lr}
 800ac22:	4b03      	ldr	r3, [pc, #12]	; (800ac30 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
 800ac24:	6003      	str	r3, [r0, #0]
 800ac26:	4604      	mov	r4, r0
 800ac28:	f7ff ff11 	bl	800aa4e <_ZNSt9type_infoD1Ev>
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	bd10      	pop	{r4, pc}
 800ac30:	0800bde8 	.word	0x0800bde8

0800ac34 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
 800ac34:	b510      	push	{r4, lr}
 800ac36:	4604      	mov	r4, r0
 800ac38:	f7ff fff2 	bl	800ac20 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	2110      	movs	r1, #16
 800ac40:	f7ff f91a 	bl	8009e78 <_ZdlPvj>
 800ac44:	4620      	mov	r0, r4
 800ac46:	bd10      	pop	{r4, pc}

0800ac48 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
 800ac48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	460e      	mov	r6, r1
 800ac50:	4617      	mov	r7, r2
 800ac52:	4698      	mov	r8, r3
 800ac54:	f7ff ff00 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800ac58:	4604      	mov	r4, r0
 800ac5a:	b9f0      	cbnz	r0, 800ac9a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800ac5c:	4929      	ldr	r1, [pc, #164]	; (800ad04 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>)
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f7ff fefa 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800ac64:	b300      	cbz	r0, 800aca8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800ac66:	682b      	ldr	r3, [r5, #0]
 800ac68:	4927      	ldr	r1, [pc, #156]	; (800ad08 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc0>)
 800ac6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac6e:	f7ff fef3 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800ac72:	b110      	cbz	r0, 800ac7a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x32>
 800ac74:	603c      	str	r4, [r7, #0]
 800ac76:	4604      	mov	r4, r0
 800ac78:	e00f      	b.n	800ac9a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800ac7a:	682b      	ldr	r3, [r5, #0]
 800ac7c:	4923      	ldr	r1, [pc, #140]	; (800ad0c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc4>)
 800ac7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac82:	f7ff fee9 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800ac86:	4681      	mov	r9, r0
 800ac88:	b170      	cbz	r0, 800aca8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x60>
 800ac8a:	68e8      	ldr	r0, [r5, #12]
 800ac8c:	6803      	ldr	r3, [r0, #0]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	4798      	blx	r3
 800ac92:	4604      	mov	r4, r0
 800ac94:	b120      	cbz	r0, 800aca0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
 800ac96:	4b1e      	ldr	r3, [pc, #120]	; (800ad10 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc8>)
 800ac98:	603b      	str	r3, [r7, #0]
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca0:	4b1c      	ldr	r3, [pc, #112]	; (800ad14 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xcc>)
 800aca2:	603b      	str	r3, [r7, #0]
 800aca4:	464c      	mov	r4, r9
 800aca6:	e7f8      	b.n	800ac9a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800aca8:	682b      	ldr	r3, [r5, #0]
 800acaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800acae:	b33e      	cbz	r6, 800ad00 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb8>
 800acb0:	6833      	ldr	r3, [r6, #0]
 800acb2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800acb6:	f7ff fecf 	bl	800aa58 <_ZNKSt9type_infoeqERKS_>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d0db      	beq.n	800ac76 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x2e>
 800acbe:	f018 0f01 	tst.w	r8, #1
 800acc2:	d0ea      	beq.n	800ac9a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800acc4:	68b3      	ldr	r3, [r6, #8]
 800acc6:	68a9      	ldr	r1, [r5, #8]
 800acc8:	f003 0060 	and.w	r0, r3, #96	; 0x60
 800accc:	f001 0260 	and.w	r2, r1, #96	; 0x60
 800acd0:	ea30 0c02 	bics.w	ip, r0, r2
 800acd4:	bf18      	it	ne
 800acd6:	4013      	andne	r3, r2
 800acd8:	ea23 0301 	bic.w	r3, r3, r1
 800acdc:	ea22 0200 	bic.w	r2, r2, r0
 800ace0:	4313      	orrs	r3, r2
 800ace2:	d1da      	bne.n	800ac9a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
 800ace4:	07cb      	lsls	r3, r1, #31
 800ace6:	682b      	ldr	r3, [r5, #0]
 800ace8:	699c      	ldr	r4, [r3, #24]
 800acea:	bf58      	it	pl
 800acec:	f028 0801 	bicpl.w	r8, r8, #1
 800acf0:	4643      	mov	r3, r8
 800acf2:	463a      	mov	r2, r7
 800acf4:	4631      	mov	r1, r6
 800acf6:	4628      	mov	r0, r5
 800acf8:	46a4      	mov	ip, r4
 800acfa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acfe:	4760      	bx	ip
 800ad00:	f000 f80a 	bl	800ad18 <__cxa_bad_typeid>
 800ad04:	0800bc0c 	.word	0x0800bc0c
 800ad08:	0800bc88 	.word	0x0800bc88
 800ad0c:	0800be10 	.word	0x0800be10
 800ad10:	0800be08 	.word	0x0800be08
 800ad14:	0800be04 	.word	0x0800be04

0800ad18 <__cxa_bad_typeid>:
 800ad18:	b508      	push	{r3, lr}
 800ad1a:	f000 f800 	bl	800ad1e <abort>

0800ad1e <abort>:
 800ad1e:	b508      	push	{r3, lr}
 800ad20:	2006      	movs	r0, #6
 800ad22:	f000 fb19 	bl	800b358 <raise>
 800ad26:	2001      	movs	r0, #1
 800ad28:	f7f9 f8f0 	bl	8003f0c <_exit>

0800ad2c <__errno>:
 800ad2c:	4b01      	ldr	r3, [pc, #4]	; (800ad34 <__errno+0x8>)
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	2000001c 	.word	0x2000001c

0800ad38 <std>:
 800ad38:	2300      	movs	r3, #0
 800ad3a:	b510      	push	{r4, lr}
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad46:	6083      	str	r3, [r0, #8]
 800ad48:	8181      	strh	r1, [r0, #12]
 800ad4a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad4c:	81c2      	strh	r2, [r0, #14]
 800ad4e:	6183      	str	r3, [r0, #24]
 800ad50:	4619      	mov	r1, r3
 800ad52:	2208      	movs	r2, #8
 800ad54:	305c      	adds	r0, #92	; 0x5c
 800ad56:	f000 f945 	bl	800afe4 <memset>
 800ad5a:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <std+0x38>)
 800ad5c:	6263      	str	r3, [r4, #36]	; 0x24
 800ad5e:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <std+0x3c>)
 800ad60:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad62:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <std+0x40>)
 800ad64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad66:	4b05      	ldr	r3, [pc, #20]	; (800ad7c <std+0x44>)
 800ad68:	6224      	str	r4, [r4, #32]
 800ad6a:	6323      	str	r3, [r4, #48]	; 0x30
 800ad6c:	bd10      	pop	{r4, pc}
 800ad6e:	bf00      	nop
 800ad70:	0800b391 	.word	0x0800b391
 800ad74:	0800b3b3 	.word	0x0800b3b3
 800ad78:	0800b3eb 	.word	0x0800b3eb
 800ad7c:	0800b40f 	.word	0x0800b40f

0800ad80 <_cleanup_r>:
 800ad80:	4901      	ldr	r1, [pc, #4]	; (800ad88 <_cleanup_r+0x8>)
 800ad82:	f000 b8af 	b.w	800aee4 <_fwalk_reent>
 800ad86:	bf00      	nop
 800ad88:	0800b6e9 	.word	0x0800b6e9

0800ad8c <__sfmoreglue>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	1e4a      	subs	r2, r1, #1
 800ad90:	2568      	movs	r5, #104	; 0x68
 800ad92:	4355      	muls	r5, r2
 800ad94:	460e      	mov	r6, r1
 800ad96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad9a:	f000 f97b 	bl	800b094 <_malloc_r>
 800ad9e:	4604      	mov	r4, r0
 800ada0:	b140      	cbz	r0, 800adb4 <__sfmoreglue+0x28>
 800ada2:	2100      	movs	r1, #0
 800ada4:	e9c0 1600 	strd	r1, r6, [r0]
 800ada8:	300c      	adds	r0, #12
 800adaa:	60a0      	str	r0, [r4, #8]
 800adac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800adb0:	f000 f918 	bl	800afe4 <memset>
 800adb4:	4620      	mov	r0, r4
 800adb6:	bd70      	pop	{r4, r5, r6, pc}

0800adb8 <__sfp_lock_acquire>:
 800adb8:	4801      	ldr	r0, [pc, #4]	; (800adc0 <__sfp_lock_acquire+0x8>)
 800adba:	f000 b8d8 	b.w	800af6e <__retarget_lock_acquire_recursive>
 800adbe:	bf00      	nop
 800adc0:	2000108c 	.word	0x2000108c

0800adc4 <__sfp_lock_release>:
 800adc4:	4801      	ldr	r0, [pc, #4]	; (800adcc <__sfp_lock_release+0x8>)
 800adc6:	f000 b8d3 	b.w	800af70 <__retarget_lock_release_recursive>
 800adca:	bf00      	nop
 800adcc:	2000108c 	.word	0x2000108c

0800add0 <__sinit_lock_acquire>:
 800add0:	4801      	ldr	r0, [pc, #4]	; (800add8 <__sinit_lock_acquire+0x8>)
 800add2:	f000 b8cc 	b.w	800af6e <__retarget_lock_acquire_recursive>
 800add6:	bf00      	nop
 800add8:	20001087 	.word	0x20001087

0800addc <__sinit_lock_release>:
 800addc:	4801      	ldr	r0, [pc, #4]	; (800ade4 <__sinit_lock_release+0x8>)
 800adde:	f000 b8c7 	b.w	800af70 <__retarget_lock_release_recursive>
 800ade2:	bf00      	nop
 800ade4:	20001087 	.word	0x20001087

0800ade8 <__sinit>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	4604      	mov	r4, r0
 800adec:	f7ff fff0 	bl	800add0 <__sinit_lock_acquire>
 800adf0:	69a3      	ldr	r3, [r4, #24]
 800adf2:	b11b      	cbz	r3, 800adfc <__sinit+0x14>
 800adf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adf8:	f7ff bff0 	b.w	800addc <__sinit_lock_release>
 800adfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae00:	6523      	str	r3, [r4, #80]	; 0x50
 800ae02:	4b13      	ldr	r3, [pc, #76]	; (800ae50 <__sinit+0x68>)
 800ae04:	4a13      	ldr	r2, [pc, #76]	; (800ae54 <__sinit+0x6c>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae0a:	42a3      	cmp	r3, r4
 800ae0c:	bf04      	itt	eq
 800ae0e:	2301      	moveq	r3, #1
 800ae10:	61a3      	streq	r3, [r4, #24]
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 f820 	bl	800ae58 <__sfp>
 800ae18:	6060      	str	r0, [r4, #4]
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 f81c 	bl	800ae58 <__sfp>
 800ae20:	60a0      	str	r0, [r4, #8]
 800ae22:	4620      	mov	r0, r4
 800ae24:	f000 f818 	bl	800ae58 <__sfp>
 800ae28:	2200      	movs	r2, #0
 800ae2a:	60e0      	str	r0, [r4, #12]
 800ae2c:	2104      	movs	r1, #4
 800ae2e:	6860      	ldr	r0, [r4, #4]
 800ae30:	f7ff ff82 	bl	800ad38 <std>
 800ae34:	68a0      	ldr	r0, [r4, #8]
 800ae36:	2201      	movs	r2, #1
 800ae38:	2109      	movs	r1, #9
 800ae3a:	f7ff ff7d 	bl	800ad38 <std>
 800ae3e:	68e0      	ldr	r0, [r4, #12]
 800ae40:	2202      	movs	r2, #2
 800ae42:	2112      	movs	r1, #18
 800ae44:	f7ff ff78 	bl	800ad38 <std>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	61a3      	str	r3, [r4, #24]
 800ae4c:	e7d2      	b.n	800adf4 <__sinit+0xc>
 800ae4e:	bf00      	nop
 800ae50:	0800beac 	.word	0x0800beac
 800ae54:	0800ad81 	.word	0x0800ad81

0800ae58 <__sfp>:
 800ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5a:	4607      	mov	r7, r0
 800ae5c:	f7ff ffac 	bl	800adb8 <__sfp_lock_acquire>
 800ae60:	4b1e      	ldr	r3, [pc, #120]	; (800aedc <__sfp+0x84>)
 800ae62:	681e      	ldr	r6, [r3, #0]
 800ae64:	69b3      	ldr	r3, [r6, #24]
 800ae66:	b913      	cbnz	r3, 800ae6e <__sfp+0x16>
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f7ff ffbd 	bl	800ade8 <__sinit>
 800ae6e:	3648      	adds	r6, #72	; 0x48
 800ae70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	d503      	bpl.n	800ae80 <__sfp+0x28>
 800ae78:	6833      	ldr	r3, [r6, #0]
 800ae7a:	b30b      	cbz	r3, 800aec0 <__sfp+0x68>
 800ae7c:	6836      	ldr	r6, [r6, #0]
 800ae7e:	e7f7      	b.n	800ae70 <__sfp+0x18>
 800ae80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae84:	b9d5      	cbnz	r5, 800aebc <__sfp+0x64>
 800ae86:	4b16      	ldr	r3, [pc, #88]	; (800aee0 <__sfp+0x88>)
 800ae88:	60e3      	str	r3, [r4, #12]
 800ae8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae8e:	6665      	str	r5, [r4, #100]	; 0x64
 800ae90:	f000 f86c 	bl	800af6c <__retarget_lock_init_recursive>
 800ae94:	f7ff ff96 	bl	800adc4 <__sfp_lock_release>
 800ae98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aea0:	6025      	str	r5, [r4, #0]
 800aea2:	61a5      	str	r5, [r4, #24]
 800aea4:	2208      	movs	r2, #8
 800aea6:	4629      	mov	r1, r5
 800aea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aeac:	f000 f89a 	bl	800afe4 <memset>
 800aeb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aeb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aeb8:	4620      	mov	r0, r4
 800aeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aebc:	3468      	adds	r4, #104	; 0x68
 800aebe:	e7d9      	b.n	800ae74 <__sfp+0x1c>
 800aec0:	2104      	movs	r1, #4
 800aec2:	4638      	mov	r0, r7
 800aec4:	f7ff ff62 	bl	800ad8c <__sfmoreglue>
 800aec8:	4604      	mov	r4, r0
 800aeca:	6030      	str	r0, [r6, #0]
 800aecc:	2800      	cmp	r0, #0
 800aece:	d1d5      	bne.n	800ae7c <__sfp+0x24>
 800aed0:	f7ff ff78 	bl	800adc4 <__sfp_lock_release>
 800aed4:	230c      	movs	r3, #12
 800aed6:	603b      	str	r3, [r7, #0]
 800aed8:	e7ee      	b.n	800aeb8 <__sfp+0x60>
 800aeda:	bf00      	nop
 800aedc:	0800beac 	.word	0x0800beac
 800aee0:	ffff0001 	.word	0xffff0001

0800aee4 <_fwalk_reent>:
 800aee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee8:	4606      	mov	r6, r0
 800aeea:	4688      	mov	r8, r1
 800aeec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aef0:	2700      	movs	r7, #0
 800aef2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aef6:	f1b9 0901 	subs.w	r9, r9, #1
 800aefa:	d505      	bpl.n	800af08 <_fwalk_reent+0x24>
 800aefc:	6824      	ldr	r4, [r4, #0]
 800aefe:	2c00      	cmp	r4, #0
 800af00:	d1f7      	bne.n	800aef2 <_fwalk_reent+0xe>
 800af02:	4638      	mov	r0, r7
 800af04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af08:	89ab      	ldrh	r3, [r5, #12]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d907      	bls.n	800af1e <_fwalk_reent+0x3a>
 800af0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af12:	3301      	adds	r3, #1
 800af14:	d003      	beq.n	800af1e <_fwalk_reent+0x3a>
 800af16:	4629      	mov	r1, r5
 800af18:	4630      	mov	r0, r6
 800af1a:	47c0      	blx	r8
 800af1c:	4307      	orrs	r7, r0
 800af1e:	3568      	adds	r5, #104	; 0x68
 800af20:	e7e9      	b.n	800aef6 <_fwalk_reent+0x12>
	...

0800af24 <__libc_init_array>:
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	4d0d      	ldr	r5, [pc, #52]	; (800af5c <__libc_init_array+0x38>)
 800af28:	4c0d      	ldr	r4, [pc, #52]	; (800af60 <__libc_init_array+0x3c>)
 800af2a:	1b64      	subs	r4, r4, r5
 800af2c:	10a4      	asrs	r4, r4, #2
 800af2e:	2600      	movs	r6, #0
 800af30:	42a6      	cmp	r6, r4
 800af32:	d109      	bne.n	800af48 <__libc_init_array+0x24>
 800af34:	4d0b      	ldr	r5, [pc, #44]	; (800af64 <__libc_init_array+0x40>)
 800af36:	4c0c      	ldr	r4, [pc, #48]	; (800af68 <__libc_init_array+0x44>)
 800af38:	f000 fcc2 	bl	800b8c0 <_init>
 800af3c:	1b64      	subs	r4, r4, r5
 800af3e:	10a4      	asrs	r4, r4, #2
 800af40:	2600      	movs	r6, #0
 800af42:	42a6      	cmp	r6, r4
 800af44:	d105      	bne.n	800af52 <__libc_init_array+0x2e>
 800af46:	bd70      	pop	{r4, r5, r6, pc}
 800af48:	f855 3b04 	ldr.w	r3, [r5], #4
 800af4c:	4798      	blx	r3
 800af4e:	3601      	adds	r6, #1
 800af50:	e7ee      	b.n	800af30 <__libc_init_array+0xc>
 800af52:	f855 3b04 	ldr.w	r3, [r5], #4
 800af56:	4798      	blx	r3
 800af58:	3601      	adds	r6, #1
 800af5a:	e7f2      	b.n	800af42 <__libc_init_array+0x1e>
 800af5c:	0800c4b4 	.word	0x0800c4b4
 800af60:	0800c4b4 	.word	0x0800c4b4
 800af64:	0800c4b4 	.word	0x0800c4b4
 800af68:	0800c4c4 	.word	0x0800c4c4

0800af6c <__retarget_lock_init_recursive>:
 800af6c:	4770      	bx	lr

0800af6e <__retarget_lock_acquire_recursive>:
 800af6e:	4770      	bx	lr

0800af70 <__retarget_lock_release_recursive>:
 800af70:	4770      	bx	lr
	...

0800af74 <malloc>:
 800af74:	4b02      	ldr	r3, [pc, #8]	; (800af80 <malloc+0xc>)
 800af76:	4601      	mov	r1, r0
 800af78:	6818      	ldr	r0, [r3, #0]
 800af7a:	f000 b88b 	b.w	800b094 <_malloc_r>
 800af7e:	bf00      	nop
 800af80:	2000001c 	.word	0x2000001c

0800af84 <free>:
 800af84:	4b02      	ldr	r3, [pc, #8]	; (800af90 <free+0xc>)
 800af86:	4601      	mov	r1, r0
 800af88:	6818      	ldr	r0, [r3, #0]
 800af8a:	f000 b833 	b.w	800aff4 <_free_r>
 800af8e:	bf00      	nop
 800af90:	2000001c 	.word	0x2000001c

0800af94 <memcpy>:
 800af94:	440a      	add	r2, r1
 800af96:	4291      	cmp	r1, r2
 800af98:	f100 33ff 	add.w	r3, r0, #4294967295
 800af9c:	d100      	bne.n	800afa0 <memcpy+0xc>
 800af9e:	4770      	bx	lr
 800afa0:	b510      	push	{r4, lr}
 800afa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afaa:	4291      	cmp	r1, r2
 800afac:	d1f9      	bne.n	800afa2 <memcpy+0xe>
 800afae:	bd10      	pop	{r4, pc}

0800afb0 <memmove>:
 800afb0:	4288      	cmp	r0, r1
 800afb2:	b510      	push	{r4, lr}
 800afb4:	eb01 0402 	add.w	r4, r1, r2
 800afb8:	d902      	bls.n	800afc0 <memmove+0x10>
 800afba:	4284      	cmp	r4, r0
 800afbc:	4623      	mov	r3, r4
 800afbe:	d807      	bhi.n	800afd0 <memmove+0x20>
 800afc0:	1e43      	subs	r3, r0, #1
 800afc2:	42a1      	cmp	r1, r4
 800afc4:	d008      	beq.n	800afd8 <memmove+0x28>
 800afc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afce:	e7f8      	b.n	800afc2 <memmove+0x12>
 800afd0:	4402      	add	r2, r0
 800afd2:	4601      	mov	r1, r0
 800afd4:	428a      	cmp	r2, r1
 800afd6:	d100      	bne.n	800afda <memmove+0x2a>
 800afd8:	bd10      	pop	{r4, pc}
 800afda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afe2:	e7f7      	b.n	800afd4 <memmove+0x24>

0800afe4 <memset>:
 800afe4:	4402      	add	r2, r0
 800afe6:	4603      	mov	r3, r0
 800afe8:	4293      	cmp	r3, r2
 800afea:	d100      	bne.n	800afee <memset+0xa>
 800afec:	4770      	bx	lr
 800afee:	f803 1b01 	strb.w	r1, [r3], #1
 800aff2:	e7f9      	b.n	800afe8 <memset+0x4>

0800aff4 <_free_r>:
 800aff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aff6:	2900      	cmp	r1, #0
 800aff8:	d048      	beq.n	800b08c <_free_r+0x98>
 800affa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800affe:	9001      	str	r0, [sp, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	f1a1 0404 	sub.w	r4, r1, #4
 800b006:	bfb8      	it	lt
 800b008:	18e4      	addlt	r4, r4, r3
 800b00a:	f7f6 fbd7 	bl	80017bc <__malloc_lock>
 800b00e:	4a20      	ldr	r2, [pc, #128]	; (800b090 <_free_r+0x9c>)
 800b010:	9801      	ldr	r0, [sp, #4]
 800b012:	6813      	ldr	r3, [r2, #0]
 800b014:	4615      	mov	r5, r2
 800b016:	b933      	cbnz	r3, 800b026 <_free_r+0x32>
 800b018:	6063      	str	r3, [r4, #4]
 800b01a:	6014      	str	r4, [r2, #0]
 800b01c:	b003      	add	sp, #12
 800b01e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b022:	f7f6 bbe9 	b.w	80017f8 <__malloc_unlock>
 800b026:	42a3      	cmp	r3, r4
 800b028:	d90b      	bls.n	800b042 <_free_r+0x4e>
 800b02a:	6821      	ldr	r1, [r4, #0]
 800b02c:	1862      	adds	r2, r4, r1
 800b02e:	4293      	cmp	r3, r2
 800b030:	bf04      	itt	eq
 800b032:	681a      	ldreq	r2, [r3, #0]
 800b034:	685b      	ldreq	r3, [r3, #4]
 800b036:	6063      	str	r3, [r4, #4]
 800b038:	bf04      	itt	eq
 800b03a:	1852      	addeq	r2, r2, r1
 800b03c:	6022      	streq	r2, [r4, #0]
 800b03e:	602c      	str	r4, [r5, #0]
 800b040:	e7ec      	b.n	800b01c <_free_r+0x28>
 800b042:	461a      	mov	r2, r3
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	b10b      	cbz	r3, 800b04c <_free_r+0x58>
 800b048:	42a3      	cmp	r3, r4
 800b04a:	d9fa      	bls.n	800b042 <_free_r+0x4e>
 800b04c:	6811      	ldr	r1, [r2, #0]
 800b04e:	1855      	adds	r5, r2, r1
 800b050:	42a5      	cmp	r5, r4
 800b052:	d10b      	bne.n	800b06c <_free_r+0x78>
 800b054:	6824      	ldr	r4, [r4, #0]
 800b056:	4421      	add	r1, r4
 800b058:	1854      	adds	r4, r2, r1
 800b05a:	42a3      	cmp	r3, r4
 800b05c:	6011      	str	r1, [r2, #0]
 800b05e:	d1dd      	bne.n	800b01c <_free_r+0x28>
 800b060:	681c      	ldr	r4, [r3, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	6053      	str	r3, [r2, #4]
 800b066:	4421      	add	r1, r4
 800b068:	6011      	str	r1, [r2, #0]
 800b06a:	e7d7      	b.n	800b01c <_free_r+0x28>
 800b06c:	d902      	bls.n	800b074 <_free_r+0x80>
 800b06e:	230c      	movs	r3, #12
 800b070:	6003      	str	r3, [r0, #0]
 800b072:	e7d3      	b.n	800b01c <_free_r+0x28>
 800b074:	6825      	ldr	r5, [r4, #0]
 800b076:	1961      	adds	r1, r4, r5
 800b078:	428b      	cmp	r3, r1
 800b07a:	bf04      	itt	eq
 800b07c:	6819      	ldreq	r1, [r3, #0]
 800b07e:	685b      	ldreq	r3, [r3, #4]
 800b080:	6063      	str	r3, [r4, #4]
 800b082:	bf04      	itt	eq
 800b084:	1949      	addeq	r1, r1, r5
 800b086:	6021      	streq	r1, [r4, #0]
 800b088:	6054      	str	r4, [r2, #4]
 800b08a:	e7c7      	b.n	800b01c <_free_r+0x28>
 800b08c:	b003      	add	sp, #12
 800b08e:	bd30      	pop	{r4, r5, pc}
 800b090:	20000f2c 	.word	0x20000f2c

0800b094 <_malloc_r>:
 800b094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b096:	1ccd      	adds	r5, r1, #3
 800b098:	f025 0503 	bic.w	r5, r5, #3
 800b09c:	3508      	adds	r5, #8
 800b09e:	2d0c      	cmp	r5, #12
 800b0a0:	bf38      	it	cc
 800b0a2:	250c      	movcc	r5, #12
 800b0a4:	2d00      	cmp	r5, #0
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	db01      	blt.n	800b0ae <_malloc_r+0x1a>
 800b0aa:	42a9      	cmp	r1, r5
 800b0ac:	d903      	bls.n	800b0b6 <_malloc_r+0x22>
 800b0ae:	230c      	movs	r3, #12
 800b0b0:	6033      	str	r3, [r6, #0]
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b6:	f7f6 fb81 	bl	80017bc <__malloc_lock>
 800b0ba:	4921      	ldr	r1, [pc, #132]	; (800b140 <_malloc_r+0xac>)
 800b0bc:	680a      	ldr	r2, [r1, #0]
 800b0be:	4614      	mov	r4, r2
 800b0c0:	b99c      	cbnz	r4, 800b0ea <_malloc_r+0x56>
 800b0c2:	4f20      	ldr	r7, [pc, #128]	; (800b144 <_malloc_r+0xb0>)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	b923      	cbnz	r3, 800b0d2 <_malloc_r+0x3e>
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	f7f6 fb04 	bl	80016d8 <_sbrk_r>
 800b0d0:	6038      	str	r0, [r7, #0]
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f7f6 faff 	bl	80016d8 <_sbrk_r>
 800b0da:	1c43      	adds	r3, r0, #1
 800b0dc:	d123      	bne.n	800b126 <_malloc_r+0x92>
 800b0de:	230c      	movs	r3, #12
 800b0e0:	6033      	str	r3, [r6, #0]
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7f6 fb88 	bl	80017f8 <__malloc_unlock>
 800b0e8:	e7e3      	b.n	800b0b2 <_malloc_r+0x1e>
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	1b5b      	subs	r3, r3, r5
 800b0ee:	d417      	bmi.n	800b120 <_malloc_r+0x8c>
 800b0f0:	2b0b      	cmp	r3, #11
 800b0f2:	d903      	bls.n	800b0fc <_malloc_r+0x68>
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	441c      	add	r4, r3
 800b0f8:	6025      	str	r5, [r4, #0]
 800b0fa:	e004      	b.n	800b106 <_malloc_r+0x72>
 800b0fc:	6863      	ldr	r3, [r4, #4]
 800b0fe:	42a2      	cmp	r2, r4
 800b100:	bf0c      	ite	eq
 800b102:	600b      	streq	r3, [r1, #0]
 800b104:	6053      	strne	r3, [r2, #4]
 800b106:	4630      	mov	r0, r6
 800b108:	f7f6 fb76 	bl	80017f8 <__malloc_unlock>
 800b10c:	f104 000b 	add.w	r0, r4, #11
 800b110:	1d23      	adds	r3, r4, #4
 800b112:	f020 0007 	bic.w	r0, r0, #7
 800b116:	1ac2      	subs	r2, r0, r3
 800b118:	d0cc      	beq.n	800b0b4 <_malloc_r+0x20>
 800b11a:	1a1b      	subs	r3, r3, r0
 800b11c:	50a3      	str	r3, [r4, r2]
 800b11e:	e7c9      	b.n	800b0b4 <_malloc_r+0x20>
 800b120:	4622      	mov	r2, r4
 800b122:	6864      	ldr	r4, [r4, #4]
 800b124:	e7cc      	b.n	800b0c0 <_malloc_r+0x2c>
 800b126:	1cc4      	adds	r4, r0, #3
 800b128:	f024 0403 	bic.w	r4, r4, #3
 800b12c:	42a0      	cmp	r0, r4
 800b12e:	d0e3      	beq.n	800b0f8 <_malloc_r+0x64>
 800b130:	1a21      	subs	r1, r4, r0
 800b132:	4630      	mov	r0, r6
 800b134:	f7f6 fad0 	bl	80016d8 <_sbrk_r>
 800b138:	3001      	adds	r0, #1
 800b13a:	d1dd      	bne.n	800b0f8 <_malloc_r+0x64>
 800b13c:	e7cf      	b.n	800b0de <_malloc_r+0x4a>
 800b13e:	bf00      	nop
 800b140:	20000f2c 	.word	0x20000f2c
 800b144:	20000f30 	.word	0x20000f30

0800b148 <_puts_r>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	460e      	mov	r6, r1
 800b14c:	4605      	mov	r5, r0
 800b14e:	b118      	cbz	r0, 800b158 <_puts_r+0x10>
 800b150:	6983      	ldr	r3, [r0, #24]
 800b152:	b90b      	cbnz	r3, 800b158 <_puts_r+0x10>
 800b154:	f7ff fe48 	bl	800ade8 <__sinit>
 800b158:	69ab      	ldr	r3, [r5, #24]
 800b15a:	68ac      	ldr	r4, [r5, #8]
 800b15c:	b913      	cbnz	r3, 800b164 <_puts_r+0x1c>
 800b15e:	4628      	mov	r0, r5
 800b160:	f7ff fe42 	bl	800ade8 <__sinit>
 800b164:	4b2c      	ldr	r3, [pc, #176]	; (800b218 <_puts_r+0xd0>)
 800b166:	429c      	cmp	r4, r3
 800b168:	d120      	bne.n	800b1ac <_puts_r+0x64>
 800b16a:	686c      	ldr	r4, [r5, #4]
 800b16c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b16e:	07db      	lsls	r3, r3, #31
 800b170:	d405      	bmi.n	800b17e <_puts_r+0x36>
 800b172:	89a3      	ldrh	r3, [r4, #12]
 800b174:	0598      	lsls	r0, r3, #22
 800b176:	d402      	bmi.n	800b17e <_puts_r+0x36>
 800b178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b17a:	f7ff fef8 	bl	800af6e <__retarget_lock_acquire_recursive>
 800b17e:	89a3      	ldrh	r3, [r4, #12]
 800b180:	0719      	lsls	r1, r3, #28
 800b182:	d51d      	bpl.n	800b1c0 <_puts_r+0x78>
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	b1db      	cbz	r3, 800b1c0 <_puts_r+0x78>
 800b188:	3e01      	subs	r6, #1
 800b18a:	68a3      	ldr	r3, [r4, #8]
 800b18c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b190:	3b01      	subs	r3, #1
 800b192:	60a3      	str	r3, [r4, #8]
 800b194:	bb39      	cbnz	r1, 800b1e6 <_puts_r+0x9e>
 800b196:	2b00      	cmp	r3, #0
 800b198:	da38      	bge.n	800b20c <_puts_r+0xc4>
 800b19a:	4622      	mov	r2, r4
 800b19c:	210a      	movs	r1, #10
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f000 f93a 	bl	800b418 <__swbuf_r>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d011      	beq.n	800b1cc <_puts_r+0x84>
 800b1a8:	250a      	movs	r5, #10
 800b1aa:	e011      	b.n	800b1d0 <_puts_r+0x88>
 800b1ac:	4b1b      	ldr	r3, [pc, #108]	; (800b21c <_puts_r+0xd4>)
 800b1ae:	429c      	cmp	r4, r3
 800b1b0:	d101      	bne.n	800b1b6 <_puts_r+0x6e>
 800b1b2:	68ac      	ldr	r4, [r5, #8]
 800b1b4:	e7da      	b.n	800b16c <_puts_r+0x24>
 800b1b6:	4b1a      	ldr	r3, [pc, #104]	; (800b220 <_puts_r+0xd8>)
 800b1b8:	429c      	cmp	r4, r3
 800b1ba:	bf08      	it	eq
 800b1bc:	68ec      	ldreq	r4, [r5, #12]
 800b1be:	e7d5      	b.n	800b16c <_puts_r+0x24>
 800b1c0:	4621      	mov	r1, r4
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	f000 f98c 	bl	800b4e0 <__swsetup_r>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d0dd      	beq.n	800b188 <_puts_r+0x40>
 800b1cc:	f04f 35ff 	mov.w	r5, #4294967295
 800b1d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1d2:	07da      	lsls	r2, r3, #31
 800b1d4:	d405      	bmi.n	800b1e2 <_puts_r+0x9a>
 800b1d6:	89a3      	ldrh	r3, [r4, #12]
 800b1d8:	059b      	lsls	r3, r3, #22
 800b1da:	d402      	bmi.n	800b1e2 <_puts_r+0x9a>
 800b1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1de:	f7ff fec7 	bl	800af70 <__retarget_lock_release_recursive>
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	bd70      	pop	{r4, r5, r6, pc}
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	da04      	bge.n	800b1f4 <_puts_r+0xac>
 800b1ea:	69a2      	ldr	r2, [r4, #24]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	dc06      	bgt.n	800b1fe <_puts_r+0xb6>
 800b1f0:	290a      	cmp	r1, #10
 800b1f2:	d004      	beq.n	800b1fe <_puts_r+0xb6>
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	1c5a      	adds	r2, r3, #1
 800b1f8:	6022      	str	r2, [r4, #0]
 800b1fa:	7019      	strb	r1, [r3, #0]
 800b1fc:	e7c5      	b.n	800b18a <_puts_r+0x42>
 800b1fe:	4622      	mov	r2, r4
 800b200:	4628      	mov	r0, r5
 800b202:	f000 f909 	bl	800b418 <__swbuf_r>
 800b206:	3001      	adds	r0, #1
 800b208:	d1bf      	bne.n	800b18a <_puts_r+0x42>
 800b20a:	e7df      	b.n	800b1cc <_puts_r+0x84>
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	250a      	movs	r5, #10
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	6022      	str	r2, [r4, #0]
 800b214:	701d      	strb	r5, [r3, #0]
 800b216:	e7db      	b.n	800b1d0 <_puts_r+0x88>
 800b218:	0800be6c 	.word	0x0800be6c
 800b21c:	0800be8c 	.word	0x0800be8c
 800b220:	0800be4c 	.word	0x0800be4c

0800b224 <puts>:
 800b224:	4b02      	ldr	r3, [pc, #8]	; (800b230 <puts+0xc>)
 800b226:	4601      	mov	r1, r0
 800b228:	6818      	ldr	r0, [r3, #0]
 800b22a:	f7ff bf8d 	b.w	800b148 <_puts_r>
 800b22e:	bf00      	nop
 800b230:	2000001c 	.word	0x2000001c

0800b234 <cleanup_glue>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	460c      	mov	r4, r1
 800b238:	6809      	ldr	r1, [r1, #0]
 800b23a:	4605      	mov	r5, r0
 800b23c:	b109      	cbz	r1, 800b242 <cleanup_glue+0xe>
 800b23e:	f7ff fff9 	bl	800b234 <cleanup_glue>
 800b242:	4621      	mov	r1, r4
 800b244:	4628      	mov	r0, r5
 800b246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b24a:	f7ff bed3 	b.w	800aff4 <_free_r>
	...

0800b250 <_reclaim_reent>:
 800b250:	4b2c      	ldr	r3, [pc, #176]	; (800b304 <_reclaim_reent+0xb4>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4283      	cmp	r3, r0
 800b256:	b570      	push	{r4, r5, r6, lr}
 800b258:	4604      	mov	r4, r0
 800b25a:	d051      	beq.n	800b300 <_reclaim_reent+0xb0>
 800b25c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b25e:	b143      	cbz	r3, 800b272 <_reclaim_reent+0x22>
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d14a      	bne.n	800b2fc <_reclaim_reent+0xac>
 800b266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b268:	6819      	ldr	r1, [r3, #0]
 800b26a:	b111      	cbz	r1, 800b272 <_reclaim_reent+0x22>
 800b26c:	4620      	mov	r0, r4
 800b26e:	f7ff fec1 	bl	800aff4 <_free_r>
 800b272:	6961      	ldr	r1, [r4, #20]
 800b274:	b111      	cbz	r1, 800b27c <_reclaim_reent+0x2c>
 800b276:	4620      	mov	r0, r4
 800b278:	f7ff febc 	bl	800aff4 <_free_r>
 800b27c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b27e:	b111      	cbz	r1, 800b286 <_reclaim_reent+0x36>
 800b280:	4620      	mov	r0, r4
 800b282:	f7ff feb7 	bl	800aff4 <_free_r>
 800b286:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b288:	b111      	cbz	r1, 800b290 <_reclaim_reent+0x40>
 800b28a:	4620      	mov	r0, r4
 800b28c:	f7ff feb2 	bl	800aff4 <_free_r>
 800b290:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b292:	b111      	cbz	r1, 800b29a <_reclaim_reent+0x4a>
 800b294:	4620      	mov	r0, r4
 800b296:	f7ff fead 	bl	800aff4 <_free_r>
 800b29a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b29c:	b111      	cbz	r1, 800b2a4 <_reclaim_reent+0x54>
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f7ff fea8 	bl	800aff4 <_free_r>
 800b2a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b2a6:	b111      	cbz	r1, 800b2ae <_reclaim_reent+0x5e>
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f7ff fea3 	bl	800aff4 <_free_r>
 800b2ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b2b0:	b111      	cbz	r1, 800b2b8 <_reclaim_reent+0x68>
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f7ff fe9e 	bl	800aff4 <_free_r>
 800b2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2ba:	b111      	cbz	r1, 800b2c2 <_reclaim_reent+0x72>
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f7ff fe99 	bl	800aff4 <_free_r>
 800b2c2:	69a3      	ldr	r3, [r4, #24]
 800b2c4:	b1e3      	cbz	r3, 800b300 <_reclaim_reent+0xb0>
 800b2c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	4798      	blx	r3
 800b2cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b2ce:	b1b9      	cbz	r1, 800b300 <_reclaim_reent+0xb0>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2d6:	f7ff bfad 	b.w	800b234 <cleanup_glue>
 800b2da:	5949      	ldr	r1, [r1, r5]
 800b2dc:	b941      	cbnz	r1, 800b2f0 <_reclaim_reent+0xa0>
 800b2de:	3504      	adds	r5, #4
 800b2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2e2:	2d80      	cmp	r5, #128	; 0x80
 800b2e4:	68d9      	ldr	r1, [r3, #12]
 800b2e6:	d1f8      	bne.n	800b2da <_reclaim_reent+0x8a>
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f7ff fe83 	bl	800aff4 <_free_r>
 800b2ee:	e7ba      	b.n	800b266 <_reclaim_reent+0x16>
 800b2f0:	680e      	ldr	r6, [r1, #0]
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	f7ff fe7e 	bl	800aff4 <_free_r>
 800b2f8:	4631      	mov	r1, r6
 800b2fa:	e7ef      	b.n	800b2dc <_reclaim_reent+0x8c>
 800b2fc:	2500      	movs	r5, #0
 800b2fe:	e7ef      	b.n	800b2e0 <_reclaim_reent+0x90>
 800b300:	bd70      	pop	{r4, r5, r6, pc}
 800b302:	bf00      	nop
 800b304:	2000001c 	.word	0x2000001c

0800b308 <_raise_r>:
 800b308:	291f      	cmp	r1, #31
 800b30a:	b538      	push	{r3, r4, r5, lr}
 800b30c:	4604      	mov	r4, r0
 800b30e:	460d      	mov	r5, r1
 800b310:	d904      	bls.n	800b31c <_raise_r+0x14>
 800b312:	2316      	movs	r3, #22
 800b314:	6003      	str	r3, [r0, #0]
 800b316:	f04f 30ff 	mov.w	r0, #4294967295
 800b31a:	bd38      	pop	{r3, r4, r5, pc}
 800b31c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b31e:	b112      	cbz	r2, 800b326 <_raise_r+0x1e>
 800b320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b324:	b94b      	cbnz	r3, 800b33a <_raise_r+0x32>
 800b326:	4620      	mov	r0, r4
 800b328:	f000 f830 	bl	800b38c <_getpid_r>
 800b32c:	462a      	mov	r2, r5
 800b32e:	4601      	mov	r1, r0
 800b330:	4620      	mov	r0, r4
 800b332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b336:	f000 b817 	b.w	800b368 <_kill_r>
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d00a      	beq.n	800b354 <_raise_r+0x4c>
 800b33e:	1c59      	adds	r1, r3, #1
 800b340:	d103      	bne.n	800b34a <_raise_r+0x42>
 800b342:	2316      	movs	r3, #22
 800b344:	6003      	str	r3, [r0, #0]
 800b346:	2001      	movs	r0, #1
 800b348:	e7e7      	b.n	800b31a <_raise_r+0x12>
 800b34a:	2400      	movs	r4, #0
 800b34c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b350:	4628      	mov	r0, r5
 800b352:	4798      	blx	r3
 800b354:	2000      	movs	r0, #0
 800b356:	e7e0      	b.n	800b31a <_raise_r+0x12>

0800b358 <raise>:
 800b358:	4b02      	ldr	r3, [pc, #8]	; (800b364 <raise+0xc>)
 800b35a:	4601      	mov	r1, r0
 800b35c:	6818      	ldr	r0, [r3, #0]
 800b35e:	f7ff bfd3 	b.w	800b308 <_raise_r>
 800b362:	bf00      	nop
 800b364:	2000001c 	.word	0x2000001c

0800b368 <_kill_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	4d07      	ldr	r5, [pc, #28]	; (800b388 <_kill_r+0x20>)
 800b36c:	2300      	movs	r3, #0
 800b36e:	4604      	mov	r4, r0
 800b370:	4608      	mov	r0, r1
 800b372:	4611      	mov	r1, r2
 800b374:	602b      	str	r3, [r5, #0]
 800b376:	f7f8 fdb9 	bl	8003eec <_kill>
 800b37a:	1c43      	adds	r3, r0, #1
 800b37c:	d102      	bne.n	800b384 <_kill_r+0x1c>
 800b37e:	682b      	ldr	r3, [r5, #0]
 800b380:	b103      	cbz	r3, 800b384 <_kill_r+0x1c>
 800b382:	6023      	str	r3, [r4, #0]
 800b384:	bd38      	pop	{r3, r4, r5, pc}
 800b386:	bf00      	nop
 800b388:	20001090 	.word	0x20001090

0800b38c <_getpid_r>:
 800b38c:	f7f8 bda6 	b.w	8003edc <_getpid>

0800b390 <__sread>:
 800b390:	b510      	push	{r4, lr}
 800b392:	460c      	mov	r4, r1
 800b394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b398:	f000 fa58 	bl	800b84c <_read_r>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	bfab      	itete	ge
 800b3a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b3a4:	181b      	addge	r3, r3, r0
 800b3a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3aa:	bfac      	ite	ge
 800b3ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3ae:	81a3      	strhlt	r3, [r4, #12]
 800b3b0:	bd10      	pop	{r4, pc}

0800b3b2 <__swrite>:
 800b3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b6:	461f      	mov	r7, r3
 800b3b8:	898b      	ldrh	r3, [r1, #12]
 800b3ba:	05db      	lsls	r3, r3, #23
 800b3bc:	4605      	mov	r5, r0
 800b3be:	460c      	mov	r4, r1
 800b3c0:	4616      	mov	r6, r2
 800b3c2:	d505      	bpl.n	800b3d0 <__swrite+0x1e>
 800b3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c8:	2302      	movs	r3, #2
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f000 f9c8 	bl	800b760 <_lseek_r>
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3da:	81a3      	strh	r3, [r4, #12]
 800b3dc:	4632      	mov	r2, r6
 800b3de:	463b      	mov	r3, r7
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e6:	f000 b869 	b.w	800b4bc <_write_r>

0800b3ea <__sseek>:
 800b3ea:	b510      	push	{r4, lr}
 800b3ec:	460c      	mov	r4, r1
 800b3ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f2:	f000 f9b5 	bl	800b760 <_lseek_r>
 800b3f6:	1c43      	adds	r3, r0, #1
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	bf15      	itete	ne
 800b3fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b406:	81a3      	strheq	r3, [r4, #12]
 800b408:	bf18      	it	ne
 800b40a:	81a3      	strhne	r3, [r4, #12]
 800b40c:	bd10      	pop	{r4, pc}

0800b40e <__sclose>:
 800b40e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b412:	f000 b8d3 	b.w	800b5bc <_close_r>
	...

0800b418 <__swbuf_r>:
 800b418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41a:	460e      	mov	r6, r1
 800b41c:	4614      	mov	r4, r2
 800b41e:	4605      	mov	r5, r0
 800b420:	b118      	cbz	r0, 800b42a <__swbuf_r+0x12>
 800b422:	6983      	ldr	r3, [r0, #24]
 800b424:	b90b      	cbnz	r3, 800b42a <__swbuf_r+0x12>
 800b426:	f7ff fcdf 	bl	800ade8 <__sinit>
 800b42a:	4b21      	ldr	r3, [pc, #132]	; (800b4b0 <__swbuf_r+0x98>)
 800b42c:	429c      	cmp	r4, r3
 800b42e:	d12b      	bne.n	800b488 <__swbuf_r+0x70>
 800b430:	686c      	ldr	r4, [r5, #4]
 800b432:	69a3      	ldr	r3, [r4, #24]
 800b434:	60a3      	str	r3, [r4, #8]
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	071a      	lsls	r2, r3, #28
 800b43a:	d52f      	bpl.n	800b49c <__swbuf_r+0x84>
 800b43c:	6923      	ldr	r3, [r4, #16]
 800b43e:	b36b      	cbz	r3, 800b49c <__swbuf_r+0x84>
 800b440:	6923      	ldr	r3, [r4, #16]
 800b442:	6820      	ldr	r0, [r4, #0]
 800b444:	1ac0      	subs	r0, r0, r3
 800b446:	6963      	ldr	r3, [r4, #20]
 800b448:	b2f6      	uxtb	r6, r6
 800b44a:	4283      	cmp	r3, r0
 800b44c:	4637      	mov	r7, r6
 800b44e:	dc04      	bgt.n	800b45a <__swbuf_r+0x42>
 800b450:	4621      	mov	r1, r4
 800b452:	4628      	mov	r0, r5
 800b454:	f000 f948 	bl	800b6e8 <_fflush_r>
 800b458:	bb30      	cbnz	r0, 800b4a8 <__swbuf_r+0x90>
 800b45a:	68a3      	ldr	r3, [r4, #8]
 800b45c:	3b01      	subs	r3, #1
 800b45e:	60a3      	str	r3, [r4, #8]
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	1c5a      	adds	r2, r3, #1
 800b464:	6022      	str	r2, [r4, #0]
 800b466:	701e      	strb	r6, [r3, #0]
 800b468:	6963      	ldr	r3, [r4, #20]
 800b46a:	3001      	adds	r0, #1
 800b46c:	4283      	cmp	r3, r0
 800b46e:	d004      	beq.n	800b47a <__swbuf_r+0x62>
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	07db      	lsls	r3, r3, #31
 800b474:	d506      	bpl.n	800b484 <__swbuf_r+0x6c>
 800b476:	2e0a      	cmp	r6, #10
 800b478:	d104      	bne.n	800b484 <__swbuf_r+0x6c>
 800b47a:	4621      	mov	r1, r4
 800b47c:	4628      	mov	r0, r5
 800b47e:	f000 f933 	bl	800b6e8 <_fflush_r>
 800b482:	b988      	cbnz	r0, 800b4a8 <__swbuf_r+0x90>
 800b484:	4638      	mov	r0, r7
 800b486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b488:	4b0a      	ldr	r3, [pc, #40]	; (800b4b4 <__swbuf_r+0x9c>)
 800b48a:	429c      	cmp	r4, r3
 800b48c:	d101      	bne.n	800b492 <__swbuf_r+0x7a>
 800b48e:	68ac      	ldr	r4, [r5, #8]
 800b490:	e7cf      	b.n	800b432 <__swbuf_r+0x1a>
 800b492:	4b09      	ldr	r3, [pc, #36]	; (800b4b8 <__swbuf_r+0xa0>)
 800b494:	429c      	cmp	r4, r3
 800b496:	bf08      	it	eq
 800b498:	68ec      	ldreq	r4, [r5, #12]
 800b49a:	e7ca      	b.n	800b432 <__swbuf_r+0x1a>
 800b49c:	4621      	mov	r1, r4
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f000 f81e 	bl	800b4e0 <__swsetup_r>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d0cb      	beq.n	800b440 <__swbuf_r+0x28>
 800b4a8:	f04f 37ff 	mov.w	r7, #4294967295
 800b4ac:	e7ea      	b.n	800b484 <__swbuf_r+0x6c>
 800b4ae:	bf00      	nop
 800b4b0:	0800be6c 	.word	0x0800be6c
 800b4b4:	0800be8c 	.word	0x0800be8c
 800b4b8:	0800be4c 	.word	0x0800be4c

0800b4bc <_write_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4d07      	ldr	r5, [pc, #28]	; (800b4dc <_write_r+0x20>)
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	4608      	mov	r0, r1
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	602a      	str	r2, [r5, #0]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f7f8 fd45 	bl	8003f5a <_write>
 800b4d0:	1c43      	adds	r3, r0, #1
 800b4d2:	d102      	bne.n	800b4da <_write_r+0x1e>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	b103      	cbz	r3, 800b4da <_write_r+0x1e>
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	20001090 	.word	0x20001090

0800b4e0 <__swsetup_r>:
 800b4e0:	4b32      	ldr	r3, [pc, #200]	; (800b5ac <__swsetup_r+0xcc>)
 800b4e2:	b570      	push	{r4, r5, r6, lr}
 800b4e4:	681d      	ldr	r5, [r3, #0]
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	b125      	cbz	r5, 800b4f6 <__swsetup_r+0x16>
 800b4ec:	69ab      	ldr	r3, [r5, #24]
 800b4ee:	b913      	cbnz	r3, 800b4f6 <__swsetup_r+0x16>
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f7ff fc79 	bl	800ade8 <__sinit>
 800b4f6:	4b2e      	ldr	r3, [pc, #184]	; (800b5b0 <__swsetup_r+0xd0>)
 800b4f8:	429c      	cmp	r4, r3
 800b4fa:	d10f      	bne.n	800b51c <__swsetup_r+0x3c>
 800b4fc:	686c      	ldr	r4, [r5, #4]
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b504:	0719      	lsls	r1, r3, #28
 800b506:	d42c      	bmi.n	800b562 <__swsetup_r+0x82>
 800b508:	06dd      	lsls	r5, r3, #27
 800b50a:	d411      	bmi.n	800b530 <__swsetup_r+0x50>
 800b50c:	2309      	movs	r3, #9
 800b50e:	6033      	str	r3, [r6, #0]
 800b510:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b514:	81a3      	strh	r3, [r4, #12]
 800b516:	f04f 30ff 	mov.w	r0, #4294967295
 800b51a:	e03e      	b.n	800b59a <__swsetup_r+0xba>
 800b51c:	4b25      	ldr	r3, [pc, #148]	; (800b5b4 <__swsetup_r+0xd4>)
 800b51e:	429c      	cmp	r4, r3
 800b520:	d101      	bne.n	800b526 <__swsetup_r+0x46>
 800b522:	68ac      	ldr	r4, [r5, #8]
 800b524:	e7eb      	b.n	800b4fe <__swsetup_r+0x1e>
 800b526:	4b24      	ldr	r3, [pc, #144]	; (800b5b8 <__swsetup_r+0xd8>)
 800b528:	429c      	cmp	r4, r3
 800b52a:	bf08      	it	eq
 800b52c:	68ec      	ldreq	r4, [r5, #12]
 800b52e:	e7e6      	b.n	800b4fe <__swsetup_r+0x1e>
 800b530:	0758      	lsls	r0, r3, #29
 800b532:	d512      	bpl.n	800b55a <__swsetup_r+0x7a>
 800b534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b536:	b141      	cbz	r1, 800b54a <__swsetup_r+0x6a>
 800b538:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b53c:	4299      	cmp	r1, r3
 800b53e:	d002      	beq.n	800b546 <__swsetup_r+0x66>
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff fd57 	bl	800aff4 <_free_r>
 800b546:	2300      	movs	r3, #0
 800b548:	6363      	str	r3, [r4, #52]	; 0x34
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	2300      	movs	r3, #0
 800b554:	6063      	str	r3, [r4, #4]
 800b556:	6923      	ldr	r3, [r4, #16]
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	f043 0308 	orr.w	r3, r3, #8
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	b94b      	cbnz	r3, 800b57a <__swsetup_r+0x9a>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b56c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b570:	d003      	beq.n	800b57a <__swsetup_r+0x9a>
 800b572:	4621      	mov	r1, r4
 800b574:	4630      	mov	r0, r6
 800b576:	f000 f929 	bl	800b7cc <__smakebuf_r>
 800b57a:	89a0      	ldrh	r0, [r4, #12]
 800b57c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b580:	f010 0301 	ands.w	r3, r0, #1
 800b584:	d00a      	beq.n	800b59c <__swsetup_r+0xbc>
 800b586:	2300      	movs	r3, #0
 800b588:	60a3      	str	r3, [r4, #8]
 800b58a:	6963      	ldr	r3, [r4, #20]
 800b58c:	425b      	negs	r3, r3
 800b58e:	61a3      	str	r3, [r4, #24]
 800b590:	6923      	ldr	r3, [r4, #16]
 800b592:	b943      	cbnz	r3, 800b5a6 <__swsetup_r+0xc6>
 800b594:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b598:	d1ba      	bne.n	800b510 <__swsetup_r+0x30>
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	0781      	lsls	r1, r0, #30
 800b59e:	bf58      	it	pl
 800b5a0:	6963      	ldrpl	r3, [r4, #20]
 800b5a2:	60a3      	str	r3, [r4, #8]
 800b5a4:	e7f4      	b.n	800b590 <__swsetup_r+0xb0>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	e7f7      	b.n	800b59a <__swsetup_r+0xba>
 800b5aa:	bf00      	nop
 800b5ac:	2000001c 	.word	0x2000001c
 800b5b0:	0800be6c 	.word	0x0800be6c
 800b5b4:	0800be8c 	.word	0x0800be8c
 800b5b8:	0800be4c 	.word	0x0800be4c

0800b5bc <_close_r>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4d06      	ldr	r5, [pc, #24]	; (800b5d8 <_close_r+0x1c>)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	4608      	mov	r0, r1
 800b5c6:	602b      	str	r3, [r5, #0]
 800b5c8:	f7f8 fce3 	bl	8003f92 <_close>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_close_r+0x1a>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_close_r+0x1a>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20001090 	.word	0x20001090

0800b5dc <__sflush_r>:
 800b5dc:	898a      	ldrh	r2, [r1, #12]
 800b5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e2:	4605      	mov	r5, r0
 800b5e4:	0710      	lsls	r0, r2, #28
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	d458      	bmi.n	800b69c <__sflush_r+0xc0>
 800b5ea:	684b      	ldr	r3, [r1, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	dc05      	bgt.n	800b5fc <__sflush_r+0x20>
 800b5f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	dc02      	bgt.n	800b5fc <__sflush_r+0x20>
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5fe:	2e00      	cmp	r6, #0
 800b600:	d0f9      	beq.n	800b5f6 <__sflush_r+0x1a>
 800b602:	2300      	movs	r3, #0
 800b604:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b608:	682f      	ldr	r7, [r5, #0]
 800b60a:	602b      	str	r3, [r5, #0]
 800b60c:	d032      	beq.n	800b674 <__sflush_r+0x98>
 800b60e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b610:	89a3      	ldrh	r3, [r4, #12]
 800b612:	075a      	lsls	r2, r3, #29
 800b614:	d505      	bpl.n	800b622 <__sflush_r+0x46>
 800b616:	6863      	ldr	r3, [r4, #4]
 800b618:	1ac0      	subs	r0, r0, r3
 800b61a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b61c:	b10b      	cbz	r3, 800b622 <__sflush_r+0x46>
 800b61e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b620:	1ac0      	subs	r0, r0, r3
 800b622:	2300      	movs	r3, #0
 800b624:	4602      	mov	r2, r0
 800b626:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b628:	6a21      	ldr	r1, [r4, #32]
 800b62a:	4628      	mov	r0, r5
 800b62c:	47b0      	blx	r6
 800b62e:	1c43      	adds	r3, r0, #1
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	d106      	bne.n	800b642 <__sflush_r+0x66>
 800b634:	6829      	ldr	r1, [r5, #0]
 800b636:	291d      	cmp	r1, #29
 800b638:	d82c      	bhi.n	800b694 <__sflush_r+0xb8>
 800b63a:	4a2a      	ldr	r2, [pc, #168]	; (800b6e4 <__sflush_r+0x108>)
 800b63c:	40ca      	lsrs	r2, r1
 800b63e:	07d6      	lsls	r6, r2, #31
 800b640:	d528      	bpl.n	800b694 <__sflush_r+0xb8>
 800b642:	2200      	movs	r2, #0
 800b644:	6062      	str	r2, [r4, #4]
 800b646:	04d9      	lsls	r1, r3, #19
 800b648:	6922      	ldr	r2, [r4, #16]
 800b64a:	6022      	str	r2, [r4, #0]
 800b64c:	d504      	bpl.n	800b658 <__sflush_r+0x7c>
 800b64e:	1c42      	adds	r2, r0, #1
 800b650:	d101      	bne.n	800b656 <__sflush_r+0x7a>
 800b652:	682b      	ldr	r3, [r5, #0]
 800b654:	b903      	cbnz	r3, 800b658 <__sflush_r+0x7c>
 800b656:	6560      	str	r0, [r4, #84]	; 0x54
 800b658:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b65a:	602f      	str	r7, [r5, #0]
 800b65c:	2900      	cmp	r1, #0
 800b65e:	d0ca      	beq.n	800b5f6 <__sflush_r+0x1a>
 800b660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b664:	4299      	cmp	r1, r3
 800b666:	d002      	beq.n	800b66e <__sflush_r+0x92>
 800b668:	4628      	mov	r0, r5
 800b66a:	f7ff fcc3 	bl	800aff4 <_free_r>
 800b66e:	2000      	movs	r0, #0
 800b670:	6360      	str	r0, [r4, #52]	; 0x34
 800b672:	e7c1      	b.n	800b5f8 <__sflush_r+0x1c>
 800b674:	6a21      	ldr	r1, [r4, #32]
 800b676:	2301      	movs	r3, #1
 800b678:	4628      	mov	r0, r5
 800b67a:	47b0      	blx	r6
 800b67c:	1c41      	adds	r1, r0, #1
 800b67e:	d1c7      	bne.n	800b610 <__sflush_r+0x34>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d0c4      	beq.n	800b610 <__sflush_r+0x34>
 800b686:	2b1d      	cmp	r3, #29
 800b688:	d001      	beq.n	800b68e <__sflush_r+0xb2>
 800b68a:	2b16      	cmp	r3, #22
 800b68c:	d101      	bne.n	800b692 <__sflush_r+0xb6>
 800b68e:	602f      	str	r7, [r5, #0]
 800b690:	e7b1      	b.n	800b5f6 <__sflush_r+0x1a>
 800b692:	89a3      	ldrh	r3, [r4, #12]
 800b694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b698:	81a3      	strh	r3, [r4, #12]
 800b69a:	e7ad      	b.n	800b5f8 <__sflush_r+0x1c>
 800b69c:	690f      	ldr	r7, [r1, #16]
 800b69e:	2f00      	cmp	r7, #0
 800b6a0:	d0a9      	beq.n	800b5f6 <__sflush_r+0x1a>
 800b6a2:	0793      	lsls	r3, r2, #30
 800b6a4:	680e      	ldr	r6, [r1, #0]
 800b6a6:	bf08      	it	eq
 800b6a8:	694b      	ldreq	r3, [r1, #20]
 800b6aa:	600f      	str	r7, [r1, #0]
 800b6ac:	bf18      	it	ne
 800b6ae:	2300      	movne	r3, #0
 800b6b0:	eba6 0807 	sub.w	r8, r6, r7
 800b6b4:	608b      	str	r3, [r1, #8]
 800b6b6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ba:	dd9c      	ble.n	800b5f6 <__sflush_r+0x1a>
 800b6bc:	6a21      	ldr	r1, [r4, #32]
 800b6be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b6c0:	4643      	mov	r3, r8
 800b6c2:	463a      	mov	r2, r7
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	47b0      	blx	r6
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	dc06      	bgt.n	800b6da <__sflush_r+0xfe>
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6d2:	81a3      	strh	r3, [r4, #12]
 800b6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d8:	e78e      	b.n	800b5f8 <__sflush_r+0x1c>
 800b6da:	4407      	add	r7, r0
 800b6dc:	eba8 0800 	sub.w	r8, r8, r0
 800b6e0:	e7e9      	b.n	800b6b6 <__sflush_r+0xda>
 800b6e2:	bf00      	nop
 800b6e4:	20400001 	.word	0x20400001

0800b6e8 <_fflush_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	690b      	ldr	r3, [r1, #16]
 800b6ec:	4605      	mov	r5, r0
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	b913      	cbnz	r3, 800b6f8 <_fflush_r+0x10>
 800b6f2:	2500      	movs	r5, #0
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	b118      	cbz	r0, 800b702 <_fflush_r+0x1a>
 800b6fa:	6983      	ldr	r3, [r0, #24]
 800b6fc:	b90b      	cbnz	r3, 800b702 <_fflush_r+0x1a>
 800b6fe:	f7ff fb73 	bl	800ade8 <__sinit>
 800b702:	4b14      	ldr	r3, [pc, #80]	; (800b754 <_fflush_r+0x6c>)
 800b704:	429c      	cmp	r4, r3
 800b706:	d11b      	bne.n	800b740 <_fflush_r+0x58>
 800b708:	686c      	ldr	r4, [r5, #4]
 800b70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d0ef      	beq.n	800b6f2 <_fflush_r+0xa>
 800b712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b714:	07d0      	lsls	r0, r2, #31
 800b716:	d404      	bmi.n	800b722 <_fflush_r+0x3a>
 800b718:	0599      	lsls	r1, r3, #22
 800b71a:	d402      	bmi.n	800b722 <_fflush_r+0x3a>
 800b71c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b71e:	f7ff fc26 	bl	800af6e <__retarget_lock_acquire_recursive>
 800b722:	4628      	mov	r0, r5
 800b724:	4621      	mov	r1, r4
 800b726:	f7ff ff59 	bl	800b5dc <__sflush_r>
 800b72a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b72c:	07da      	lsls	r2, r3, #31
 800b72e:	4605      	mov	r5, r0
 800b730:	d4e0      	bmi.n	800b6f4 <_fflush_r+0xc>
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	059b      	lsls	r3, r3, #22
 800b736:	d4dd      	bmi.n	800b6f4 <_fflush_r+0xc>
 800b738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b73a:	f7ff fc19 	bl	800af70 <__retarget_lock_release_recursive>
 800b73e:	e7d9      	b.n	800b6f4 <_fflush_r+0xc>
 800b740:	4b05      	ldr	r3, [pc, #20]	; (800b758 <_fflush_r+0x70>)
 800b742:	429c      	cmp	r4, r3
 800b744:	d101      	bne.n	800b74a <_fflush_r+0x62>
 800b746:	68ac      	ldr	r4, [r5, #8]
 800b748:	e7df      	b.n	800b70a <_fflush_r+0x22>
 800b74a:	4b04      	ldr	r3, [pc, #16]	; (800b75c <_fflush_r+0x74>)
 800b74c:	429c      	cmp	r4, r3
 800b74e:	bf08      	it	eq
 800b750:	68ec      	ldreq	r4, [r5, #12]
 800b752:	e7da      	b.n	800b70a <_fflush_r+0x22>
 800b754:	0800be6c 	.word	0x0800be6c
 800b758:	0800be8c 	.word	0x0800be8c
 800b75c:	0800be4c 	.word	0x0800be4c

0800b760 <_lseek_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d07      	ldr	r5, [pc, #28]	; (800b780 <_lseek_r+0x20>)
 800b764:	4604      	mov	r4, r0
 800b766:	4608      	mov	r0, r1
 800b768:	4611      	mov	r1, r2
 800b76a:	2200      	movs	r2, #0
 800b76c:	602a      	str	r2, [r5, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	f7f8 fc36 	bl	8003fe0 <_lseek>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d102      	bne.n	800b77e <_lseek_r+0x1e>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b103      	cbz	r3, 800b77e <_lseek_r+0x1e>
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	20001090 	.word	0x20001090

0800b784 <__swhatbuf_r>:
 800b784:	b570      	push	{r4, r5, r6, lr}
 800b786:	460e      	mov	r6, r1
 800b788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b78c:	2900      	cmp	r1, #0
 800b78e:	b096      	sub	sp, #88	; 0x58
 800b790:	4614      	mov	r4, r2
 800b792:	461d      	mov	r5, r3
 800b794:	da07      	bge.n	800b7a6 <__swhatbuf_r+0x22>
 800b796:	2300      	movs	r3, #0
 800b798:	602b      	str	r3, [r5, #0]
 800b79a:	89b3      	ldrh	r3, [r6, #12]
 800b79c:	061a      	lsls	r2, r3, #24
 800b79e:	d410      	bmi.n	800b7c2 <__swhatbuf_r+0x3e>
 800b7a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7a4:	e00e      	b.n	800b7c4 <__swhatbuf_r+0x40>
 800b7a6:	466a      	mov	r2, sp
 800b7a8:	f000 f862 	bl	800b870 <_fstat_r>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	dbf2      	blt.n	800b796 <__swhatbuf_r+0x12>
 800b7b0:	9a01      	ldr	r2, [sp, #4]
 800b7b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7ba:	425a      	negs	r2, r3
 800b7bc:	415a      	adcs	r2, r3
 800b7be:	602a      	str	r2, [r5, #0]
 800b7c0:	e7ee      	b.n	800b7a0 <__swhatbuf_r+0x1c>
 800b7c2:	2340      	movs	r3, #64	; 0x40
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	b016      	add	sp, #88	; 0x58
 800b7ca:	bd70      	pop	{r4, r5, r6, pc}

0800b7cc <__smakebuf_r>:
 800b7cc:	898b      	ldrh	r3, [r1, #12]
 800b7ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7d0:	079d      	lsls	r5, r3, #30
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	d507      	bpl.n	800b7e8 <__smakebuf_r+0x1c>
 800b7d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7dc:	6023      	str	r3, [r4, #0]
 800b7de:	6123      	str	r3, [r4, #16]
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	6163      	str	r3, [r4, #20]
 800b7e4:	b002      	add	sp, #8
 800b7e6:	bd70      	pop	{r4, r5, r6, pc}
 800b7e8:	ab01      	add	r3, sp, #4
 800b7ea:	466a      	mov	r2, sp
 800b7ec:	f7ff ffca 	bl	800b784 <__swhatbuf_r>
 800b7f0:	9900      	ldr	r1, [sp, #0]
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f7ff fc4d 	bl	800b094 <_malloc_r>
 800b7fa:	b948      	cbnz	r0, 800b810 <__smakebuf_r+0x44>
 800b7fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b800:	059a      	lsls	r2, r3, #22
 800b802:	d4ef      	bmi.n	800b7e4 <__smakebuf_r+0x18>
 800b804:	f023 0303 	bic.w	r3, r3, #3
 800b808:	f043 0302 	orr.w	r3, r3, #2
 800b80c:	81a3      	strh	r3, [r4, #12]
 800b80e:	e7e3      	b.n	800b7d8 <__smakebuf_r+0xc>
 800b810:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <__smakebuf_r+0x7c>)
 800b812:	62b3      	str	r3, [r6, #40]	; 0x28
 800b814:	89a3      	ldrh	r3, [r4, #12]
 800b816:	6020      	str	r0, [r4, #0]
 800b818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b81c:	81a3      	strh	r3, [r4, #12]
 800b81e:	9b00      	ldr	r3, [sp, #0]
 800b820:	6163      	str	r3, [r4, #20]
 800b822:	9b01      	ldr	r3, [sp, #4]
 800b824:	6120      	str	r0, [r4, #16]
 800b826:	b15b      	cbz	r3, 800b840 <__smakebuf_r+0x74>
 800b828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b82c:	4630      	mov	r0, r6
 800b82e:	f000 f831 	bl	800b894 <_isatty_r>
 800b832:	b128      	cbz	r0, 800b840 <__smakebuf_r+0x74>
 800b834:	89a3      	ldrh	r3, [r4, #12]
 800b836:	f023 0303 	bic.w	r3, r3, #3
 800b83a:	f043 0301 	orr.w	r3, r3, #1
 800b83e:	81a3      	strh	r3, [r4, #12]
 800b840:	89a0      	ldrh	r0, [r4, #12]
 800b842:	4305      	orrs	r5, r0
 800b844:	81a5      	strh	r5, [r4, #12]
 800b846:	e7cd      	b.n	800b7e4 <__smakebuf_r+0x18>
 800b848:	0800ad81 	.word	0x0800ad81

0800b84c <_read_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4d07      	ldr	r5, [pc, #28]	; (800b86c <_read_r+0x20>)
 800b850:	4604      	mov	r4, r0
 800b852:	4608      	mov	r0, r1
 800b854:	4611      	mov	r1, r2
 800b856:	2200      	movs	r2, #0
 800b858:	602a      	str	r2, [r5, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	f7f8 fb60 	bl	8003f20 <_read>
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	d102      	bne.n	800b86a <_read_r+0x1e>
 800b864:	682b      	ldr	r3, [r5, #0]
 800b866:	b103      	cbz	r3, 800b86a <_read_r+0x1e>
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	bd38      	pop	{r3, r4, r5, pc}
 800b86c:	20001090 	.word	0x20001090

0800b870 <_fstat_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	4d07      	ldr	r5, [pc, #28]	; (800b890 <_fstat_r+0x20>)
 800b874:	2300      	movs	r3, #0
 800b876:	4604      	mov	r4, r0
 800b878:	4608      	mov	r0, r1
 800b87a:	4611      	mov	r1, r2
 800b87c:	602b      	str	r3, [r5, #0]
 800b87e:	f7f8 fb94 	bl	8003faa <_fstat>
 800b882:	1c43      	adds	r3, r0, #1
 800b884:	d102      	bne.n	800b88c <_fstat_r+0x1c>
 800b886:	682b      	ldr	r3, [r5, #0]
 800b888:	b103      	cbz	r3, 800b88c <_fstat_r+0x1c>
 800b88a:	6023      	str	r3, [r4, #0]
 800b88c:	bd38      	pop	{r3, r4, r5, pc}
 800b88e:	bf00      	nop
 800b890:	20001090 	.word	0x20001090

0800b894 <_isatty_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	4d06      	ldr	r5, [pc, #24]	; (800b8b0 <_isatty_r+0x1c>)
 800b898:	2300      	movs	r3, #0
 800b89a:	4604      	mov	r4, r0
 800b89c:	4608      	mov	r0, r1
 800b89e:	602b      	str	r3, [r5, #0]
 800b8a0:	f7f8 fb93 	bl	8003fca <_isatty>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d102      	bne.n	800b8ae <_isatty_r+0x1a>
 800b8a8:	682b      	ldr	r3, [r5, #0]
 800b8aa:	b103      	cbz	r3, 800b8ae <_isatty_r+0x1a>
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	bd38      	pop	{r3, r4, r5, pc}
 800b8b0:	20001090 	.word	0x20001090

0800b8b4 <_Unwind_GetDataRelBase>:
 800b8b4:	b508      	push	{r3, lr}
 800b8b6:	f7ff fa32 	bl	800ad1e <abort>

0800b8ba <_Unwind_GetTextRelBase>:
 800b8ba:	b508      	push	{r3, lr}
 800b8bc:	f7ff fffa 	bl	800b8b4 <_Unwind_GetDataRelBase>

0800b8c0 <_init>:
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c2:	bf00      	nop
 800b8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c6:	bc08      	pop	{r3}
 800b8c8:	469e      	mov	lr, r3
 800b8ca:	4770      	bx	lr

0800b8cc <_fini>:
 800b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ce:	bf00      	nop
 800b8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d2:	bc08      	pop	{r3}
 800b8d4:	469e      	mov	lr, r3
 800b8d6:	4770      	bx	lr
